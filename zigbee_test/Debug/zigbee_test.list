
zigbee_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebe0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a0  0800ed90  0800ed90  0001ed90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff30  0800ff30  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff30  0800ff30  0001ff30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff38  0800ff38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff38  0800ff38  0001ff38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff3c  0800ff3c  0001ff3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ff40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008744  20000074  0800ffb4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200087b8  0800ffb4  000287b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bd67  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005890  00000000  00000000  0004be0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d20  00000000  00000000  000516a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae8  00000000  00000000  000533c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000303a6  00000000  00000000  00054ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002139a  00000000  00000000  0008524e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112fa3  00000000  00000000  000a65e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b958b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082b0  00000000  00000000  001b95e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ed78 	.word	0x0800ed78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800ed78 	.word	0x0800ed78

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
return 0;
 80005aa:	2300      	movs	r3, #0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000090 	.word	0x20000090
 80005e8:	200000f0 	.word	0x200000f0

080005ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_FREERTOS_Init+0x30>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f00a fc0e 	bl	800ae2a <osThreadCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <MX_FREERTOS_Init+0x34>)
 8000612:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bdb0      	pop	{r4, r5, r7, pc}
 800061c:	0800ed9c 	.word	0x0800ed9c
 8000620:	2000855c 	.word	0x2000855c

08000624 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f00a fc48 	bl	800aec2 <osDelay>
 8000632:	e7fb      	b.n	800062c <StartDefaultTask+0x8>

08000634 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_GPIO_Init+0x5c>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800066a:	f008 f861 	bl	8008730 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <MX_GPIO_Init+0x5c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <log_init>:
static SemaphoreHandle_t dbg_sem;

// small local working buffer
static char working_buffer[256];

void log_init(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    dbg_sem = xSemaphoreCreateBinary();
 8000698:	2203      	movs	r2, #3
 800069a:	2100      	movs	r1, #0
 800069c:	2001      	movs	r0, #1
 800069e:	f00a fd41 	bl	800b124 <xQueueGenericCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a05      	ldr	r2, [pc, #20]	; (80006bc <log_init+0x28>)
 80006a6:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(dbg_sem);
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <log_init+0x28>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	2300      	movs	r3, #0
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	f00a fd9b 	bl	800b1ec <xQueueGenericSend>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200002f0 	.word	0x200002f0

080006c0 <log_print>:

void log_print(const char *fmt, ...) {
 80006c0:	b40f      	push	{r0, r1, r2, r3}
 80006c2:	b590      	push	{r4, r7, lr}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80006c8:	f00c f8e2 	bl	800c890 <xTaskGetSchedulerState>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d038      	beq.n	8000744 <log_print+0x84>
        // take semaphore
        if (xSemaphoreTake(dbg_sem, 1000) == pdFALSE)
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <log_print+0xbc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006da:	4618      	mov	r0, r3
 80006dc:	f00a fffc 	bl	800b6d8 <xQueueSemaphoreTake>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d043      	beq.n	800076e <log_print+0xae>
            return;

        // append tick
        snprintf(working_buffer, 256, "%lu\t", xTaskGetTickCount());
 80006e6:	f00b fd8d 	bl	800c204 <xTaskGetTickCount>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a24      	ldr	r2, [pc, #144]	; (8000780 <log_print+0xc0>)
 80006ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f2:	4824      	ldr	r0, [pc, #144]	; (8000784 <log_print+0xc4>)
 80006f4:	f00c fffe 	bl	800d6f4 <sniprintf>

        // append parameters
        va_list args;
        va_start(args, fmt);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	607b      	str	r3, [r7, #4]
        vsnprintf(&working_buffer[strlen(working_buffer)], 256 - strlen(working_buffer), fmt, args);
 80006fe:	4821      	ldr	r0, [pc, #132]	; (8000784 <log_print+0xc4>)
 8000700:	f7ff fd76 	bl	80001f0 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <log_print+0xc4>)
 8000708:	189c      	adds	r4, r3, r2
 800070a:	481e      	ldr	r0, [pc, #120]	; (8000784 <log_print+0xc4>)
 800070c:	f7ff fd70 	bl	80001f0 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	69ba      	ldr	r2, [r7, #24]
 800071a:	4620      	mov	r0, r4
 800071c:	f00d fa3c 	bl	800db98 <vsniprintf>
        va_end(args);

        // send data
        HAL_UART_Transmit(&huart2, (char *)working_buffer, strlen(working_buffer), 100);
 8000720:	4818      	ldr	r0, [pc, #96]	; (8000784 <log_print+0xc4>)
 8000722:	f7ff fd65 	bl	80001f0 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	4915      	ldr	r1, [pc, #84]	; (8000784 <log_print+0xc4>)
 800072e:	4816      	ldr	r0, [pc, #88]	; (8000788 <log_print+0xc8>)
 8000730:	f009 fde4 	bl	800a2fc <HAL_UART_Transmit>

        // Give semaphore back
        xSemaphoreGive(dbg_sem);
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <log_print+0xbc>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	f00a fd55 	bl	800b1ec <xQueueGenericSend>
 8000742:	e015      	b.n	8000770 <log_print+0xb0>
    } 
    else {
        // append parameters
        va_list args;
        va_start(args, fmt);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	603b      	str	r3, [r7, #0]
        vsnprintf(working_buffer, 256, fmt, args);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000752:	480c      	ldr	r0, [pc, #48]	; (8000784 <log_print+0xc4>)
 8000754:	f00d fa20 	bl	800db98 <vsniprintf>
        va_end(args);

        // send data
        HAL_UART_Transmit(&huart2, (char *)working_buffer, strlen(working_buffer), 100);
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <log_print+0xc4>)
 800075a:	f7ff fd49 	bl	80001f0 <strlen>
 800075e:	4603      	mov	r3, r0
 8000760:	b29a      	uxth	r2, r3
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	4907      	ldr	r1, [pc, #28]	; (8000784 <log_print+0xc4>)
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <log_print+0xc8>)
 8000768:	f009 fdc8 	bl	800a2fc <HAL_UART_Transmit>
 800076c:	e000      	b.n	8000770 <log_print+0xb0>
            return;
 800076e:	bf00      	nop
    }
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000778:	b004      	add	sp, #16
 800077a:	4770      	bx	lr
 800077c:	200002f0 	.word	0x200002f0
 8000780:	0800edb8 	.word	0x0800edb8
 8000784:	200002f4 	.word	0x200002f4
 8000788:	20008620 	.word	0x20008620

0800078c <znp_init_coordinator>:
	sysResetReq(&rst);
}

// init coordinator
// taken from https://sunmaysky.blogspot.com/2017/02/use-ztool-z-stack-30-znp-to-set-up.html
int znp_init_coordinator(uint8_t enable_commissioning) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b0c6      	sub	sp, #280	; 0x118
 8000790:	af00      	add	r7, sp, #0
 8000792:	4602      	mov	r2, r0
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	701a      	strb	r2, [r3, #0]
	setChannelFormat_t chn;
	startCommissioningFormat_t strt;
	ResetReqFormat_t rst;

	// wait a second
	vTaskDelay(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079c:	f00b fbf2 	bl	800bf84 <vTaskDelay>
	log_print("1 ----------------------\r\n");
 80007a0:	484a      	ldr	r0, [pc, #296]	; (80008cc <znp_init_coordinator+0x140>)
 80007a2:	f7ff ff8d 	bl	80006c0 <log_print>

	// soft reset
	rst.Type = 0x01;
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
	sysResetReq(&rst);
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fc36 	bl	8004024 <sysResetReq>

	vTaskDelay(4000);
 80007b8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80007bc:	f00b fbe2 	bl	800bf84 <vTaskDelay>
	log_print("2 ----------------------\r\n");
 80007c0:	4843      	ldr	r0, [pc, #268]	; (80008d0 <znp_init_coordinator+0x144>)
 80007c2:	f7ff ff7d 	bl	80006c0 <log_print>

	// Write ZCD_NV_LOGICAL_TYPE to 0 which means coordinator
	req.Id = 0x0087;
 80007c6:	2387      	movs	r3, #135	; 0x87
 80007c8:	83bb      	strh	r3, [r7, #28]
	req.Offset = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	77bb      	strb	r3, [r7, #30]
	req.Len = 0x01;
 80007ce:	2301      	movs	r3, #1
 80007d0:	77fb      	strb	r3, [r7, #31]
	req.Value[0] = 0x00;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f887 3020 	strb.w	r3, [r7, #32]
	sysOsalNvWrite(&req);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fd7f 	bl	80042e0 <sysOsalNvWrite>

	vTaskDelay(1000);
 80007e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e6:	f00b fbcd 	bl	800bf84 <vTaskDelay>
	log_print("3 ----------------------\r\n");
 80007ea:	483a      	ldr	r0, [pc, #232]	; (80008d4 <znp_init_coordinator+0x148>)
 80007ec:	f7ff ff68 	bl	80006c0 <log_print>

	// set primary channel to 13
	chn.primaryChannel = 1;
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
	chn.channel = CFG_CHANNEL_0x00002000;
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000800:	605a      	str	r2, [r3, #4]
	appCfgSetChannel(&chn);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fff6 	bl	80037f8 <appCfgSetChannel>

	vTaskDelay(1000);
 800080c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000810:	f00b fbb8 	bl	800bf84 <vTaskDelay>
	log_print("4 ----------------------\r\n");
 8000814:	4830      	ldr	r0, [pc, #192]	; (80008d8 <znp_init_coordinator+0x14c>)
 8000816:	f7ff ff53 	bl	80006c0 <log_print>

	// disable secondary channel
	chn.primaryChannel = 0;
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	chn.channel = CFG_CHANNEL_NONE;
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
	appCfgSetChannel(&chn);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4618      	mov	r0, r3
 8000830:	f002 ffe2 	bl	80037f8 <appCfgSetChannel>

	vTaskDelay(1000);
 8000834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000838:	f00b fba4 	bl	800bf84 <vTaskDelay>
	log_print("5 ----------------------\r\n");
 800083c:	4827      	ldr	r0, [pc, #156]	; (80008dc <znp_init_coordinator+0x150>)
 800083e:	f7ff ff3f 	bl	80006c0 <log_print>

	// start commissioning using network formation
	strt.commissioningMode = CFG_COMM_MODE_NWK_FORMATION;
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	2204      	movs	r2, #4
 8000848:	701a      	strb	r2, [r3, #0]
	appCfgStartCommissioning(&strt);
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	4618      	mov	r0, r3
 8000850:	f003 f805 	bl	800385e <appCfgStartCommissioning>

	vTaskDelay(10000);
 8000854:	f242 7010 	movw	r0, #10000	; 0x2710
 8000858:	f00b fb94 	bl	800bf84 <vTaskDelay>
	log_print("6 ----------------------\r\n");
 800085c:	4820      	ldr	r0, [pc, #128]	; (80008e0 <znp_init_coordinator+0x154>)
 800085e:	f7ff ff2f 	bl	80006c0 <log_print>

	if (enable_commissioning) {
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d027      	beq.n	80008ba <znp_init_coordinator+0x12e>
		// get device info
		utilGetDeviceInfo();
 800086a:	f004 f963 	bl	8004b34 <utilGetDeviceInfo>

		vTaskDelay(1000);
 800086e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000872:	f00b fb87 	bl	800bf84 <vTaskDelay>
		log_print("7 ----------------------\r\n");
 8000876:	481b      	ldr	r0, [pc, #108]	; (80008e4 <znp_init_coordinator+0x158>)
 8000878:	f7ff ff22 	bl	80006c0 <log_print>

		// Write ZCD_NV_LOGICAL_TYPE to 0 which means coordinator
		req.Id = 0x008F;
 800087c:	238f      	movs	r3, #143	; 0x8f
 800087e:	83bb      	strh	r3, [r7, #28]
		req.Offset = 0x00;
 8000880:	2300      	movs	r3, #0
 8000882:	77bb      	strb	r3, [r7, #30]
		req.Len = 0x01;
 8000884:	2301      	movs	r3, #1
 8000886:	77fb      	strb	r3, [r7, #31]
		req.Value[0] = 0x01;
 8000888:	2301      	movs	r3, #1
 800088a:	f887 3020 	strb.w	r3, [r7, #32]
		sysOsalNvWrite(&req);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fd24 	bl	80042e0 <sysOsalNvWrite>

		vTaskDelay(1000);
 8000898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089c:	f00b fb72 	bl	800bf84 <vTaskDelay>
		log_print("8 ----------------------\r\n");
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <znp_init_coordinator+0x15c>)
 80008a2:	f7ff ff0d 	bl	80006c0 <log_print>

		// start commissioning using network steering
		strt.commissioningMode = CFG_COMM_MODE_NWK_STEERING;
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2202      	movs	r2, #2
 80008ac:	701a      	strb	r2, [r3, #0]
		appCfgStartCommissioning(&strt);
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 ffd3 	bl	800385e <appCfgStartCommissioning>
 80008b8:	e001      	b.n	80008be <znp_init_coordinator+0x132>
	}
	else {
		// get device info
		utilGetDeviceInfo();
 80008ba:	f004 f93b 	bl	8004b34 <utilGetDeviceInfo>
	}

	//
	return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	0800ef78 	.word	0x0800ef78
 80008d0:	0800ef94 	.word	0x0800ef94
 80008d4:	0800efb0 	.word	0x0800efb0
 80008d8:	0800efcc 	.word	0x0800efcc
 80008dc:	0800efe8 	.word	0x0800efe8
 80008e0:	0800f004 	.word	0x0800f004
 80008e4:	0800f020 	.word	0x0800f020
 80008e8:	0800f03c 	.word	0x0800f03c

080008ec <register_clusters>:

void register_clusters(uint16_t addr) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(20000);
 80008f6:	f644 6020 	movw	r0, #20000	; 0x4e20
 80008fa:	f00b fb43 	bl	800bf84 <vTaskDelay>

    // check registration
    if (!znp_if_dev_exists(addr)) {
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	4618      	mov	r0, r3
 8000902:	f002 f8eb 	bl	8002adc <znp_if_dev_exists>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d103      	bne.n	8000914 <register_clusters+0x28>
        log_print("-> !!! Device not registered!\r\n");
 800090c:	4840      	ldr	r0, [pc, #256]	; (8000a10 <register_clusters+0x124>)
 800090e:	f7ff fed7 	bl	80006c0 <log_print>
 8000912:	e079      	b.n	8000a08 <register_clusters+0x11c>
        return;
    }

    log_print("9 ----------------------\r\n");
 8000914:	483f      	ldr	r0, [pc, #252]	; (8000a14 <register_clusters+0x128>)
 8000916:	f7ff fed3 	bl	80006c0 <log_print>

    // wait for device to be active
    while (1) {
        int ret = znp_cmd_dev_is_active(addr);
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fca1 	bl	8001264 <znp_cmd_dev_is_active>
 8000922:	6378      	str	r0, [r7, #52]	; 0x34
        log_print("znp_if_dev_is_active %d\r\n", ret);
 8000924:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000926:	483c      	ldr	r0, [pc, #240]	; (8000a18 <register_clusters+0x12c>)
 8000928:	f7ff feca 	bl	80006c0 <log_print>
        if (ret == 0)
 800092c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800092e:	2b00      	cmp	r3, #0
 8000930:	d004      	beq.n	800093c <register_clusters+0x50>
            break;
        vTaskDelay(1000);
 8000932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000936:	f00b fb25 	bl	800bf84 <vTaskDelay>
    while (1) {
 800093a:	e7ee      	b.n	800091a <register_clusters+0x2e>
            break;
 800093c:	bf00      	nop
    }
    log_print("10 ----------------------\r\n");
 800093e:	4837      	ldr	r0, [pc, #220]	; (8000a1c <register_clusters+0x130>)
 8000940:	f7ff febe 	bl	80006c0 <log_print>

    // refresh device info
    log_print("znp_if_dev_refresh_info %d\r\n", znp_cmd_dev_refresh_info(addr));
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fcd8 	bl	80012fc <znp_cmd_dev_refresh_info>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	4833      	ldr	r0, [pc, #204]	; (8000a20 <register_clusters+0x134>)
 8000952:	f7ff feb5 	bl	80006c0 <log_print>
    vTaskDelay(1000);
 8000956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095a:	f00b fb13 	bl	800bf84 <vTaskDelay>
    log_print("11 ----------------------\r\n");
 800095e:	4831      	ldr	r0, [pc, #196]	; (8000a24 <register_clusters+0x138>)
 8000960:	f7ff feae 	bl	80006c0 <log_print>

    // register device
    log_print("znp_if_dev_register %d\r\n", znp_cmd_dev_register(addr));
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fd16 	bl	8001398 <znp_cmd_dev_register>
 800096c:	4603      	mov	r3, r0
 800096e:	4619      	mov	r1, r3
 8000970:	482d      	ldr	r0, [pc, #180]	; (8000a28 <register_clusters+0x13c>)
 8000972:	f7ff fea5 	bl	80006c0 <log_print>
    vTaskDelay(1000);
 8000976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097a:	f00b fb03 	bl	800bf84 <vTaskDelay>
    log_print("12 ----------------------\r\n");
 800097e:	482b      	ldr	r0, [pc, #172]	; (8000a2c <register_clusters+0x140>)
 8000980:	f7ff fe9e 	bl	80006c0 <log_print>

    // read device name cluster
    zcl_cluster_record_t wr;
    log_print("znp_cmd_cluster_in_read %d\r\n", znp_cmd_cluster_in_read(addr, 0, 4, &wr));
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	88f8      	ldrh	r0, [r7, #6]
 800098a:	2204      	movs	r2, #4
 800098c:	2100      	movs	r1, #0
 800098e:	f000 fdbb 	bl	8001508 <znp_cmd_cluster_in_read>
 8000992:	4603      	mov	r3, r0
 8000994:	4619      	mov	r1, r3
 8000996:	4826      	ldr	r0, [pc, #152]	; (8000a30 <register_clusters+0x144>)
 8000998:	f7ff fe92 	bl	80006c0 <log_print>
    log_print("Type: %d\r\n", wr.type);
 800099c:	7a3b      	ldrb	r3, [r7, #8]
 800099e:	4619      	mov	r1, r3
 80009a0:	4824      	ldr	r0, [pc, #144]	; (8000a34 <register_clusters+0x148>)
 80009a2:	f7ff fe8d 	bl	80006c0 <log_print>
    log_print("Str: %s\r\n", wr.data_arr);
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	3308      	adds	r3, #8
 80009ac:	4619      	mov	r1, r3
 80009ae:	4822      	ldr	r0, [pc, #136]	; (8000a38 <register_clusters+0x14c>)
 80009b0:	f7ff fe86 	bl	80006c0 <log_print>

    // write thermostat to 19 degree
    wr.type = ZCL_SIGNED_16BITS;
 80009b4:	2329      	movs	r3, #41	; 0x29
 80009b6:	723b      	strb	r3, [r7, #8]
    wr.data_i16 = 1900;
 80009b8:	f240 736c 	movw	r3, #1900	; 0x76c
 80009bc:	823b      	strh	r3, [r7, #16]
    log_print("znp_cmd_cluster_in_write %d\r\n", znp_cmd_cluster_in_write(addr, 0x0201, 0x0012, &wr));
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	88f8      	ldrh	r0, [r7, #6]
 80009c4:	2212      	movs	r2, #18
 80009c6:	f240 2101 	movw	r1, #513	; 0x201
 80009ca:	f001 f9d1 	bl	8001d70 <znp_cmd_cluster_in_write>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4619      	mov	r1, r3
 80009d2:	481a      	ldr	r0, [pc, #104]	; (8000a3c <register_clusters+0x150>)
 80009d4:	f7ff fe74 	bl	80006c0 <log_print>

    // read thermostat value
    log_print("znp_cmd_cluster_in_read %d\r\n", znp_cmd_cluster_in_read(addr, 0x0201, 0x0012, &wr));
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	88f8      	ldrh	r0, [r7, #6]
 80009de:	2212      	movs	r2, #18
 80009e0:	f240 2101 	movw	r1, #513	; 0x201
 80009e4:	f000 fd90 	bl	8001508 <znp_cmd_cluster_in_read>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4619      	mov	r1, r3
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <register_clusters+0x144>)
 80009ee:	f7ff fe67 	bl	80006c0 <log_print>
    log_print("Type: %d\r\n", wr.type);
 80009f2:	7a3b      	ldrb	r3, [r7, #8]
 80009f4:	4619      	mov	r1, r3
 80009f6:	480f      	ldr	r0, [pc, #60]	; (8000a34 <register_clusters+0x148>)
 80009f8:	f7ff fe62 	bl	80006c0 <log_print>
    log_print("Data: %d\r\n", wr.data_i16);
 80009fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a00:	4619      	mov	r1, r3
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <register_clusters+0x154>)
 8000a04:	f7ff fe5c 	bl	80006c0 <log_print>
}
 8000a08:	3738      	adds	r7, #56	; 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	0800f058 	.word	0x0800f058
 8000a14:	0800f078 	.word	0x0800f078
 8000a18:	0800f094 	.word	0x0800f094
 8000a1c:	0800f0b0 	.word	0x0800f0b0
 8000a20:	0800f0cc 	.word	0x0800f0cc
 8000a24:	0800f0ec 	.word	0x0800f0ec
 8000a28:	0800f108 	.word	0x0800f108
 8000a2c:	0800f124 	.word	0x0800f124
 8000a30:	0800f140 	.word	0x0800f140
 8000a34:	0800f160 	.word	0x0800f160
 8000a38:	0800f16c 	.word	0x0800f16c
 8000a3c:	0800f178 	.word	0x0800f178
 8000a40:	0800f198 	.word	0x0800f198

08000a44 <vAppTask>:

/////////////////////////////////////////////////
void vAppTask(void *pvParameters) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	log_print("System started\r\n");
 8000a4c:	4812      	ldr	r0, [pc, #72]	; (8000a98 <vAppTask+0x54>)
 8000a4e:	f7ff fe37 	bl	80006c0 <log_print>

	// initiailze application interface
	znp_if_init();
 8000a52:	f001 ffb3 	bl	80029bc <znp_if_init>

    // initiailze application interface
    znp_if_init();
 8000a56:	f001 ffb1 	bl	80029bc <znp_if_init>
    znp_cmd_init();
 8000a5a:	f000 fbed 	bl	8001238 <znp_cmd_init>

	// startup delay
	vTaskDelay(1000);
 8000a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a62:	f00b fa8f 	bl	800bf84 <vTaskDelay>

    // ping the CC2530 every second until response is ok
    uint8_t ret = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]
    do {
        vTaskDelay(1000);
 8000a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6e:	f00b fa89 	bl	800bf84 <vTaskDelay>
        ret = sysVersion();
 8000a72:	f003 fb71 	bl	8004158 <sysVersion>
 8000a76:	4603      	mov	r3, r0
 8000a78:	73fb      	strb	r3, [r7, #15]
    } while (ret != 0);
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1f4      	bne.n	8000a6a <vAppTask+0x26>

    // initialize coordinator
    znp_init_coordinator(0);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fe83 	bl	800078c <znp_init_coordinator>

    // register cluster
    register_clusters(0x82bc);
 8000a86:	f248 20bc 	movw	r0, #33468	; 0x82bc
 8000a8a:	f7ff ff2f 	bl	80008ec <register_clusters>

	// endless loop, handle CC2530 packets
	while (1) {
		vTaskDelay(1000);
 8000a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a92:	f00b fa77 	bl	800bf84 <vTaskDelay>
 8000a96:	e7fa      	b.n	8000a8e <vAppTask+0x4a>
 8000a98:	0800f1a4 	.word	0x0800f1a4

08000a9c <vPollTask>:
	}
}

void vPollTask(void *pvParameters) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	// endless loop, handle CC2530 packets
	while (1) {
		rpcWaitMqClientMsg(portMAX_DELAY);
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f007 f81e 	bl	8007ae8 <rpcWaitMqClientMsg>
 8000aac:	e7fa      	b.n	8000aa4 <vPollTask+0x8>
	...

08000ab0 <vComTask>:
	}
}

void vComTask(void *pvParameters) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	6078      	str	r0, [r7, #4]
	// init queues
	rpcInitMq();
 8000ab8:	f007 f80c 	bl	8007ad4 <rpcInitMq>

	// initialize serial port
	rpcOpen();
 8000abc:	f006 ffec 	bl	8007a98 <rpcOpen>

    // start poll task
    xTaskCreate(vPollTask, "POLL", 1024, NULL, 5, NULL);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ace:	4905      	ldr	r1, [pc, #20]	; (8000ae4 <vComTask+0x34>)
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <vComTask+0x38>)
 8000ad2:	f00b f912 	bl	800bcfa <xTaskCreate>

	// loop
	while (1) {
		// keep procesing packets
		rpcProcess();
 8000ad6:	f007 f84d 	bl	8007b74 <rpcProcess>

        // give other tasks time to run
        vTaskDelay(1);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f00b fa52 	bl	800bf84 <vTaskDelay>
		rpcProcess();
 8000ae0:	e7f9      	b.n	8000ad6 <vComTask+0x26>
 8000ae2:	bf00      	nop
 8000ae4:	0800f1b8 	.word	0x0800f1b8
 8000ae8:	08000a9d 	.word	0x08000a9d

08000aec <vApplicationStackOverflowHook>:
    }
}

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
	log_print("-> !!! Stack overflow in %s\r\n", pcTaskName);
 8000af6:	6839      	ldr	r1, [r7, #0]
 8000af8:	4801      	ldr	r0, [pc, #4]	; (8000b00 <vApplicationStackOverflowHook+0x14>)
 8000afa:	f7ff fde1 	bl	80006c0 <log_print>
	while (1)
 8000afe:	e7fe      	b.n	8000afe <vApplicationStackOverflowHook+0x12>
 8000b00:	0800f1c0 	.word	0x0800f1c0

08000b04 <vApplicationMallocFailedHook>:
		;
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	 demo application. If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
	log_print("-> !!! Malloc failed\r\n");
 8000b08:	4801      	ldr	r0, [pc, #4]	; (8000b10 <vApplicationMallocFailedHook+0xc>)
 8000b0a:	f7ff fdd9 	bl	80006c0 <log_print>
	while (1)
 8000b0e:	e7fe      	b.n	8000b0e <vApplicationMallocFailedHook+0xa>
 8000b10:	0800f1e0 	.word	0x0800f1e0

08000b14 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b1a:	f007 fafa 	bl	8008112 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b1e:	f000 f82b 	bl	8000b78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b22:	f7ff fd87 	bl	8000634 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000b26:	f000 fa31 	bl	8000f8c <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 8000b2a:	f000 fa63 	bl	8000ff4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	log_init();
 8000b2e:	f7ff fdb1 	bl	8000694 <log_init>

    xTaskCreate(vAppTask, "APP", 2048, NULL, 5, NULL);
 8000b32:	2300      	movs	r3, #0
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2305      	movs	r3, #5
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b40:	4909      	ldr	r1, [pc, #36]	; (8000b68 <main+0x54>)
 8000b42:	480a      	ldr	r0, [pc, #40]	; (8000b6c <main+0x58>)
 8000b44:	f00b f8d9 	bl	800bcfa <xTaskCreate>
    xTaskCreate(vComTask, "COM", 1024, NULL, 6, NULL);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2300      	movs	r3, #0
 8000b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b56:	4906      	ldr	r1, [pc, #24]	; (8000b70 <main+0x5c>)
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <main+0x60>)
 8000b5a:	f00b f8ce 	bl	800bcfa <xTaskCreate>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000b5e:	f7ff fd45 	bl	80005ec <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8000b62:	f00a f95b 	bl	800ae1c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000b66:	e7fe      	b.n	8000b66 <main+0x52>
 8000b68:	0800f1f8 	.word	0x0800f1f8
 8000b6c:	08000a45 	.word	0x08000a45
 8000b70:	0800f1fc 	.word	0x0800f1fc
 8000b74:	08000ab1 	.word	0x08000ab1

08000b78 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0ba      	sub	sp, #232	; 0xe8
 8000b7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b82:	2244      	movs	r2, #68	; 0x44
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f00c fd1e 	bl	800d5c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b8c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	228c      	movs	r2, #140	; 0x8c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f00c fd10 	bl	800d5c8 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLN = 20;
 8000bce:	2314      	movs	r3, #20
 8000bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000be0:	2304      	movs	r3, #4
 8000be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000be6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bea:	4618      	mov	r0, r3
 8000bec:	f007 fdb0 	bl	8008750 <HAL_RCC_OscConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x82>
		Error_Handler();
 8000bf6:	f000 f849 	bl	8000c8c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c00:	2303      	movs	r3, #3
 8000c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000c18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f008 f9bc 	bl	8008f9c <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0xb6>
		Error_Handler();
 8000c2a:	f000 f82f 	bl	8000c8c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1;
 8000c2e:	2322      	movs	r3, #34	; 0x22
 8000c30:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f008 fbe5 	bl	800940c <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xd4>
		Error_Handler();
 8000c48:	f000 f820 	bl	8000c8c <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000c4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c50:	f007 fd18 	bl	8008684 <HAL_PWREx_ControlVoltageScaling>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xe6>
		Error_Handler();
 8000c5a:	f000 f817 	bl	8000c8c <Error_Handler>
	}
}
 8000c5e:	bf00      	nop
 8000c60:	37e8      	adds	r7, #232	; 0xe8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c7a:	f007 fa63 	bl	8008144 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40012c00 	.word	0x40012c00

08000c8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6613      	str	r3, [r2, #96]	; 0x60
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	f06f 0001 	mvn.w	r0, #1
 8000cda:	f007 fb09 	bl	80082f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	2019      	movs	r0, #25
 8000d02:	f007 faf5 	bl	80082f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d06:	2019      	movs	r0, #25
 8000d08:	f007 fb0e 	bl	8008328 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <HAL_InitTick+0x9c>)
 8000d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <HAL_InitTick+0x9c>)
 8000d12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d16:	6613      	str	r3, [r2, #96]	; 0x60
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_InitTick+0x9c>)
 8000d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d24:	f107 0210 	add.w	r2, r7, #16
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f008 fada 	bl	80092e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d34:	f008 fac2 	bl	80092bc <HAL_RCC_GetPCLK2Freq>
 8000d38:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3c:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <HAL_InitTick+0xa0>)
 8000d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d42:	0c9b      	lsrs	r3, r3, #18
 8000d44:	3b01      	subs	r3, #1
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_InitTick+0xa4>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <HAL_InitTick+0xa8>)
 8000d4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_InitTick+0xa4>)
 8000d50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_InitTick+0xa4>)
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_InitTick+0xa4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_InitTick+0xa4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <HAL_InitTick+0xa4>)
 8000d6a:	f009 f819 	bl	8009da0 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d104      	bne.n	8000d7e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <HAL_InitTick+0xa4>)
 8000d76:	f009 f849 	bl	8009e0c <HAL_TIM_Base_Start_IT>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3730      	adds	r7, #48	; 0x30
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	431bde83 	.word	0x431bde83
 8000d90:	20008560 	.word	0x20008560
 8000d94:	40012c00 	.word	0x40012c00

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000dd2:	f009 f845 	bl	8009e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20008560 	.word	0x20008560

08000de0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */
#endif
  rpcTransportISR();
 8000de4:	f006 fdaa 	bl	800793c <rpcTransportISR>
  /* USER CODE END LPUART1_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	e00a      	b.n	8000e14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dfe:	f3af 8000 	nop.w
 8000e02:	4601      	mov	r1, r0
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	60ba      	str	r2, [r7, #8]
 8000e0a:	b2ca      	uxtb	r2, r1
 8000e0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf0      	blt.n	8000dfe <_read+0x12>
	}

return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	e009      	b.n	8000e4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	60ba      	str	r2, [r7, #8]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf1      	blt.n	8000e38 <_write+0x12>
	}
	return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_close>:

int _close(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e86:	605a      	str	r2, [r3, #4]
	return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_isatty>:

int _isatty(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x50>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x16>
		heap_end = &end;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <_sbrk+0x50>)
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <_sbrk+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <_sbrk+0x50>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <_sbrk+0x50>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	466a      	mov	r2, sp
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d907      	bls.n	8000f02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ef2:	f00c fb31 	bl	800d558 <__errno>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	220c      	movs	r2, #12
 8000efa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
 8000f00:	e006      	b.n	8000f10 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <_sbrk+0x50>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <_sbrk+0x50>)
 8000f0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200003f4 	.word	0x200003f4
 8000f1c:	200087b8 	.word	0x200087b8

08000f20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <SystemInit+0x64>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a16      	ldr	r2, [pc, #88]	; (8000f84 <SystemInit+0x64>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <SystemInit+0x68>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <SystemInit+0x68>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <SystemInit+0x68>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <SystemInit+0x68>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <SystemInit+0x68>)
 8000f4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <SystemInit+0x68>)
 8000f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <SystemInit+0x68>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <SystemInit+0x68>)
 8000f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <SystemInit+0x68>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SystemInit+0x64>)
 8000f72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f76:	609a      	str	r2, [r3, #8]
#endif
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00
 8000f88:	40021000 	.word	0x40021000

08000f8c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_LPUART1_UART_Init+0x64>)
 8000f94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f9c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000fc4:	2230      	movs	r2, #48	; 0x30
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000fca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fce:	639a      	str	r2, [r3, #56]	; 0x38
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_LPUART1_UART_Init+0x60>)
 8000fda:	f009 f941 	bl	800a260 <HAL_UART_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000fe4:	f7ff fe52 	bl	8000c8c <Error_Handler>
  }

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200085a0 	.word	0x200085a0
 8000ff0:	40008000 	.word	0x40008000

08000ff4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_USART2_UART_Init+0x68>)
 8000ffa:	4a19      	ldr	r2, [pc, #100]	; (8001060 <MX_USART2_UART_Init+0x6c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_USART2_UART_Init+0x68>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_USART2_UART_Init+0x68>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_USART2_UART_Init+0x68>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_USART2_UART_Init+0x68>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_USART2_UART_Init+0x68>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_USART2_UART_Init+0x68>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_USART2_UART_Init+0x68>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART2_UART_Init+0x68>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_USART2_UART_Init+0x68>)
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART2_UART_Init+0x68>)
 8001038:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800103c:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_USART2_UART_Init+0x68>)
 8001040:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART2_UART_Init+0x68>)
 8001048:	f009 f90a 	bl	800a260 <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 8001052:	f7ff fe1b 	bl	8000c8c <Error_Handler>
  }

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20008620 	.word	0x20008620
 8001060:	40004400 	.word	0x40004400

08001064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a42      	ldr	r2, [pc, #264]	; (800118c <HAL_UART_MspInit+0x128>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d133      	bne.n	80010ee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001086:	4b42      	ldr	r3, [pc, #264]	; (8001190 <HAL_UART_MspInit+0x12c>)
 8001088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108a:	4a41      	ldr	r2, [pc, #260]	; (8001190 <HAL_UART_MspInit+0x12c>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001092:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <HAL_UART_MspInit+0x12c>)
 8001094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800109e:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a3b      	ldr	r2, [pc, #236]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80010b6:	f007 fb3b 	bl	8008730 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80010ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80010cc:	2308      	movs	r3, #8
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	482f      	ldr	r0, [pc, #188]	; (8001194 <HAL_UART_MspInit+0x130>)
 80010d8:	f007 f934 	bl	8008344 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2105      	movs	r1, #5
 80010e0:	2046      	movs	r0, #70	; 0x46
 80010e2:	f007 f905 	bl	80082f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80010e6:	2046      	movs	r0, #70	; 0x46
 80010e8:	f007 f91e 	bl	8008328 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010ec:	e049      	b.n	8001182 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART2)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a29      	ldr	r2, [pc, #164]	; (8001198 <HAL_UART_MspInit+0x134>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d144      	bne.n	8001182 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	4a24      	ldr	r2, [pc, #144]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001102:	6593      	str	r3, [r2, #88]	; 0x58
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <HAL_UART_MspInit+0x12c>)
 8001106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <HAL_UART_MspInit+0x12c>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <HAL_UART_MspInit+0x12c>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_UART_MspInit+0x12c>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_UART_MspInit+0x12c>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112c:	4a18      	ldr	r2, [pc, #96]	; (8001190 <HAL_UART_MspInit+0x12c>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_UART_MspInit+0x12c>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001140:	2340      	movs	r3, #64	; 0x40
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001150:	2307      	movs	r3, #7
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4810      	ldr	r0, [pc, #64]	; (800119c <HAL_UART_MspInit+0x138>)
 800115c:	f007 f8f2 	bl	8008344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001160:	2304      	movs	r3, #4
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001170:	2307      	movs	r3, #7
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f007 f8e1 	bl	8008344 <HAL_GPIO_Init>
}
 8001182:	bf00      	nop
 8001184:	3730      	adds	r7, #48	; 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40008000 	.word	0x40008000
 8001190:	40021000 	.word	0x40021000
 8001194:	48001800 	.word	0x48001800
 8001198:	40004400 	.word	0x40004400
 800119c:	48000c00 	.word	0x48000c00

080011a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011a6:	e003      	b.n	80011b0 <LoopCopyDataInit>

080011a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011ae:	3104      	adds	r1, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011b8:	d3f6      	bcc.n	80011a8 <CopyDataInit>
	ldr	r2, =_sbss
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011bc:	e002      	b.n	80011c4 <LoopFillZerobss>

080011be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011c0:	f842 3b04 	str.w	r3, [r2], #4

080011c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <LoopForever+0x16>)
	cmp	r2, r3
 80011c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011c8:	d3f9      	bcc.n	80011be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ca:	f7ff fea9 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f00c f9c9 	bl	800d564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011d2:	f7ff fc9f 	bl	8000b14 <main>

080011d6 <LoopForever>:

LoopForever:
    b LoopForever
 80011d6:	e7fe      	b.n	80011d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011d8:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 80011dc:	0800ff40 	.word	0x0800ff40
	ldr	r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011e4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80011e8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80011ec:	200087b8 	.word	0x200087b8

080011f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC1_2_IRQHandler>

080011f2 <znp_dev_has_in_cluster>:
// semaphore
static SemaphoreHandle_t _znp_cmd_sem;

static uint8_t _znp_cmd_sequence_num = 0;

static uint8_t znp_dev_has_in_cluster(znp_device_t* dev, uint16_t cluster) {
 80011f2:	b480      	push	{r7}
 80011f4:	b085      	sub	sp, #20
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	807b      	strh	r3, [r7, #2]
    for (uint8_t i = 0; i < dev->clstr_in_cnt; i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e00d      	b.n	8001220 <znp_dev_has_in_cluster+0x2e>
        if (dev->clstr_in_list[i] == cluster)
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	3304      	adds	r3, #4
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	885b      	ldrh	r3, [r3, #2]
 8001210:	887a      	ldrh	r2, [r7, #2]
 8001212:	429a      	cmp	r2, r3
 8001214:	d101      	bne.n	800121a <znp_dev_has_in_cluster+0x28>
            return 1;
 8001216:	2301      	movs	r3, #1
 8001218:	e008      	b.n	800122c <znp_dev_has_in_cluster+0x3a>
    for (uint8_t i = 0; i < dev->clstr_in_cnt; i++) {
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	3301      	adds	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7a1b      	ldrb	r3, [r3, #8]
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3ec      	bcc.n	8001204 <znp_dev_has_in_cluster+0x12>
    }
    return 0;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <znp_cmd_init>:
            return 1;
    }
    return 0;
}

void znp_cmd_init(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    _znp_cmd_sem = xSemaphoreCreateBinary();
 800123c:	2203      	movs	r2, #3
 800123e:	2100      	movs	r1, #0
 8001240:	2001      	movs	r0, #1
 8001242:	f009 ff6f 	bl	800b124 <xQueueGenericCreate>
 8001246:	4603      	mov	r3, r0
 8001248:	4a05      	ldr	r2, [pc, #20]	; (8001260 <znp_cmd_init+0x28>)
 800124a:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(_znp_cmd_sem);
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <znp_cmd_init+0x28>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	2300      	movs	r3, #0
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	f009 ffc9 	bl	800b1ec <xQueueGenericSend>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200003f8 	.word	0x200003f8

08001264 <znp_cmd_dev_is_active>:

int znp_cmd_dev_is_active(uint16_t address) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
    // take semaphore
    if (xSemaphoreTake(_znp_cmd_sem, 5000) == pdFALSE)
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <znp_cmd_dev_is_active+0x94>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f241 3188 	movw	r1, #5000	; 0x1388
 8001276:	4618      	mov	r0, r3
 8001278:	f00a fa2e 	bl	800b6d8 <xQueueSemaphoreTake>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <znp_cmd_dev_is_active+0x24>
        return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e033      	b.n	80012f0 <znp_cmd_dev_is_active+0x8c>

    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fbf4 	bl	8002a78 <znp_if_dev_get>
 8001290:	6178      	str	r0, [r7, #20]

    // invalid handle?
    if (dev == NULL) {
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <znp_cmd_dev_is_active+0x48>
        xSemaphoreGive(_znp_cmd_sem);
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <znp_cmd_dev_is_active+0x94>)
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	f009 ffa3 	bl	800b1ec <xQueueGenericSend>
        return -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e021      	b.n	80012f0 <znp_cmd_dev_is_active+0x8c>
    }

    // check if the endpoint is active
    ActiveEpReqFormat_t act_req;
    act_req.DstAddr = dev->adr_short;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	81bb      	strh	r3, [r7, #12]
    act_req.NwkAddrOfInterest = dev->adr_short;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	81fb      	strh	r3, [r7, #14]
    zdoActiveEpReq(&act_req);
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fcdd 	bl	8004c7c <zdoActiveEpReq>

    // wait for response
    event_result_t* ret = znp_if_wait_for_event(EVT_RSP_IS_ACTIVE, dev->adr_short, 30000);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	f247 5230 	movw	r2, #30000	; 0x7530
 80012ca:	4619      	mov	r1, r3
 80012cc:	2001      	movs	r0, #1
 80012ce:	f001 fb83 	bl	80029d8 <znp_if_wait_for_event>
 80012d2:	6138      	str	r0, [r7, #16]

    xSemaphoreGive(_znp_cmd_sem);
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <znp_cmd_dev_is_active+0x94>)
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	2300      	movs	r3, #0
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	f009 ff85 	bl	800b1ec <xQueueGenericSend>

    if (ret != NULL)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <znp_cmd_dev_is_active+0x88>
        return 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e001      	b.n	80012f0 <znp_cmd_dev_is_active+0x8c>
    else
        return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200003f8 	.word	0x200003f8

080012fc <znp_cmd_dev_refresh_info>:

int znp_cmd_dev_refresh_info(uint16_t address) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
    // take semaphore
    if (xSemaphoreTake(_znp_cmd_sem, 5000) == pdFALSE)
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <znp_cmd_dev_refresh_info+0x98>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f241 3188 	movw	r1, #5000	; 0x1388
 800130e:	4618      	mov	r0, r3
 8001310:	f00a f9e2 	bl	800b6d8 <xQueueSemaphoreTake>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <znp_cmd_dev_refresh_info+0x24>
        return -1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e035      	b.n	800138c <znp_cmd_dev_refresh_info+0x90>

    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	4618      	mov	r0, r3
 8001324:	f001 fba8 	bl	8002a78 <znp_if_dev_get>
 8001328:	6178      	str	r0, [r7, #20]

    // invalid handle?
    if (dev == NULL) {
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d109      	bne.n	8001344 <znp_cmd_dev_refresh_info+0x48>
        xSemaphoreGive(_znp_cmd_sem);
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <znp_cmd_dev_refresh_info+0x98>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	f009 ff57 	bl	800b1ec <xQueueGenericSend>
        return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e023      	b.n	800138c <znp_cmd_dev_refresh_info+0x90>
    }

    // request descriptors
    SimpleDescReqFormat_t desc_req;
    desc_req.DstAddr = dev->adr_short;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	813b      	strh	r3, [r7, #8]
    desc_req.NwkAddrOfInterest = dev->adr_short;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	817b      	strh	r3, [r7, #10]
    desc_req.Endpoint = 1;
 8001350:	2301      	movs	r3, #1
 8001352:	733b      	strb	r3, [r7, #12]
    zdoSimpleDescReq(&desc_req);
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fc19 	bl	8004b90 <zdoSimpleDescReq>

    // wait for response
    event_result_t* ret = znp_if_wait_for_event(EVT_RSP_SIMPLE_DESC, dev->adr_short, 30000);
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	f247 5230 	movw	r2, #30000	; 0x7530
 8001366:	4619      	mov	r1, r3
 8001368:	2002      	movs	r0, #2
 800136a:	f001 fb35 	bl	80029d8 <znp_if_wait_for_event>
 800136e:	6138      	str	r0, [r7, #16]

    xSemaphoreGive(_znp_cmd_sem);
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <znp_cmd_dev_refresh_info+0x98>)
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	f009 ff37 	bl	800b1ec <xQueueGenericSend>

    if (ret != NULL)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <znp_cmd_dev_refresh_info+0x8c>
        return 0;
 8001384:	2300      	movs	r3, #0
 8001386:	e001      	b.n	800138c <znp_cmd_dev_refresh_info+0x90>
    else
        return -1;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200003f8 	.word	0x200003f8

08001398 <znp_cmd_dev_register>:

    // all good
    return 0;
}

int znp_cmd_dev_register(uint16_t address) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b098      	sub	sp, #96	; 0x60
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
    // take semaphore
    if (xSemaphoreTake(_znp_cmd_sem, 5000) == pdFALSE)
 80013a2:	4b58      	ldr	r3, [pc, #352]	; (8001504 <znp_cmd_dev_register+0x16c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00a f994 	bl	800b6d8 <xQueueSemaphoreTake>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <znp_cmd_dev_register+0x24>
        return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	e09e      	b.n	80014fa <znp_cmd_dev_register+0x162>

    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 fb5a 	bl	8002a78 <znp_if_dev_get>
 80013c4:	65b8      	str	r0, [r7, #88]	; 0x58

    // invalid handle?
    if (dev == NULL) {
 80013c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d109      	bne.n	80013e0 <znp_cmd_dev_register+0x48>
        xSemaphoreGive(_znp_cmd_sem);
 80013cc:	4b4d      	ldr	r3, [pc, #308]	; (8001504 <znp_cmd_dev_register+0x16c>)
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	2300      	movs	r3, #0
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	f009 ff09 	bl	800b1ec <xQueueGenericSend>
        return -1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e08c      	b.n	80014fa <znp_cmd_dev_register+0x162>
    }

    // sanity check if data is ok
    if (dev->clstr_in_cnt == 0 || dev->clstr_out_cnt == 0 || dev->device_id == 0 || dev->profile_id == 0) {
 80013e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e2:	7a1b      	ldrb	r3, [r3, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00c      	beq.n	8001402 <znp_cmd_dev_register+0x6a>
 80013e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013ea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <znp_cmd_dev_register+0x6a>
 80013f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013f4:	88db      	ldrh	r3, [r3, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <znp_cmd_dev_register+0x6a>
 80013fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013fc:	889b      	ldrh	r3, [r3, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <znp_cmd_dev_register+0x7e>
        xSemaphoreGive(_znp_cmd_sem);
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <znp_cmd_dev_register+0x16c>)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	f009 feee 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	e071      	b.n	80014fa <znp_cmd_dev_register+0x162>
    }

    // register device
    RegisterFormat_t reg_req;
    reg_req.EndPoint = 0x01;
 8001416:	2301      	movs	r3, #1
 8001418:	723b      	strb	r3, [r7, #8]
    reg_req.AppProfId = dev->profile_id;
 800141a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800141c:	889b      	ldrh	r3, [r3, #4]
 800141e:	817b      	strh	r3, [r7, #10]
    reg_req.AppDeviceId = dev->device_id;
 8001420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001422:	88db      	ldrh	r3, [r3, #6]
 8001424:	81bb      	strh	r3, [r7, #12]
    reg_req.AppDevVer = 0x01;
 8001426:	2301      	movs	r3, #1
 8001428:	73bb      	strb	r3, [r7, #14]
    reg_req.LatencyReq = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
    reg_req.AppNumInClusters = dev->clstr_in_cnt;
 800142e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001430:	7a1b      	ldrb	r3, [r3, #8]
 8001432:	743b      	strb	r3, [r7, #16]
    for (uint8_t i = 0; i < dev->clstr_in_cnt; i++)
 8001434:	2300      	movs	r3, #0
 8001436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800143a:	e015      	b.n	8001468 <znp_cmd_dev_register+0xd0>
        reg_req.AppInClusterList[i] = dev->clstr_in_list[i];
 800143c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001440:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001444:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001446:	3304      	adds	r3, #4
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	440b      	add	r3, r1
 800144c:	8859      	ldrh	r1, [r3, #2]
 800144e:	1d13      	adds	r3, r2, #4
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001456:	4413      	add	r3, r2
 8001458:	460a      	mov	r2, r1
 800145a:	f823 2c56 	strh.w	r2, [r3, #-86]
    for (uint8_t i = 0; i < dev->clstr_in_cnt; i++)
 800145e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001462:	3301      	adds	r3, #1
 8001464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800146a:	7a1b      	ldrb	r3, [r3, #8]
 800146c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001470:	429a      	cmp	r2, r3
 8001472:	d3e3      	bcc.n	800143c <znp_cmd_dev_register+0xa4>
    reg_req.AppNumOutClusters = dev->clstr_out_cnt;
 8001474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001476:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800147a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    for (uint8_t i = 0; i < dev->clstr_out_cnt; i++)
 800147e:	2300      	movs	r3, #0
 8001480:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001484:	e016      	b.n	80014b4 <znp_cmd_dev_register+0x11c>
        reg_req.AppOutClusterList[i] = dev->clstr_out_list[i];
 8001486:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800148a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800148e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001490:	3314      	adds	r3, #20
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	440b      	add	r3, r1
 8001496:	8899      	ldrh	r1, [r3, #4]
 8001498:	f102 0314 	add.w	r3, r2, #20
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014a2:	4413      	add	r3, r2
 80014a4:	460a      	mov	r2, r1
 80014a6:	f823 2c54 	strh.w	r2, [r3, #-84]
    for (uint8_t i = 0; i < dev->clstr_out_cnt; i++)
 80014aa:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80014ae:	3301      	adds	r3, #1
 80014b0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80014b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014b6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014ba:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3e1      	bcc.n	8001486 <znp_cmd_dev_register+0xee>
    afRegister(&reg_req);
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fb1b 	bl	8002b02 <afRegister>

    // wait for response
    event_result_t* ret = znp_if_wait_for_event(EVT_RSP_REGISTER, dev->adr_short, 30000);
 80014cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	f247 5230 	movw	r2, #30000	; 0x7530
 80014d4:	4619      	mov	r1, r3
 80014d6:	2004      	movs	r0, #4
 80014d8:	f001 fa7e 	bl	80029d8 <znp_if_wait_for_event>
 80014dc:	6578      	str	r0, [r7, #84]	; 0x54

    xSemaphoreGive(_znp_cmd_sem);
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <znp_cmd_dev_register+0x16c>)
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	f009 fe80 	bl	800b1ec <xQueueGenericSend>

    if (ret != NULL)
 80014ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <znp_cmd_dev_register+0x15e>
        return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e001      	b.n	80014fa <znp_cmd_dev_register+0x162>
    else
        return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3760      	adds	r7, #96	; 0x60
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200003f8 	.word	0x200003f8

08001508 <znp_cmd_cluster_in_read>:

int znp_cmd_cluster_in_read(uint16_t address, uint16_t cluster, uint16_t attribute, zcl_cluster_record_t* record) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b0aa      	sub	sp, #168	; 0xa8
 800150c:	af00      	add	r7, sp, #0
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	4603      	mov	r3, r0
 8001512:	81fb      	strh	r3, [r7, #14]
 8001514:	460b      	mov	r3, r1
 8001516:	81bb      	strh	r3, [r7, #12]
 8001518:	4613      	mov	r3, r2
 800151a:	817b      	strh	r3, [r7, #10]
    // take semaphore
    if (xSemaphoreTake(_znp_cmd_sem, 5000) == pdFALSE)
 800151c:	4b6c      	ldr	r3, [pc, #432]	; (80016d0 <znp_cmd_cluster_in_read+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f241 3188 	movw	r1, #5000	; 0x1388
 8001524:	4618      	mov	r0, r3
 8001526:	f00a f8d7 	bl	800b6d8 <xQueueSemaphoreTake>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d103      	bne.n	8001538 <znp_cmd_cluster_in_read+0x30>
        return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	f000 bc16 	b.w	8001d64 <znp_cmd_cluster_in_read+0x85c>

    // reset record data
    memset(record, 0, sizeof(zcl_cluster_record_t));
 8001538:	2228      	movs	r2, #40	; 0x28
 800153a:	2100      	movs	r1, #0
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f00c f843 	bl	800d5c8 <memset>

    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	4618      	mov	r0, r3
 8001546:	f001 fa97 	bl	8002a78 <znp_if_dev_get>
 800154a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    // invalid handle?
    if (dev == NULL) {
 800154e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <znp_cmd_cluster_in_read+0x62>
        xSemaphoreGive(_znp_cmd_sem);
 8001556:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <znp_cmd_cluster_in_read+0x1c8>)
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	f009 fe44 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
 8001568:	e3fc      	b.n	8001d64 <znp_cmd_cluster_in_read+0x85c>
    }

    // sanity check if data is ok
    if (!znp_dev_has_in_cluster(dev, cluster)) {
 800156a:	89bb      	ldrh	r3, [r7, #12]
 800156c:	4619      	mov	r1, r3
 800156e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001572:	f7ff fe3e 	bl	80011f2 <znp_dev_has_in_cluster>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d109      	bne.n	8001590 <znp_cmd_cluster_in_read+0x88>
        xSemaphoreGive(_znp_cmd_sem);
 800157c:	4b54      	ldr	r3, [pc, #336]	; (80016d0 <znp_cmd_cluster_in_read+0x1c8>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	f009 fe31 	bl	800b1ec <xQueueGenericSend>
        return -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e3e9      	b.n	8001d64 <znp_cmd_cluster_in_read+0x85c>
    }

    // increase number
    _znp_cmd_sequence_num++;
 8001590:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <znp_cmd_cluster_in_read+0x1cc>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <znp_cmd_cluster_in_read+0x1cc>)
 800159a:	701a      	strb	r2, [r3, #0]

    // read a cluster
    DataRequestFormat_t data_req;
    data_req.DstAddr = dev->adr_short;
 800159c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	823b      	strh	r3, [r7, #16]
    data_req.DstEndpoint = 0x01;
 80015a4:	2301      	movs	r3, #1
 80015a6:	74bb      	strb	r3, [r7, #18]
    data_req.SrcEndpoint = 0x01;
 80015a8:	2301      	movs	r3, #1
 80015aa:	74fb      	strb	r3, [r7, #19]
    data_req.ClusterID = cluster;
 80015ac:	89bb      	ldrh	r3, [r7, #12]
 80015ae:	82bb      	strh	r3, [r7, #20]
    data_req.TransID = 0x05;
 80015b0:	2305      	movs	r3, #5
 80015b2:	75bb      	strb	r3, [r7, #22]
    data_req.Options = 0x00;
 80015b4:	2300      	movs	r3, #0
 80015b6:	75fb      	strb	r3, [r7, #23]
    data_req.Radius = 0x07;
 80015b8:	2307      	movs	r3, #7
 80015ba:	763b      	strb	r3, [r7, #24]
    data_req.Len = 5;
 80015bc:	2305      	movs	r3, #5
 80015be:	767b      	strb	r3, [r7, #25]
    data_req.Data[0] = 0x00;                   // ZCL Header: frame control
 80015c0:	2300      	movs	r3, #0
 80015c2:	76bb      	strb	r3, [r7, #26]
    data_req.Data[1] = _znp_cmd_sequence_num;  // ZCL Header: transaction sequence num
 80015c4:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <znp_cmd_cluster_in_read+0x1cc>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	76fb      	strb	r3, [r7, #27]
    data_req.Data[2] = ZCL_CMD_READ_ATTR;      // ZCL Header: Command ID
 80015ca:	2300      	movs	r3, #0
 80015cc:	773b      	strb	r3, [r7, #28]
    data_req.Data[3] = attribute & 0xFF;       // Cluster 16bit low
 80015ce:	897b      	ldrh	r3, [r7, #10]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	777b      	strb	r3, [r7, #29]
    data_req.Data[4] = attribute >> 8;         // Cluster 16bit high
 80015d4:	897b      	ldrh	r3, [r7, #10]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	77bb      	strb	r3, [r7, #30]
    afDataRequest(&data_req);
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fb79 	bl	8002cda <afDataRequest>

    // wait for response
    event_result_t* event = znp_if_wait_for_event(EVT_RSP_DATA_REQUEST, dev->adr_short, 30000);
 80015e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	f247 5230 	movw	r2, #30000	; 0x7530
 80015f2:	4619      	mov	r1, r3
 80015f4:	2005      	movs	r0, #5
 80015f6:	f001 f9ef 	bl	80029d8 <znp_if_wait_for_event>
 80015fa:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    if (event == NULL) {
 80015fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <znp_cmd_cluster_in_read+0x112>
        xSemaphoreGive(_znp_cmd_sem);
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <znp_cmd_cluster_in_read+0x1c8>)
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	2300      	movs	r3, #0
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	f009 fdec 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	e3a4      	b.n	8001d64 <znp_cmd_cluster_in_read+0x85c>
    }

    // check length
    if (event->data_len < 6) {
 800161a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800161e:	795b      	ldrb	r3, [r3, #5]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d809      	bhi.n	8001638 <znp_cmd_cluster_in_read+0x130>
        xSemaphoreGive(_znp_cmd_sem);
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <znp_cmd_cluster_in_read+0x1c8>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	f009 fddd 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e395      	b.n	8001d64 <znp_cmd_cluster_in_read+0x85c>
    }

    // ZCL Header: check transaction sequence number
    if (event->data[1] != _znp_cmd_sequence_num) {
 8001638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800163c:	79da      	ldrb	r2, [r3, #7]
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <znp_cmd_cluster_in_read+0x1cc>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d009      	beq.n	800165a <znp_cmd_cluster_in_read+0x152>
        xSemaphoreGive(_znp_cmd_sem);
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <znp_cmd_cluster_in_read+0x1c8>)
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	f009 fdcc 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	e384      	b.n	8001d64 <znp_cmd_cluster_in_read+0x85c>
    }

    // ZCL Header: check command ID
    if (event->data[2] != ZCL_CMD_READ_ATTR_RSP) {
 800165a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800165e:	7a1b      	ldrb	r3, [r3, #8]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d009      	beq.n	8001678 <znp_cmd_cluster_in_read+0x170>
        xSemaphoreGive(_znp_cmd_sem);
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <znp_cmd_cluster_in_read+0x1c8>)
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	2300      	movs	r3, #0
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	f009 fdbd 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e375      	b.n	8001d64 <znp_cmd_cluster_in_read+0x85c>
    }

    // Data: which attribute is in this response?
    uint16_t read_attribute = (event->data[3] | (event->data[4] << 8));
 8001678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800167c:	7a5b      	ldrb	r3, [r3, #9]
 800167e:	b21a      	sxth	r2, r3
 8001680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001684:	7a9b      	ldrb	r3, [r3, #10]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21b      	sxth	r3, r3
 800168e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    if (read_attribute != attribute) {
 8001692:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8001696:	897b      	ldrh	r3, [r7, #10]
 8001698:	429a      	cmp	r2, r3
 800169a:	d009      	beq.n	80016b0 <znp_cmd_cluster_in_read+0x1a8>
        xSemaphoreGive(_znp_cmd_sem);
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <znp_cmd_cluster_in_read+0x1c8>)
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	f009 fda1 	bl	800b1ec <xQueueGenericSend>
        return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e359      	b.n	8001d64 <znp_cmd_cluster_in_read+0x85c>
    }

    // Data: status not ok?
    if (event->data[5] != 0) {
 80016b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016b4:	7adb      	ldrb	r3, [r3, #11]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00e      	beq.n	80016d8 <znp_cmd_cluster_in_read+0x1d0>
        xSemaphoreGive(_znp_cmd_sem);
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <znp_cmd_cluster_in_read+0x1c8>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	2300      	movs	r3, #0
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	f009 fd92 	bl	800b1ec <xQueueGenericSend>
        return -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	e34a      	b.n	8001d64 <znp_cmd_cluster_in_read+0x85c>
 80016ce:	bf00      	nop
 80016d0:	200003f8 	.word	0x200003f8
 80016d4:	200003fc 	.word	0x200003fc
    }

    // save type
    record->type = event->data[6];
 80016d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016dc:	7b1a      	ldrb	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	701a      	strb	r2, [r3, #0]

    uint8_t parse_valid = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    // Data: parse type and data
    switch (record->type) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2bff      	cmp	r3, #255	; 0xff
 80016ee:	f200 832a 	bhi.w	8001d46 <znp_cmd_cluster_in_read+0x83e>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <znp_cmd_cluster_in_read+0x1f0>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001af9 	.word	0x08001af9
 80016fc:	08001d47 	.word	0x08001d47
 8001700:	08001d47 	.word	0x08001d47
 8001704:	08001d47 	.word	0x08001d47
 8001708:	08001d47 	.word	0x08001d47
 800170c:	08001d47 	.word	0x08001d47
 8001710:	08001d47 	.word	0x08001d47
 8001714:	08001d47 	.word	0x08001d47
 8001718:	08001af9 	.word	0x08001af9
 800171c:	08001b0b 	.word	0x08001b0b
 8001720:	08001b2f 	.word	0x08001b2f
 8001724:	08001b59 	.word	0x08001b59
 8001728:	08001b8d 	.word	0x08001b8d
 800172c:	08001bd7 	.word	0x08001bd7
 8001730:	08001c31 	.word	0x08001c31
 8001734:	08001c9b 	.word	0x08001c9b
 8001738:	08001af9 	.word	0x08001af9
 800173c:	08001d47 	.word	0x08001d47
 8001740:	08001d47 	.word	0x08001d47
 8001744:	08001d47 	.word	0x08001d47
 8001748:	08001d47 	.word	0x08001d47
 800174c:	08001d47 	.word	0x08001d47
 8001750:	08001d47 	.word	0x08001d47
 8001754:	08001d47 	.word	0x08001d47
 8001758:	08001af9 	.word	0x08001af9
 800175c:	08001b0b 	.word	0x08001b0b
 8001760:	08001b2f 	.word	0x08001b2f
 8001764:	08001b59 	.word	0x08001b59
 8001768:	08001b8d 	.word	0x08001b8d
 800176c:	08001bd7 	.word	0x08001bd7
 8001770:	08001c31 	.word	0x08001c31
 8001774:	08001c9b 	.word	0x08001c9b
 8001778:	08001af9 	.word	0x08001af9
 800177c:	08001b0b 	.word	0x08001b0b
 8001780:	08001b2f 	.word	0x08001b2f
 8001784:	08001b59 	.word	0x08001b59
 8001788:	08001b8d 	.word	0x08001b8d
 800178c:	08001bd7 	.word	0x08001bd7
 8001790:	08001c31 	.word	0x08001c31
 8001794:	08001c9b 	.word	0x08001c9b
 8001798:	08001af9 	.word	0x08001af9
 800179c:	08001b0b 	.word	0x08001b0b
 80017a0:	08001d47 	.word	0x08001d47
 80017a4:	08001b59 	.word	0x08001b59
 80017a8:	08001d47 	.word	0x08001d47
 80017ac:	08001d47 	.word	0x08001d47
 80017b0:	08001d47 	.word	0x08001d47
 80017b4:	08001c9b 	.word	0x08001c9b
 80017b8:	08001af9 	.word	0x08001af9
 80017bc:	08001b0b 	.word	0x08001b0b
 80017c0:	08001d47 	.word	0x08001d47
 80017c4:	08001d47 	.word	0x08001d47
 80017c8:	08001d47 	.word	0x08001d47
 80017cc:	08001d47 	.word	0x08001d47
 80017d0:	08001d47 	.word	0x08001d47
 80017d4:	08001d47 	.word	0x08001d47
 80017d8:	08001d47 	.word	0x08001d47
 80017dc:	08001d47 	.word	0x08001d47
 80017e0:	08001d47 	.word	0x08001d47
 80017e4:	08001d47 	.word	0x08001d47
 80017e8:	08001d47 	.word	0x08001d47
 80017ec:	08001d47 	.word	0x08001d47
 80017f0:	08001d47 	.word	0x08001d47
 80017f4:	08001d47 	.word	0x08001d47
 80017f8:	08001d47 	.word	0x08001d47
 80017fc:	08001d15 	.word	0x08001d15
 8001800:	08001d15 	.word	0x08001d15
 8001804:	08001d47 	.word	0x08001d47
 8001808:	08001d47 	.word	0x08001d47
 800180c:	08001d47 	.word	0x08001d47
 8001810:	08001d47 	.word	0x08001d47
 8001814:	08001d47 	.word	0x08001d47
 8001818:	08001d47 	.word	0x08001d47
 800181c:	08001d47 	.word	0x08001d47
 8001820:	08001d47 	.word	0x08001d47
 8001824:	08001d47 	.word	0x08001d47
 8001828:	08001d47 	.word	0x08001d47
 800182c:	08001d47 	.word	0x08001d47
 8001830:	08001d47 	.word	0x08001d47
 8001834:	08001d47 	.word	0x08001d47
 8001838:	08001d47 	.word	0x08001d47
 800183c:	08001d47 	.word	0x08001d47
 8001840:	08001d47 	.word	0x08001d47
 8001844:	08001d47 	.word	0x08001d47
 8001848:	08001d47 	.word	0x08001d47
 800184c:	08001d47 	.word	0x08001d47
 8001850:	08001d47 	.word	0x08001d47
 8001854:	08001d47 	.word	0x08001d47
 8001858:	08001d47 	.word	0x08001d47
 800185c:	08001d47 	.word	0x08001d47
 8001860:	08001d47 	.word	0x08001d47
 8001864:	08001d47 	.word	0x08001d47
 8001868:	08001d47 	.word	0x08001d47
 800186c:	08001d47 	.word	0x08001d47
 8001870:	08001d47 	.word	0x08001d47
 8001874:	08001d47 	.word	0x08001d47
 8001878:	08001d47 	.word	0x08001d47
 800187c:	08001d47 	.word	0x08001d47
 8001880:	08001d47 	.word	0x08001d47
 8001884:	08001d47 	.word	0x08001d47
 8001888:	08001d47 	.word	0x08001d47
 800188c:	08001d47 	.word	0x08001d47
 8001890:	08001d47 	.word	0x08001d47
 8001894:	08001d47 	.word	0x08001d47
 8001898:	08001d47 	.word	0x08001d47
 800189c:	08001d47 	.word	0x08001d47
 80018a0:	08001d47 	.word	0x08001d47
 80018a4:	08001d47 	.word	0x08001d47
 80018a8:	08001d47 	.word	0x08001d47
 80018ac:	08001d47 	.word	0x08001d47
 80018b0:	08001d47 	.word	0x08001d47
 80018b4:	08001d47 	.word	0x08001d47
 80018b8:	08001d47 	.word	0x08001d47
 80018bc:	08001d47 	.word	0x08001d47
 80018c0:	08001d47 	.word	0x08001d47
 80018c4:	08001d47 	.word	0x08001d47
 80018c8:	08001d47 	.word	0x08001d47
 80018cc:	08001d47 	.word	0x08001d47
 80018d0:	08001d47 	.word	0x08001d47
 80018d4:	08001d47 	.word	0x08001d47
 80018d8:	08001d47 	.word	0x08001d47
 80018dc:	08001d47 	.word	0x08001d47
 80018e0:	08001d47 	.word	0x08001d47
 80018e4:	08001d47 	.word	0x08001d47
 80018e8:	08001d47 	.word	0x08001d47
 80018ec:	08001d47 	.word	0x08001d47
 80018f0:	08001d47 	.word	0x08001d47
 80018f4:	08001d47 	.word	0x08001d47
 80018f8:	08001d47 	.word	0x08001d47
 80018fc:	08001d47 	.word	0x08001d47
 8001900:	08001d47 	.word	0x08001d47
 8001904:	08001d47 	.word	0x08001d47
 8001908:	08001d47 	.word	0x08001d47
 800190c:	08001d47 	.word	0x08001d47
 8001910:	08001d47 	.word	0x08001d47
 8001914:	08001d47 	.word	0x08001d47
 8001918:	08001d47 	.word	0x08001d47
 800191c:	08001d47 	.word	0x08001d47
 8001920:	08001d47 	.word	0x08001d47
 8001924:	08001d47 	.word	0x08001d47
 8001928:	08001d47 	.word	0x08001d47
 800192c:	08001d47 	.word	0x08001d47
 8001930:	08001d47 	.word	0x08001d47
 8001934:	08001d47 	.word	0x08001d47
 8001938:	08001d47 	.word	0x08001d47
 800193c:	08001d47 	.word	0x08001d47
 8001940:	08001d47 	.word	0x08001d47
 8001944:	08001d47 	.word	0x08001d47
 8001948:	08001d47 	.word	0x08001d47
 800194c:	08001d47 	.word	0x08001d47
 8001950:	08001d47 	.word	0x08001d47
 8001954:	08001d47 	.word	0x08001d47
 8001958:	08001d47 	.word	0x08001d47
 800195c:	08001d47 	.word	0x08001d47
 8001960:	08001d47 	.word	0x08001d47
 8001964:	08001d47 	.word	0x08001d47
 8001968:	08001d47 	.word	0x08001d47
 800196c:	08001d47 	.word	0x08001d47
 8001970:	08001d47 	.word	0x08001d47
 8001974:	08001d47 	.word	0x08001d47
 8001978:	08001d47 	.word	0x08001d47
 800197c:	08001d47 	.word	0x08001d47
 8001980:	08001d47 	.word	0x08001d47
 8001984:	08001d47 	.word	0x08001d47
 8001988:	08001d47 	.word	0x08001d47
 800198c:	08001d47 	.word	0x08001d47
 8001990:	08001d47 	.word	0x08001d47
 8001994:	08001d47 	.word	0x08001d47
 8001998:	08001d47 	.word	0x08001d47
 800199c:	08001d47 	.word	0x08001d47
 80019a0:	08001d47 	.word	0x08001d47
 80019a4:	08001d47 	.word	0x08001d47
 80019a8:	08001d47 	.word	0x08001d47
 80019ac:	08001d47 	.word	0x08001d47
 80019b0:	08001d47 	.word	0x08001d47
 80019b4:	08001d47 	.word	0x08001d47
 80019b8:	08001d47 	.word	0x08001d47
 80019bc:	08001d47 	.word	0x08001d47
 80019c0:	08001d47 	.word	0x08001d47
 80019c4:	08001d47 	.word	0x08001d47
 80019c8:	08001d47 	.word	0x08001d47
 80019cc:	08001d47 	.word	0x08001d47
 80019d0:	08001d47 	.word	0x08001d47
 80019d4:	08001d47 	.word	0x08001d47
 80019d8:	08001d47 	.word	0x08001d47
 80019dc:	08001d47 	.word	0x08001d47
 80019e0:	08001d47 	.word	0x08001d47
 80019e4:	08001d47 	.word	0x08001d47
 80019e8:	08001d47 	.word	0x08001d47
 80019ec:	08001d47 	.word	0x08001d47
 80019f0:	08001d47 	.word	0x08001d47
 80019f4:	08001d47 	.word	0x08001d47
 80019f8:	08001d47 	.word	0x08001d47
 80019fc:	08001d47 	.word	0x08001d47
 8001a00:	08001d47 	.word	0x08001d47
 8001a04:	08001d47 	.word	0x08001d47
 8001a08:	08001d47 	.word	0x08001d47
 8001a0c:	08001d47 	.word	0x08001d47
 8001a10:	08001d47 	.word	0x08001d47
 8001a14:	08001d47 	.word	0x08001d47
 8001a18:	08001d47 	.word	0x08001d47
 8001a1c:	08001d47 	.word	0x08001d47
 8001a20:	08001d47 	.word	0x08001d47
 8001a24:	08001d47 	.word	0x08001d47
 8001a28:	08001d47 	.word	0x08001d47
 8001a2c:	08001d47 	.word	0x08001d47
 8001a30:	08001d47 	.word	0x08001d47
 8001a34:	08001d47 	.word	0x08001d47
 8001a38:	08001d47 	.word	0x08001d47
 8001a3c:	08001d47 	.word	0x08001d47
 8001a40:	08001d47 	.word	0x08001d47
 8001a44:	08001d47 	.word	0x08001d47
 8001a48:	08001d47 	.word	0x08001d47
 8001a4c:	08001d47 	.word	0x08001d47
 8001a50:	08001d47 	.word	0x08001d47
 8001a54:	08001d47 	.word	0x08001d47
 8001a58:	08001d47 	.word	0x08001d47
 8001a5c:	08001d47 	.word	0x08001d47
 8001a60:	08001d47 	.word	0x08001d47
 8001a64:	08001d47 	.word	0x08001d47
 8001a68:	08001d47 	.word	0x08001d47
 8001a6c:	08001d47 	.word	0x08001d47
 8001a70:	08001d47 	.word	0x08001d47
 8001a74:	08001d47 	.word	0x08001d47
 8001a78:	08001d47 	.word	0x08001d47
 8001a7c:	08001d47 	.word	0x08001d47
 8001a80:	08001d47 	.word	0x08001d47
 8001a84:	08001d47 	.word	0x08001d47
 8001a88:	08001d47 	.word	0x08001d47
 8001a8c:	08001d47 	.word	0x08001d47
 8001a90:	08001d47 	.word	0x08001d47
 8001a94:	08001d47 	.word	0x08001d47
 8001a98:	08001d47 	.word	0x08001d47
 8001a9c:	08001d47 	.word	0x08001d47
 8001aa0:	08001d47 	.word	0x08001d47
 8001aa4:	08001d47 	.word	0x08001d47
 8001aa8:	08001d47 	.word	0x08001d47
 8001aac:	08001d47 	.word	0x08001d47
 8001ab0:	08001d47 	.word	0x08001d47
 8001ab4:	08001d47 	.word	0x08001d47
 8001ab8:	08001d47 	.word	0x08001d47
 8001abc:	08001d47 	.word	0x08001d47
 8001ac0:	08001d47 	.word	0x08001d47
 8001ac4:	08001d47 	.word	0x08001d47
 8001ac8:	08001d47 	.word	0x08001d47
 8001acc:	08001d47 	.word	0x08001d47
 8001ad0:	08001d47 	.word	0x08001d47
 8001ad4:	08001d47 	.word	0x08001d47
 8001ad8:	08001d47 	.word	0x08001d47
 8001adc:	08001d47 	.word	0x08001d47
 8001ae0:	08001d47 	.word	0x08001d47
 8001ae4:	08001d47 	.word	0x08001d47
 8001ae8:	08001d47 	.word	0x08001d47
 8001aec:	08001d47 	.word	0x08001d47
 8001af0:	08001d47 	.word	0x08001d47
 8001af4:	08001d47 	.word	0x08001d47
        case ZCL_BITMAP_8BITS:
        case ZCL_UNSIGNED_8BITS:
        case ZCL_ENUMERATION_8BITS:
        case ZCL_BOOLEAN_8BITS:
        case ZCL_SIGNED_8BITS:
            record->data_u8 = event->data[7];
 8001af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001afc:	7b5a      	ldrb	r2, [r3, #13]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	721a      	strb	r2, [r3, #8]
            parse_valid = 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8001b08:	e11d      	b.n	8001d46 <znp_cmd_cluster_in_read+0x83e>
        case ZCL_DATA_16BITS:
        case ZCL_BITMAP_16BITS:
        case ZCL_UNSIGNED_16BITS:
        case ZCL_ENUMERATION_16BITS:
        case ZCL_SIGNED_16BITS:
            record->data_u16 = (event->data[7] | (event->data[8] << 8));
 8001b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b0e:	7b5b      	ldrb	r3, [r3, #13]
 8001b10:	b21a      	sxth	r2, r3
 8001b12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b16:	7b9b      	ldrb	r3, [r3, #14]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	811a      	strh	r2, [r3, #8]
            parse_valid = 1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8001b2c:	e10b      	b.n	8001d46 <znp_cmd_cluster_in_read+0x83e>

        case ZCL_DATA_24BITS:
        case ZCL_BITMAP_24BITS:
        case ZCL_UNSIGNED_24BITS:
            record->data_u32 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16));
 8001b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b32:	7b5b      	ldrb	r3, [r3, #13]
 8001b34:	461a      	mov	r2, r3
 8001b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b3a:	7b9b      	ldrb	r3, [r3, #14]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b44:	7bdb      	ldrb	r3, [r3, #15]
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
            parse_valid = 1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8001b56:	e0f6      	b.n	8001d46 <znp_cmd_cluster_in_read+0x83e>
        case ZCL_DATA_32BITS:
        case ZCL_BITMAP_32BITS:
        case ZCL_UNSIGNED_32BITS:
        case ZCL_SIGNED_32BITS:
            record->data_u32 =
                (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24));
 8001b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b5c:	7b5b      	ldrb	r3, [r3, #13]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b64:	7b9b      	ldrb	r3, [r3, #14]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b6e:	7bdb      	ldrb	r3, [r3, #15]
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	431a      	orrs	r2, r3
 8001b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b78:	7c1b      	ldrb	r3, [r3, #16]
 8001b7a:	061b      	lsls	r3, r3, #24
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	461a      	mov	r2, r3
            record->data_u32 =
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]
            parse_valid = 1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8001b8a:	e0dc      	b.n	8001d46 <znp_cmd_cluster_in_read+0x83e>

        case ZCL_DATA_40BITS:
        case ZCL_BITMAP_40BITS:
        case ZCL_UNSIGNED_40BITS:
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) |
 8001b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b90:	7b5b      	ldrb	r3, [r3, #13]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b98:	7b9b      	ldrb	r3, [r3, #14]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ba2:	7bdb      	ldrb	r3, [r3, #15]
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	431a      	orrs	r2, r3
                                (event->data[10] << 24) | (event->data[11] << 32));
 8001ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bac:	7c1b      	ldrb	r3, [r3, #16]
 8001bae:	061b      	lsls	r3, r3, #24
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) |
 8001bb0:	431a      	orrs	r2, r3
                                (event->data[10] << 24) | (event->data[11] << 32));
 8001bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bb6:	7c5b      	ldrb	r3, [r3, #17]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	2320      	movs	r3, #32
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	ea4f 73e2 	mov.w	r3, r2, asr #31
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) |
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	e9c1 2302 	strd	r2, r3, [r1, #8]
            parse_valid = 1;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8001bd4:	e0b7      	b.n	8001d46 <znp_cmd_cluster_in_read+0x83e>
            break;

        case ZCL_DATA_48BITS:
        case ZCL_BITMAP_48BITS:
        case ZCL_UNSIGNED_48BITS:
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) |
 8001bd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bda:	7b5b      	ldrb	r3, [r3, #13]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be2:	7b9b      	ldrb	r3, [r3, #14]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	431a      	orrs	r2, r3
 8001be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bec:	7bdb      	ldrb	r3, [r3, #15]
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	431a      	orrs	r2, r3
                                (event->data[10] << 24) | (event->data[11] << 32) | (event->data[12] << 40));
 8001bf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bf6:	7c1b      	ldrb	r3, [r3, #16]
 8001bf8:	061b      	lsls	r3, r3, #24
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) |
 8001bfa:	431a      	orrs	r2, r3
                                (event->data[10] << 24) | (event->data[11] << 32) | (event->data[12] << 40));
 8001bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c00:	7c5b      	ldrb	r3, [r3, #17]
 8001c02:	4619      	mov	r1, r3
 8001c04:	2320      	movs	r3, #32
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c10:	7c9b      	ldrb	r3, [r3, #18]
 8001c12:	4619      	mov	r1, r3
 8001c14:	2328      	movs	r3, #40	; 0x28
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) |
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	e9c1 2302 	strd	r2, r3, [r1, #8]
            parse_valid = 1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8001c2e:	e08a      	b.n	8001d46 <znp_cmd_cluster_in_read+0x83e>

        case ZCL_DATA_56BITS:
        case ZCL_BITMAP_56BITS:
        case ZCL_UNSIGNED_56BITS:
            record->data_u64 =
                (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 8001c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c34:	7b5b      	ldrb	r3, [r3, #13]
 8001c36:	461a      	mov	r2, r3
 8001c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c3c:	7b9b      	ldrb	r3, [r3, #14]
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	431a      	orrs	r2, r3
 8001c42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c46:	7bdb      	ldrb	r3, [r3, #15]
 8001c48:	041b      	lsls	r3, r3, #16
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c50:	7c1b      	ldrb	r3, [r3, #16]
 8001c52:	061b      	lsls	r3, r3, #24
 8001c54:	431a      	orrs	r2, r3
                 (event->data[11] << 32) | (event->data[12] << 40) | (event->data[13] << 48));
 8001c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c5a:	7c5b      	ldrb	r3, [r3, #17]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	2320      	movs	r3, #32
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
                (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 8001c64:	431a      	orrs	r2, r3
                 (event->data[11] << 32) | (event->data[12] << 40) | (event->data[13] << 48));
 8001c66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c6a:	7c9b      	ldrb	r3, [r3, #18]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	2328      	movs	r3, #40	; 0x28
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	431a      	orrs	r2, r3
 8001c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c7a:	7cdb      	ldrb	r3, [r3, #19]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	2330      	movs	r3, #48	; 0x30
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	461a      	mov	r2, r3
 8001c88:	ea4f 73e2 	mov.w	r3, r2, asr #31
            record->data_u64 =
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            parse_valid = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8001c98:	e055      	b.n	8001d46 <znp_cmd_cluster_in_read+0x83e>
        case ZCL_DATA_64BITS:
        case ZCL_BITMAP_64BITS:
        case ZCL_UNSIGNED_64BITS:
        case ZCL_SIGNED_64BITS:
            record->data_u64 =
                (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 8001c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c9e:	7b5b      	ldrb	r3, [r3, #13]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ca6:	7b9b      	ldrb	r3, [r3, #14]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	431a      	orrs	r2, r3
 8001cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cb0:	7bdb      	ldrb	r3, [r3, #15]
 8001cb2:	041b      	lsls	r3, r3, #16
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cba:	7c1b      	ldrb	r3, [r3, #16]
 8001cbc:	061b      	lsls	r3, r3, #24
 8001cbe:	431a      	orrs	r2, r3
                 (event->data[11] << 32) | (event->data[12] << 40) | (event->data[13] << 48) | (event->data[14] << 56));
 8001cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cc4:	7c5b      	ldrb	r3, [r3, #17]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	2320      	movs	r3, #32
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
                (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 8001cce:	431a      	orrs	r2, r3
                 (event->data[11] << 32) | (event->data[12] << 40) | (event->data[13] << 48) | (event->data[14] << 56));
 8001cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cd4:	7c9b      	ldrb	r3, [r3, #18]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	2328      	movs	r3, #40	; 0x28
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ce4:	7cdb      	ldrb	r3, [r3, #19]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	2330      	movs	r3, #48	; 0x30
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cf4:	7d1b      	ldrb	r3, [r3, #20]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	2338      	movs	r3, #56	; 0x38
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	ea4f 73e2 	mov.w	r3, r2, asr #31
            record->data_u64 =
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	e9c1 2302 	strd	r2, r3, [r1, #8]
            parse_valid = 1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8001d12:	e018      	b.n	8001d46 <znp_cmd_cluster_in_read+0x83e>
        case ZCL_DOUBLE_PRECISION:
            break;

        case ZCL_OCTET_STRING:
        case ZCL_CHARACTER_STRING:
            record->data_arr_len = MIN(ZNP_DATA_LEN_MAX, event->data[7]);
 8001d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d18:	7b5b      	ldrb	r3, [r3, #13]
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	bf28      	it	cs
 8001d1e:	2320      	movcs	r3, #32
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	721a      	strb	r2, [r3, #8]
            memcpy(record->data_arr, &event->data[8], record->data_arr_len);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f103 0008 	add.w	r0, r3, #8
 8001d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d30:	f103 010e 	add.w	r1, r3, #14
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7a1b      	ldrb	r3, [r3, #8]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f00b fc37 	bl	800d5ac <memcpy>
            parse_valid = 1;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8001d44:	bf00      	nop
        case ZCL_SECURITY_KEY_128BITS:
        case ZCL_UNKNOWN:
            break;
    }

    xSemaphoreGive(_znp_cmd_sem);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <znp_cmd_cluster_in_read+0x864>)
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f009 fa4c 	bl	800b1ec <xQueueGenericSend>

    // check
    if (parse_valid)
 8001d54:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <znp_cmd_cluster_in_read+0x858>
        return 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e001      	b.n	8001d64 <znp_cmd_cluster_in_read+0x85c>
    else
        return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	37a8      	adds	r7, #168	; 0xa8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200003f8 	.word	0x200003f8

08001d70 <znp_cmd_cluster_in_write>:

int znp_cmd_cluster_in_write(uint16_t address, uint16_t cluster, uint16_t attribute, zcl_cluster_record_t* record) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0ac      	sub	sp, #176	; 0xb0
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	4603      	mov	r3, r0
 8001d7a:	81fb      	strh	r3, [r7, #14]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	81bb      	strh	r3, [r7, #12]
 8001d80:	4613      	mov	r3, r2
 8001d82:	817b      	strh	r3, [r7, #10]
    // take semaphore
    if (xSemaphoreTake(_znp_cmd_sem, 5000) == pdFALSE)
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <znp_cmd_cluster_in_write+0x84>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f241 3188 	movw	r1, #5000	; 0x1388
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f009 fca3 	bl	800b6d8 <xQueueSemaphoreTake>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <znp_cmd_cluster_in_write+0x30>
        return -1;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	f000 be05 	b.w	80029aa <znp_cmd_cluster_in_write+0xc3a>

    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 8001da0:	89fb      	ldrh	r3, [r7, #14]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fe68 	bl	8002a78 <znp_if_dev_get>
 8001da8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

    // invalid handle?
    if (dev == NULL) {
 8001dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10a      	bne.n	8001dca <znp_cmd_cluster_in_write+0x5a>
        xSemaphoreGive(_znp_cmd_sem);
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <znp_cmd_cluster_in_write+0x84>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	2300      	movs	r3, #0
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f009 fa15 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	f000 bdf0 	b.w	80029aa <znp_cmd_cluster_in_write+0xc3a>
    }

    // sanity check if data is ok
    if (!znp_dev_has_in_cluster(dev, cluster)) {
 8001dca:	89bb      	ldrh	r3, [r7, #12]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001dd2:	f7ff fa0e 	bl	80011f2 <znp_dev_has_in_cluster>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10d      	bne.n	8001df8 <znp_cmd_cluster_in_write+0x88>
        xSemaphoreGive(_znp_cmd_sem);
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <znp_cmd_cluster_in_write+0x84>)
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	2300      	movs	r3, #0
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	f009 fa01 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	f000 bddc 	b.w	80029aa <znp_cmd_cluster_in_write+0xc3a>
 8001df2:	bf00      	nop
 8001df4:	200003f8 	.word	0x200003f8
    }

    // increase number
    _znp_cmd_sequence_num++;
 8001df8:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <znp_cmd_cluster_in_write+0x134>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <znp_cmd_cluster_in_write+0x134>)
 8001e02:	701a      	strb	r2, [r3, #0]

    // read a cluster
    DataRequestFormat_t data_req;
    data_req.DstAddr = dev->adr_short;
 8001e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	82bb      	strh	r3, [r7, #20]
    data_req.DstEndpoint = 0x01;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	75bb      	strb	r3, [r7, #22]
    data_req.SrcEndpoint = 0x01;
 8001e10:	2301      	movs	r3, #1
 8001e12:	75fb      	strb	r3, [r7, #23]
    data_req.ClusterID = cluster;
 8001e14:	89bb      	ldrh	r3, [r7, #12]
 8001e16:	833b      	strh	r3, [r7, #24]
    data_req.TransID = 0x05;
 8001e18:	2305      	movs	r3, #5
 8001e1a:	76bb      	strb	r3, [r7, #26]
    data_req.Options = 0x00;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	76fb      	strb	r3, [r7, #27]
    data_req.Radius = 0x07;
 8001e20:	2307      	movs	r3, #7
 8001e22:	773b      	strb	r3, [r7, #28]
    data_req.Len = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	777b      	strb	r3, [r7, #29]
    data_req.Data[data_req.Len++] = 0x00;                   // ZCL Header: frame control
 8001e28:	7f7b      	ldrb	r3, [r7, #29]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	777a      	strb	r2, [r7, #29]
 8001e30:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001e34:	4413      	add	r3, r2
 8001e36:	2200      	movs	r2, #0
 8001e38:	f803 2c92 	strb.w	r2, [r3, #-146]
    data_req.Data[data_req.Len++] = _znp_cmd_sequence_num;  // ZCL Header: transaction sequence num
 8001e3c:	7f7b      	ldrb	r3, [r7, #29]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	777a      	strb	r2, [r7, #29]
 8001e44:	4619      	mov	r1, r3
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <znp_cmd_cluster_in_write+0x134>)
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e4e:	440b      	add	r3, r1
 8001e50:	f803 2c92 	strb.w	r2, [r3, #-146]
    data_req.Data[data_req.Len++] = ZCL_CMD_WRITE_ATTR;     // ZCL Header: Command ID
 8001e54:	7f7b      	ldrb	r3, [r7, #29]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	777a      	strb	r2, [r7, #29]
 8001e5c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001e60:	4413      	add	r3, r2
 8001e62:	2202      	movs	r2, #2
 8001e64:	f803 2c92 	strb.w	r2, [r3, #-146]
    data_req.Data[data_req.Len++] = attribute & 0xFF;       // Data: Cluster 16bit low
 8001e68:	7f7b      	ldrb	r3, [r7, #29]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	777a      	strb	r2, [r7, #29]
 8001e70:	897a      	ldrh	r2, [r7, #10]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001e78:	440b      	add	r3, r1
 8001e7a:	f803 2c92 	strb.w	r2, [r3, #-146]
    data_req.Data[data_req.Len++] = attribute >> 8;         // Data: Cluster 16bit high
 8001e7e:	897b      	ldrh	r3, [r7, #10]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	7f7b      	ldrb	r3, [r7, #29]
 8001e86:	1c59      	adds	r1, r3, #1
 8001e88:	b2c9      	uxtb	r1, r1
 8001e8a:	7779      	strb	r1, [r7, #29]
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001e92:	440b      	add	r3, r1
 8001e94:	f803 2c92 	strb.w	r2, [r3, #-146]

    uint8_t parse_valid = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    // Data: parse type and data
    switch (record->type) {
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	e001      	b.n	8001ea8 <znp_cmd_cluster_in_write+0x138>
 8001ea4:	200003fc 	.word	0x200003fc
 8001ea8:	2bff      	cmp	r3, #255	; 0xff
 8001eaa:	f200 851a 	bhi.w	80028e2 <znp_cmd_cluster_in_write+0xb72>
 8001eae:	a201      	add	r2, pc, #4	; (adr r2, 8001eb4 <znp_cmd_cluster_in_write+0x144>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	080022b5 	.word	0x080022b5
 8001eb8:	080028e3 	.word	0x080028e3
 8001ebc:	080028e3 	.word	0x080028e3
 8001ec0:	080028e3 	.word	0x080028e3
 8001ec4:	080028e3 	.word	0x080028e3
 8001ec8:	080028e3 	.word	0x080028e3
 8001ecc:	080028e3 	.word	0x080028e3
 8001ed0:	080028e3 	.word	0x080028e3
 8001ed4:	080022b5 	.word	0x080022b5
 8001ed8:	080022ed 	.word	0x080022ed
 8001edc:	08002341 	.word	0x08002341
 8001ee0:	080023ad 	.word	0x080023ad
 8001ee4:	08002433 	.word	0x08002433
 8001ee8:	08002511 	.word	0x08002511
 8001eec:	08002615 	.word	0x08002615
 8001ef0:	0800273f 	.word	0x0800273f
 8001ef4:	080022b5 	.word	0x080022b5
 8001ef8:	080028e3 	.word	0x080028e3
 8001efc:	080028e3 	.word	0x080028e3
 8001f00:	080028e3 	.word	0x080028e3
 8001f04:	080028e3 	.word	0x080028e3
 8001f08:	080028e3 	.word	0x080028e3
 8001f0c:	080028e3 	.word	0x080028e3
 8001f10:	080028e3 	.word	0x080028e3
 8001f14:	080022b5 	.word	0x080022b5
 8001f18:	080022ed 	.word	0x080022ed
 8001f1c:	08002341 	.word	0x08002341
 8001f20:	080023ad 	.word	0x080023ad
 8001f24:	08002433 	.word	0x08002433
 8001f28:	08002511 	.word	0x08002511
 8001f2c:	08002615 	.word	0x08002615
 8001f30:	0800273f 	.word	0x0800273f
 8001f34:	080022b5 	.word	0x080022b5
 8001f38:	080022ed 	.word	0x080022ed
 8001f3c:	08002341 	.word	0x08002341
 8001f40:	080023ad 	.word	0x080023ad
 8001f44:	08002433 	.word	0x08002433
 8001f48:	08002511 	.word	0x08002511
 8001f4c:	08002615 	.word	0x08002615
 8001f50:	0800273f 	.word	0x0800273f
 8001f54:	080022b5 	.word	0x080022b5
 8001f58:	080022ed 	.word	0x080022ed
 8001f5c:	080028e3 	.word	0x080028e3
 8001f60:	080023ad 	.word	0x080023ad
 8001f64:	080028e3 	.word	0x080028e3
 8001f68:	080028e3 	.word	0x080028e3
 8001f6c:	080028e3 	.word	0x080028e3
 8001f70:	0800273f 	.word	0x0800273f
 8001f74:	080022b5 	.word	0x080022b5
 8001f78:	080022ed 	.word	0x080022ed
 8001f7c:	080028e3 	.word	0x080028e3
 8001f80:	080028e3 	.word	0x080028e3
 8001f84:	080028e3 	.word	0x080028e3
 8001f88:	080028e3 	.word	0x080028e3
 8001f8c:	080028e3 	.word	0x080028e3
 8001f90:	080028e3 	.word	0x080028e3
 8001f94:	080028e3 	.word	0x080028e3
 8001f98:	080028e3 	.word	0x080028e3
 8001f9c:	080028e3 	.word	0x080028e3
 8001fa0:	080028e3 	.word	0x080028e3
 8001fa4:	080028e3 	.word	0x080028e3
 8001fa8:	080028e3 	.word	0x080028e3
 8001fac:	080028e3 	.word	0x080028e3
 8001fb0:	080028e3 	.word	0x080028e3
 8001fb4:	080028e3 	.word	0x080028e3
 8001fb8:	0800288f 	.word	0x0800288f
 8001fbc:	0800288f 	.word	0x0800288f
 8001fc0:	080028e3 	.word	0x080028e3
 8001fc4:	080028e3 	.word	0x080028e3
 8001fc8:	080028e3 	.word	0x080028e3
 8001fcc:	080028e3 	.word	0x080028e3
 8001fd0:	080028e3 	.word	0x080028e3
 8001fd4:	080028e3 	.word	0x080028e3
 8001fd8:	080028e3 	.word	0x080028e3
 8001fdc:	080028e3 	.word	0x080028e3
 8001fe0:	080028e3 	.word	0x080028e3
 8001fe4:	080028e3 	.word	0x080028e3
 8001fe8:	080028e3 	.word	0x080028e3
 8001fec:	080028e3 	.word	0x080028e3
 8001ff0:	080028e3 	.word	0x080028e3
 8001ff4:	080028e3 	.word	0x080028e3
 8001ff8:	080028e3 	.word	0x080028e3
 8001ffc:	080028e3 	.word	0x080028e3
 8002000:	080028e3 	.word	0x080028e3
 8002004:	080028e3 	.word	0x080028e3
 8002008:	080028e3 	.word	0x080028e3
 800200c:	080028e3 	.word	0x080028e3
 8002010:	080028e3 	.word	0x080028e3
 8002014:	080028e3 	.word	0x080028e3
 8002018:	080028e3 	.word	0x080028e3
 800201c:	080028e3 	.word	0x080028e3
 8002020:	080028e3 	.word	0x080028e3
 8002024:	080028e3 	.word	0x080028e3
 8002028:	080028e3 	.word	0x080028e3
 800202c:	080028e3 	.word	0x080028e3
 8002030:	080028e3 	.word	0x080028e3
 8002034:	080028e3 	.word	0x080028e3
 8002038:	080028e3 	.word	0x080028e3
 800203c:	080028e3 	.word	0x080028e3
 8002040:	080028e3 	.word	0x080028e3
 8002044:	080028e3 	.word	0x080028e3
 8002048:	080028e3 	.word	0x080028e3
 800204c:	080028e3 	.word	0x080028e3
 8002050:	080028e3 	.word	0x080028e3
 8002054:	080028e3 	.word	0x080028e3
 8002058:	080028e3 	.word	0x080028e3
 800205c:	080028e3 	.word	0x080028e3
 8002060:	080028e3 	.word	0x080028e3
 8002064:	080028e3 	.word	0x080028e3
 8002068:	080028e3 	.word	0x080028e3
 800206c:	080028e3 	.word	0x080028e3
 8002070:	080028e3 	.word	0x080028e3
 8002074:	080028e3 	.word	0x080028e3
 8002078:	080028e3 	.word	0x080028e3
 800207c:	080028e3 	.word	0x080028e3
 8002080:	080028e3 	.word	0x080028e3
 8002084:	080028e3 	.word	0x080028e3
 8002088:	080028e3 	.word	0x080028e3
 800208c:	080028e3 	.word	0x080028e3
 8002090:	080028e3 	.word	0x080028e3
 8002094:	080028e3 	.word	0x080028e3
 8002098:	080028e3 	.word	0x080028e3
 800209c:	080028e3 	.word	0x080028e3
 80020a0:	080028e3 	.word	0x080028e3
 80020a4:	080028e3 	.word	0x080028e3
 80020a8:	080028e3 	.word	0x080028e3
 80020ac:	080028e3 	.word	0x080028e3
 80020b0:	080028e3 	.word	0x080028e3
 80020b4:	080028e3 	.word	0x080028e3
 80020b8:	080028e3 	.word	0x080028e3
 80020bc:	080028e3 	.word	0x080028e3
 80020c0:	080028e3 	.word	0x080028e3
 80020c4:	080028e3 	.word	0x080028e3
 80020c8:	080028e3 	.word	0x080028e3
 80020cc:	080028e3 	.word	0x080028e3
 80020d0:	080028e3 	.word	0x080028e3
 80020d4:	080028e3 	.word	0x080028e3
 80020d8:	080028e3 	.word	0x080028e3
 80020dc:	080028e3 	.word	0x080028e3
 80020e0:	080028e3 	.word	0x080028e3
 80020e4:	080028e3 	.word	0x080028e3
 80020e8:	080028e3 	.word	0x080028e3
 80020ec:	080028e3 	.word	0x080028e3
 80020f0:	080028e3 	.word	0x080028e3
 80020f4:	080028e3 	.word	0x080028e3
 80020f8:	080028e3 	.word	0x080028e3
 80020fc:	080028e3 	.word	0x080028e3
 8002100:	080028e3 	.word	0x080028e3
 8002104:	080028e3 	.word	0x080028e3
 8002108:	080028e3 	.word	0x080028e3
 800210c:	080028e3 	.word	0x080028e3
 8002110:	080028e3 	.word	0x080028e3
 8002114:	080028e3 	.word	0x080028e3
 8002118:	080028e3 	.word	0x080028e3
 800211c:	080028e3 	.word	0x080028e3
 8002120:	080028e3 	.word	0x080028e3
 8002124:	080028e3 	.word	0x080028e3
 8002128:	080028e3 	.word	0x080028e3
 800212c:	080028e3 	.word	0x080028e3
 8002130:	080028e3 	.word	0x080028e3
 8002134:	080028e3 	.word	0x080028e3
 8002138:	080028e3 	.word	0x080028e3
 800213c:	080028e3 	.word	0x080028e3
 8002140:	080028e3 	.word	0x080028e3
 8002144:	080028e3 	.word	0x080028e3
 8002148:	080028e3 	.word	0x080028e3
 800214c:	080028e3 	.word	0x080028e3
 8002150:	080028e3 	.word	0x080028e3
 8002154:	080028e3 	.word	0x080028e3
 8002158:	080028e3 	.word	0x080028e3
 800215c:	080028e3 	.word	0x080028e3
 8002160:	080028e3 	.word	0x080028e3
 8002164:	080028e3 	.word	0x080028e3
 8002168:	080028e3 	.word	0x080028e3
 800216c:	080028e3 	.word	0x080028e3
 8002170:	080028e3 	.word	0x080028e3
 8002174:	080028e3 	.word	0x080028e3
 8002178:	080028e3 	.word	0x080028e3
 800217c:	080028e3 	.word	0x080028e3
 8002180:	080028e3 	.word	0x080028e3
 8002184:	080028e3 	.word	0x080028e3
 8002188:	080028e3 	.word	0x080028e3
 800218c:	080028e3 	.word	0x080028e3
 8002190:	080028e3 	.word	0x080028e3
 8002194:	080028e3 	.word	0x080028e3
 8002198:	080028e3 	.word	0x080028e3
 800219c:	080028e3 	.word	0x080028e3
 80021a0:	080028e3 	.word	0x080028e3
 80021a4:	080028e3 	.word	0x080028e3
 80021a8:	080028e3 	.word	0x080028e3
 80021ac:	080028e3 	.word	0x080028e3
 80021b0:	080028e3 	.word	0x080028e3
 80021b4:	080028e3 	.word	0x080028e3
 80021b8:	080028e3 	.word	0x080028e3
 80021bc:	080028e3 	.word	0x080028e3
 80021c0:	080028e3 	.word	0x080028e3
 80021c4:	080028e3 	.word	0x080028e3
 80021c8:	080028e3 	.word	0x080028e3
 80021cc:	080028e3 	.word	0x080028e3
 80021d0:	080028e3 	.word	0x080028e3
 80021d4:	080028e3 	.word	0x080028e3
 80021d8:	080028e3 	.word	0x080028e3
 80021dc:	080028e3 	.word	0x080028e3
 80021e0:	080028e3 	.word	0x080028e3
 80021e4:	080028e3 	.word	0x080028e3
 80021e8:	080028e3 	.word	0x080028e3
 80021ec:	080028e3 	.word	0x080028e3
 80021f0:	080028e3 	.word	0x080028e3
 80021f4:	080028e3 	.word	0x080028e3
 80021f8:	080028e3 	.word	0x080028e3
 80021fc:	080028e3 	.word	0x080028e3
 8002200:	080028e3 	.word	0x080028e3
 8002204:	080028e3 	.word	0x080028e3
 8002208:	080028e3 	.word	0x080028e3
 800220c:	080028e3 	.word	0x080028e3
 8002210:	080028e3 	.word	0x080028e3
 8002214:	080028e3 	.word	0x080028e3
 8002218:	080028e3 	.word	0x080028e3
 800221c:	080028e3 	.word	0x080028e3
 8002220:	080028e3 	.word	0x080028e3
 8002224:	080028e3 	.word	0x080028e3
 8002228:	080028e3 	.word	0x080028e3
 800222c:	080028e3 	.word	0x080028e3
 8002230:	080028e3 	.word	0x080028e3
 8002234:	080028e3 	.word	0x080028e3
 8002238:	080028e3 	.word	0x080028e3
 800223c:	080028e3 	.word	0x080028e3
 8002240:	080028e3 	.word	0x080028e3
 8002244:	080028e3 	.word	0x080028e3
 8002248:	080028e3 	.word	0x080028e3
 800224c:	080028e3 	.word	0x080028e3
 8002250:	080028e3 	.word	0x080028e3
 8002254:	080028e3 	.word	0x080028e3
 8002258:	080028e3 	.word	0x080028e3
 800225c:	080028e3 	.word	0x080028e3
 8002260:	080028e3 	.word	0x080028e3
 8002264:	080028e3 	.word	0x080028e3
 8002268:	080028e3 	.word	0x080028e3
 800226c:	080028e3 	.word	0x080028e3
 8002270:	080028e3 	.word	0x080028e3
 8002274:	080028e3 	.word	0x080028e3
 8002278:	080028e3 	.word	0x080028e3
 800227c:	080028e3 	.word	0x080028e3
 8002280:	080028e3 	.word	0x080028e3
 8002284:	080028e3 	.word	0x080028e3
 8002288:	080028e3 	.word	0x080028e3
 800228c:	080028e3 	.word	0x080028e3
 8002290:	080028e3 	.word	0x080028e3
 8002294:	080028e3 	.word	0x080028e3
 8002298:	080028e3 	.word	0x080028e3
 800229c:	080028e3 	.word	0x080028e3
 80022a0:	080028e3 	.word	0x080028e3
 80022a4:	080028e3 	.word	0x080028e3
 80022a8:	080028e3 	.word	0x080028e3
 80022ac:	080028e3 	.word	0x080028e3
 80022b0:	080028e3 	.word	0x080028e3
        case ZCL_BITMAP_8BITS:
        case ZCL_UNSIGNED_8BITS:
        case ZCL_ENUMERATION_8BITS:
        case ZCL_BOOLEAN_8BITS:
        case ZCL_SIGNED_8BITS:
            data_req.Data[data_req.Len++] = record->type;
 80022b4:	7f7b      	ldrb	r3, [r7, #29]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	777a      	strb	r2, [r7, #29]
 80022bc:	4619      	mov	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022c6:	440b      	add	r3, r1
 80022c8:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u8;
 80022cc:	7f7b      	ldrb	r3, [r7, #29]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	777a      	strb	r2, [r7, #29]
 80022d4:	4619      	mov	r1, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7a1a      	ldrb	r2, [r3, #8]
 80022da:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022de:	440b      	add	r3, r1
 80022e0:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 80022ea:	e2fa      	b.n	80028e2 <znp_cmd_cluster_in_write+0xb72>
        case ZCL_DATA_16BITS:
        case ZCL_BITMAP_16BITS:
        case ZCL_UNSIGNED_16BITS:
        case ZCL_ENUMERATION_16BITS:
        case ZCL_SIGNED_16BITS:
            data_req.Data[data_req.Len++] = record->type;
 80022ec:	7f7b      	ldrb	r3, [r7, #29]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	777a      	strb	r2, [r7, #29]
 80022f4:	4619      	mov	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022fe:	440b      	add	r3, r1
 8002300:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u16 & 0xFF;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	891a      	ldrh	r2, [r3, #8]
 8002308:	7f7b      	ldrb	r3, [r7, #29]
 800230a:	1c59      	adds	r1, r3, #1
 800230c:	b2c9      	uxtb	r1, r1
 800230e:	7779      	strb	r1, [r7, #29]
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002316:	440b      	add	r3, r1
 8002318:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u16 >> 8) & 0xFF;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	891b      	ldrh	r3, [r3, #8]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	b29a      	uxth	r2, r3
 8002324:	7f7b      	ldrb	r3, [r7, #29]
 8002326:	1c59      	adds	r1, r3, #1
 8002328:	b2c9      	uxtb	r1, r1
 800232a:	7779      	strb	r1, [r7, #29]
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002332:	440b      	add	r3, r1
 8002334:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002338:	2301      	movs	r3, #1
 800233a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 800233e:	e2d0      	b.n	80028e2 <znp_cmd_cluster_in_write+0xb72>

        case ZCL_DATA_24BITS:
        case ZCL_BITMAP_24BITS:
        case ZCL_UNSIGNED_24BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002340:	7f7b      	ldrb	r3, [r7, #29]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	777a      	strb	r2, [r7, #29]
 8002348:	4619      	mov	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002352:	440b      	add	r3, r1
 8002354:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u32 & 0xFF;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	7f7b      	ldrb	r3, [r7, #29]
 800235e:	1c59      	adds	r1, r3, #1
 8002360:	b2c9      	uxtb	r1, r1
 8002362:	7779      	strb	r1, [r7, #29]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800236a:	440b      	add	r3, r1
 800236c:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u32 >> 8) & 0xFF;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	0a1a      	lsrs	r2, r3, #8
 8002376:	7f7b      	ldrb	r3, [r7, #29]
 8002378:	1c59      	adds	r1, r3, #1
 800237a:	b2c9      	uxtb	r1, r1
 800237c:	7779      	strb	r1, [r7, #29]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002384:	440b      	add	r3, r1
 8002386:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u32 >> 16) & 0xFF;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0c1a      	lsrs	r2, r3, #16
 8002390:	7f7b      	ldrb	r3, [r7, #29]
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	b2c9      	uxtb	r1, r1
 8002396:	7779      	strb	r1, [r7, #29]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800239e:	440b      	add	r3, r1
 80023a0:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 80023aa:	e29a      	b.n	80028e2 <znp_cmd_cluster_in_write+0xb72>

        case ZCL_DATA_32BITS:
        case ZCL_BITMAP_32BITS:
        case ZCL_UNSIGNED_32BITS:
        case ZCL_SIGNED_32BITS:
            data_req.Data[data_req.Len++] = record->type;
 80023ac:	7f7b      	ldrb	r3, [r7, #29]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	777a      	strb	r2, [r7, #29]
 80023b4:	4619      	mov	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023be:	440b      	add	r3, r1
 80023c0:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u32 & 0xFF;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	7f7b      	ldrb	r3, [r7, #29]
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	b2c9      	uxtb	r1, r1
 80023ce:	7779      	strb	r1, [r7, #29]
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80023d6:	440b      	add	r3, r1
 80023d8:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u32 >> 8) & 0xFF;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	0a1a      	lsrs	r2, r3, #8
 80023e2:	7f7b      	ldrb	r3, [r7, #29]
 80023e4:	1c59      	adds	r1, r3, #1
 80023e6:	b2c9      	uxtb	r1, r1
 80023e8:	7779      	strb	r1, [r7, #29]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80023f0:	440b      	add	r3, r1
 80023f2:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u32 >> 16) & 0xFF;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0c1a      	lsrs	r2, r3, #16
 80023fc:	7f7b      	ldrb	r3, [r7, #29]
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	b2c9      	uxtb	r1, r1
 8002402:	7779      	strb	r1, [r7, #29]
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800240a:	440b      	add	r3, r1
 800240c:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u32 >> 24) & 0xFF;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	0e1a      	lsrs	r2, r3, #24
 8002416:	7f7b      	ldrb	r3, [r7, #29]
 8002418:	1c59      	adds	r1, r3, #1
 800241a:	b2c9      	uxtb	r1, r1
 800241c:	7779      	strb	r1, [r7, #29]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002424:	440b      	add	r3, r1
 8002426:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 8002430:	e257      	b.n	80028e2 <znp_cmd_cluster_in_write+0xb72>

        case ZCL_DATA_40BITS:
        case ZCL_BITMAP_40BITS:
        case ZCL_UNSIGNED_40BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002432:	7f7b      	ldrb	r3, [r7, #29]
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	777a      	strb	r2, [r7, #29]
 800243a:	4619      	mov	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002444:	440b      	add	r3, r1
 8002446:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u64 & 0xFF;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002450:	7f79      	ldrb	r1, [r7, #29]
 8002452:	1c48      	adds	r0, r1, #1
 8002454:	b2c0      	uxtb	r0, r0
 8002456:	7778      	strb	r0, [r7, #29]
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800245e:	440b      	add	r3, r1
 8002460:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 8) & 0xFF;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	0a02      	lsrs	r2, r0, #8
 8002474:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002478:	0a0b      	lsrs	r3, r1, #8
 800247a:	7f79      	ldrb	r1, [r7, #29]
 800247c:	1c48      	adds	r0, r1, #1
 800247e:	b2c0      	uxtb	r0, r0
 8002480:	7778      	strb	r0, [r7, #29]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002488:	440b      	add	r3, r1
 800248a:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 16) & 0xFF;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	0c02      	lsrs	r2, r0, #16
 800249e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024a2:	0c0b      	lsrs	r3, r1, #16
 80024a4:	7f79      	ldrb	r1, [r7, #29]
 80024a6:	1c48      	adds	r0, r1, #1
 80024a8:	b2c0      	uxtb	r0, r0
 80024aa:	7778      	strb	r0, [r7, #29]
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024b2:	440b      	add	r3, r1
 80024b4:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 24) & 0xFF;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	0e02      	lsrs	r2, r0, #24
 80024c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024cc:	0e0b      	lsrs	r3, r1, #24
 80024ce:	7f79      	ldrb	r1, [r7, #29]
 80024d0:	1c48      	adds	r0, r1, #1
 80024d2:	b2c0      	uxtb	r0, r0
 80024d4:	7778      	strb	r0, [r7, #29]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024dc:	440b      	add	r3, r1
 80024de:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 32) & 0xFF;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	000a      	movs	r2, r1
 80024f2:	2300      	movs	r3, #0
 80024f4:	7f79      	ldrb	r1, [r7, #29]
 80024f6:	1c48      	adds	r0, r1, #1
 80024f8:	b2c0      	uxtb	r0, r0
 80024fa:	7778      	strb	r0, [r7, #29]
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002502:	440b      	add	r3, r1
 8002504:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002508:	2301      	movs	r3, #1
 800250a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 800250e:	e1e8      	b.n	80028e2 <znp_cmd_cluster_in_write+0xb72>
            break;

        case ZCL_DATA_48BITS:
        case ZCL_BITMAP_48BITS:
        case ZCL_UNSIGNED_48BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002510:	7f7b      	ldrb	r3, [r7, #29]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	777a      	strb	r2, [r7, #29]
 8002518:	4619      	mov	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002522:	440b      	add	r3, r1
 8002524:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u64 & 0xFF;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800252e:	7f79      	ldrb	r1, [r7, #29]
 8002530:	1c48      	adds	r0, r1, #1
 8002532:	b2c0      	uxtb	r0, r0
 8002534:	7778      	strb	r0, [r7, #29]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800253c:	440b      	add	r3, r1
 800253e:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 8) & 0xFF;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	0a02      	lsrs	r2, r0, #8
 8002552:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002556:	0a0b      	lsrs	r3, r1, #8
 8002558:	7f79      	ldrb	r1, [r7, #29]
 800255a:	1c48      	adds	r0, r1, #1
 800255c:	b2c0      	uxtb	r0, r0
 800255e:	7778      	strb	r0, [r7, #29]
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002566:	440b      	add	r3, r1
 8002568:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 16) & 0xFF;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	0c02      	lsrs	r2, r0, #16
 800257c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002580:	0c0b      	lsrs	r3, r1, #16
 8002582:	7f79      	ldrb	r1, [r7, #29]
 8002584:	1c48      	adds	r0, r1, #1
 8002586:	b2c0      	uxtb	r0, r0
 8002588:	7778      	strb	r0, [r7, #29]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002590:	440b      	add	r3, r1
 8002592:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 24) & 0xFF;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	0e02      	lsrs	r2, r0, #24
 80025a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025aa:	0e0b      	lsrs	r3, r1, #24
 80025ac:	7f79      	ldrb	r1, [r7, #29]
 80025ae:	1c48      	adds	r0, r1, #1
 80025b0:	b2c0      	uxtb	r0, r0
 80025b2:	7778      	strb	r0, [r7, #29]
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025ba:	440b      	add	r3, r1
 80025bc:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 32) & 0xFF;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	000a      	movs	r2, r1
 80025d0:	2300      	movs	r3, #0
 80025d2:	7f79      	ldrb	r1, [r7, #29]
 80025d4:	1c48      	adds	r0, r1, #1
 80025d6:	b2c0      	uxtb	r0, r0
 80025d8:	7778      	strb	r0, [r7, #29]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025e0:	440b      	add	r3, r1
 80025e2:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 40) & 0xFF;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	0a0a      	lsrs	r2, r1, #8
 80025f6:	2300      	movs	r3, #0
 80025f8:	7f79      	ldrb	r1, [r7, #29]
 80025fa:	1c48      	adds	r0, r1, #1
 80025fc:	b2c0      	uxtb	r0, r0
 80025fe:	7778      	strb	r0, [r7, #29]
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002606:	440b      	add	r3, r1
 8002608:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 8002612:	e166      	b.n	80028e2 <znp_cmd_cluster_in_write+0xb72>
            break;

        case ZCL_DATA_56BITS:
        case ZCL_BITMAP_56BITS:
        case ZCL_UNSIGNED_56BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002614:	7f7b      	ldrb	r3, [r7, #29]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	777a      	strb	r2, [r7, #29]
 800261c:	4619      	mov	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002626:	440b      	add	r3, r1
 8002628:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u64 & 0xFF;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002632:	7f79      	ldrb	r1, [r7, #29]
 8002634:	1c48      	adds	r0, r1, #1
 8002636:	b2c0      	uxtb	r0, r0
 8002638:	7778      	strb	r0, [r7, #29]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002640:	440b      	add	r3, r1
 8002642:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 8) & 0xFF;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	0a02      	lsrs	r2, r0, #8
 8002656:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800265a:	0a0b      	lsrs	r3, r1, #8
 800265c:	7f79      	ldrb	r1, [r7, #29]
 800265e:	1c48      	adds	r0, r1, #1
 8002660:	b2c0      	uxtb	r0, r0
 8002662:	7778      	strb	r0, [r7, #29]
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800266a:	440b      	add	r3, r1
 800266c:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 16) & 0xFF;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	0c02      	lsrs	r2, r0, #16
 8002680:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002684:	0c0b      	lsrs	r3, r1, #16
 8002686:	7f79      	ldrb	r1, [r7, #29]
 8002688:	1c48      	adds	r0, r1, #1
 800268a:	b2c0      	uxtb	r0, r0
 800268c:	7778      	strb	r0, [r7, #29]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002694:	440b      	add	r3, r1
 8002696:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 24) & 0xFF;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	0e02      	lsrs	r2, r0, #24
 80026aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026ae:	0e0b      	lsrs	r3, r1, #24
 80026b0:	7f79      	ldrb	r1, [r7, #29]
 80026b2:	1c48      	adds	r0, r1, #1
 80026b4:	b2c0      	uxtb	r0, r0
 80026b6:	7778      	strb	r0, [r7, #29]
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026be:	440b      	add	r3, r1
 80026c0:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 32) & 0xFF;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	000a      	movs	r2, r1
 80026d4:	2300      	movs	r3, #0
 80026d6:	7f79      	ldrb	r1, [r7, #29]
 80026d8:	1c48      	adds	r0, r1, #1
 80026da:	b2c0      	uxtb	r0, r0
 80026dc:	7778      	strb	r0, [r7, #29]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026e4:	440b      	add	r3, r1
 80026e6:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 40) & 0xFF;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	0a0a      	lsrs	r2, r1, #8
 80026fa:	2300      	movs	r3, #0
 80026fc:	7f79      	ldrb	r1, [r7, #29]
 80026fe:	1c48      	adds	r0, r1, #1
 8002700:	b2c0      	uxtb	r0, r0
 8002702:	7778      	strb	r0, [r7, #29]
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800270a:	440b      	add	r3, r1
 800270c:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 48) & 0xFF;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	0c0a      	lsrs	r2, r1, #16
 8002720:	2300      	movs	r3, #0
 8002722:	7f79      	ldrb	r1, [r7, #29]
 8002724:	1c48      	adds	r0, r1, #1
 8002726:	b2c0      	uxtb	r0, r0
 8002728:	7778      	strb	r0, [r7, #29]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002730:	440b      	add	r3, r1
 8002732:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 800273c:	e0d1      	b.n	80028e2 <znp_cmd_cluster_in_write+0xb72>

        case ZCL_DATA_64BITS:
        case ZCL_BITMAP_64BITS:
        case ZCL_UNSIGNED_64BITS:
        case ZCL_SIGNED_64BITS:
            data_req.Data[data_req.Len++] = record->type;
 800273e:	7f7b      	ldrb	r3, [r7, #29]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	777a      	strb	r2, [r7, #29]
 8002746:	4619      	mov	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002750:	440b      	add	r3, r1
 8002752:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u64 & 0xFF;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800275c:	7f79      	ldrb	r1, [r7, #29]
 800275e:	1c48      	adds	r0, r1, #1
 8002760:	b2c0      	uxtb	r0, r0
 8002762:	7778      	strb	r0, [r7, #29]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800276a:	440b      	add	r3, r1
 800276c:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 8) & 0xFF;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	0a02      	lsrs	r2, r0, #8
 8002780:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002784:	0a0b      	lsrs	r3, r1, #8
 8002786:	7f79      	ldrb	r1, [r7, #29]
 8002788:	1c48      	adds	r0, r1, #1
 800278a:	b2c0      	uxtb	r0, r0
 800278c:	7778      	strb	r0, [r7, #29]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002794:	440b      	add	r3, r1
 8002796:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 16) & 0xFF;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	0c02      	lsrs	r2, r0, #16
 80027aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027ae:	0c0b      	lsrs	r3, r1, #16
 80027b0:	7f79      	ldrb	r1, [r7, #29]
 80027b2:	1c48      	adds	r0, r1, #1
 80027b4:	b2c0      	uxtb	r0, r0
 80027b6:	7778      	strb	r0, [r7, #29]
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027be:	440b      	add	r3, r1
 80027c0:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 24) & 0xFF;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	0e02      	lsrs	r2, r0, #24
 80027d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027d8:	0e0b      	lsrs	r3, r1, #24
 80027da:	7f79      	ldrb	r1, [r7, #29]
 80027dc:	1c48      	adds	r0, r1, #1
 80027de:	b2c0      	uxtb	r0, r0
 80027e0:	7778      	strb	r0, [r7, #29]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027e8:	440b      	add	r3, r1
 80027ea:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 32) & 0xFF;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	000a      	movs	r2, r1
 80027fe:	2300      	movs	r3, #0
 8002800:	7f79      	ldrb	r1, [r7, #29]
 8002802:	1c48      	adds	r0, r1, #1
 8002804:	b2c0      	uxtb	r0, r0
 8002806:	7778      	strb	r0, [r7, #29]
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800280e:	440b      	add	r3, r1
 8002810:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 40) & 0xFF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	0a0a      	lsrs	r2, r1, #8
 8002824:	2300      	movs	r3, #0
 8002826:	7f79      	ldrb	r1, [r7, #29]
 8002828:	1c48      	adds	r0, r1, #1
 800282a:	b2c0      	uxtb	r0, r0
 800282c:	7778      	strb	r0, [r7, #29]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002834:	440b      	add	r3, r1
 8002836:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 48) & 0xFF;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	0c0a      	lsrs	r2, r1, #16
 800284a:	2300      	movs	r3, #0
 800284c:	7f79      	ldrb	r1, [r7, #29]
 800284e:	1c48      	adds	r0, r1, #1
 8002850:	b2c0      	uxtb	r0, r0
 8002852:	7778      	strb	r0, [r7, #29]
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800285a:	440b      	add	r3, r1
 800285c:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 56) & 0xFF;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	0e0a      	lsrs	r2, r1, #24
 8002870:	2300      	movs	r3, #0
 8002872:	7f79      	ldrb	r1, [r7, #29]
 8002874:	1c48      	adds	r0, r1, #1
 8002876:	b2c0      	uxtb	r0, r0
 8002878:	7778      	strb	r0, [r7, #29]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002880:	440b      	add	r3, r1
 8002882:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 800288c:	e029      	b.n	80028e2 <znp_cmd_cluster_in_write+0xb72>
        case ZCL_DOUBLE_PRECISION:
            break;

        case ZCL_OCTET_STRING:
        case ZCL_CHARACTER_STRING:
            data_req.Data[data_req.Len++] = record->type;
 800288e:	7f7b      	ldrb	r3, [r7, #29]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	777a      	strb	r2, [r7, #29]
 8002896:	4619      	mov	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80028a0:	440b      	add	r3, r1
 80028a2:	f803 2c92 	strb.w	r2, [r3, #-146]
            uint8_t len = MIN(record->data_arr_len, sizeof(data_req.Data) - 6);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7a1b      	ldrb	r3, [r3, #8]
 80028aa:	2b7a      	cmp	r3, #122	; 0x7a
 80028ac:	bf28      	it	cs
 80028ae:	237a      	movcs	r3, #122	; 0x7a
 80028b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            memcpy(&data_req.Data[data_req.Len], record->data_arr, len);
 80028b4:	7f7b      	ldrb	r3, [r7, #29]
 80028b6:	f107 0214 	add.w	r2, r7, #20
 80028ba:	3308      	adds	r3, #8
 80028bc:	4413      	add	r3, r2
 80028be:	1c98      	adds	r0, r3, #2
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3308      	adds	r3, #8
 80028c4:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80028c8:	4619      	mov	r1, r3
 80028ca:	f00a fe6f 	bl	800d5ac <memcpy>
            data_req.Len += len;
 80028ce:	7f7a      	ldrb	r2, [r7, #29]
 80028d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028d4:	4413      	add	r3, r2
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	777b      	strb	r3, [r7, #29]
            parse_valid = 1;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 80028e0:	bf00      	nop
        case ZCL_UNKNOWN:
            break;
    }

    // unsupported data given?
    if (!parse_valid)
 80028e2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <znp_cmd_cluster_in_write+0xb80>
        return -1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	e05c      	b.n	80029aa <znp_cmd_cluster_in_write+0xc3a>

    // do the request
    afDataRequest(&data_req);
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 f9f0 	bl	8002cda <afDataRequest>

    // wait for response
    event_result_t* event = znp_if_wait_for_event(EVT_RSP_DATA_REQUEST, dev->adr_short, 30000);
 80028fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	f247 5230 	movw	r2, #30000	; 0x7530
 8002904:	4619      	mov	r1, r3
 8002906:	2005      	movs	r0, #5
 8002908:	f000 f866 	bl	80029d8 <znp_if_wait_for_event>
 800290c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (event == NULL) {
 8002910:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <znp_cmd_cluster_in_write+0xbbc>
        xSemaphoreGive(_znp_cmd_sem);
 8002918:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <znp_cmd_cluster_in_write+0xc44>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	2300      	movs	r3, #0
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	f008 fc63 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e03e      	b.n	80029aa <znp_cmd_cluster_in_write+0xc3a>
    }

    // check response length
    if (event->data_len < 4) {
 800292c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002930:	795b      	ldrb	r3, [r3, #5]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d809      	bhi.n	800294a <znp_cmd_cluster_in_write+0xbda>
        xSemaphoreGive(_znp_cmd_sem);
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <znp_cmd_cluster_in_write+0xc44>)
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	2300      	movs	r3, #0
 800293c:	2200      	movs	r2, #0
 800293e:	2100      	movs	r1, #0
 8002940:	f008 fc54 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8002944:	f04f 33ff 	mov.w	r3, #4294967295
 8002948:	e02f      	b.n	80029aa <znp_cmd_cluster_in_write+0xc3a>
    }

    // ZCL Header: parse
    if (event->data[1] != _znp_cmd_sequence_num) {
 800294a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800294e:	79da      	ldrb	r2, [r3, #7]
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <znp_cmd_cluster_in_write+0xc48>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d009      	beq.n	800296c <znp_cmd_cluster_in_write+0xbfc>
        xSemaphoreGive(_znp_cmd_sem);
 8002958:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <znp_cmd_cluster_in_write+0xc44>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	2300      	movs	r3, #0
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	f008 fc43 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e01e      	b.n	80029aa <znp_cmd_cluster_in_write+0xc3a>
    }

    // ZCL Header: parse
    if (event->data[2] != ZCL_CMD_WRITE_ATTR_RSP) {
 800296c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002970:	7a1b      	ldrb	r3, [r3, #8]
 8002972:	2b04      	cmp	r3, #4
 8002974:	d009      	beq.n	800298a <znp_cmd_cluster_in_write+0xc1a>
        xSemaphoreGive(_znp_cmd_sem);
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <znp_cmd_cluster_in_write+0xc44>)
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	f008 fc34 	bl	800b1ec <xQueueGenericSend>
        return -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	e00f      	b.n	80029aa <znp_cmd_cluster_in_write+0xc3a>
    }

    xSemaphoreGive(_znp_cmd_sem);
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <znp_cmd_cluster_in_write+0xc44>)
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	2300      	movs	r3, #0
 8002990:	2200      	movs	r2, #0
 8002992:	2100      	movs	r1, #0
 8002994:	f008 fc2a 	bl	800b1ec <xQueueGenericSend>

    // result was ok?
    if (event->data[3] == 0x00)
 8002998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800299c:	7a5b      	ldrb	r3, [r3, #9]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <znp_cmd_cluster_in_write+0xc36>
        return 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e001      	b.n	80029aa <znp_cmd_cluster_in_write+0xc3a>
    else
        return -1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
 80029aa:	4618      	mov	r0, r3
 80029ac:	37b0      	adds	r7, #176	; 0xb0
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200003f8 	.word	0x200003f8
 80029b8:	200003fc 	.word	0x200003fc

080029bc <znp_if_init>:
#include "queue.h"

static znp_device_t _dev_mem[DEVICE_MEM_MAX];
static QueueHandle_t _znp_ev_queue;

void znp_if_init(void) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
    _znp_ev_queue = xQueueCreate(EV_QUEUE_SIZE, sizeof(event_result_t));
 80029c0:	2200      	movs	r2, #0
 80029c2:	2126      	movs	r1, #38	; 0x26
 80029c4:	2004      	movs	r0, #4
 80029c6:	f008 fbad 	bl	800b124 <xQueueGenericCreate>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4a01      	ldr	r2, [pc, #4]	; (80029d4 <znp_if_init+0x18>)
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000d80 	.word	0x20000d80

080029d8 <znp_if_wait_for_event>:

void znp_if_evt_send(event_result_t* res) {
    xQueueSendToBack(_znp_ev_queue, res, 100);
}

event_result_t *znp_if_wait_for_event(event_type_t event_to_wait_for, uint16_t address, uint32_t timeout) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	603a      	str	r2, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
 80029e4:	460b      	mov	r3, r1
 80029e6:	80bb      	strh	r3, [r7, #4]
    uint32_t waittime = timeout;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	617b      	str	r3, [r7, #20]
    uint32_t start = xTaskGetTickCount();
 80029ec:	f009 fc0a 	bl	800c204 <xTaskGetTickCount>
 80029f0:	6138      	str	r0, [r7, #16]
    static event_result_t event = { 0 };

    // loop
    while (1) {
        // calculate new timeout
        uint32_t passed_time = start - xTaskGetTickCount();
 80029f2:	f009 fc07 	bl	800c204 <xTaskGetTickCount>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
        waittime -= passed_time;
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
        start = xTaskGetTickCount();
 8002a06:	f009 fbfd 	bl	800c204 <xTaskGetTickCount>
 8002a0a:	6138      	str	r0, [r7, #16]

        BaseType_t wat = xQueueReceive(_znp_ev_queue, &event, waittime);
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <znp_if_wait_for_event+0x98>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4918      	ldr	r1, [pc, #96]	; (8002a74 <znp_if_wait_for_event+0x9c>)
 8002a14:	4618      	mov	r0, r3
 8002a16:	f008 fd7f 	bl	800b518 <xQueueReceive>
 8002a1a:	60b8      	str	r0, [r7, #8]
        
        // event was given?
        if (wat == pdTRUE) {
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d110      	bne.n	8002a44 <znp_if_wait_for_event+0x6c>
            // correct address and event?
            if ((event.adr == address || event.adr == 0xFFFF) && event.type == event_to_wait_for) {
 8002a22:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <znp_if_wait_for_event+0x9c>)
 8002a24:	885b      	ldrh	r3, [r3, #2]
 8002a26:	88ba      	ldrh	r2, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d005      	beq.n	8002a38 <znp_if_wait_for_event+0x60>
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <znp_if_wait_for_event+0x9c>)
 8002a2e:	885b      	ldrh	r3, [r3, #2]
 8002a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d1dc      	bne.n	80029f2 <znp_if_wait_for_event+0x1a>
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <znp_if_wait_for_event+0x9c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	79fa      	ldrb	r2, [r7, #7]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d1d7      	bne.n	80029f2 <znp_if_wait_for_event+0x1a>
                break;
 8002a42:	e002      	b.n	8002a4a <znp_if_wait_for_event+0x72>
            }
        }
        else {
            // error
            event.type = EVT_NONE;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <znp_if_wait_for_event+0x9c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
            break;
        }
    }

    // did we get the right event type?
    if (event.type == event_to_wait_for) {
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <znp_if_wait_for_event+0x9c>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	79fa      	ldrb	r2, [r7, #7]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d107      	bne.n	8002a64 <znp_if_wait_for_event+0x8c>
        if (event.result == 0)
 8002a54:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <znp_if_wait_for_event+0x9c>)
 8002a56:	791b      	ldrb	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <znp_if_wait_for_event+0x88>
            return &event;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <znp_if_wait_for_event+0x9c>)
 8002a5e:	e002      	b.n	8002a66 <znp_if_wait_for_event+0x8e>
        else
            return NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <znp_if_wait_for_event+0x8e>
    }
    // bit not set, timeout
    else {
        return NULL;
 8002a64:	2300      	movs	r3, #0
    }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000d80 	.word	0x20000d80
 8002a74:	20000d84 	.word	0x20000d84

08002a78 <znp_if_dev_get>:

znp_device_t* znp_if_dev_get(uint16_t address) {
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
    // invalid address?
    if (address == 0x0000 || address == 0xFFFF)
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <znp_if_dev_get+0x1a>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <znp_if_dev_get+0x1e>
        return NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e01a      	b.n	8002acc <znp_if_dev_get+0x54>

    // check if device already exists
    for (uint8_t i = 0; i < DEVICE_MEM_MAX; i++) {
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	e013      	b.n	8002ac4 <znp_if_dev_get+0x4c>
        if (_dev_mem[i].adr_short == address) {
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <znp_if_dev_get+0x60>)
 8002aa0:	214c      	movs	r1, #76	; 0x4c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d106      	bne.n	8002abe <znp_if_dev_get+0x46>
            return &_dev_mem[i];
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	224c      	movs	r2, #76	; 0x4c
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <znp_if_dev_get+0x60>)
 8002aba:	4413      	add	r3, r2
 8002abc:	e006      	b.n	8002acc <znp_if_dev_get+0x54>
    for (uint8_t i = 0; i < DEVICE_MEM_MAX; i++) {
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b1f      	cmp	r3, #31
 8002ac8:	d9e8      	bls.n	8002a9c <znp_if_dev_get+0x24>
        }
    }
    return NULL;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	20000400 	.word	0x20000400

08002adc <znp_if_dev_exists>:

uint8_t znp_if_dev_exists(uint16_t address) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
    // check if device already exists
    if (znp_if_dev_get(address) == NULL)
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ffc5 	bl	8002a78 <znp_if_dev_get>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <znp_if_dev_exists+0x1c>
        return 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e000      	b.n	8002afa <znp_if_dev_exists+0x1e>
    else
        return 1;
 8002af8:	2301      	movs	r3, #1
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <afRegister>:
/*********************************************************************
 * LOCAL FUNCTIONS
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen);

uint8_t afRegister(RegisterFormat_t *req) {
 8002b02:	b5b0      	push	{r4, r5, r7, lr}
 8002b04:	b088      	sub	sp, #32
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	466b      	mov	r3, sp
 8002b0c:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	76fb      	strb	r3, [r7, #27]
	uint32_t cmdLen = 9 + (req->AppNumInClusters * 2) + (req->AppNumOutClusters * 2);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7a1b      	ldrb	r3, [r3, #8]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	f103 0209 	add.w	r2, r3, #9
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
	uint8_t cmd[cmdLen];
 8002b28:	697c      	ldr	r4, [r7, #20]
 8002b2a:	4623      	mov	r3, r4
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	4620      	mov	r0, r4
 8002b32:	f04f 0100 	mov.w	r1, #0
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	00cb      	lsls	r3, r1, #3
 8002b40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b44:	00c2      	lsls	r2, r0, #3
 8002b46:	4620      	mov	r0, r4
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	00cb      	lsls	r3, r1, #3
 8002b56:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b5a:	00c2      	lsls	r2, r0, #3
 8002b5c:	1de3      	adds	r3, r4, #7
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	ebad 0d03 	sub.w	sp, sp, r3
 8002b66:	466b      	mov	r3, sp
 8002b68:	3300      	adds	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]

	int idx;

	cmd[cmInd++] = req->EndPoint;
 8002b6c:	7efb      	ldrb	r3, [r7, #27]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	76fa      	strb	r2, [r7, #27]
 8002b72:	461a      	mov	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	7819      	ldrb	r1, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->AppProfId & 0xFF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	8859      	ldrh	r1, [r3, #2]
 8002b80:	7efb      	ldrb	r3, [r7, #27]
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	76fa      	strb	r2, [r7, #27]
 8002b86:	461a      	mov	r2, r3
 8002b88:	b2c9      	uxtb	r1, r1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->AppProfId >> 8) & 0xFF);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	885b      	ldrh	r3, [r3, #2]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	b299      	uxth	r1, r3
 8002b96:	7efb      	ldrb	r3, [r7, #27]
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	76fa      	strb	r2, [r7, #27]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	b2c9      	uxtb	r1, r1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->AppDeviceId & 0xFF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8899      	ldrh	r1, [r3, #4]
 8002ba8:	7efb      	ldrb	r3, [r7, #27]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	76fa      	strb	r2, [r7, #27]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	b2c9      	uxtb	r1, r1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->AppDeviceId >> 8) & 0xFF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	889b      	ldrh	r3, [r3, #4]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	b299      	uxth	r1, r3
 8002bbe:	7efb      	ldrb	r3, [r7, #27]
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	76fa      	strb	r2, [r7, #27]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	b2c9      	uxtb	r1, r1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->AppDevVer;
 8002bcc:	7efb      	ldrb	r3, [r7, #27]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	76fa      	strb	r2, [r7, #27]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7999      	ldrb	r1, [r3, #6]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->LatencyReq;
 8002bdc:	7efb      	ldrb	r3, [r7, #27]
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	76fa      	strb	r2, [r7, #27]
 8002be2:	461a      	mov	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	79d9      	ldrb	r1, [r3, #7]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->AppNumInClusters;
 8002bec:	7efb      	ldrb	r3, [r7, #27]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	76fa      	strb	r2, [r7, #27]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7a19      	ldrb	r1, [r3, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumInClusters; idx++) {
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	e01e      	b.n	8002c40 <afRegister+0x13e>
		cmd[cmInd++] = (uint8_t) (req->AppInClusterList[idx] & 0xFF);
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	3304      	adds	r3, #4
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	8859      	ldrh	r1, [r3, #2]
 8002c0e:	7efb      	ldrb	r3, [r7, #27]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	76fa      	strb	r2, [r7, #27]
 8002c14:	461a      	mov	r2, r3
 8002c16:	b2c9      	uxtb	r1, r1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = (uint8_t) ((req->AppInClusterList[idx] >> 8) & 0xFF);
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3304      	adds	r3, #4
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	885b      	ldrh	r3, [r3, #2]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	b299      	uxth	r1, r3
 8002c2c:	7efb      	ldrb	r3, [r7, #27]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	76fa      	strb	r2, [r7, #27]
 8002c32:	461a      	mov	r2, r3
 8002c34:	b2c9      	uxtb	r1, r1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumInClusters; idx++) {
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7a1b      	ldrb	r3, [r3, #8]
 8002c44:	461a      	mov	r2, r3
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	dbda      	blt.n	8002c02 <afRegister+0x100>
	}
	cmd[cmInd++] = req->AppNumOutClusters;
 8002c4c:	7efb      	ldrb	r3, [r7, #27]
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	76fa      	strb	r2, [r7, #27]
 8002c52:	461a      	mov	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumOutClusters; idx++) {
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e01e      	b.n	8002ca2 <afRegister+0x1a0>
		cmd[cmInd++] = (uint8_t) (req->AppOutClusterList[idx] & 0xFF);
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	8899      	ldrh	r1, [r3, #4]
 8002c70:	7efb      	ldrb	r3, [r7, #27]
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	76fa      	strb	r2, [r7, #27]
 8002c76:	461a      	mov	r2, r3
 8002c78:	b2c9      	uxtb	r1, r1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = (uint8_t) ((req->AppOutClusterList[idx] >> 8) & 0xFF);
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3314      	adds	r3, #20
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	889b      	ldrh	r3, [r3, #4]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b299      	uxth	r1, r3
 8002c8e:	7efb      	ldrb	r3, [r7, #27]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	76fa      	strb	r2, [r7, #27]
 8002c94:	461a      	mov	r2, r3
 8002c96:	b2c9      	uxtb	r1, r1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumOutClusters; idx++) {
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002ca8:	461a      	mov	r2, r3
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4293      	cmp	r3, r2
 8002cae:	dbd9      	blt.n	8002c64 <afRegister+0x162>
	}
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_AF),
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	2024      	movs	r0, #36	; 0x24
 8002cba:	f005 f895 	bl	8007de8 <rpcSendFrame>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	72fb      	strb	r3, [r7, #11]
	MT_AF_REGISTER, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <afRegister+0x1cc>
		rpcWaitMqClientMsg(50);
 8002cc8:	2032      	movs	r0, #50	; 0x32
 8002cca:	f004 ff0d 	bl	8007ae8 <rpcWaitMqClientMsg>
	}

	return status;
 8002cce:	7afb      	ldrb	r3, [r7, #11]
 8002cd0:	46ad      	mov	sp, r5
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bdb0      	pop	{r4, r5, r7, pc}

08002cda <afDataRequest>:

uint8_t afDataRequest(DataRequestFormat_t *req) {
 8002cda:	b5b0      	push	{r4, r5, r7, lr}
 8002cdc:	b088      	sub	sp, #32
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	466b      	mov	r3, sp
 8002ce4:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	76fb      	strb	r3, [r7, #27]
	uint32_t cmdLen = 10 + req->Len;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7a5b      	ldrb	r3, [r3, #9]
 8002cee:	330a      	adds	r3, #10
 8002cf0:	617b      	str	r3, [r7, #20]
	uint8_t cmd[cmdLen];
 8002cf2:	697c      	ldr	r4, [r7, #20]
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f04f 0100 	mov.w	r1, #0
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	00cb      	lsls	r3, r1, #3
 8002d0a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d0e:	00c2      	lsls	r2, r0, #3
 8002d10:	4620      	mov	r0, r4
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	00cb      	lsls	r3, r1, #3
 8002d20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d24:	00c2      	lsls	r2, r0, #3
 8002d26:	1de3      	adds	r3, r4, #7
 8002d28:	08db      	lsrs	r3, r3, #3
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	ebad 0d03 	sub.w	sp, sp, r3
 8002d30:	466b      	mov	r3, sp
 8002d32:	3300      	adds	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]

	int idx;

	cmd[cmInd++] = (uint8_t) (req->DstAddr & 0xFF);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8819      	ldrh	r1, [r3, #0]
 8002d3a:	7efb      	ldrb	r3, [r7, #27]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	76fa      	strb	r2, [r7, #27]
 8002d40:	461a      	mov	r2, r3
 8002d42:	b2c9      	uxtb	r1, r1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->DstAddr >> 8) & 0xFF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	b299      	uxth	r1, r3
 8002d50:	7efb      	ldrb	r3, [r7, #27]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	76fa      	strb	r2, [r7, #27]
 8002d56:	461a      	mov	r2, r3
 8002d58:	b2c9      	uxtb	r1, r1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->DstEndpoint;
 8002d5e:	7efb      	ldrb	r3, [r7, #27]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	76fa      	strb	r2, [r7, #27]
 8002d64:	461a      	mov	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7899      	ldrb	r1, [r3, #2]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->SrcEndpoint;
 8002d6e:	7efb      	ldrb	r3, [r7, #27]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	76fa      	strb	r2, [r7, #27]
 8002d74:	461a      	mov	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	78d9      	ldrb	r1, [r3, #3]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->ClusterID & 0xFF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8899      	ldrh	r1, [r3, #4]
 8002d82:	7efb      	ldrb	r3, [r7, #27]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	76fa      	strb	r2, [r7, #27]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	b2c9      	uxtb	r1, r1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->ClusterID >> 8) & 0xFF);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	889b      	ldrh	r3, [r3, #4]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	b299      	uxth	r1, r3
 8002d98:	7efb      	ldrb	r3, [r7, #27]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	76fa      	strb	r2, [r7, #27]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	b2c9      	uxtb	r1, r1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->TransID;
 8002da6:	7efb      	ldrb	r3, [r7, #27]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	76fa      	strb	r2, [r7, #27]
 8002dac:	461a      	mov	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7999      	ldrb	r1, [r3, #6]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Options;
 8002db6:	7efb      	ldrb	r3, [r7, #27]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	76fa      	strb	r2, [r7, #27]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	79d9      	ldrb	r1, [r3, #7]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Radius;
 8002dc6:	7efb      	ldrb	r3, [r7, #27]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	76fa      	strb	r2, [r7, #27]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7a19      	ldrb	r1, [r3, #8]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Len;
 8002dd6:	7efb      	ldrb	r3, [r7, #27]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	76fa      	strb	r2, [r7, #27]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7a59      	ldrb	r1, [r3, #9]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->Len; idx++) {
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e00d      	b.n	8002e08 <afDataRequest+0x12e>
		cmd[cmInd++] = req->Data[idx];
 8002dec:	7efb      	ldrb	r3, [r7, #27]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	76fa      	strb	r2, [r7, #27]
 8002df2:	4619      	mov	r1, r3
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	330a      	adds	r3, #10
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	545a      	strb	r2, [r3, r1]
	for (idx = 0; idx < req->Len; idx++) {
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3301      	adds	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7a5b      	ldrb	r3, [r3, #9]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	4293      	cmp	r3, r2
 8002e12:	dbeb      	blt.n	8002dec <afDataRequest+0x112>

	}

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_AF),
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	2024      	movs	r0, #36	; 0x24
 8002e1e:	f004 ffe3 	bl	8007de8 <rpcSendFrame>
 8002e22:	4603      	mov	r3, r0
 8002e24:	72fb      	strb	r3, [r7, #11]
	MT_AF_DATA_REQUEST, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 8002e26:	7afb      	ldrb	r3, [r7, #11]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <afDataRequest+0x158>
		rpcWaitMqClientMsg(50);
 8002e2c:	2032      	movs	r0, #50	; 0x32
 8002e2e:	f004 fe5b 	bl	8007ae8 <rpcWaitMqClientMsg>
	}

	return status;
 8002e32:	7afb      	ldrb	r3, [r7, #11]
 8002e34:	46ad      	mov	sp, r5
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e40 <processDataConfirm>:
	}

	return status;
}

static void processDataConfirm(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfDataConfirm) {
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <processDataConfirm+0x68>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d025      	beq.n	8002ea0 <processDataConfirm+0x60>
		uint8_t msgIdx = 2;
 8002e54:	2302      	movs	r3, #2
 8002e56:	73fb      	strb	r3, [r7, #15]
		DataConfirmFormat_t rsp;
		if (rpcLen < 3) {
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d802      	bhi.n	8002e64 <processDataConfirm+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8002e5e:	4813      	ldr	r0, [pc, #76]	; (8002eac <processDataConfirm+0x6c>)
 8002e60:	f00a fc40 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	73fa      	strb	r2, [r7, #15]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	733b      	strb	r3, [r7, #12]
		rsp.Endpoint = rpcBuff[msgIdx++];
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	73fa      	strb	r2, [r7, #15]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	737b      	strb	r3, [r7, #13]
		rsp.TransId = rpcBuff[msgIdx++];
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	73fa      	strb	r2, [r7, #15]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	73bb      	strb	r3, [r7, #14]

		mtAfCbs.pfnAfDataConfirm(&rsp);
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <processDataConfirm+0x68>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f107 020c 	add.w	r2, r7, #12
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4798      	blx	r3
	}
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000dac 	.word	0x20000dac
 8002eac:	0800f200 	.word	0x0800f200

08002eb0 <processIncomingMsg>:

static void processIncomingMsg(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b0a2      	sub	sp, #136	; 0x88
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfIncomingMsg) {
 8002ebc:	4b72      	ldr	r3, [pc, #456]	; (8003088 <processIncomingMsg+0x1d8>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80dc 	beq.w	800307e <processIncomingMsg+0x1ce>
		uint8_t msgIdx = 2;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		IncomingMsgFormat_t rsp;
		if (rpcLen < 17) {
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d802      	bhi.n	8002ed8 <processIncomingMsg+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 8002ed2:	486e      	ldr	r0, [pc, #440]	; (800308c <processIncomingMsg+0x1dc>)
 8002ed4:	f00a fc06 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.GroupId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002ed8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002ee8:	3301      	adds	r3, #1
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	440b      	add	r3, r1
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8002efc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f00:	3302      	adds	r3, #2
 8002f02:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.ClusterId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002f06:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f16:	3301      	adds	r3, #1
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	440b      	add	r3, r1
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8002f2a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f2e:	3302      	adds	r3, #2
 8002f30:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002f34:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f44:	3301      	adds	r3, #1
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	440b      	add	r3, r1
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002f58:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.SrcEndpoint = rpcBuff[msgIdx++];
 8002f62:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	73bb      	strb	r3, [r7, #14]
		rsp.DstEndpoint = rpcBuff[msgIdx++];
 8002f76:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8002f80:	461a      	mov	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	73fb      	strb	r3, [r7, #15]
		rsp.WasVroadcast = rpcBuff[msgIdx++];
 8002f8a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8002f94:	461a      	mov	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	743b      	strb	r3, [r7, #16]
		rsp.LinkQuality = rpcBuff[msgIdx++];
 8002f9e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8002fa8:	461a      	mov	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	747b      	strb	r3, [r7, #17]
		rsp.SecurityUse = rpcBuff[msgIdx++];
 8002fb2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	74bb      	strb	r3, [r7, #18]
		rsp.TimeStamp = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
		uint8_t i;
		for (i = 0; i < 4; i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8002fd0:	e015      	b.n	8002ffe <processIncomingMsg+0x14e>
			rsp.TimeStamp |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 8002fd2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8002fdc:	461a      	mov	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	409a      	lsls	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 4; i++)
 8002ff4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8002ffe:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003002:	2b03      	cmp	r3, #3
 8003004:	d9e5      	bls.n	8002fd2 <processIncomingMsg+0x122>
		rsp.TransSeqNum = rpcBuff[msgIdx++];
 8003006:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003010:	461a      	mov	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	763b      	strb	r3, [r7, #24]
		rsp.Len = rpcBuff[msgIdx++];
 800301a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	767b      	strb	r3, [r7, #25]
		if (rpcLen > 17) {
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	2b11      	cmp	r3, #17
 8003032:	d91e      	bls.n	8003072 <processIncomingMsg+0x1c2>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8003034:	2300      	movs	r3, #0
 8003036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800303a:	e014      	b.n	8003066 <processIncomingMsg+0x1b6>
				rsp.Data[i] = rpcBuff[msgIdx++];
 800303c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003046:	461a      	mov	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4413      	add	r3, r2
 800304c:	7819      	ldrb	r1, [r3, #0]
 800304e:	f107 021a 	add.w	r2, r7, #26
 8003052:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003056:	4413      	add	r3, r2
 8003058:	460a      	mov	r2, r1
 800305a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 800305c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003060:	3301      	adds	r3, #1
 8003062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003066:	7e7b      	ldrb	r3, [r7, #25]
 8003068:	461a      	mov	r2, r3
 800306a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800306e:	4293      	cmp	r3, r2
 8003070:	d3e4      	bcc.n	800303c <processIncomingMsg+0x18c>
			}
		}
		mtAfCbs.pfnAfIncomingMsg(&rsp);
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <processIncomingMsg+0x1d8>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f107 0208 	add.w	r2, r7, #8
 800307a:	4610      	mov	r0, r2
 800307c:	4798      	blx	r3
	}
}
 800307e:	bf00      	nop
 8003080:	3788      	adds	r7, #136	; 0x88
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000dac 	.word	0x20000dac
 800308c:	0800f200 	.word	0x0800f200

08003090 <processIncomingMsgExt>:

static void processIncomingMsgExt(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003094:	b0a7      	sub	sp, #156	; 0x9c
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfIncomingMsgExt) {
 800309e:	4b99      	ldr	r3, [pc, #612]	; (8003304 <processIncomingMsgExt+0x274>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8129 	beq.w	80032fa <processIncomingMsgExt+0x26a>
		uint8_t msgIdx = 2;
 80030a8:	2302      	movs	r3, #2
 80030aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		IncomingMsgExtFormat_t rsp;
		if (rpcLen < 27) {
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	2b1a      	cmp	r3, #26
 80030b2:	d802      	bhi.n	80030ba <processIncomingMsgExt+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 80030b4:	4894      	ldr	r0, [pc, #592]	; (8003308 <processIncomingMsgExt+0x278>)
 80030b6:	f00a fb15 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.GroupId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80030ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80030ca:	3301      	adds	r3, #1
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	440b      	add	r3, r1
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	4413      	add	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80030de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80030e2:	3302      	adds	r3, #2
 80030e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.ClusterId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80030e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80030f8:	3301      	adds	r3, #1
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	440b      	add	r3, r1
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	b29b      	uxth	r3, r3
 8003106:	4413      	add	r3, r2
 8003108:	b29b      	uxth	r3, r3
 800310a:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 800310c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003110:	3302      	adds	r3, #2
 8003112:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.SrcAddrMode = rpcBuff[msgIdx++];
 8003116:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003120:	461a      	mov	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	733b      	strb	r3, [r7, #12]
		rsp.SrcAddr = 0;
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800313c:	e034      	b.n	80031a8 <processIncomingMsgExt+0x118>
			if ((rsp.SrcAddrMode == 2 && i < 2) || rsp.SrcAddrMode == 3) {
 800313e:	7b3b      	ldrb	r3, [r7, #12]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d103      	bne.n	800314c <processIncomingMsgExt+0xbc>
 8003144:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003148:	2b01      	cmp	r3, #1
 800314a:	d902      	bls.n	8003152 <processIncomingMsgExt+0xc2>
 800314c:	7b3b      	ldrb	r3, [r7, #12]
 800314e:	2b03      	cmp	r3, #3
 8003150:	d120      	bne.n	8003194 <processIncomingMsgExt+0x104>
				rsp.SrcAddr |= ((uint64_t) rpcBuff[msgIdx]) << (i * 8);
 8003152:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003156:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	f897 1096 	ldrb.w	r1, [r7, #150]	; 0x96
 800316a:	00c9      	lsls	r1, r1, #3
 800316c:	f1a1 0620 	sub.w	r6, r1, #32
 8003170:	f1c1 0020 	rsb	r0, r1, #32
 8003174:	fa03 f501 	lsl.w	r5, r3, r1
 8003178:	fa02 f606 	lsl.w	r6, r2, r6
 800317c:	4335      	orrs	r5, r6
 800317e:	fa22 f000 	lsr.w	r0, r2, r0
 8003182:	4305      	orrs	r5, r0
 8003184:	fa02 f401 	lsl.w	r4, r2, r1
 8003188:	ea4a 0804 	orr.w	r8, sl, r4
 800318c:	ea4b 0905 	orr.w	r9, fp, r5
 8003190:	e9c7 8904 	strd	r8, r9, [r7, #16]
			}
			msgIdx++;
 8003194:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003198:	3301      	adds	r3, #1
 800319a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		for (i = 0; i < 8; i++) {
 800319e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80031a2:	3301      	adds	r3, #1
 80031a4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80031a8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80031ac:	2b07      	cmp	r3, #7
 80031ae:	d9c6      	bls.n	800313e <processIncomingMsgExt+0xae>
		}

		rsp.SrcEndpoint = rpcBuff[msgIdx++];
 80031b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80031ba:	461a      	mov	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	763b      	strb	r3, [r7, #24]
		rsp.SrcPanId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80031c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80031d4:	3301      	adds	r3, #1
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	440b      	add	r3, r1
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	837b      	strh	r3, [r7, #26]
		msgIdx += 2;
 80031e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80031ec:	3302      	adds	r3, #2
 80031ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.DstEndpoint = rpcBuff[msgIdx++];
 80031f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	773b      	strb	r3, [r7, #28]
		rsp.WasVroadcast = rpcBuff[msgIdx++];
 8003206:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003210:	461a      	mov	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	777b      	strb	r3, [r7, #29]
		rsp.LinkQuality = rpcBuff[msgIdx++];
 800321a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003224:	461a      	mov	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	77bb      	strb	r3, [r7, #30]
		rsp.SecurityUse = rpcBuff[msgIdx++];
 800322e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003238:	461a      	mov	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	77fb      	strb	r3, [r7, #31]
		rsp.TimeStamp = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
		for (i = 0; i < 4; i++)
 8003246:	2300      	movs	r3, #0
 8003248:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800324c:	e015      	b.n	800327a <processIncomingMsgExt+0x1ea>
			rsp.TimeStamp |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 800324e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	409a      	lsls	r2, r3
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	4313      	orrs	r3, r2
 800326e:	623b      	str	r3, [r7, #32]
		for (i = 0; i < 4; i++)
 8003270:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003274:	3301      	adds	r3, #1
 8003276:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800327a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800327e:	2b03      	cmp	r3, #3
 8003280:	d9e5      	bls.n	800324e <processIncomingMsgExt+0x1be>
		rsp.TransSeqNum = rpcBuff[msgIdx++];
 8003282:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800328c:	461a      	mov	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rsp.Len = rpcBuff[msgIdx++];
 8003298:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80032a2:	461a      	mov	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint32_t ind;
		for (ind = 0; ind < rsp.Len; ind++) {
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032b4:	e014      	b.n	80032e0 <processIncomingMsgExt+0x250>
			rsp.Data[ind] = rpcBuff[msgIdx++];
 80032b6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80032c0:	461a      	mov	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	7819      	ldrb	r1, [r3, #0]
 80032c8:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80032cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032d0:	4413      	add	r3, r2
 80032d2:	460a      	mov	r2, r1
 80032d4:	701a      	strb	r2, [r3, #0]
		for (ind = 0; ind < rsp.Len; ind++) {
 80032d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032da:	3301      	adds	r3, #1
 80032dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032e4:	461a      	mov	r2, r3
 80032e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d3e3      	bcc.n	80032b6 <processIncomingMsgExt+0x226>
		}

		mtAfCbs.pfnAfIncomingMsgExt(&rsp);
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <processIncomingMsgExt+0x274>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f107 0208 	add.w	r2, r7, #8
 80032f6:	4610      	mov	r0, r2
 80032f8:	4798      	blx	r3
	}
}
 80032fa:	bf00      	nop
 80032fc:	379c      	adds	r7, #156	; 0x9c
 80032fe:	46bd      	mov	sp, r7
 8003300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003304:	20000dac 	.word	0x20000dac
 8003308:	0800f200 	.word	0x0800f200

0800330c <processRegisterSrsp>:
	}

	return status;
}

static void processRegisterSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfRegisterSrsp) {
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <processRegisterSrsp+0x48>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <processRegisterSrsp+0x40>
		uint8_t msgIdx = 2;
 8003320:	2302      	movs	r3, #2
 8003322:	73fb      	strb	r3, [r7, #15]
		RegisterSrspFormat_t rsp;
		if (rpcLen < 1) {
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <processRegisterSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800332a:	480b      	ldr	r0, [pc, #44]	; (8003358 <processRegisterSrsp+0x4c>)
 800332c:	f00a f9da 	bl	800d6e4 <puts>
		}
		rsp.success = rpcBuff[msgIdx++];
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	73fa      	strb	r2, [r7, #15]
 8003336:	461a      	mov	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	733b      	strb	r3, [r7, #12]
		mtAfCbs.pfnAfRegisterSrsp(&rsp);
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <processRegisterSrsp+0x48>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f107 020c 	add.w	r2, r7, #12
 8003348:	4610      	mov	r0, r2
 800334a:	4798      	blx	r3
	}
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000dac 	.word	0x20000dac
 8003358:	0800f200 	.word	0x0800f200

0800335c <processDataRequestSrsp>:

static void processDataRequestSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfDataReqeuestSrsp) {
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <processDataRequestSrsp+0x48>)
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d015      	beq.n	800339c <processDataRequestSrsp+0x40>
		uint8_t msgIdx = 2;
 8003370:	2302      	movs	r3, #2
 8003372:	73fb      	strb	r3, [r7, #15]
		DataRequestSrspFormat_t rsp;
		if (rpcLen < 1) {
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <processDataRequestSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800337a:	480b      	ldr	r0, [pc, #44]	; (80033a8 <processDataRequestSrsp+0x4c>)
 800337c:	f00a f9b2 	bl	800d6e4 <puts>
		}
		rsp.success = rpcBuff[msgIdx++];
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	73fa      	strb	r2, [r7, #15]
 8003386:	461a      	mov	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	733b      	strb	r3, [r7, #12]
		mtAfCbs.pfnAfDataReqeuestSrsp(&rsp);
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <processDataRequestSrsp+0x48>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f107 020c 	add.w	r2, r7, #12
 8003398:	4610      	mov	r0, r2
 800339a:	4798      	blx	r3
	}
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000dac 	.word	0x20000dac
 80033a8:	0800f200 	.word	0x0800f200

080033ac <processDataRetrieveSrsp>:

static void processDataRetrieveSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b0c4      	sub	sp, #272	; 0x110
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	6018      	str	r0, [r3, #0]
 80033b6:	460a      	mov	r2, r1
 80033b8:	1cfb      	adds	r3, r7, #3
 80033ba:	701a      	strb	r2, [r3, #0]
	if (mtAfCbs.pfnAfDataRetrieveSrsp) {
 80033bc:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <processDataRetrieveSrsp+0xc4>)
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d050      	beq.n	8003466 <processDataRetrieveSrsp+0xba>
		uint8_t msgIdx = 2;
 80033c4:	2302      	movs	r3, #2
 80033c6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		DataRetrieveSrspFormat_t rsp;
		if (rpcLen < 2) {
 80033ca:	1cfb      	adds	r3, r7, #3
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d802      	bhi.n	80033d8 <processDataRetrieveSrsp+0x2c>
			printf("MT_RPC_ERR_LENGTH\n");
 80033d2:	4828      	ldr	r0, [pc, #160]	; (8003474 <processDataRetrieveSrsp+0xc8>)
 80033d4:	f00a f986 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 80033d8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 80033e2:	461a      	mov	r2, r3
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4413      	add	r3, r2
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	f107 030c 	add.w	r3, r7, #12
 80033f0:	701a      	strb	r2, [r3, #0]
		rsp.Length = rpcBuff[msgIdx++];
 80033f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 80033fc:	461a      	mov	r2, r3
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4413      	add	r3, r2
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	f107 030c 	add.w	r3, r7, #12
 800340a:	705a      	strb	r2, [r3, #1]
		if (rpcLen > 2) {
 800340c:	1cfb      	adds	r3, r7, #3
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d922      	bls.n	800345a <processDataRetrieveSrsp+0xae>
			uint32_t i;
			for (i = 0; i < rsp.Length; i++) {
 8003414:	2300      	movs	r3, #0
 8003416:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800341a:	e016      	b.n	800344a <processDataRetrieveSrsp+0x9e>
				rsp.Data[i] = rpcBuff[msgIdx++];
 800341c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8003426:	461a      	mov	r2, r3
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4413      	add	r3, r2
 800342e:	7819      	ldrb	r1, [r3, #0]
 8003430:	f107 020c 	add.w	r2, r7, #12
 8003434:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003438:	4413      	add	r3, r2
 800343a:	3302      	adds	r3, #2
 800343c:	460a      	mov	r2, r1
 800343e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Length; i++) {
 8003440:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003444:	3301      	adds	r3, #1
 8003446:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800344a:	f107 030c 	add.w	r3, r7, #12
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	461a      	mov	r2, r3
 8003452:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003456:	4293      	cmp	r3, r2
 8003458:	d3e0      	bcc.n	800341c <processDataRetrieveSrsp+0x70>
			}
		}
		mtAfCbs.pfnAfDataRetrieveSrsp(&rsp);
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <processDataRetrieveSrsp+0xc4>)
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f107 020c 	add.w	r2, r7, #12
 8003462:	4610      	mov	r0, r2
 8003464:	4798      	blx	r3
	}
}
 8003466:	bf00      	nop
 8003468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000dac 	.word	0x20000dac
 8003474:	0800f200 	.word	0x0800f200

08003478 <processReflectError>:
	}

	return status;
}

static void processReflectError(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfReflectError) {
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <processReflectError+0xa0>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d040      	beq.n	800350e <processReflectError+0x96>
		uint8_t msgIdx = 2;
 800348c:	2302      	movs	r3, #2
 800348e:	73fb      	strb	r3, [r7, #15]
		ReflectErrorFormat_t rsp;
		if (rpcLen < 6) {
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	2b05      	cmp	r3, #5
 8003494:	d802      	bhi.n	800349c <processReflectError+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003496:	4821      	ldr	r0, [pc, #132]	; (800351c <processReflectError+0xa4>)
 8003498:	f00a f924 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	73fa      	strb	r2, [r7, #15]
 80034a2:	461a      	mov	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	723b      	strb	r3, [r7, #8]
		rsp.Endpoint = rpcBuff[msgIdx++];
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	73fa      	strb	r2, [r7, #15]
 80034b2:	461a      	mov	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	727b      	strb	r3, [r7, #9]
		rsp.TransId = rpcBuff[msgIdx++];
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	73fa      	strb	r2, [r7, #15]
 80034c2:	461a      	mov	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	72bb      	strb	r3, [r7, #10]
		rsp.DstAddrMode = rpcBuff[msgIdx++];
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	73fa      	strb	r2, [r7, #15]
 80034d2:	461a      	mov	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	72fb      	strb	r3, [r7, #11]
		rsp.DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	3301      	adds	r3, #1
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	440b      	add	r3, r1
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	3302      	adds	r3, #2
 8003500:	73fb      	strb	r3, [r7, #15]

		mtAfCbs.pfnAfReflectError(&rsp);
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <processReflectError+0xa0>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f107 0208 	add.w	r2, r7, #8
 800350a:	4610      	mov	r0, r2
 800350c:	4798      	blx	r3
	}
}
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000dac 	.word	0x20000dac
 800351c:	0800f200 	.word	0x0800f200

08003520 <afProcess>:
 *
 * @param   rpcLen has the size of the frame: cmd0 + cmd1 + payload + FCS
 *
 * @return
 *************************************************************************************************/
void afProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003534:	2b60      	cmp	r3, #96	; 0x60
 8003536:	d105      	bne.n	8003544 <afProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f83d 	bl	80035bc <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8003542:	e034      	b.n	80035ae <afProcess+0x8e>
		switch (rpcBuff[1]) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3301      	adds	r3, #1
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	3b80      	subs	r3, #128	; 0x80
 800354c:	2b03      	cmp	r3, #3
 800354e:	d823      	bhi.n	8003598 <afProcess+0x78>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <afProcess+0x38>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003569 	.word	0x08003569
 800355c:	08003575 	.word	0x08003575
 8003560:	08003581 	.word	0x08003581
 8003564:	0800358d 	.word	0x0800358d
				processDataConfirm(rpcBuff, rpcLen);
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	4619      	mov	r1, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fc67 	bl	8002e40 <processDataConfirm>
				break;
 8003572:	e01c      	b.n	80035ae <afProcess+0x8e>
				processIncomingMsg(rpcBuff, rpcLen);
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	4619      	mov	r1, r3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fc99 	bl	8002eb0 <processIncomingMsg>
				break;
 800357e:	e016      	b.n	80035ae <afProcess+0x8e>
				processIncomingMsgExt(rpcBuff, rpcLen);
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff fd83 	bl	8003090 <processIncomingMsgExt>
				break;
 800358a:	e010      	b.n	80035ae <afProcess+0x8e>
				processReflectError(rpcBuff, rpcLen);
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff71 	bl	8003478 <processReflectError>
				break;
 8003596:	e00a      	b.n	80035ae <afProcess+0x8e>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	4619      	mov	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3301      	adds	r3, #1
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	4804      	ldr	r0, [pc, #16]	; (80035b8 <afProcess+0x98>)
 80035a8:	f7fd f88a 	bl	80006c0 <log_print>
				break;
 80035ac:	bf00      	nop
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	0800f214 	.word	0x0800f214

080035bc <processSrsp>:
 *
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	461a      	mov	r2, r3
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4818      	ldr	r0, [pc, #96]	; (8003630 <processSrsp+0x74>)
 80035d0:	f009 ffec 	bl	800d5ac <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3301      	adds	r3, #1
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b12      	cmp	r3, #18
 80035dc:	d012      	beq.n	8003604 <processSrsp+0x48>
 80035de:	2b12      	cmp	r3, #18
 80035e0:	dc16      	bgt.n	8003610 <processSrsp+0x54>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <processSrsp+0x30>
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d006      	beq.n	80035f8 <processSrsp+0x3c>
 80035ea:	e011      	b.n	8003610 <processSrsp+0x54>
		case MT_AF_REGISTER:
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_REGISTER\n");
			processRegisterSrsp(rpcBuff, rpcLen);
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fe8b 	bl	800330c <processRegisterSrsp>
			break;
 80035f6:	e016      	b.n	8003626 <processSrsp+0x6a>
		case MT_AF_DATA_REQUEST:
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_DATA_REQUEST\n");
			processDataRequestSrsp(rpcBuff, rpcLen);
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff fead 	bl	800335c <processDataRequestSrsp>
			break;
 8003602:	e010      	b.n	8003626 <processSrsp+0x6a>
		case MT_AF_DATA_RETRIEVE:
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_DATA_RETRIEVE\n");
			processDataRetrieveSrsp(rpcBuff, rpcLen);
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fecf 	bl	80033ac <processDataRetrieveSrsp>
			break;
 800360e:	e00a      	b.n	8003626 <processSrsp+0x6a>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	4619      	mov	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3301      	adds	r3, #1
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	4805      	ldr	r0, [pc, #20]	; (8003634 <processSrsp+0x78>)
 8003620:	f7fd f84e 	bl	80006c0 <log_print>
			break;
 8003624:	bf00      	nop
	}

}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200086a4 	.word	0x200086a4
 8003634:	0800f244 	.word	0x0800f244

08003638 <processCommissioningNotify>:

void appCfgRegisterCallbacks(mtAppCfgCb_t cbs) {
	memcpy(&mtAppCfgCbs, &cbs, sizeof(mtAppCfgCb_t));
}

static void processCommissioningNotify(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgCommissioningNotifyCb_t) {
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <processCommissioningNotify+0x68>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d025      	beq.n	8003698 <processCommissioningNotify+0x60>
		uint8_t msgIdx = 2;
 800364c:	2302      	movs	r3, #2
 800364e:	73fb      	strb	r3, [r7, #15]
		appCfgCommissioningNotifyFormat_t rsp;

		// size error?
		if (rpcLen < 3) {
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d802      	bhi.n	800365c <processCommissioningNotify+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003656:	4813      	ldr	r0, [pc, #76]	; (80036a4 <processCommissioningNotify+0x6c>)
 8003658:	f00a f844 	bl	800d6e4 <puts>
		}

		// copy command
		rsp.status = rpcBuff[msgIdx++];
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	73fa      	strb	r2, [r7, #15]
 8003662:	461a      	mov	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	733b      	strb	r3, [r7, #12]
		rsp.commissioningMode1 = rpcBuff[msgIdx++];
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	73fa      	strb	r2, [r7, #15]
 8003672:	461a      	mov	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	737b      	strb	r3, [r7, #13]
		rsp.commissioningMode2 = rpcBuff[msgIdx++];
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	73fa      	strb	r2, [r7, #15]
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	73bb      	strb	r3, [r7, #14]

		// callback function
		mtAppCfgCbs.pfnAppCfgCommissioningNotifyCb_t(&rsp);
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <processCommissioningNotify+0x68>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f107 020c 	add.w	r2, r7, #12
 8003694:	4610      	mov	r0, r2
 8003696:	4798      	blx	r3
	}
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000dc8 	.word	0x20000dc8
 80036a4:	0800f270 	.word	0x0800f270

080036a8 <processSetChannel>:

static void processSetChannel(uint8_t *rpcBuff, uint8_t rpcLen) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgSetChannelCb_t) {
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <processSetChannel+0x48>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <processSetChannel+0x40>
		uint8_t msgIdx = 2;
 80036bc:	2302      	movs	r3, #2
 80036be:	73fb      	strb	r3, [r7, #15]
		appCfgSetChannelFormat_t rsp;

		// size error?
		if (rpcLen < 1) {
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d102      	bne.n	80036cc <processSetChannel+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80036c6:	480b      	ldr	r0, [pc, #44]	; (80036f4 <processSetChannel+0x4c>)
 80036c8:	f00a f80c 	bl	800d6e4 <puts>
		}

		// copy command
		rsp.success = rpcBuff[msgIdx++];
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	73fa      	strb	r2, [r7, #15]
 80036d2:	461a      	mov	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	733b      	strb	r3, [r7, #12]

		// callback function
		mtAppCfgCbs.pfnAppCfgSetChannelCb_t(&rsp);
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <processSetChannel+0x48>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f107 020c 	add.w	r2, r7, #12
 80036e4:	4610      	mov	r0, r2
 80036e6:	4798      	blx	r3
	}
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000dc8 	.word	0x20000dc8
 80036f4:	0800f270 	.word	0x0800f270

080036f8 <processStartCommissioning>:

static void processStartCommissioning(uint8_t *rpcBuff, uint8_t rpcLen) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgCommissioningStartCb_t) {
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <processStartCommissioning+0x48>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d015      	beq.n	8003738 <processStartCommissioning+0x40>
		uint8_t msgIdx = 2;
 800370c:	2302      	movs	r3, #2
 800370e:	73fb      	strb	r3, [r7, #15]
		appCfgStartCommissioningStart_t rsp;

		// size error?
		if (rpcLen < 1) {
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <processStartCommissioning+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003716:	480b      	ldr	r0, [pc, #44]	; (8003744 <processStartCommissioning+0x4c>)
 8003718:	f009 ffe4 	bl	800d6e4 <puts>
		}

		// copy command
		rsp.success = rpcBuff[msgIdx++];
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	73fa      	strb	r2, [r7, #15]
 8003722:	461a      	mov	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	733b      	strb	r3, [r7, #12]

		// callback function
		mtAppCfgCbs.pfnAppCfgCommissioningStartCb_t(&rsp);
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <processStartCommissioning+0x48>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f107 020c 	add.w	r2, r7, #12
 8003734:	4610      	mov	r0, r2
 8003736:	4798      	blx	r3
	}
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000dc8 	.word	0x20000dc8
 8003744:	0800f270 	.word	0x0800f270

08003748 <processSrsp>:

static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3301      	adds	r3, #1
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b05      	cmp	r3, #5
 800375c:	d007      	beq.n	800376e <processSrsp+0x26>
 800375e:	2b08      	cmp	r3, #8
 8003760:	d10b      	bne.n	800377a <processSrsp+0x32>
		case MT_APP_CFG_SRSP_SET_CHANNEL:
			dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: SET_CHANNEL_SRSP\n");
			processSetChannel(rpcBuff, rpcLen);
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ff9e 	bl	80036a8 <processSetChannel>
			break;
 800376c:	e010      	b.n	8003790 <processSrsp+0x48>
		case MT_APP_CFG_SRSP_START_COMMISSIONING:
			dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: START_COMMISSIONING_SRSP\n");
			processStartCommissioning(rpcBuff, rpcLen);
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ffc0 	bl	80036f8 <processStartCommissioning>
			break;
 8003778:	e00a      	b.n	8003790 <processSrsp+0x48>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	4619      	mov	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3301      	adds	r3, #1
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	4803      	ldr	r0, [pc, #12]	; (8003798 <processSrsp+0x50>)
 800378a:	f7fc ff99 	bl	80006c0 <log_print>
			break;
 800378e:	bf00      	nop
	}
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	0800f284 	.word	0x0800f284

0800379c <appCfgProcess>:

void appCfgProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80037b0:	2b60      	cmp	r3, #96	; 0x60
 80037b2:	d105      	bne.n	80037c0 <appCfgProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	4619      	mov	r1, r3
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ffc5 	bl	8003748 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 80037be:	e015      	b.n	80037ec <appCfgProcess+0x50>
		switch (rpcBuff[1]) {
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3301      	adds	r3, #1
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	d105      	bne.n	80037d6 <appCfgProcess+0x3a>
				processCommissioningNotify(rpcBuff, rpcLen);
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ff32 	bl	8003638 <processCommissioningNotify>
				break;
 80037d4:	e00a      	b.n	80037ec <appCfgProcess+0x50>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	4619      	mov	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3301      	adds	r3, #1
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4803      	ldr	r0, [pc, #12]	; (80037f4 <appCfgProcess+0x58>)
 80037e6:	f7fc ff6b 	bl	80006c0 <log_print>
				break;
 80037ea:	bf00      	nop
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	0800f2b0 	.word	0x0800f2b0

080037f8 <appCfgSetChannel>:

uint8_t appCfgSetChannel(setChannelFormat_t *req) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t payload[5];

	// build command
	payload[0] = (req->primaryChannel) ? 1 : 0;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	723b      	strb	r3, [r7, #8]
	payload[1] = req->channel & 0xFF;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	727b      	strb	r3, [r7, #9]
	payload[2] = (req->channel >> 8) & 0xFF;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	b2db      	uxtb	r3, r3
 8003820:	72bb      	strb	r3, [r7, #10]
	payload[3] = (req->channel >> 16) & 0xFF;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	b2db      	uxtb	r3, r3
 800382a:	72fb      	strb	r3, [r7, #11]
	payload[4] = (req->channel >> 24) & 0xFF;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	0e1b      	lsrs	r3, r3, #24
 8003832:	b2db      	uxtb	r3, r3
 8003834:	733b      	strb	r3, [r7, #12]

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_APP_CFG), 0x08, payload, 5);
 8003836:	f107 0208 	add.w	r2, r7, #8
 800383a:	2305      	movs	r3, #5
 800383c:	2108      	movs	r1, #8
 800383e:	202f      	movs	r0, #47	; 0x2f
 8003840:	f004 fad2 	bl	8007de8 <rpcSendFrame>
 8003844:	4603      	mov	r3, r0
 8003846:	73fb      	strb	r3, [r7, #15]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <appCfgSetChannel+0x5c>
		rpcWaitMqClientMsg(50);
 800384e:	2032      	movs	r0, #50	; 0x32
 8003850:	f004 f94a 	bl	8007ae8 <rpcWaitMqClientMsg>
	}

	// return
	return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <appCfgStartCommissioning>:

uint8_t appCfgStartCommissioning(startCommissioningFormat_t *req) {
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t payload[1];

	// build command
	payload[0] = req->commissioningMode;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	733b      	strb	r3, [r7, #12]

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_APP_CFG), 0x05, payload, 1);
 800386c:	f107 020c 	add.w	r2, r7, #12
 8003870:	2301      	movs	r3, #1
 8003872:	2105      	movs	r1, #5
 8003874:	202f      	movs	r0, #47	; 0x2f
 8003876:	f004 fab7 	bl	8007de8 <rpcSendFrame>
 800387a:	4603      	mov	r3, r0
 800387c:	73fb      	strb	r3, [r7, #15]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <appCfgStartCommissioning+0x2c>
		rpcWaitMqClientMsg(50);
 8003884:	2032      	movs	r0, #50	; 0x32
 8003886:	f004 f92f 	bl	8007ae8 <rpcWaitMqClientMsg>
	}

	// return
	return status;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <processReadConfigurationSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processReadConfigurationSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b0a6      	sub	sp, #152	; 0x98
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiReadConfigurationSrsp) {
 80038a0:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <processReadConfigurationSrsp+0xbc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d04e      	beq.n	8003946 <processReadConfigurationSrsp+0xb2>
		uint8_t msgIdx = 2;
 80038a8:	2302      	movs	r3, #2
 80038aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReadConfigurationSrspFormat_t rsp;
		if (rpcLen < 3) {
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d802      	bhi.n	80038ba <processReadConfigurationSrsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 80038b4:	4827      	ldr	r0, [pc, #156]	; (8003954 <processReadConfigurationSrsp+0xc0>)
 80038b6:	f009 ff15 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 80038ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80038c4:	461a      	mov	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	733b      	strb	r3, [r7, #12]
		rsp.ConfigId = rpcBuff[msgIdx++];
 80038ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80038d8:	461a      	mov	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	737b      	strb	r3, [r7, #13]
		rsp.Len = rpcBuff[msgIdx++];
 80038e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80038ec:	461a      	mov	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	73bb      	strb	r3, [r7, #14]
		if (rpcLen > 3) {
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d91e      	bls.n	800393a <processReadConfigurationSrsp+0xa6>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003902:	e014      	b.n	800392e <processReadConfigurationSrsp+0x9a>
				rsp.Value[i] = rpcBuff[msgIdx++];
 8003904:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4413      	add	r3, r2
 8003914:	7819      	ldrb	r1, [r3, #0]
 8003916:	f107 020f 	add.w	r2, r7, #15
 800391a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800391e:	4413      	add	r3, r2
 8003920:	460a      	mov	r2, r1
 8003922:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8003924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003928:	3301      	adds	r3, #1
 800392a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800392e:	7bbb      	ldrb	r3, [r7, #14]
 8003930:	461a      	mov	r2, r3
 8003932:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003936:	4293      	cmp	r3, r2
 8003938:	d3e4      	bcc.n	8003904 <processReadConfigurationSrsp+0x70>
			}
		}
		mtSapiCbs.pfnSapiReadConfigurationSrsp(&rsp);
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <processReadConfigurationSrsp+0xbc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f107 020c 	add.w	r2, r7, #12
 8003942:	4610      	mov	r0, r2
 8003944:	4798      	blx	r3
	}
}
 8003946:	bf00      	nop
 8003948:	3798      	adds	r7, #152	; 0x98
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000dd4 	.word	0x20000dd4
 8003954:	0800f2e0 	.word	0x0800f2e0

08003958 <processGetDeviceInfoSrsp>:
 * @param   rpcBuff - Incoming buffer
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processGetDeviceInfoSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiGetDeviceInfoSrsp) {
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <processGetDeviceInfoSrsp+0x74>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02b      	beq.n	80039c4 <processGetDeviceInfoSrsp+0x6c>
		uint8_t msgIdx = 2;
 800396c:	2302      	movs	r3, #2
 800396e:	75fb      	strb	r3, [r7, #23]
		GetDeviceInfoSrspFormat_t rsp;
		if (rpcLen < 9) {
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	2b08      	cmp	r3, #8
 8003974:	d802      	bhi.n	800397c <processGetDeviceInfoSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003976:	4816      	ldr	r0, [pc, #88]	; (80039d0 <processGetDeviceInfoSrsp+0x78>)
 8003978:	f009 feb4 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Param = rpcBuff[msgIdx++];
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	75fa      	strb	r2, [r7, #23]
 8003982:	461a      	mov	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	733b      	strb	r3, [r7, #12]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 800398c:	2300      	movs	r3, #0
 800398e:	75bb      	strb	r3, [r7, #22]
 8003990:	e00f      	b.n	80039b2 <processGetDeviceInfoSrsp+0x5a>
			rsp.Value[i] = rpcBuff[msgIdx++];
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	75fa      	strb	r2, [r7, #23]
 8003998:	461a      	mov	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	441a      	add	r2, r3
 800399e:	7dbb      	ldrb	r3, [r7, #22]
 80039a0:	7812      	ldrb	r2, [r2, #0]
 80039a2:	f107 0118 	add.w	r1, r7, #24
 80039a6:	440b      	add	r3, r1
 80039a8:	f803 2c0b 	strb.w	r2, [r3, #-11]
		for (i = 0; i < 8; i++) {
 80039ac:	7dbb      	ldrb	r3, [r7, #22]
 80039ae:	3301      	adds	r3, #1
 80039b0:	75bb      	strb	r3, [r7, #22]
 80039b2:	7dbb      	ldrb	r3, [r7, #22]
 80039b4:	2b07      	cmp	r3, #7
 80039b6:	d9ec      	bls.n	8003992 <processGetDeviceInfoSrsp+0x3a>
		}

		mtSapiCbs.pfnSapiGetDeviceInfoSrsp(&rsp);
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <processGetDeviceInfoSrsp+0x74>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f107 020c 	add.w	r2, r7, #12
 80039c0:	4610      	mov	r0, r2
 80039c2:	4798      	blx	r3
	}
}
 80039c4:	bf00      	nop
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000dd4 	.word	0x20000dd4
 80039d0:	0800f2e0 	.word	0x0800f2e0

080039d4 <processFindDeviceCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processFindDeviceCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 80039d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039d8:	b089      	sub	sp, #36	; 0x24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiFindDeviceCnf) {
 80039e2:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <processFindDeviceCnf+0xc4>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d051      	beq.n	8003a8e <processFindDeviceCnf+0xba>
		uint8_t msgIdx = 2;
 80039ea:	2302      	movs	r3, #2
 80039ec:	77fb      	strb	r3, [r7, #31]
		FindDeviceCnfFormat_t rsp;
		if (rpcLen < 11) {
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	2b0a      	cmp	r3, #10
 80039f2:	d802      	bhi.n	80039fa <processFindDeviceCnf+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 80039f4:	4829      	ldr	r0, [pc, #164]	; (8003a9c <processFindDeviceCnf+0xc8>)
 80039f6:	f009 fe75 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SearchKey = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80039fa:	7ffb      	ldrb	r3, [r7, #31]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	7ffb      	ldrb	r3, [r7, #31]
 8003a06:	3301      	adds	r3, #1
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	440b      	add	r3, r1
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8003a1a:	7ffb      	ldrb	r3, [r7, #31]
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	77fb      	strb	r3, [r7, #31]
		rsp.Result = 0;
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	77bb      	strb	r3, [r7, #30]
 8003a30:	e024      	b.n	8003a7c <processFindDeviceCnf+0xa8>
			rsp.Result |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	77fa      	strb	r2, [r7, #31]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	7fb9      	ldrb	r1, [r7, #30]
 8003a48:	00c9      	lsls	r1, r1, #3
 8003a4a:	f1a1 0620 	sub.w	r6, r1, #32
 8003a4e:	f1c1 0020 	rsb	r0, r1, #32
 8003a52:	fa03 f501 	lsl.w	r5, r3, r1
 8003a56:	fa02 f606 	lsl.w	r6, r2, r6
 8003a5a:	4335      	orrs	r5, r6
 8003a5c:	fa22 f000 	lsr.w	r0, r2, r0
 8003a60:	4305      	orrs	r5, r0
 8003a62:	fa02 f401 	lsl.w	r4, r2, r1
 8003a66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a6a:	ea44 0802 	orr.w	r8, r4, r2
 8003a6e:	ea45 0903 	orr.w	r9, r5, r3
 8003a72:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++)
 8003a76:	7fbb      	ldrb	r3, [r7, #30]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	77bb      	strb	r3, [r7, #30]
 8003a7c:	7fbb      	ldrb	r3, [r7, #30]
 8003a7e:	2b07      	cmp	r3, #7
 8003a80:	d9d7      	bls.n	8003a32 <processFindDeviceCnf+0x5e>

		mtSapiCbs.pfnSapiFindDeviceCnf(&rsp);
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <processFindDeviceCnf+0xc4>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f107 0208 	add.w	r2, r7, #8
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4798      	blx	r3
	}
}
 8003a8e:	bf00      	nop
 8003a90:	3724      	adds	r7, #36	; 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a98:	20000dd4 	.word	0x20000dd4
 8003a9c:	0800f2e0 	.word	0x0800f2e0

08003aa0 <processSendDataCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processSendDataCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiSendDataCnf) {
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <processSendDataCnf+0x58>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01d      	beq.n	8003af0 <processSendDataCnf+0x50>
		uint8_t msgIdx = 2;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	73fb      	strb	r3, [r7, #15]
		SendDataCnfFormat_t rsp;
		if (rpcLen < 2) {
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d802      	bhi.n	8003ac4 <processSendDataCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003abe:	480f      	ldr	r0, [pc, #60]	; (8003afc <processSendDataCnf+0x5c>)
 8003ac0:	f009 fe10 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Handle = rpcBuff[msgIdx++];
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	73fa      	strb	r2, [r7, #15]
 8003aca:	461a      	mov	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4413      	add	r3, r2
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	733b      	strb	r3, [r7, #12]
		rsp.Status = rpcBuff[msgIdx++];
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	73fa      	strb	r2, [r7, #15]
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	737b      	strb	r3, [r7, #13]

		mtSapiCbs.pfnSapiSendDataCnf(&rsp);
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <processSendDataCnf+0x58>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f107 020c 	add.w	r2, r7, #12
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
	}
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000dd4 	.word	0x20000dd4
 8003afc:	0800f2e0 	.word	0x0800f2e0

08003b00 <processReceiveDataInd>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processReceiveDataInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b09c      	sub	sp, #112	; 0x70
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiReceiveDataInd) {
 8003b0c:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <processReceiveDataInd+0x100>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d070      	beq.n	8003bf6 <processReceiveDataInd+0xf6>
		uint8_t msgIdx = 2;
 8003b14:	2302      	movs	r3, #2
 8003b16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		ReceiveDataIndFormat_t rsp;
		if (rpcLen < 6) {
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	2b05      	cmp	r3, #5
 8003b1e:	d802      	bhi.n	8003b26 <processReceiveDataInd+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8003b20:	4838      	ldr	r0, [pc, #224]	; (8003c04 <processReceiveDataInd+0x104>)
 8003b22:	f009 fddf 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Source = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003b26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b36:	3301      	adds	r3, #1
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	440b      	add	r3, r1
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003b4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b4e:	3302      	adds	r3, #2
 8003b50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		rsp.Command = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003b54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b64:	3301      	adds	r3, #1
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	440b      	add	r3, r1
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	81fb      	strh	r3, [r7, #14]
		msgIdx += 2;
 8003b78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		rsp.Len = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003b82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b92:	3301      	adds	r3, #1
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	440b      	add	r3, r1
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8003ba6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003baa:	3302      	adds	r3, #2
 8003bac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (rpcLen > 6) {
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d919      	bls.n	8003bea <processReceiveDataInd+0xea>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bba:	e011      	b.n	8003be0 <processReceiveDataInd+0xe0>
				rsp.Data[i] = rpcBuff[msgIdx++];
 8003bbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4413      	add	r3, r2
 8003bcc:	7819      	ldrb	r1, [r3, #0]
 8003bce:	f107 0212 	add.w	r2, r7, #18
 8003bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bd4:	4413      	add	r3, r2
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8003bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bdc:	3301      	adds	r3, #1
 8003bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8003be0:	8a3b      	ldrh	r3, [r7, #16]
 8003be2:	461a      	mov	r2, r3
 8003be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d3e8      	bcc.n	8003bbc <processReceiveDataInd+0xbc>
			}
		}
		mtSapiCbs.pfnSapiReceiveDataInd(&rsp);
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <processReceiveDataInd+0x100>)
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f107 020c 	add.w	r2, r7, #12
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4798      	blx	r3
	}
}
 8003bf6:	bf00      	nop
 8003bf8:	3770      	adds	r7, #112	; 0x70
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000dd4 	.word	0x20000dd4
 8003c04:	0800f2e0 	.word	0x0800f2e0

08003c08 <processAllowBindCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processAllowBindCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiAllowBindCnf) {
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <processAllowBindCnf+0x60>)
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <processAllowBindCnf+0x56>
		uint8_t msgIdx = 2;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	73fb      	strb	r3, [r7, #15]
		AllowBindCnfFormat_t rsp;
		if (rpcLen < 2) {
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d802      	bhi.n	8003c2c <processAllowBindCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003c26:	4811      	ldr	r0, [pc, #68]	; (8003c6c <processAllowBindCnf+0x64>)
 8003c28:	f009 fd5c 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Source = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	440b      	add	r3, r1
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	3302      	adds	r3, #2
 8003c50:	73fb      	strb	r3, [r7, #15]

		mtSapiCbs.pfnSapiAllowBindCnf(&rsp);
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <processAllowBindCnf+0x60>)
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f107 020c 	add.w	r2, r7, #12
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4798      	blx	r3
	}
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000dd4 	.word	0x20000dd4
 8003c6c:	0800f2e0 	.word	0x0800f2e0

08003c70 <processBindCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processBindCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiBindCnf) {
 8003c7c:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <processBindCnf+0x70>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d028      	beq.n	8003cd6 <processBindCnf+0x66>
		uint8_t msgIdx = 2;
 8003c84:	2302      	movs	r3, #2
 8003c86:	73fb      	strb	r3, [r7, #15]
		BindCnfFormat_t rsp;
		if (rpcLen < 3) {
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d802      	bhi.n	8003c94 <processBindCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003c8e:	4815      	ldr	r0, [pc, #84]	; (8003ce4 <processBindCnf+0x74>)
 8003c90:	f009 fd28 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.CommandId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	440b      	add	r3, r1
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	73fa      	strb	r2, [r7, #15]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	72bb      	strb	r3, [r7, #10]

		mtSapiCbs.pfnSapiBindCnf(&rsp);
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <processBindCnf+0x70>)
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f107 0208 	add.w	r2, r7, #8
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4798      	blx	r3
	}
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000dd4 	.word	0x20000dd4
 8003ce4:	0800f2e0 	.word	0x0800f2e0

08003ce8 <processStartCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processStartCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiStartCnf) {
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <processStartCnf+0x48>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d015      	beq.n	8003d28 <processStartCnf+0x40>
		uint8_t msgIdx = 2;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	73fb      	strb	r3, [r7, #15]
		StartCnfFormat_t rsp;
		if (rpcLen < 1) {
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <processStartCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003d06:	480b      	ldr	r0, [pc, #44]	; (8003d34 <processStartCnf+0x4c>)
 8003d08:	f009 fcec 	bl	800d6e4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	73fa      	strb	r2, [r7, #15]
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	733b      	strb	r3, [r7, #12]

		mtSapiCbs.pfnSapiStartCnf(&rsp);
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <processStartCnf+0x48>)
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	f107 020c 	add.w	r2, r7, #12
 8003d24:	4610      	mov	r0, r2
 8003d26:	4798      	blx	r3
	}
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000dd4 	.word	0x20000dd4
 8003d34:	0800f2e0 	.word	0x0800f2e0

08003d38 <processSrsp>:
 *
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	461a      	mov	r2, r3
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4813      	ldr	r0, [pc, #76]	; (8003d98 <processSrsp+0x60>)
 8003d4c:	f009 fc2e 	bl	800d5ac <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3301      	adds	r3, #1
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d002      	beq.n	8003d60 <processSrsp+0x28>
 8003d5a:	2b06      	cmp	r3, #6
 8003d5c:	d006      	beq.n	8003d6c <processSrsp+0x34>
 8003d5e:	e00b      	b.n	8003d78 <processSrsp+0x40>
		case MT_SAPI_READ_CONFIGURATION:
			dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_READ_CONFIGURATION\n");
			processReadConfigurationSrsp(rpcBuff, rpcLen);
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	4619      	mov	r1, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fd95 	bl	8003894 <processReadConfigurationSrsp>
			break;
 8003d6a:	e010      	b.n	8003d8e <processSrsp+0x56>
		case MT_SAPI_GET_DEVICE_INFO:
			dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_GET_DEVICE_INFO\n");
			processGetDeviceInfoSrsp(rpcBuff, rpcLen);
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fdf1 	bl	8003958 <processGetDeviceInfoSrsp>
			break;
 8003d76:	e00a      	b.n	8003d8e <processSrsp+0x56>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message  [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3301      	adds	r3, #1
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4805      	ldr	r0, [pc, #20]	; (8003d9c <processSrsp+0x64>)
 8003d88:	f7fc fc9a 	bl	80006c0 <log_print>
			break;
 8003d8c:	bf00      	nop
	}

}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200086a4 	.word	0x200086a4
 8003d9c:	0800f2f4 	.word	0x0800f2f4

08003da0 <sapiProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 ***********************************************************************************************/
void sapiProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003db4:	2b60      	cmp	r3, #96	; 0x60
 8003db6:	d105      	bne.n	8003dc4 <sapiProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ffbb 	bl	8003d38 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_INFO, "sapiProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8003dc2:	e048      	b.n	8003e56 <sapiProcess+0xb6>
		switch (rpcBuff[1]) {
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	3b80      	subs	r3, #128	; 0x80
 8003dcc:	2b07      	cmp	r3, #7
 8003dce:	d837      	bhi.n	8003e40 <sapiProcess+0xa0>
 8003dd0:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <sapiProcess+0x38>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003e35 	.word	0x08003e35
 8003ddc:	08003e29 	.word	0x08003e29
 8003de0:	08003e1d 	.word	0x08003e1d
 8003de4:	08003e05 	.word	0x08003e05
 8003de8:	08003e41 	.word	0x08003e41
 8003dec:	08003df9 	.word	0x08003df9
 8003df0:	08003e41 	.word	0x08003e41
 8003df4:	08003e11 	.word	0x08003e11
				processFindDeviceCnf(rpcBuff, rpcLen);
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff fde9 	bl	80039d4 <processFindDeviceCnf>
				break;
 8003e02:	e028      	b.n	8003e56 <sapiProcess+0xb6>
				processSendDataCnf(rpcBuff, rpcLen);
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	4619      	mov	r1, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff fe49 	bl	8003aa0 <processSendDataCnf>
				break;
 8003e0e:	e022      	b.n	8003e56 <sapiProcess+0xb6>
				processReceiveDataInd(rpcBuff, rpcLen);
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff fe73 	bl	8003b00 <processReceiveDataInd>
				break;
 8003e1a:	e01c      	b.n	8003e56 <sapiProcess+0xb6>
				processAllowBindCnf(rpcBuff, rpcLen);
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff fef1 	bl	8003c08 <processAllowBindCnf>
				break;
 8003e26:	e016      	b.n	8003e56 <sapiProcess+0xb6>
				processBindCnf(rpcBuff, rpcLen);
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff1f 	bl	8003c70 <processBindCnf>
				break;
 8003e32:	e010      	b.n	8003e56 <sapiProcess+0xb6>
				processStartCnf(rpcBuff, rpcLen);
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff55 	bl	8003ce8 <processStartCnf>
				break;
 8003e3e:	e00a      	b.n	8003e56 <sapiProcess+0xb6>
				dbg_print(PRINT_LEVEL_INFO, "sapiProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	4619      	mov	r1, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4804      	ldr	r0, [pc, #16]	; (8003e60 <sapiProcess+0xc0>)
 8003e50:	f7fc fc36 	bl	80006c0 <log_print>
				break;
 8003e54:	bf00      	nop
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	0800f320 	.word	0x0800f320

08003e64 <processPingSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 */
static void processPingSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysPingSrsp) {
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <processPingSrsp+0x60>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <processPingSrsp+0x56>
		uint8_t msgIdx = 2;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	73fb      	strb	r3, [r7, #15]
		PingSrspFormat_t rsp;
		if (rpcLen < 2) {
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d802      	bhi.n	8003e88 <processPingSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003e82:	4811      	ldr	r0, [pc, #68]	; (8003ec8 <processPingSrsp+0x64>)
 8003e84:	f009 fc2e 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Capabilities = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	3301      	adds	r3, #1
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	440b      	add	r3, r1
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	3302      	adds	r3, #2
 8003eac:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysPingSrsp(&rsp);
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <processPingSrsp+0x60>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f107 020c 	add.w	r2, r7, #12
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4798      	blx	r3
	}
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000df4 	.word	0x20000df4
 8003ec8:	0800f34c 	.word	0x0800f34c

08003ecc <processGetExtAddrSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGetExtAddrSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGetExtAddrSrsp) {
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <processGetExtAddrSrsp+0xa0>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d03e      	beq.n	8003f60 <processGetExtAddrSrsp+0x94>
		uint8_t msgIdx = 2;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	75fb      	strb	r3, [r7, #23]
		GetExtAddrSrspFormat_t rsp;
		if (rpcLen < 8) {
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	2b07      	cmp	r3, #7
 8003eea:	d802      	bhi.n	8003ef2 <processGetExtAddrSrsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8003eec:	4820      	ldr	r0, [pc, #128]	; (8003f70 <processGetExtAddrSrsp+0xa4>)
 8003eee:	f009 fbf9 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.ExtAddr = 0;
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	75bb      	strb	r3, [r7, #22]
 8003f02:	e024      	b.n	8003f4e <processGetExtAddrSrsp+0x82>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	75fa      	strb	r2, [r7, #23]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	7db9      	ldrb	r1, [r7, #22]
 8003f1a:	00c9      	lsls	r1, r1, #3
 8003f1c:	f1a1 0620 	sub.w	r6, r1, #32
 8003f20:	f1c1 0020 	rsb	r0, r1, #32
 8003f24:	fa03 f501 	lsl.w	r5, r3, r1
 8003f28:	fa02 f606 	lsl.w	r6, r2, r6
 8003f2c:	4335      	orrs	r5, r6
 8003f2e:	fa22 f000 	lsr.w	r0, r2, r0
 8003f32:	4305      	orrs	r5, r0
 8003f34:	fa02 f401 	lsl.w	r4, r2, r1
 8003f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f3c:	ea44 0802 	orr.w	r8, r4, r2
 8003f40:	ea45 0903 	orr.w	r9, r5, r3
 8003f44:	e9c7 8902 	strd	r8, r9, [r7, #8]
		for (i = 0; i < 8; i++)
 8003f48:	7dbb      	ldrb	r3, [r7, #22]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	75bb      	strb	r3, [r7, #22]
 8003f4e:	7dbb      	ldrb	r3, [r7, #22]
 8003f50:	2b07      	cmp	r3, #7
 8003f52:	d9d7      	bls.n	8003f04 <processGetExtAddrSrsp+0x38>

		mtSysCbs.pfnSysGetExtAddrSrsp(&rsp);
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <processGetExtAddrSrsp+0xa0>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f107 0208 	add.w	r2, r7, #8
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
	}
}
 8003f60:	bf00      	nop
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000df4 	.word	0x20000df4
 8003f70:	0800f34c 	.word	0x0800f34c

08003f74 <processRamReadSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processRamReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b0a6      	sub	sp, #152	; 0x98
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysRamReadSrsp) {
 8003f80:	4b26      	ldr	r3, [pc, #152]	; (800401c <processRamReadSrsp+0xa8>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d044      	beq.n	8004012 <processRamReadSrsp+0x9e>
		uint8_t msgIdx = 2;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		RamReadSrspFormat_t rsp;
		if (rpcLen < 2) {
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d802      	bhi.n	8003f9a <processRamReadSrsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8003f94:	4822      	ldr	r0, [pc, #136]	; (8004020 <processRamReadSrsp+0xac>)
 8003f96:	f009 fba5 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003f9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	733b      	strb	r3, [r7, #12]
		rsp.Len = rpcBuff[msgIdx++];
 8003fae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	737b      	strb	r3, [r7, #13]
		if (rpcLen > 2) {
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d91e      	bls.n	8004006 <processRamReadSrsp+0x92>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fce:	e014      	b.n	8003ffa <processRamReadSrsp+0x86>
				rsp.Value[i] = rpcBuff[msgIdx++];
 8003fd0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	7819      	ldrb	r1, [r3, #0]
 8003fe2:	f107 020e 	add.w	r2, r7, #14
 8003fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fea:	4413      	add	r3, r2
 8003fec:	460a      	mov	r2, r1
 8003fee:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8003ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ffa:	7b7b      	ldrb	r3, [r7, #13]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004002:	4293      	cmp	r3, r2
 8004004:	d3e4      	bcc.n	8003fd0 <processRamReadSrsp+0x5c>
			}
		}
		mtSysCbs.pfnSysRamReadSrsp(&rsp);
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <processRamReadSrsp+0xa8>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f107 020c 	add.w	r2, r7, #12
 800400e:	4610      	mov	r0, r2
 8004010:	4798      	blx	r3
	}
}
 8004012:	bf00      	nop
 8004014:	3798      	adds	r7, #152	; 0x98
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000df4 	.word	0x20000df4
 8004020:	0800f34c 	.word	0x0800f34c

08004024 <sysResetReq>:
 *
 * @param   req - Pointer to command specific structure.
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysResetReq(ResetReqFormat_t *req) {
 8004024:	b5b0      	push	{r4, r5, r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	466b      	mov	r3, sp
 800402e:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	77fb      	strb	r3, [r7, #31]
	uint32_t cmdLen = 1;
 8004034:	2301      	movs	r3, #1
 8004036:	61bb      	str	r3, [r7, #24]
	uint8_t cmd[cmdLen];
 8004038:	69bc      	ldr	r4, [r7, #24]
 800403a:	4623      	mov	r3, r4
 800403c:	3b01      	subs	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	4620      	mov	r0, r4
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	00cb      	lsls	r3, r1, #3
 8004050:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004054:	00c2      	lsls	r2, r0, #3
 8004056:	4620      	mov	r0, r4
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	00cb      	lsls	r3, r1, #3
 8004066:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800406a:	00c2      	lsls	r2, r0, #3
 800406c:	1de3      	adds	r3, r4, #7
 800406e:	08db      	lsrs	r3, r3, #3
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	ebad 0d03 	sub.w	sp, sp, r3
 8004076:	466b      	mov	r3, sp
 8004078:	3300      	adds	r3, #0
 800407a:	613b      	str	r3, [r7, #16]

	cmd[cmInd++] = req->Type;
 800407c:	7ffb      	ldrb	r3, [r7, #31]
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	77fa      	strb	r2, [r7, #31]
 8004082:	461a      	mov	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7819      	ldrb	r1, [r3, #0]
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	5499      	strb	r1, [r3, r2]

	status = rpcSendFrame((MT_RPC_CMD_AREQ | MT_RPC_SYS_SYS),
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2100      	movs	r1, #0
 8004094:	2041      	movs	r0, #65	; 0x41
 8004096:	f003 fea7 	bl	8007de8 <rpcSendFrame>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]
	MT_SYS_RESET_REQ, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <sysResetReq+0x86>
		rpcWaitMqClientMsg(50);
 80040a4:	2032      	movs	r0, #50	; 0x32
 80040a6:	f003 fd1f 	bl	8007ae8 <rpcWaitMqClientMsg>
	}
	return status;
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	46ad      	mov	sp, r5
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080040b8 <processResetInd>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processResetInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysResetInd) {
 80040c4:	4b22      	ldr	r3, [pc, #136]	; (8004150 <processResetInd+0x98>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d03d      	beq.n	8004148 <processResetInd+0x90>
		uint8_t msgIdx = 2;
 80040cc:	2302      	movs	r3, #2
 80040ce:	73fb      	strb	r3, [r7, #15]
		ResetIndFormat_t rsp;
		if (rpcLen < 6) {
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	d802      	bhi.n	80040dc <processResetInd+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80040d6:	481f      	ldr	r0, [pc, #124]	; (8004154 <processResetInd+0x9c>)
 80040d8:	f009 fb04 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Reason = rpcBuff[msgIdx++];
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	73fa      	strb	r2, [r7, #15]
 80040e2:	461a      	mov	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	723b      	strb	r3, [r7, #8]
		rsp.TransportRev = rpcBuff[msgIdx++];
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	73fa      	strb	r2, [r7, #15]
 80040f2:	461a      	mov	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	727b      	strb	r3, [r7, #9]
		rsp.ProductId = rpcBuff[msgIdx++];
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	73fa      	strb	r2, [r7, #15]
 8004102:	461a      	mov	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	72bb      	strb	r3, [r7, #10]
		rsp.MajorRel = rpcBuff[msgIdx++];
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	73fa      	strb	r2, [r7, #15]
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4413      	add	r3, r2
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	72fb      	strb	r3, [r7, #11]
		rsp.MinorRel = rpcBuff[msgIdx++];
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	73fa      	strb	r2, [r7, #15]
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4413      	add	r3, r2
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	733b      	strb	r3, [r7, #12]
		rsp.HwRev = rpcBuff[msgIdx++];
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	73fa      	strb	r2, [r7, #15]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	737b      	strb	r3, [r7, #13]

		mtSysCbs.pfnSysResetInd(&rsp);
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <processResetInd+0x98>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f107 0208 	add.w	r2, r7, #8
 8004144:	4610      	mov	r0, r2
 8004146:	4798      	blx	r3
	}
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000df4 	.word	0x20000df4
 8004154:	0800f34c 	.word	0x0800f34c

08004158 <sysVersion>:
 *
 * @param    -
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysVersion() {
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
	uint8_t status;

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_SYS),
 800415e:	2300      	movs	r3, #0
 8004160:	2200      	movs	r2, #0
 8004162:	2102      	movs	r1, #2
 8004164:	2021      	movs	r0, #33	; 0x21
 8004166:	f003 fe3f 	bl	8007de8 <rpcSendFrame>
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
	MT_SYS_VERSION, NULL, 0);

	if (status == MT_RPC_SUCCESS) {
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <sysVersion+0x22>
		rpcWaitMqClientMsg(50);
 8004174:	2032      	movs	r0, #50	; 0x32
 8004176:	f003 fcb7 	bl	8007ae8 <rpcWaitMqClientMsg>
	}

	return status;
 800417a:	79fb      	ldrb	r3, [r7, #7]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <processVersionSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processVersionSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysVersionSrsp) {
 8004190:	4b1e      	ldr	r3, [pc, #120]	; (800420c <processVersionSrsp+0x88>)
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d035      	beq.n	8004204 <processVersionSrsp+0x80>
		uint8_t msgIdx = 2;
 8004198:	2302      	movs	r3, #2
 800419a:	73fb      	strb	r3, [r7, #15]
		VersionSrspFormat_t rsp;
		if (rpcLen < 5) {
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d802      	bhi.n	80041a8 <processVersionSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80041a2:	481b      	ldr	r0, [pc, #108]	; (8004210 <processVersionSrsp+0x8c>)
 80041a4:	f009 fa9e 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.TransportRev = rpcBuff[msgIdx++];
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	73fa      	strb	r2, [r7, #15]
 80041ae:	461a      	mov	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	723b      	strb	r3, [r7, #8]
		rsp.Product = rpcBuff[msgIdx++];
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	73fa      	strb	r2, [r7, #15]
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4413      	add	r3, r2
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	727b      	strb	r3, [r7, #9]
		rsp.MajorRel = rpcBuff[msgIdx++];
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	73fa      	strb	r2, [r7, #15]
 80041ce:	461a      	mov	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	72bb      	strb	r3, [r7, #10]
		rsp.MinorRel = rpcBuff[msgIdx++];
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	73fa      	strb	r2, [r7, #15]
 80041de:	461a      	mov	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4413      	add	r3, r2
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	72fb      	strb	r3, [r7, #11]
		rsp.MaintRel = rpcBuff[msgIdx++];
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	73fa      	strb	r2, [r7, #15]
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysVersionSrsp(&rsp);
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <processVersionSrsp+0x88>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f107 0208 	add.w	r2, r7, #8
 8004200:	4610      	mov	r0, r2
 8004202:	4798      	blx	r3
	}
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000df4 	.word	0x20000df4
 8004210:	0800f34c 	.word	0x0800f34c

08004214 <processOsalNvReadSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalNvReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b0c4      	sub	sp, #272	; 0x110
 8004218:	af00      	add	r7, sp, #0
 800421a:	1d3b      	adds	r3, r7, #4
 800421c:	6018      	str	r0, [r3, #0]
 800421e:	460a      	mov	r2, r1
 8004220:	1cfb      	adds	r3, r7, #3
 8004222:	701a      	strb	r2, [r3, #0]
	if (mtSysCbs.pfnSysOsalNvReadSrsp) {
 8004224:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <processOsalNvReadSrsp+0xc4>)
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d050      	beq.n	80042ce <processOsalNvReadSrsp+0xba>
		uint8_t msgIdx = 2;
 800422c:	2302      	movs	r3, #2
 800422e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		OsalNvReadSrspFormat_t rsp;
		if (rpcLen < 2) {
 8004232:	1cfb      	adds	r3, r7, #3
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d802      	bhi.n	8004240 <processOsalNvReadSrsp+0x2c>
			printf("MT_RPC_ERR_LENGTH\n");
 800423a:	4828      	ldr	r0, [pc, #160]	; (80042dc <processOsalNvReadSrsp+0xc8>)
 800423c:	f009 fa52 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8004240:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 800424a:	461a      	mov	r2, r3
 800424c:	1d3b      	adds	r3, r7, #4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4413      	add	r3, r2
 8004252:	781a      	ldrb	r2, [r3, #0]
 8004254:	f107 030c 	add.w	r3, r7, #12
 8004258:	701a      	strb	r2, [r3, #0]
		rsp.Len = rpcBuff[msgIdx++];
 800425a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8004264:	461a      	mov	r2, r3
 8004266:	1d3b      	adds	r3, r7, #4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4413      	add	r3, r2
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	f107 030c 	add.w	r3, r7, #12
 8004272:	705a      	strb	r2, [r3, #1]
		if (rpcLen > 2) {
 8004274:	1cfb      	adds	r3, r7, #3
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d922      	bls.n	80042c2 <processOsalNvReadSrsp+0xae>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004282:	e016      	b.n	80042b2 <processOsalNvReadSrsp+0x9e>
				rsp.Value[i] = rpcBuff[msgIdx++];
 8004284:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 800428e:	461a      	mov	r2, r3
 8004290:	1d3b      	adds	r3, r7, #4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4413      	add	r3, r2
 8004296:	7819      	ldrb	r1, [r3, #0]
 8004298:	f107 020c 	add.w	r2, r7, #12
 800429c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042a0:	4413      	add	r3, r2
 80042a2:	3302      	adds	r3, #2
 80042a4:	460a      	mov	r2, r1
 80042a6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 80042a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042ac:	3301      	adds	r3, #1
 80042ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80042b2:	f107 030c 	add.w	r3, r7, #12
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	461a      	mov	r2, r3
 80042ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042be:	4293      	cmp	r3, r2
 80042c0:	d3e0      	bcc.n	8004284 <processOsalNvReadSrsp+0x70>
			}
		}
		mtSysCbs.pfnSysOsalNvReadSrsp(&rsp);
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <processOsalNvReadSrsp+0xc4>)
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f107 020c 	add.w	r2, r7, #12
 80042ca:	4610      	mov	r0, r2
 80042cc:	4798      	blx	r3
	}
}
 80042ce:	bf00      	nop
 80042d0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000df4 	.word	0x20000df4
 80042dc:	0800f34c 	.word	0x0800f34c

080042e0 <sysOsalNvWrite>:
 *
 * @param   req - Pointer to command specific structure.
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysOsalNvWrite(OsalNvWriteFormat_t *req) {
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	466b      	mov	r3, sp
 80042ea:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	76fb      	strb	r3, [r7, #27]
	uint32_t cmdLen = 4 + req->Len;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	78db      	ldrb	r3, [r3, #3]
 80042f4:	3304      	adds	r3, #4
 80042f6:	617b      	str	r3, [r7, #20]
	uint8_t cmd[cmdLen];
 80042f8:	697c      	ldr	r4, [r7, #20]
 80042fa:	4623      	mov	r3, r4
 80042fc:	3b01      	subs	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	4620      	mov	r0, r4
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	00cb      	lsls	r3, r1, #3
 8004310:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004314:	00c2      	lsls	r2, r0, #3
 8004316:	4620      	mov	r0, r4
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	00cb      	lsls	r3, r1, #3
 8004326:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800432a:	00c2      	lsls	r2, r0, #3
 800432c:	1de3      	adds	r3, r4, #7
 800432e:	08db      	lsrs	r3, r3, #3
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	ebad 0d03 	sub.w	sp, sp, r3
 8004336:	466b      	mov	r3, sp
 8004338:	3300      	adds	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
	int idx;

	cmd[cmInd++] = (uint8_t) (req->Id & 0xFF);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8819      	ldrh	r1, [r3, #0]
 8004340:	7efb      	ldrb	r3, [r7, #27]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	76fa      	strb	r2, [r7, #27]
 8004346:	461a      	mov	r2, r3
 8004348:	b2c9      	uxtb	r1, r1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->Id >> 8) & 0xFF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	b299      	uxth	r1, r3
 8004356:	7efb      	ldrb	r3, [r7, #27]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	76fa      	strb	r2, [r7, #27]
 800435c:	461a      	mov	r2, r3
 800435e:	b2c9      	uxtb	r1, r1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Offset;
 8004364:	7efb      	ldrb	r3, [r7, #27]
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	76fa      	strb	r2, [r7, #27]
 800436a:	461a      	mov	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7899      	ldrb	r1, [r3, #2]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Len;
 8004374:	7efb      	ldrb	r3, [r7, #27]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	76fa      	strb	r2, [r7, #27]
 800437a:	461a      	mov	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	78d9      	ldrb	r1, [r3, #3]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->Len; idx++) {
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	e00d      	b.n	80043a6 <sysOsalNvWrite+0xc6>
		cmd[cmInd++] = req->Value[idx];
 800438a:	7efb      	ldrb	r3, [r7, #27]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	76fa      	strb	r2, [r7, #27]
 8004390:	4619      	mov	r1, r3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4413      	add	r3, r2
 8004398:	3304      	adds	r3, #4
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	545a      	strb	r2, [r3, r1]
	for (idx = 0; idx < req->Len; idx++) {
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	78db      	ldrb	r3, [r3, #3]
 80043aa:	461a      	mov	r2, r3
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	4293      	cmp	r3, r2
 80043b0:	dbeb      	blt.n	800438a <sysOsalNvWrite+0xaa>
	}

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_SYS),
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2109      	movs	r1, #9
 80043ba:	2021      	movs	r0, #33	; 0x21
 80043bc:	f003 fd14 	bl	8007de8 <rpcSendFrame>
 80043c0:	4603      	mov	r3, r0
 80043c2:	72fb      	strb	r3, [r7, #11]
	MT_SYS_OSAL_NV_WRITE, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 80043c4:	7afb      	ldrb	r3, [r7, #11]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <sysOsalNvWrite+0xf0>
		rpcWaitMqClientMsg(50);
 80043ca:	2032      	movs	r0, #50	; 0x32
 80043cc:	f003 fb8c 	bl	8007ae8 <rpcWaitMqClientMsg>
	}

	return status;
 80043d0:	7afb      	ldrb	r3, [r7, #11]
 80043d2:	46ad      	mov	sp, r5
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bdb0      	pop	{r4, r5, r7, pc}

080043dc <processOsalNvLengthSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalNvLengthSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysOsalNvLengthSrsp) {
 80043e8:	4b14      	ldr	r3, [pc, #80]	; (800443c <processOsalNvLengthSrsp+0x60>)
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <processOsalNvLengthSrsp+0x56>
		uint8_t msgIdx = 2;
 80043f0:	2302      	movs	r3, #2
 80043f2:	73fb      	strb	r3, [r7, #15]
		OsalNvLengthSrspFormat_t rsp;
		if (rpcLen < 2) {
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d802      	bhi.n	8004400 <processOsalNvLengthSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80043fa:	4811      	ldr	r0, [pc, #68]	; (8004440 <processOsalNvLengthSrsp+0x64>)
 80043fc:	f009 f972 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.ItemLen = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	b29a      	uxth	r2, r3
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	3301      	adds	r3, #1
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	440b      	add	r3, r1
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	b29b      	uxth	r3, r3
 800441a:	4413      	add	r3, r2
 800441c:	b29b      	uxth	r3, r3
 800441e:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	3302      	adds	r3, #2
 8004424:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysOsalNvLengthSrsp(&rsp);
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <processOsalNvLengthSrsp+0x60>)
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f107 020c 	add.w	r2, r7, #12
 800442e:	4610      	mov	r0, r2
 8004430:	4798      	blx	r3
	}
}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000df4 	.word	0x20000df4
 8004440:	0800f34c 	.word	0x0800f34c

08004444 <processOsalTimerExpired>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalTimerExpired(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysOsalTimerExpired) {
 8004450:	4b0e      	ldr	r3, [pc, #56]	; (800448c <processOsalTimerExpired+0x48>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d015      	beq.n	8004484 <processOsalTimerExpired+0x40>
		uint8_t msgIdx = 2;
 8004458:	2302      	movs	r3, #2
 800445a:	73fb      	strb	r3, [r7, #15]
		OsalTimerExpiredFormat_t rsp;
		if (rpcLen < 1) {
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <processOsalTimerExpired+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004462:	480b      	ldr	r0, [pc, #44]	; (8004490 <processOsalTimerExpired+0x4c>)
 8004464:	f009 f93e 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Id = rpcBuff[msgIdx++];
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	73fa      	strb	r2, [r7, #15]
 800446e:	461a      	mov	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4413      	add	r3, r2
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysOsalTimerExpired(&rsp);
 8004478:	4b04      	ldr	r3, [pc, #16]	; (800448c <processOsalTimerExpired+0x48>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f107 020c 	add.w	r2, r7, #12
 8004480:	4610      	mov	r0, r2
 8004482:	4798      	blx	r3
	}
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000df4 	.word	0x20000df4
 8004490:	0800f34c 	.word	0x0800f34c

08004494 <processStackTuneSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processStackTuneSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysStackTuneSrsp) {
 80044a0:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <processStackTuneSrsp+0x48>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d015      	beq.n	80044d4 <processStackTuneSrsp+0x40>
		uint8_t msgIdx = 2;
 80044a8:	2302      	movs	r3, #2
 80044aa:	73fb      	strb	r3, [r7, #15]
		StackTuneSrspFormat_t rsp;
		if (rpcLen < 1) {
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d102      	bne.n	80044b8 <processStackTuneSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80044b2:	480b      	ldr	r0, [pc, #44]	; (80044e0 <processStackTuneSrsp+0x4c>)
 80044b4:	f009 f916 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = rpcBuff[msgIdx++];
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	73fa      	strb	r2, [r7, #15]
 80044be:	461a      	mov	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysStackTuneSrsp(&rsp);
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <processStackTuneSrsp+0x48>)
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f107 020c 	add.w	r2, r7, #12
 80044d0:	4610      	mov	r0, r2
 80044d2:	4798      	blx	r3
	}
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000df4 	.word	0x20000df4
 80044e0:	0800f34c 	.word	0x0800f34c

080044e4 <processAdcReadSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processAdcReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysAdcReadSrsp) {
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <processAdcReadSrsp+0x60>)
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <processAdcReadSrsp+0x56>
		uint8_t msgIdx = 2;
 80044f8:	2302      	movs	r3, #2
 80044fa:	73fb      	strb	r3, [r7, #15]
		AdcReadSrspFormat_t rsp;
		if (rpcLen < 2) {
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d802      	bhi.n	8004508 <processAdcReadSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004502:	4811      	ldr	r0, [pc, #68]	; (8004548 <processAdcReadSrsp+0x64>)
 8004504:	f009 f8ee 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b29a      	uxth	r2, r3
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	3301      	adds	r3, #1
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	440b      	add	r3, r1
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b29b      	uxth	r3, r3
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	b29b      	uxth	r3, r3
 8004522:	4413      	add	r3, r2
 8004524:	b29b      	uxth	r3, r3
 8004526:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	3302      	adds	r3, #2
 800452c:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysAdcReadSrsp(&rsp);
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <processAdcReadSrsp+0x60>)
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f107 020c 	add.w	r2, r7, #12
 8004536:	4610      	mov	r0, r2
 8004538:	4798      	blx	r3
	}
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000df4 	.word	0x20000df4
 8004548:	0800f34c 	.word	0x0800f34c

0800454c <processGpioSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGpioSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGpioSrsp) {
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <processGpioSrsp+0x48>)
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	d015      	beq.n	800458c <processGpioSrsp+0x40>
		uint8_t msgIdx = 2;
 8004560:	2302      	movs	r3, #2
 8004562:	73fb      	strb	r3, [r7, #15]
		GpioSrspFormat_t rsp;
		if (rpcLen < 1) {
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <processGpioSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800456a:	480b      	ldr	r0, [pc, #44]	; (8004598 <processGpioSrsp+0x4c>)
 800456c:	f009 f8ba 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = rpcBuff[msgIdx++];
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	73fa      	strb	r2, [r7, #15]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4413      	add	r3, r2
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysGpioSrsp(&rsp);
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <processGpioSrsp+0x48>)
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	f107 020c 	add.w	r2, r7, #12
 8004588:	4610      	mov	r0, r2
 800458a:	4798      	blx	r3
	}
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000df4 	.word	0x20000df4
 8004598:	0800f34c 	.word	0x0800f34c

0800459c <processRandomSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processRandomSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysRandomSrsp) {
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <processRandomSrsp+0x60>)
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <processRandomSrsp+0x56>
		uint8_t msgIdx = 2;
 80045b0:	2302      	movs	r3, #2
 80045b2:	73fb      	strb	r3, [r7, #15]
		RandomSrspFormat_t rsp;
		if (rpcLen < 2) {
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d802      	bhi.n	80045c0 <processRandomSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80045ba:	4811      	ldr	r0, [pc, #68]	; (8004600 <processRandomSrsp+0x64>)
 80045bc:	f009 f892 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	3301      	adds	r3, #1
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	440b      	add	r3, r1
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	b29b      	uxth	r3, r3
 80045da:	4413      	add	r3, r2
 80045dc:	b29b      	uxth	r3, r3
 80045de:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	3302      	adds	r3, #2
 80045e4:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysRandomSrsp(&rsp);
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <processRandomSrsp+0x60>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	f107 020c 	add.w	r2, r7, #12
 80045ee:	4610      	mov	r0, r2
 80045f0:	4798      	blx	r3
	}
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000df4 	.word	0x20000df4
 8004600:	0800f34c 	.word	0x0800f34c

08004604 <processGetTimeSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGetTimeSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGetTimeSrsp) {
 8004610:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <processGetTimeSrsp+0xe0>)
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	2b00      	cmp	r3, #0
 8004616:	d061      	beq.n	80046dc <processGetTimeSrsp+0xd8>
		uint8_t msgIdx = 2;
 8004618:	2302      	movs	r3, #2
 800461a:	75fb      	strb	r3, [r7, #23]
		GetTimeSrspFormat_t rsp;
		if (rpcLen < 11) {
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	2b0a      	cmp	r3, #10
 8004620:	d802      	bhi.n	8004628 <processGetTimeSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004622:	4831      	ldr	r0, [pc, #196]	; (80046e8 <processGetTimeSrsp+0xe4>)
 8004624:	f009 f85e 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.UTCTime = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	60bb      	str	r3, [r7, #8]
		uint8_t i;
		for (i = 0; i < 4; i++)
 800462c:	2300      	movs	r3, #0
 800462e:	75bb      	strb	r3, [r7, #22]
 8004630:	e010      	b.n	8004654 <processGetTimeSrsp+0x50>
			rsp.UTCTime |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	75fa      	strb	r2, [r7, #23]
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	7dbb      	ldrb	r3, [r7, #22]
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	409a      	lsls	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < 4; i++)
 800464e:	7dbb      	ldrb	r3, [r7, #22]
 8004650:	3301      	adds	r3, #1
 8004652:	75bb      	strb	r3, [r7, #22]
 8004654:	7dbb      	ldrb	r3, [r7, #22]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d9eb      	bls.n	8004632 <processGetTimeSrsp+0x2e>
		rsp.Hour = rpcBuff[msgIdx++];
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	75fa      	strb	r2, [r7, #23]
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	733b      	strb	r3, [r7, #12]
		rsp.Minute = rpcBuff[msgIdx++];
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	75fa      	strb	r2, [r7, #23]
 8004670:	461a      	mov	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	737b      	strb	r3, [r7, #13]
		rsp.Second = rpcBuff[msgIdx++];
 800467a:	7dfb      	ldrb	r3, [r7, #23]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	75fa      	strb	r2, [r7, #23]
 8004680:	461a      	mov	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	73bb      	strb	r3, [r7, #14]
		rsp.Month = rpcBuff[msgIdx++];
 800468a:	7dfb      	ldrb	r3, [r7, #23]
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	75fa      	strb	r2, [r7, #23]
 8004690:	461a      	mov	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	73fb      	strb	r3, [r7, #15]
		rsp.Day = rpcBuff[msgIdx++];
 800469a:	7dfb      	ldrb	r3, [r7, #23]
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	75fa      	strb	r2, [r7, #23]
 80046a0:	461a      	mov	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	743b      	strb	r3, [r7, #16]
		rsp.Year = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4413      	add	r3, r2
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	3301      	adds	r3, #1
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	440b      	add	r3, r1
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4413      	add	r3, r2
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	827b      	strh	r3, [r7, #18]
		msgIdx += 2;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	3302      	adds	r3, #2
 80046ce:	75fb      	strb	r3, [r7, #23]

		mtSysCbs.pfnSysGetTimeSrsp(&rsp);
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <processGetTimeSrsp+0xe0>)
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	f107 0208 	add.w	r2, r7, #8
 80046d8:	4610      	mov	r0, r2
 80046da:	4798      	blx	r3
	}
}
 80046dc:	bf00      	nop
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000df4 	.word	0x20000df4
 80046e8:	0800f34c 	.word	0x0800f34c

080046ec <processSetTxPowerSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processSetTxPowerSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysSetTxPowerSrsp) {
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <processSetTxPowerSrsp+0x48>)
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d015      	beq.n	800472c <processSetTxPowerSrsp+0x40>
		uint8_t msgIdx = 2;
 8004700:	2302      	movs	r3, #2
 8004702:	73fb      	strb	r3, [r7, #15]
		SetTxPowerSrspFormat_t rsp;
		if (rpcLen < 1) {
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <processSetTxPowerSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800470a:	480b      	ldr	r0, [pc, #44]	; (8004738 <processSetTxPowerSrsp+0x4c>)
 800470c:	f008 ffea 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.TxPower = rpcBuff[msgIdx++];
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	73fa      	strb	r2, [r7, #15]
 8004716:	461a      	mov	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4413      	add	r3, r2
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysSetTxPowerSrsp(&rsp);
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <processSetTxPowerSrsp+0x48>)
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	f107 020c 	add.w	r2, r7, #12
 8004728:	4610      	mov	r0, r2
 800472a:	4798      	blx	r3
	}
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000df4 	.word	0x20000df4
 8004738:	0800f34c 	.word	0x0800f34c

0800473c <processSrsp>:
 *
 * @param
 *

 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	461a      	mov	r2, r3
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4843      	ldr	r0, [pc, #268]	; (800485c <processSrsp+0x120>)
 8004750:	f008 ff2c 	bl	800d5ac <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3301      	adds	r3, #1
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	3b01      	subs	r3, #1
 800475c:	2b13      	cmp	r3, #19
 800475e:	d873      	bhi.n	8004848 <processSrsp+0x10c>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <processSrsp+0x2c>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	080047b9 	.word	0x080047b9
 800476c:	080047dd 	.word	0x080047dd
 8004770:	08004849 	.word	0x08004849
 8004774:	080047c5 	.word	0x080047c5
 8004778:	080047d1 	.word	0x080047d1
 800477c:	08004849 	.word	0x08004849
 8004780:	08004849 	.word	0x08004849
 8004784:	080047e9 	.word	0x080047e9
 8004788:	08004851 	.word	0x08004851
 800478c:	08004849 	.word	0x08004849
 8004790:	08004849 	.word	0x08004849
 8004794:	08004825 	.word	0x08004825
 8004798:	0800480d 	.word	0x0800480d
 800479c:	08004819 	.word	0x08004819
 80047a0:	08004801 	.word	0x08004801
 80047a4:	08004849 	.word	0x08004849
 80047a8:	08004831 	.word	0x08004831
 80047ac:	08004849 	.word	0x08004849
 80047b0:	080047f5 	.word	0x080047f5
 80047b4:	0800483d 	.word	0x0800483d
		case MT_SYS_PING:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_PING\n");
			processPingSrsp(rpcBuff, rpcLen);
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff fb51 	bl	8003e64 <processPingSrsp>
			break;
 80047c2:	e046      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_GET_EXTADDR:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GET_EXTADDR\n");
			processGetExtAddrSrsp(rpcBuff, rpcLen);
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fb7f 	bl	8003ecc <processGetExtAddrSrsp>
			break;
 80047ce:	e040      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_RAM_READ:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RAM_READ\n");
			processRamReadSrsp(rpcBuff, rpcLen);
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	4619      	mov	r1, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff fbcd 	bl	8003f74 <processRamReadSrsp>
			break;
 80047da:	e03a      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_VERSION:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_VERSION\n");
			processVersionSrsp(rpcBuff, rpcLen);
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fccf 	bl	8004184 <processVersionSrsp>
			break;
 80047e6:	e034      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_OSAL_NV_READ:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_READ\n");
			processOsalNvReadSrsp(rpcBuff, rpcLen);
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	4619      	mov	r1, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff fd11 	bl	8004214 <processOsalNvReadSrsp>
			break;
 80047f2:	e02e      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_OSAL_NV_WRITE:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_WRITE\n");
			break;
		case MT_SYS_OSAL_NV_LENGTH:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_LENGTH\n");
			processOsalNvLengthSrsp(rpcBuff, rpcLen);
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	4619      	mov	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fdef 	bl	80043dc <processOsalNvLengthSrsp>
			break;
 80047fe:	e028      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_STACK_TUNE:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_STACK_TUNE\n");
			processStackTuneSrsp(rpcBuff, rpcLen);
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fe45 	bl	8004494 <processStackTuneSrsp>
			break;
 800480a:	e022      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_ADC_READ:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_ADC_READ\n");
			processAdcReadSrsp(rpcBuff, rpcLen);
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff fe67 	bl	80044e4 <processAdcReadSrsp>
			break;
 8004816:	e01c      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_GPIO:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GPIO\n");
			processGpioSrsp(rpcBuff, rpcLen);
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fe95 	bl	800454c <processGpioSrsp>
			break;
 8004822:	e016      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_RANDOM:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RANDOM\n");
			processRandomSrsp(rpcBuff, rpcLen);
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff feb7 	bl	800459c <processRandomSrsp>
			break;
 800482e:	e010      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_GET_TIME:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GET_TIME\n");
			processGetTimeSrsp(rpcBuff, rpcLen);
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fee5 	bl	8004604 <processGetTimeSrsp>
			break;
 800483a:	e00a      	b.n	8004852 <processSrsp+0x116>
		case MT_SYS_SET_TX_POWER:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_SET_TX_POWER\n");
			processSetTxPowerSrsp(rpcBuff, rpcLen);
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff53 	bl	80046ec <processSetTxPowerSrsp>
			break;
 8004846:	e004      	b.n	8004852 <processSrsp+0x116>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message\n");
 8004848:	4805      	ldr	r0, [pc, #20]	; (8004860 <processSrsp+0x124>)
 800484a:	f7fb ff39 	bl	80006c0 <log_print>
			break;
 800484e:	e000      	b.n	8004852 <processSrsp+0x116>
			break;
 8004850:	bf00      	nop
	}

}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	200086a4 	.word	0x200086a4
 8004860:	0800f360 	.word	0x0800f360

08004864 <sysProcess>:
 *
 * @param   rpcLen has the size of the frame: cmd0 + cmd1 + payload + FCS
 *

 *************************************************************************************************/
void sysProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004878:	2b60      	cmp	r3, #96	; 0x60
 800487a:	d105      	bne.n	8004888 <sysProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff5b 	bl	800473c <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcSys: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8004886:	e01e      	b.n	80048c6 <sysProcess+0x62>
		switch (rpcBuff[1]) {
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3301      	adds	r3, #1
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b80      	cmp	r3, #128	; 0x80
 8004890:	d002      	beq.n	8004898 <sysProcess+0x34>
 8004892:	2b81      	cmp	r3, #129	; 0x81
 8004894:	d006      	beq.n	80048a4 <sysProcess+0x40>
 8004896:	e00b      	b.n	80048b0 <sysProcess+0x4c>
				processResetInd(rpcBuff, rpcLen);
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fc0b 	bl	80040b8 <processResetInd>
				break;
 80048a2:	e010      	b.n	80048c6 <sysProcess+0x62>
				processOsalTimerExpired(rpcBuff, rpcLen);
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fdcb 	bl	8004444 <processOsalTimerExpired>
				break;
 80048ae:	e00a      	b.n	80048c6 <sysProcess+0x62>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcSys: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	4619      	mov	r1, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3301      	adds	r3, #1
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	4804      	ldr	r0, [pc, #16]	; (80048d0 <sysProcess+0x6c>)
 80048c0:	f7fb fefe 	bl	80006c0 <log_print>
				break;
 80048c4:	bf00      	nop
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	0800f384 	.word	0x0800f384

080048d4 <processGetDeviceInfo>:

void utilRegisterCallbacks(mtUtilCb_t cbs) {
	memcpy(&mtUtilCbs, &cbs, sizeof(mtUtilCb_t));
}

static void processGetDeviceInfo(uint8_t *rpcBuff, uint8_t rpcLen) {
 80048d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048d8:	b09b      	sub	sp, #108	; 0x6c
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtUtilCbs.pfnUtilGetDeviceInfoCb_t) {
 80048e2:	4b6f      	ldr	r3, [pc, #444]	; (8004aa0 <processGetDeviceInfo+0x1cc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 80d5 	beq.w	8004a96 <processGetDeviceInfo+0x1c2>
		uint8_t msgIdx = 2;
 80048ec:	2302      	movs	r3, #2
 80048ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		utilGetDeviceInfoFormat_t rsp;

		// size error?
		if (rpcLen < 1) {
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d102      	bne.n	80048fe <processGetDeviceInfo+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 80048f8:	486a      	ldr	r0, [pc, #424]	; (8004aa4 <processGetDeviceInfo+0x1d0>)
 80048fa:	f008 fef3 	bl	800d6e4 <puts>
		}

		// copy command data
		rsp.success = rpcBuff[msgIdx++];
 80048fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	723b      	strb	r3, [r7, #8]
		rsp.ieee_addr = 0;
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (uint8_t i = 0; i < 8; i++)
 800491e:	2300      	movs	r3, #0
 8004920:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004924:	e029      	b.n	800497a <processGetDeviceInfo+0xa6>
			rsp.ieee_addr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8004926:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8004930:	461a      	mov	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 8004942:	00c9      	lsls	r1, r1, #3
 8004944:	f1a1 0620 	sub.w	r6, r1, #32
 8004948:	f1c1 0020 	rsb	r0, r1, #32
 800494c:	fa03 f501 	lsl.w	r5, r3, r1
 8004950:	fa02 f606 	lsl.w	r6, r2, r6
 8004954:	4335      	orrs	r5, r6
 8004956:	fa22 f000 	lsr.w	r0, r2, r0
 800495a:	4305      	orrs	r5, r0
 800495c:	fa02 f401 	lsl.w	r4, r2, r1
 8004960:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004964:	ea44 0802 	orr.w	r8, r4, r2
 8004968:	ea45 0903 	orr.w	r9, r5, r3
 800496c:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (uint8_t i = 0; i < 8; i++)
 8004970:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004974:	3301      	adds	r3, #1
 8004976:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800497a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800497e:	2b07      	cmp	r3, #7
 8004980:	d9d1      	bls.n	8004926 <processGetDeviceInfo+0x52>
		rsp.short_addr = rpcBuff[msgIdx++];
 8004982:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 800498c:	461a      	mov	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	833b      	strh	r3, [r7, #24]
		rsp.short_addr |= (rpcBuff[msgIdx++] << 8);
 8004998:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80049a2:	461a      	mov	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	8b3a      	ldrh	r2, [r7, #24]
 80049ae:	b212      	sxth	r2, r2
 80049b0:	b21b      	sxth	r3, r3
 80049b2:	4313      	orrs	r3, r2
 80049b4:	b21b      	sxth	r3, r3
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	833b      	strh	r3, [r7, #24]
		rsp.device_type = rpcBuff[msgIdx++];
 80049ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80049c4:	461a      	mov	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4413      	add	r3, r2
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	76bb      	strb	r3, [r7, #26]
		rsp.device_state = rpcBuff[msgIdx++];
 80049ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80049d8:	461a      	mov	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	76fb      	strb	r3, [r7, #27]
#warning possible loss of data
		rsp.ass_device_cnt = MIN(rpcBuff[msgIdx], ASS_DEVICE_LIST_MAX);
 80049e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	bf28      	it	cs
 80049f0:	2320      	movcs	r3, #32
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	773b      	strb	r3, [r7, #28]
		msgIdx++;
 80049f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80049fa:	3301      	adds	r3, #1
 80049fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (rsp.ass_device_cnt) {
 8004a00:	7f3b      	ldrb	r3, [r7, #28]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d041      	beq.n	8004a8a <processGetDeviceInfo+0x1b6>
			for (uint8_t i = 0; i < rsp.ass_device_cnt; i++) {
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8004a0c:	e038      	b.n	8004a80 <processGetDeviceInfo+0x1ac>
				rsp.ass_device_list[i] = rpcBuff[msgIdx++];
 8004a0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	781a      	ldrb	r2, [r3, #0]
 8004a20:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004a24:	b292      	uxth	r2, r2
 8004a26:	3308      	adds	r3, #8
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004a2e:	440b      	add	r3, r1
 8004a30:	f823 2c5a 	strh.w	r2, [r3, #-90]
				rsp.ass_device_list[i] |= (rpcBuff[msgIdx++] << 8);
 8004a34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8004a3e:	461a      	mov	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	0219      	lsls	r1, r3, #8
 8004a48:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004a54:	4413      	add	r3, r2
 8004a56:	f833 3c5a 	ldrh.w	r3, [r3, #-90]
 8004a5a:	b21a      	sxth	r2, r3
 8004a5c:	b20b      	sxth	r3, r1
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	b21a      	sxth	r2, r3
 8004a62:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004a66:	b292      	uxth	r2, r2
 8004a68:	3308      	adds	r3, #8
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004a70:	440b      	add	r3, r1
 8004a72:	f823 2c5a 	strh.w	r2, [r3, #-90]
			for (uint8_t i = 0; i < rsp.ass_device_cnt; i++) {
 8004a76:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8004a80:	7f3b      	ldrb	r3, [r7, #28]
 8004a82:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d3c1      	bcc.n	8004a0e <processGetDeviceInfo+0x13a>
			}
		}

		// callback function
		mtUtilCbs.pfnUtilGetDeviceInfoCb_t(&rsp);
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <processGetDeviceInfo+0x1cc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f107 0208 	add.w	r2, r7, #8
 8004a92:	4610      	mov	r0, r2
 8004a94:	4798      	blx	r3
	}
}
 8004a96:	bf00      	nop
 8004a98:	376c      	adds	r7, #108	; 0x6c
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004aa0:	20000e2c 	.word	0x20000e2c
 8004aa4:	0800f3b4 	.word	0x0800f3b4

08004aa8 <processSrsp>:

static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d105      	bne.n	8004aca <processSrsp+0x22>
		case MT_UTIL_SRSP_GET_DEVICE_INFO:
			dbg_print(PRINT_LEVEL_VERBOSE, "utilProcess: SET_CHANNEL_SRSP\n");
			processGetDeviceInfo(rpcBuff, rpcLen);
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ff06 	bl	80048d4 <processGetDeviceInfo>
			break;
 8004ac8:	e00a      	b.n	8004ae0 <processSrsp+0x38>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4803      	ldr	r0, [pc, #12]	; (8004ae8 <processSrsp+0x40>)
 8004ada:	f7fb fdf1 	bl	80006c0 <log_print>
			break;
 8004ade:	bf00      	nop
	}
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	0800f3c8 	.word	0x0800f3c8

08004aec <utilProcess>:

void utilProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "utilProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004b00:	2b60      	cmp	r3, #96	; 0x60
 8004b02:	d105      	bne.n	8004b10 <utilProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ffcd 	bl	8004aa8 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8004b0e:	e00a      	b.n	8004b26 <utilProcess+0x3a>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	4619      	mov	r1, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4804      	ldr	r0, [pc, #16]	; (8004b30 <utilProcess+0x44>)
 8004b20:	f7fb fdce 	bl	80006c0 <log_print>
				break;
 8004b24:	bf00      	nop
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	0800f3f4 	.word	0x0800f3f4

08004b34 <utilGetDeviceInfo>:

uint8_t utilGetDeviceInfo(void) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
	uint8_t status;

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_UTIL), 0x00, NULL, 0);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2100      	movs	r1, #0
 8004b40:	2027      	movs	r0, #39	; 0x27
 8004b42:	f003 f951 	bl	8007de8 <rpcSendFrame>
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <utilGetDeviceInfo+0x22>
		rpcWaitMqClientMsg(50);
 8004b50:	2032      	movs	r0, #50	; 0x32
 8004b52:	f002 ffc9 	bl	8007ae8 <rpcWaitMqClientMsg>
	}

	// return
	return status;
 8004b56:	79fb      	ldrb	r3, [r7, #7]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <processStateChange>:
 *
 * @param   uint8_t *rpcBuff
 *
 * @return  none
 */
static void processStateChange(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]

	uint8_t zdoState = rpcBuff[2];
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	789b      	ldrb	r3, [r3, #2]
 8004b70:	73fb      	strb	r3, [r7, #15]
	//passes the state to the callback function
	if (mtZdoCbs.pfnmtZdoStateChangeInd) {
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <processStateChange+0x2c>)
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d004      	beq.n	8004b84 <processStateChange+0x24>
		mtZdoCbs.pfnmtZdoStateChangeInd(zdoState);
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <processStateChange+0x2c>)
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	7bfa      	ldrb	r2, [r7, #15]
 8004b80:	4610      	mov	r0, r2
 8004b82:	4798      	blx	r3
	}
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000e30 	.word	0x20000e30

08004b90 <zdoSimpleDescReq>:
 *
 * @param    req - Pointer to outgoing command structure
 *
 * @return   status
 */
uint8_t zdoSimpleDescReq(SimpleDescReqFormat_t *req) {
 8004b90:	b5b0      	push	{r4, r5, r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	466b      	mov	r3, sp
 8004b9a:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	75bb      	strb	r3, [r7, #22]
	uint32_t cmdLen = 5;
 8004ba0:	2305      	movs	r3, #5
 8004ba2:	613b      	str	r3, [r7, #16]
	uint8_t cmd[cmdLen];
 8004ba4:	693c      	ldr	r4, [r7, #16]
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	4620      	mov	r0, r4
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	00cb      	lsls	r3, r1, #3
 8004bbc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004bc0:	00c2      	lsls	r2, r0, #3
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	00cb      	lsls	r3, r1, #3
 8004bd2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004bd6:	00c2      	lsls	r2, r0, #3
 8004bd8:	1de3      	adds	r3, r4, #7
 8004bda:	08db      	lsrs	r3, r3, #3
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	ebad 0d03 	sub.w	sp, sp, r3
 8004be2:	466b      	mov	r3, sp
 8004be4:	3300      	adds	r3, #0
 8004be6:	60bb      	str	r3, [r7, #8]

	cmd[cmInd++] = (uint8_t) (req->DstAddr & 0xFF);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8819      	ldrh	r1, [r3, #0]
 8004bec:	7dbb      	ldrb	r3, [r7, #22]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	75ba      	strb	r2, [r7, #22]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	b2c9      	uxtb	r1, r1
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->DstAddr >> 8) & 0xFF);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	b299      	uxth	r1, r3
 8004c02:	7dbb      	ldrb	r3, [r7, #22]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	75ba      	strb	r2, [r7, #22]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	b2c9      	uxtb	r1, r1
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->NwkAddrOfInterest & 0xFF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8859      	ldrh	r1, [r3, #2]
 8004c14:	7dbb      	ldrb	r3, [r7, #22]
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	75ba      	strb	r2, [r7, #22]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	b2c9      	uxtb	r1, r1
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->NwkAddrOfInterest >> 8) & 0xFF);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	885b      	ldrh	r3, [r3, #2]
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	b299      	uxth	r1, r3
 8004c2a:	7dbb      	ldrb	r3, [r7, #22]
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	75ba      	strb	r2, [r7, #22]
 8004c30:	461a      	mov	r2, r3
 8004c32:	b2c9      	uxtb	r1, r1
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Endpoint;
 8004c38:	7dbb      	ldrb	r3, [r7, #22]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	75ba      	strb	r2, [r7, #22]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7919      	ldrb	r1, [r3, #4]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	5499      	strb	r1, [r3, r2]

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_ZDO),
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2104      	movs	r1, #4
 8004c50:	2025      	movs	r0, #37	; 0x25
 8004c52:	f003 f8c9 	bl	8007de8 <rpcSendFrame>
 8004c56:	4603      	mov	r3, r0
 8004c58:	75fb      	strb	r3, [r7, #23]
	MT_ZDO_SIMPLE_DESC_REQ, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <zdoSimpleDescReq+0xdc>
		rpcWaitMqClientMsg(50);
 8004c60:	2032      	movs	r0, #50	; 0x32
 8004c62:	f002 ff41 	bl	8007ae8 <rpcWaitMqClientMsg>
		status = srspRpcBuff[2];
 8004c66:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <zdoSimpleDescReq+0xe8>)
 8004c68:	789b      	ldrb	r3, [r3, #2]
 8004c6a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	46ad      	mov	sp, r5
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bdb0      	pop	{r4, r5, r7, pc}
 8004c78:	200086a4 	.word	0x200086a4

08004c7c <zdoActiveEpReq>:
 *
 * @param    req - Pointer to outgoing command structure
 *
 * @return   status
 */
uint8_t zdoActiveEpReq(ActiveEpReqFormat_t *req) {
 8004c7c:	b5b0      	push	{r4, r5, r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	466b      	mov	r3, sp
 8004c86:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75bb      	strb	r3, [r7, #22]
	uint32_t cmdLen = 4;
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	613b      	str	r3, [r7, #16]
	uint8_t cmd[cmdLen];
 8004c90:	693c      	ldr	r4, [r7, #16]
 8004c92:	4623      	mov	r3, r4
 8004c94:	3b01      	subs	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	00cb      	lsls	r3, r1, #3
 8004ca8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004cac:	00c2      	lsls	r2, r0, #3
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f04f 0100 	mov.w	r1, #0
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	00cb      	lsls	r3, r1, #3
 8004cbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004cc2:	00c2      	lsls	r2, r0, #3
 8004cc4:	1de3      	adds	r3, r4, #7
 8004cc6:	08db      	lsrs	r3, r3, #3
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	ebad 0d03 	sub.w	sp, sp, r3
 8004cce:	466b      	mov	r3, sp
 8004cd0:	3300      	adds	r3, #0
 8004cd2:	60bb      	str	r3, [r7, #8]

	cmd[cmInd++] = (uint8_t) (req->DstAddr & 0xFF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8819      	ldrh	r1, [r3, #0]
 8004cd8:	7dbb      	ldrb	r3, [r7, #22]
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	75ba      	strb	r2, [r7, #22]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	b2c9      	uxtb	r1, r1
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->DstAddr >> 8) & 0xFF);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	b299      	uxth	r1, r3
 8004cee:	7dbb      	ldrb	r3, [r7, #22]
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	75ba      	strb	r2, [r7, #22]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	b2c9      	uxtb	r1, r1
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->NwkAddrOfInterest & 0xFF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8859      	ldrh	r1, [r3, #2]
 8004d00:	7dbb      	ldrb	r3, [r7, #22]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	75ba      	strb	r2, [r7, #22]
 8004d06:	461a      	mov	r2, r3
 8004d08:	b2c9      	uxtb	r1, r1
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->NwkAddrOfInterest >> 8) & 0xFF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	885b      	ldrh	r3, [r3, #2]
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	b299      	uxth	r1, r3
 8004d16:	7dbb      	ldrb	r3, [r7, #22]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	75ba      	strb	r2, [r7, #22]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	b2c9      	uxtb	r1, r1
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	5499      	strb	r1, [r3, r2]

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_ZDO), MT_ZDO_ACTIVE_EP_REQ, cmd, cmdLen);
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2105      	movs	r1, #5
 8004d2c:	2025      	movs	r0, #37	; 0x25
 8004d2e:	f003 f85b 	bl	8007de8 <rpcSendFrame>
 8004d32:	4603      	mov	r3, r0
 8004d34:	75fb      	strb	r3, [r7, #23]

	if (status == MT_RPC_SUCCESS) {
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <zdoActiveEpReq+0xcc>
		rpcWaitMqClientMsg(50);
 8004d3c:	2032      	movs	r0, #50	; 0x32
 8004d3e:	f002 fed3 	bl	8007ae8 <rpcWaitMqClientMsg>
		status = srspRpcBuff[2];
 8004d42:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <zdoActiveEpReq+0xd8>)
 8004d44:	789b      	ldrb	r3, [r3, #2]
 8004d46:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	46ad      	mov	sp, r5
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bdb0      	pop	{r4, r5, r7, pc}
 8004d54:	200086a4 	.word	0x200086a4

08004d58 <processGetLinkKey>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processGetLinkKey(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d5c:	b08d      	sub	sp, #52	; 0x34
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoGetLinkKey) {
 8004d66:	4b36      	ldr	r3, [pc, #216]	; (8004e40 <processGetLinkKey+0xe8>)
 8004d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d061      	beq.n	8004e34 <processGetLinkKey+0xdc>
		uint8_t msgIdx = 2;
 8004d70:	2302      	movs	r3, #2
 8004d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		GetLinkKeySrspFormat_t rsp;
		if (rpcLen < 25) {
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	2b18      	cmp	r3, #24
 8004d7a:	d802      	bhi.n	8004d82 <processGetLinkKey+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 8004d7c:	4831      	ldr	r0, [pc, #196]	; (8004e44 <processGetLinkKey+0xec>)
 8004d7e:	f008 fcb1 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8004d82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004da8:	e029      	b.n	8004dfe <processGetLinkKey+0xa6>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8004daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004db4:	461a      	mov	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004dc6:	00c9      	lsls	r1, r1, #3
 8004dc8:	f1a1 0620 	sub.w	r6, r1, #32
 8004dcc:	f1c1 0020 	rsb	r0, r1, #32
 8004dd0:	fa03 f501 	lsl.w	r5, r3, r1
 8004dd4:	fa02 f606 	lsl.w	r6, r2, r6
 8004dd8:	4335      	orrs	r5, r6
 8004dda:	fa22 f000 	lsr.w	r0, r2, r0
 8004dde:	4305      	orrs	r5, r0
 8004de0:	fa02 f401 	lsl.w	r4, r2, r1
 8004de4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004de8:	ea44 0802 	orr.w	r8, r4, r2
 8004dec:	ea45 0903 	orr.w	r9, r5, r3
 8004df0:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++)
 8004df4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004df8:	3301      	adds	r3, #1
 8004dfa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004dfe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e02:	2b07      	cmp	r3, #7
 8004e04:	d9d1      	bls.n	8004daa <processGetLinkKey+0x52>
		memcpy(rsp.LinkKeyData, &rpcBuff[msgIdx], 16);
 8004e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f107 0418 	add.w	r4, r7, #24
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		msgIdx += 16;
 8004e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e20:	3310      	adds	r3, #16
 8004e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		mtZdoCbs.pfnZdoGetLinkKey(&rsp);
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <processGetLinkKey+0xe8>)
 8004e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2c:	f107 0208 	add.w	r2, r7, #8
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
	}
}
 8004e34:	bf00      	nop
 8004e36:	3734      	adds	r7, #52	; 0x34
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000e30 	.word	0x20000e30
 8004e44:	0800f424 	.word	0x0800f424

08004e48 <processNwkAddrRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNwkAddrRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e4c:	b0ad      	sub	sp, #180	; 0xb4
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	460b      	mov	r3, r1
 8004e54:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNwkAddrRsp) {
 8004e56:	4b5b      	ldr	r3, [pc, #364]	; (8004fc4 <processNwkAddrRsp+0x17c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80ad 	beq.w	8004fba <processNwkAddrRsp+0x172>
		uint8_t msgIdx = 2;
 8004e60:	2302      	movs	r3, #2
 8004e62:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		NwkAddrRspFormat_t rsp;
		if (rpcLen < 13) {
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	2b0c      	cmp	r3, #12
 8004e6a:	d802      	bhi.n	8004e72 <processNwkAddrRsp+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 8004e6c:	4856      	ldr	r0, [pc, #344]	; (8004fc8 <processNwkAddrRsp+0x180>)
 8004e6e:	f008 fc39 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8004e72:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8004e98:	e029      	b.n	8004eee <processNwkAddrRsp+0xa6>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8004e9a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	f897 10ae 	ldrb.w	r1, [r7, #174]	; 0xae
 8004eb6:	00c9      	lsls	r1, r1, #3
 8004eb8:	f1a1 0620 	sub.w	r6, r1, #32
 8004ebc:	f1c1 0020 	rsb	r0, r1, #32
 8004ec0:	fa03 f501 	lsl.w	r5, r3, r1
 8004ec4:	fa02 f606 	lsl.w	r6, r2, r6
 8004ec8:	4335      	orrs	r5, r6
 8004eca:	fa22 f000 	lsr.w	r0, r2, r0
 8004ece:	4305      	orrs	r5, r0
 8004ed0:	fa02 f401 	lsl.w	r4, r2, r1
 8004ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ed8:	ea44 0802 	orr.w	r8, r4, r2
 8004edc:	ea45 0903 	orr.w	r9, r5, r3
 8004ee0:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++)
 8004ee4:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8004ee8:	3301      	adds	r3, #1
 8004eea:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8004eee:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8004ef2:	2b07      	cmp	r3, #7
 8004ef4:	d9d1      	bls.n	8004e9a <processNwkAddrRsp+0x52>
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004ef6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004f06:	3301      	adds	r3, #1
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	440b      	add	r3, r1
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 8004f1a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004f1e:	3302      	adds	r3, #2
 8004f20:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		rsp.StartIndex = rpcBuff[msgIdx++];
 8004f24:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8004f2e:	461a      	mov	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	76bb      	strb	r3, [r7, #26]
		rsp.NumAssocDev = rpcBuff[msgIdx++];
 8004f38:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8004f42:	461a      	mov	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4413      	add	r3, r2
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	76fb      	strb	r3, [r7, #27]
		if (rpcLen > 13) {
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	2b0d      	cmp	r3, #13
 8004f50:	d92d      	bls.n	8004fae <processNwkAddrRsp+0x166>
			uint32_t i;
			for (i = 0; i < rsp.NumAssocDev; i++) {
 8004f52:	2300      	movs	r3, #0
 8004f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f58:	e023      	b.n	8004fa2 <processNwkAddrRsp+0x15a>
				rsp.AssocDevList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004f5a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	440b      	add	r3, r1
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f80:	3308      	adds	r3, #8
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8004f88:	440b      	add	r3, r1
 8004f8a:	f823 2ca4 	strh.w	r2, [r3, #-164]
				msgIdx += 2;
 8004f8e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004f92:	3302      	adds	r3, #2
 8004f94:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			for (i = 0; i < rsp.NumAssocDev; i++) {
 8004f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fa2:	7efb      	ldrb	r3, [r7, #27]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d3d5      	bcc.n	8004f5a <processNwkAddrRsp+0x112>
			}
		}
		mtZdoCbs.pfnZdoNwkAddrRsp(&rsp);
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <processNwkAddrRsp+0x17c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f107 0208 	add.w	r2, r7, #8
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4798      	blx	r3
	}
}
 8004fba:	bf00      	nop
 8004fbc:	37b4      	adds	r7, #180	; 0xb4
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fc4:	20000e30 	.word	0x20000e30
 8004fc8:	0800f424 	.word	0x0800f424

08004fcc <processIeeeAddrRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processIeeeAddrRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fd0:	b0ad      	sub	sp, #180	; 0xb4
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoIeeeAddrRsp) {
 8004fda:	4b5f      	ldr	r3, [pc, #380]	; (8005158 <processIeeeAddrRsp+0x18c>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80b4 	beq.w	800514c <processIeeeAddrRsp+0x180>
		uint8_t msgIdx = 2;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		IeeeAddrRspFormat_t rsp;
		if (rpcLen < 13) {
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	2b0c      	cmp	r3, #12
 8004fee:	d802      	bhi.n	8004ff6 <processIeeeAddrRsp+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 8004ff0:	485a      	ldr	r0, [pc, #360]	; (800515c <processIeeeAddrRsp+0x190>)
 8004ff2:	f008 fb77 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8004ff6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8005000:	461a      	mov	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4413      	add	r3, r2
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8005016:	2300      	movs	r3, #0
 8005018:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800501c:	e029      	b.n	8005072 <processIeeeAddrRsp+0xa6>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 800501e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8005028:	461a      	mov	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4413      	add	r3, r2
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	f897 10ae 	ldrb.w	r1, [r7, #174]	; 0xae
 800503a:	00c9      	lsls	r1, r1, #3
 800503c:	f1a1 0620 	sub.w	r6, r1, #32
 8005040:	f1c1 0020 	rsb	r0, r1, #32
 8005044:	fa03 f501 	lsl.w	r5, r3, r1
 8005048:	fa02 f606 	lsl.w	r6, r2, r6
 800504c:	4335      	orrs	r5, r6
 800504e:	fa22 f000 	lsr.w	r0, r2, r0
 8005052:	4305      	orrs	r5, r0
 8005054:	fa02 f401 	lsl.w	r4, r2, r1
 8005058:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800505c:	ea44 0802 	orr.w	r8, r4, r2
 8005060:	ea45 0903 	orr.w	r9, r5, r3
 8005064:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++)
 8005068:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800506c:	3301      	adds	r3, #1
 800506e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8005072:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8005076:	2b07      	cmp	r3, #7
 8005078:	d9d1      	bls.n	800501e <processIeeeAddrRsp+0x52>
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800507a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b29a      	uxth	r2, r3
 8005086:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800508a:	3301      	adds	r3, #1
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	440b      	add	r3, r1
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	b29b      	uxth	r3, r3
 8005098:	4413      	add	r3, r2
 800509a:	b29b      	uxth	r3, r3
 800509c:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 800509e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80050a2:	3302      	adds	r3, #2
 80050a4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		rsp.StartIndex = rpcBuff[msgIdx++];
 80050a8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	76bb      	strb	r3, [r7, #26]
		rsp.NumAssocDev = rpcBuff[msgIdx++];
 80050bc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 80050c6:	461a      	mov	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4413      	add	r3, r2
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	76fb      	strb	r3, [r7, #27]
		rsp.StartIndex = (rsp.NumAssocDev == 0 ? 0 : rsp.StartIndex);
 80050d0:	7efb      	ldrb	r3, [r7, #27]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <processIeeeAddrRsp+0x10e>
 80050d6:	7ebb      	ldrb	r3, [r7, #26]
 80050d8:	e000      	b.n	80050dc <processIeeeAddrRsp+0x110>
 80050da:	2300      	movs	r3, #0
 80050dc:	76bb      	strb	r3, [r7, #26]
		if (rpcLen > 13) {
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	2b0d      	cmp	r3, #13
 80050e2:	d92d      	bls.n	8005140 <processIeeeAddrRsp+0x174>
			uint32_t i;
			for (i = 0; i < rsp.NumAssocDev; i++) {
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050ea:	e023      	b.n	8005134 <processIeeeAddrRsp+0x168>
				rsp.AssocDevList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80050ec:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4413      	add	r3, r2
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80050fc:	3301      	adds	r3, #1
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	440b      	add	r3, r1
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	b29b      	uxth	r3, r3
 800510a:	4413      	add	r3, r2
 800510c:	b29a      	uxth	r2, r3
 800510e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005112:	3308      	adds	r3, #8
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800511a:	440b      	add	r3, r1
 800511c:	f823 2ca4 	strh.w	r2, [r3, #-164]
				msgIdx += 2;
 8005120:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005124:	3302      	adds	r3, #2
 8005126:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			for (i = 0; i < rsp.NumAssocDev; i++) {
 800512a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800512e:	3301      	adds	r3, #1
 8005130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005134:	7efb      	ldrb	r3, [r7, #27]
 8005136:	461a      	mov	r2, r3
 8005138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800513c:	4293      	cmp	r3, r2
 800513e:	d3d5      	bcc.n	80050ec <processIeeeAddrRsp+0x120>
			}
		}
		mtZdoCbs.pfnZdoIeeeAddrRsp(&rsp);
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <processIeeeAddrRsp+0x18c>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f107 0208 	add.w	r2, r7, #8
 8005148:	4610      	mov	r0, r2
 800514a:	4798      	blx	r3
	}
}
 800514c:	bf00      	nop
 800514e:	37b4      	adds	r7, #180	; 0xb4
 8005150:	46bd      	mov	sp, r7
 8005152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005156:	bf00      	nop
 8005158:	20000e30 	.word	0x20000e30
 800515c:	0800f424 	.word	0x0800f424

08005160 <processNodeDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNodeDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNodeDescRsp) {
 800516c:	4b5c      	ldr	r3, [pc, #368]	; (80052e0 <processNodeDescRsp+0x180>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80b0 	beq.w	80052d6 <processNodeDescRsp+0x176>
		uint8_t msgIdx = 2;
 8005176:	2302      	movs	r3, #2
 8005178:	77fb      	strb	r3, [r7, #31]
		NodeDescRspFormat_t rsp;
		if (rpcLen < 18) {
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	2b11      	cmp	r3, #17
 800517e:	d802      	bhi.n	8005186 <processNodeDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8005180:	4858      	ldr	r0, [pc, #352]	; (80052e4 <processNodeDescRsp+0x184>)
 8005182:	f008 faaf 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005186:	7ffb      	ldrb	r3, [r7, #31]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	4413      	add	r3, r2
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	b29a      	uxth	r2, r3
 8005190:	7ffb      	ldrb	r3, [r7, #31]
 8005192:	3301      	adds	r3, #1
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	440b      	add	r3, r1
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	b29b      	uxth	r3, r3
 80051a0:	4413      	add	r3, r2
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80051a6:	7ffb      	ldrb	r3, [r7, #31]
 80051a8:	3302      	adds	r3, #2
 80051aa:	77fb      	strb	r3, [r7, #31]
		rsp.Status = rpcBuff[msgIdx++];
 80051ac:	7ffb      	ldrb	r3, [r7, #31]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	77fa      	strb	r2, [r7, #31]
 80051b2:	461a      	mov	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4413      	add	r3, r2
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80051bc:	7ffb      	ldrb	r3, [r7, #31]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	4413      	add	r3, r2
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	7ffb      	ldrb	r3, [r7, #31]
 80051c8:	3301      	adds	r3, #1
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	440b      	add	r3, r1
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	4413      	add	r3, r2
 80051d8:	b29b      	uxth	r3, r3
 80051da:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80051dc:	7ffb      	ldrb	r3, [r7, #31]
 80051de:	3302      	adds	r3, #2
 80051e0:	77fb      	strb	r3, [r7, #31]
		rsp.LoTy_ComDescAv_UsrDesAv = rpcBuff[msgIdx++];
 80051e2:	7ffb      	ldrb	r3, [r7, #31]
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	77fa      	strb	r2, [r7, #31]
 80051e8:	461a      	mov	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	73bb      	strb	r3, [r7, #14]
		rsp.APSFlg_FrqBnd = rpcBuff[msgIdx++];
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	77fa      	strb	r2, [r7, #31]
 80051f8:	461a      	mov	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4413      	add	r3, r2
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	73fb      	strb	r3, [r7, #15]
		rsp.MACCapFlg = rpcBuff[msgIdx++];
 8005202:	7ffb      	ldrb	r3, [r7, #31]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	77fa      	strb	r2, [r7, #31]
 8005208:	461a      	mov	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	743b      	strb	r3, [r7, #16]
		rsp.ManufacturerCode = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005212:	7ffb      	ldrb	r3, [r7, #31]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	4413      	add	r3, r2
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	b29a      	uxth	r2, r3
 800521c:	7ffb      	ldrb	r3, [r7, #31]
 800521e:	3301      	adds	r3, #1
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	440b      	add	r3, r1
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	b29b      	uxth	r3, r3
 800522c:	4413      	add	r3, r2
 800522e:	b29b      	uxth	r3, r3
 8005230:	827b      	strh	r3, [r7, #18]
		msgIdx += 2;
 8005232:	7ffb      	ldrb	r3, [r7, #31]
 8005234:	3302      	adds	r3, #2
 8005236:	77fb      	strb	r3, [r7, #31]
		rsp.MaxBufferSize = rpcBuff[msgIdx++];
 8005238:	7ffb      	ldrb	r3, [r7, #31]
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	77fa      	strb	r2, [r7, #31]
 800523e:	461a      	mov	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4413      	add	r3, r2
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	753b      	strb	r3, [r7, #20]
		rsp.MaxTransferSize = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005248:	7ffb      	ldrb	r3, [r7, #31]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	b29a      	uxth	r2, r3
 8005252:	7ffb      	ldrb	r3, [r7, #31]
 8005254:	3301      	adds	r3, #1
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	440b      	add	r3, r1
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	b29b      	uxth	r3, r3
 8005262:	4413      	add	r3, r2
 8005264:	b29b      	uxth	r3, r3
 8005266:	82fb      	strh	r3, [r7, #22]
		msgIdx += 2;
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	3302      	adds	r3, #2
 800526c:	77fb      	strb	r3, [r7, #31]
		rsp.ServerMask = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800526e:	7ffb      	ldrb	r3, [r7, #31]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4413      	add	r3, r2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	b29a      	uxth	r2, r3
 8005278:	7ffb      	ldrb	r3, [r7, #31]
 800527a:	3301      	adds	r3, #1
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	440b      	add	r3, r1
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	b29b      	uxth	r3, r3
 8005288:	4413      	add	r3, r2
 800528a:	b29b      	uxth	r3, r3
 800528c:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 800528e:	7ffb      	ldrb	r3, [r7, #31]
 8005290:	3302      	adds	r3, #2
 8005292:	77fb      	strb	r3, [r7, #31]
		rsp.MaxOutTransferSize = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005294:	7ffb      	ldrb	r3, [r7, #31]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4413      	add	r3, r2
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	b29a      	uxth	r2, r3
 800529e:	7ffb      	ldrb	r3, [r7, #31]
 80052a0:	3301      	adds	r3, #1
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	440b      	add	r3, r1
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	837b      	strh	r3, [r7, #26]
		msgIdx += 2;
 80052b4:	7ffb      	ldrb	r3, [r7, #31]
 80052b6:	3302      	adds	r3, #2
 80052b8:	77fb      	strb	r3, [r7, #31]
		rsp.DescriptorCapabilities = rpcBuff[msgIdx++];
 80052ba:	7ffb      	ldrb	r3, [r7, #31]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	77fa      	strb	r2, [r7, #31]
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4413      	add	r3, r2
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	773b      	strb	r3, [r7, #28]

		mtZdoCbs.pfnZdoNodeDescRsp(&rsp);
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <processNodeDescRsp+0x180>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f107 0208 	add.w	r2, r7, #8
 80052d2:	4610      	mov	r0, r2
 80052d4:	4798      	blx	r3
	}
}
 80052d6:	bf00      	nop
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000e30 	.word	0x20000e30
 80052e4:	0800f424 	.word	0x0800f424

080052e8 <processPowerDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processPowerDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoPowerDescRsp) {
 80052f4:	4b29      	ldr	r3, [pc, #164]	; (800539c <processPowerDescRsp+0xb4>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d04b      	beq.n	8005394 <processPowerDescRsp+0xac>
		uint8_t msgIdx = 2;
 80052fc:	2302      	movs	r3, #2
 80052fe:	75fb      	strb	r3, [r7, #23]
		PowerDescRspFormat_t rsp;
		if (rpcLen < 7) {
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	2b06      	cmp	r3, #6
 8005304:	d802      	bhi.n	800530c <processPowerDescRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8005306:	4826      	ldr	r0, [pc, #152]	; (80053a0 <processPowerDescRsp+0xb8>)
 8005308:	f008 f9ec 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	4413      	add	r3, r2
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	b29a      	uxth	r2, r3
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	3301      	adds	r3, #1
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	440b      	add	r3, r1
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	b29b      	uxth	r3, r3
 8005326:	4413      	add	r3, r2
 8005328:	b29b      	uxth	r3, r3
 800532a:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800532c:	7dfb      	ldrb	r3, [r7, #23]
 800532e:	3302      	adds	r3, #2
 8005330:	75fb      	strb	r3, [r7, #23]
		rsp.Status = rpcBuff[msgIdx++];
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	75fa      	strb	r2, [r7, #23]
 8005338:	461a      	mov	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4413      	add	r3, r2
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	4413      	add	r3, r2
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	b29a      	uxth	r2, r3
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	3301      	adds	r3, #1
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	440b      	add	r3, r1
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	b29b      	uxth	r3, r3
 800535c:	4413      	add	r3, r2
 800535e:	b29b      	uxth	r3, r3
 8005360:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	3302      	adds	r3, #2
 8005366:	75fb      	strb	r3, [r7, #23]
		rsp.CurrntPwrMode_AvalPwrSrcs = rpcBuff[msgIdx++];
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	75fa      	strb	r2, [r7, #23]
 800536e:	461a      	mov	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4413      	add	r3, r2
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	74bb      	strb	r3, [r7, #18]
		rsp.CurrntPwrSrc_CurrntPwrSrcLvl = rpcBuff[msgIdx++];
 8005378:	7dfb      	ldrb	r3, [r7, #23]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	75fa      	strb	r2, [r7, #23]
 800537e:	461a      	mov	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4413      	add	r3, r2
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	74fb      	strb	r3, [r7, #19]

		mtZdoCbs.pfnZdoPowerDescRsp(&rsp);
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <processPowerDescRsp+0xb4>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f107 020c 	add.w	r2, r7, #12
 8005390:	4610      	mov	r0, r2
 8005392:	4798      	blx	r3
	}
}
 8005394:	bf00      	nop
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000e30 	.word	0x20000e30
 80053a0:	0800f424 	.word	0x0800f424

080053a4 <processSimpleDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processSimpleDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b098      	sub	sp, #96	; 0x60
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoSimpleDescRsp) {
 80053b0:	4b83      	ldr	r3, [pc, #524]	; (80055c0 <processSimpleDescRsp+0x21c>)
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80ff 	beq.w	80055b8 <processSimpleDescRsp+0x214>
		uint8_t msgIdx = 2;
 80053ba:	2302      	movs	r3, #2
 80053bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		SimpleDescRspFormat_t rsp;
		if (rpcLen < 6) {
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d802      	bhi.n	80053cc <processSimpleDescRsp+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 80053c6:	487f      	ldr	r0, [pc, #508]	; (80055c4 <processSimpleDescRsp+0x220>)
 80053c8:	f008 f98c 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80053cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053dc:	3301      	adds	r3, #1
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	440b      	add	r3, r1
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	4413      	add	r3, r2
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80053f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053f4:	3302      	adds	r3, #2
 80053f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		rsp.Status = rpcBuff[msgIdx++];
 80053fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005404:	461a      	mov	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4413      	add	r3, r2
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800540e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	4413      	add	r3, r2
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b29a      	uxth	r2, r3
 800541a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800541e:	3301      	adds	r3, #1
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	440b      	add	r3, r1
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	b29b      	uxth	r3, r3
 800542c:	4413      	add	r3, r2
 800542e:	b29b      	uxth	r3, r3
 8005430:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005436:	3302      	adds	r3, #2
 8005438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		rsp.Len = rpcBuff[msgIdx++];
 800543c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005446:	461a      	mov	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4413      	add	r3, r2
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	73bb      	strb	r3, [r7, #14]
		if (rpcLen > 6) {
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	2b06      	cmp	r3, #6
 8005454:	f240 80aa 	bls.w	80055ac <processSimpleDescRsp+0x208>
			rsp.Endpoint = rpcBuff[msgIdx++];
 8005458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005462:	461a      	mov	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4413      	add	r3, r2
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	73fb      	strb	r3, [r7, #15]
			rsp.ProfileID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800546c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	4413      	add	r3, r2
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	b29a      	uxth	r2, r3
 8005478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800547c:	3301      	adds	r3, #1
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	440b      	add	r3, r1
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	b29b      	uxth	r3, r3
 800548a:	4413      	add	r3, r2
 800548c:	b29b      	uxth	r3, r3
 800548e:	823b      	strh	r3, [r7, #16]
			msgIdx += 2;
 8005490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005494:	3302      	adds	r3, #2
 8005496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			rsp.DeviceID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800549a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054aa:	3301      	adds	r3, #1
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	440b      	add	r3, r1
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	4413      	add	r3, r2
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	827b      	strh	r3, [r7, #18]
			msgIdx += 2;
 80054be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054c2:	3302      	adds	r3, #2
 80054c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			rsp.DeviceVersion = rpcBuff[msgIdx++];
 80054c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80054d2:	461a      	mov	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4413      	add	r3, r2
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	753b      	strb	r3, [r7, #20]
			rsp.NumInClusters = rpcBuff[msgIdx++];
 80054dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	757b      	strb	r3, [r7, #21]
			uint32_t i;
			for (i = 0; i < rsp.NumInClusters; i++) {
 80054f0:	2300      	movs	r3, #0
 80054f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80054f4:	e020      	b.n	8005538 <processSimpleDescRsp+0x194>
				rsp.InClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80054f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	b29a      	uxth	r2, r3
 8005502:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005506:	3301      	adds	r3, #1
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	440b      	add	r3, r1
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	b29b      	uxth	r3, r3
 8005514:	4413      	add	r3, r2
 8005516:	b29a      	uxth	r2, r3
 8005518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800551a:	3304      	adds	r3, #4
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005522:	440b      	add	r3, r1
 8005524:	f823 2c52 	strh.w	r2, [r3, #-82]
				msgIdx += 2;
 8005528:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800552c:	3302      	adds	r3, #2
 800552e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			for (i = 0; i < rsp.NumInClusters; i++) {
 8005532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005534:	3301      	adds	r3, #1
 8005536:	65bb      	str	r3, [r7, #88]	; 0x58
 8005538:	7d7b      	ldrb	r3, [r7, #21]
 800553a:	461a      	mov	r2, r3
 800553c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800553e:	4293      	cmp	r3, r2
 8005540:	d3d9      	bcc.n	80054f6 <processSimpleDescRsp+0x152>
			}
			rsp.NumOutClusters = rpcBuff[msgIdx++];
 8005542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 800554c:	461a      	mov	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			for (i = 0; i < rsp.NumOutClusters; i++) {
 8005558:	2300      	movs	r3, #0
 800555a:	65bb      	str	r3, [r7, #88]	; 0x58
 800555c:	e020      	b.n	80055a0 <processSimpleDescRsp+0x1fc>
				rsp.OutClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800555e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	b29a      	uxth	r2, r3
 800556a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800556e:	3301      	adds	r3, #1
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	440b      	add	r3, r1
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	b29b      	uxth	r3, r3
 800557c:	4413      	add	r3, r2
 800557e:	b29a      	uxth	r2, r3
 8005580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005582:	3318      	adds	r3, #24
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800558a:	440b      	add	r3, r1
 800558c:	f823 2c58 	strh.w	r2, [r3, #-88]
				msgIdx += 2;
 8005590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005594:	3302      	adds	r3, #2
 8005596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			for (i = 0; i < rsp.NumOutClusters; i++) {
 800559a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800559c:	3301      	adds	r3, #1
 800559e:	65bb      	str	r3, [r7, #88]	; 0x58
 80055a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80055a4:	461a      	mov	r2, r3
 80055a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d3d8      	bcc.n	800555e <processSimpleDescRsp+0x1ba>
			}
		}
		mtZdoCbs.pfnZdoSimpleDescRsp(&rsp);
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <processSimpleDescRsp+0x21c>)
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f107 0208 	add.w	r2, r7, #8
 80055b4:	4610      	mov	r0, r2
 80055b6:	4798      	blx	r3
	}
}
 80055b8:	bf00      	nop
 80055ba:	3760      	adds	r7, #96	; 0x60
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20000e30 	.word	0x20000e30
 80055c4:	0800f424 	.word	0x0800f424

080055c8 <processActiveEpRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processActiveEpRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b09a      	sub	sp, #104	; 0x68
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoActiveEpRsp) {
 80055d4:	4b3a      	ldr	r3, [pc, #232]	; (80056c0 <processActiveEpRsp+0xf8>)
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d06d      	beq.n	80056b8 <processActiveEpRsp+0xf0>
		uint8_t msgIdx = 2;
 80055dc:	2302      	movs	r3, #2
 80055de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		ActiveEpRspFormat_t rsp;
		if (rpcLen < 6) {
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d802      	bhi.n	80055ee <processActiveEpRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 80055e8:	4836      	ldr	r0, [pc, #216]	; (80056c4 <processActiveEpRsp+0xfc>)
 80055ea:	f008 f87b 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80055ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	4413      	add	r3, r2
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80055fe:	3301      	adds	r3, #1
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	440b      	add	r3, r1
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	b29b      	uxth	r3, r3
 800560c:	4413      	add	r3, r2
 800560e:	b29b      	uxth	r3, r3
 8005610:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005612:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005616:	3302      	adds	r3, #2
 8005618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 800561c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005626:	461a      	mov	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005630:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4413      	add	r3, r2
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	b29a      	uxth	r2, r3
 800563c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005640:	3301      	adds	r3, #1
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	440b      	add	r3, r1
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	b29b      	uxth	r3, r3
 800564e:	4413      	add	r3, r2
 8005650:	b29b      	uxth	r3, r3
 8005652:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8005654:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005658:	3302      	adds	r3, #2
 800565a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.ActiveEPCount = rpcBuff[msgIdx++];
 800565e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	2b06      	cmp	r3, #6
 8005676:	d919      	bls.n	80056ac <processActiveEpRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.ActiveEPCount; i++) {
 8005678:	2300      	movs	r3, #0
 800567a:	663b      	str	r3, [r7, #96]	; 0x60
 800567c:	e011      	b.n	80056a2 <processActiveEpRsp+0xda>
				rsp.ActiveEPList[i] = rpcBuff[msgIdx++];
 800567e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005688:	461a      	mov	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	7819      	ldrb	r1, [r3, #0]
 8005690:	f107 0213 	add.w	r2, r7, #19
 8005694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005696:	4413      	add	r3, r2
 8005698:	460a      	mov	r2, r1
 800569a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.ActiveEPCount; i++) {
 800569c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800569e:	3301      	adds	r3, #1
 80056a0:	663b      	str	r3, [r7, #96]	; 0x60
 80056a2:	7cbb      	ldrb	r3, [r7, #18]
 80056a4:	461a      	mov	r2, r3
 80056a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d3e8      	bcc.n	800567e <processActiveEpRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoActiveEpRsp(&rsp);
 80056ac:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <processActiveEpRsp+0xf8>)
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f107 020c 	add.w	r2, r7, #12
 80056b4:	4610      	mov	r0, r2
 80056b6:	4798      	blx	r3
	}
}
 80056b8:	bf00      	nop
 80056ba:	3768      	adds	r7, #104	; 0x68
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000e30 	.word	0x20000e30
 80056c4:	0800f424 	.word	0x0800f424

080056c8 <processMatchDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMatchDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b09a      	sub	sp, #104	; 0x68
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMatchDescRsp) {
 80056d4:	4b3a      	ldr	r3, [pc, #232]	; (80057c0 <processMatchDescRsp+0xf8>)
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d06d      	beq.n	80057b8 <processMatchDescRsp+0xf0>
		uint8_t msgIdx = 2;
 80056dc:	2302      	movs	r3, #2
 80056de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		MatchDescRspFormat_t rsp;
		if (rpcLen < 6) {
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	2b05      	cmp	r3, #5
 80056e6:	d802      	bhi.n	80056ee <processMatchDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 80056e8:	4836      	ldr	r0, [pc, #216]	; (80057c4 <processMatchDescRsp+0xfc>)
 80056ea:	f007 fffb 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80056ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4413      	add	r3, r2
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056fe:	3301      	adds	r3, #1
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	440b      	add	r3, r1
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	b29b      	uxth	r3, r3
 800570c:	4413      	add	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005712:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005716:	3302      	adds	r3, #2
 8005718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 800571c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4413      	add	r3, r2
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005730:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4413      	add	r3, r2
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	b29a      	uxth	r2, r3
 800573c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005740:	3301      	adds	r3, #1
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	440b      	add	r3, r1
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	b29b      	uxth	r3, r3
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	b29b      	uxth	r3, r3
 800574e:	4413      	add	r3, r2
 8005750:	b29b      	uxth	r3, r3
 8005752:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8005754:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005758:	3302      	adds	r3, #2
 800575a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.MatchLength = rpcBuff[msgIdx++];
 800575e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005768:	461a      	mov	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	2b06      	cmp	r3, #6
 8005776:	d919      	bls.n	80057ac <processMatchDescRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.MatchLength; i++) {
 8005778:	2300      	movs	r3, #0
 800577a:	663b      	str	r3, [r7, #96]	; 0x60
 800577c:	e011      	b.n	80057a2 <processMatchDescRsp+0xda>
				rsp.MatchList[i] = rpcBuff[msgIdx++];
 800577e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005788:	461a      	mov	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4413      	add	r3, r2
 800578e:	7819      	ldrb	r1, [r3, #0]
 8005790:	f107 0213 	add.w	r2, r7, #19
 8005794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005796:	4413      	add	r3, r2
 8005798:	460a      	mov	r2, r1
 800579a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.MatchLength; i++) {
 800579c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800579e:	3301      	adds	r3, #1
 80057a0:	663b      	str	r3, [r7, #96]	; 0x60
 80057a2:	7cbb      	ldrb	r3, [r7, #18]
 80057a4:	461a      	mov	r2, r3
 80057a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d3e8      	bcc.n	800577e <processMatchDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoMatchDescRsp(&rsp);
 80057ac:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <processMatchDescRsp+0xf8>)
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f107 020c 	add.w	r2, r7, #12
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
	}
}
 80057b8:	bf00      	nop
 80057ba:	3768      	adds	r7, #104	; 0x68
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000e30 	.word	0x20000e30
 80057c4:	0800f424 	.word	0x0800f424

080057c8 <processComplexDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processComplexDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b09a      	sub	sp, #104	; 0x68
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoComplexDescRsp) {
 80057d4:	4b3a      	ldr	r3, [pc, #232]	; (80058c0 <processComplexDescRsp+0xf8>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d06d      	beq.n	80058b8 <processComplexDescRsp+0xf0>
		uint8_t msgIdx = 2;
 80057dc:	2302      	movs	r3, #2
 80057de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		ComplexDescRspFormat_t rsp;
		if (rpcLen < 6) {
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	2b05      	cmp	r3, #5
 80057e6:	d802      	bhi.n	80057ee <processComplexDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 80057e8:	4836      	ldr	r0, [pc, #216]	; (80058c4 <processComplexDescRsp+0xfc>)
 80057ea:	f007 ff7b 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80057ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	4413      	add	r3, r2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057fe:	3301      	adds	r3, #1
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	440b      	add	r3, r1
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	b29b      	uxth	r3, r3
 800580c:	4413      	add	r3, r2
 800580e:	b29b      	uxth	r3, r3
 8005810:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005812:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005816:	3302      	adds	r3, #2
 8005818:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 800581c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005826:	461a      	mov	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4413      	add	r3, r2
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005830:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	4413      	add	r3, r2
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	b29a      	uxth	r2, r3
 800583c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005840:	3301      	adds	r3, #1
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	440b      	add	r3, r1
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	b29b      	uxth	r3, r3
 800584e:	4413      	add	r3, r2
 8005850:	b29b      	uxth	r3, r3
 8005852:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8005854:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005858:	3302      	adds	r3, #2
 800585a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.ComplexLength = rpcBuff[msgIdx++];
 800585e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005868:	461a      	mov	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	2b06      	cmp	r3, #6
 8005876:	d919      	bls.n	80058ac <processComplexDescRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.ComplexLength; i++) {
 8005878:	2300      	movs	r3, #0
 800587a:	663b      	str	r3, [r7, #96]	; 0x60
 800587c:	e011      	b.n	80058a2 <processComplexDescRsp+0xda>
				rsp.ComplexList[i] = rpcBuff[msgIdx++];
 800587e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005888:	461a      	mov	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	7819      	ldrb	r1, [r3, #0]
 8005890:	f107 0213 	add.w	r2, r7, #19
 8005894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005896:	4413      	add	r3, r2
 8005898:	460a      	mov	r2, r1
 800589a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.ComplexLength; i++) {
 800589c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800589e:	3301      	adds	r3, #1
 80058a0:	663b      	str	r3, [r7, #96]	; 0x60
 80058a2:	7cbb      	ldrb	r3, [r7, #18]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d3e8      	bcc.n	800587e <processComplexDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoComplexDescRsp(&rsp);
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <processComplexDescRsp+0xf8>)
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	f107 020c 	add.w	r2, r7, #12
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
	}
}
 80058b8:	bf00      	nop
 80058ba:	3768      	adds	r7, #104	; 0x68
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000e30 	.word	0x20000e30
 80058c4:	0800f424 	.word	0x0800f424

080058c8 <processUserDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUserDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b09a      	sub	sp, #104	; 0x68
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUserDescRsp) {
 80058d4:	4b3a      	ldr	r3, [pc, #232]	; (80059c0 <processUserDescRsp+0xf8>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d06d      	beq.n	80059b8 <processUserDescRsp+0xf0>
		uint8_t msgIdx = 2;
 80058dc:	2302      	movs	r3, #2
 80058de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		UserDescRspFormat_t rsp;
		if (rpcLen < 6) {
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	2b05      	cmp	r3, #5
 80058e6:	d802      	bhi.n	80058ee <processUserDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 80058e8:	4836      	ldr	r0, [pc, #216]	; (80059c4 <processUserDescRsp+0xfc>)
 80058ea:	f007 fefb 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80058ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80058fe:	3301      	adds	r3, #1
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	440b      	add	r3, r1
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	b29b      	uxth	r3, r3
 800590c:	4413      	add	r3, r2
 800590e:	b29b      	uxth	r3, r3
 8005910:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005912:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005916:	3302      	adds	r3, #2
 8005918:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 800591c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005926:	461a      	mov	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4413      	add	r3, r2
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005930:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	4413      	add	r3, r2
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	b29a      	uxth	r2, r3
 800593c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005940:	3301      	adds	r3, #1
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	440b      	add	r3, r1
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	b29b      	uxth	r3, r3
 800594e:	4413      	add	r3, r2
 8005950:	b29b      	uxth	r3, r3
 8005952:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8005954:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005958:	3302      	adds	r3, #2
 800595a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Len = rpcBuff[msgIdx++];
 800595e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005968:	461a      	mov	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4413      	add	r3, r2
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	2b06      	cmp	r3, #6
 8005976:	d919      	bls.n	80059ac <processUserDescRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8005978:	2300      	movs	r3, #0
 800597a:	663b      	str	r3, [r7, #96]	; 0x60
 800597c:	e011      	b.n	80059a2 <processUserDescRsp+0xda>
				rsp.CUserDescriptor[i] = rpcBuff[msgIdx++];
 800597e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005988:	461a      	mov	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4413      	add	r3, r2
 800598e:	7819      	ldrb	r1, [r3, #0]
 8005990:	f107 0213 	add.w	r2, r7, #19
 8005994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005996:	4413      	add	r3, r2
 8005998:	460a      	mov	r2, r1
 800599a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 800599c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800599e:	3301      	adds	r3, #1
 80059a0:	663b      	str	r3, [r7, #96]	; 0x60
 80059a2:	7cbb      	ldrb	r3, [r7, #18]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d3e8      	bcc.n	800597e <processUserDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoUserDescRsp(&rsp);
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <processUserDescRsp+0xf8>)
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f107 020c 	add.w	r2, r7, #12
 80059b4:	4610      	mov	r0, r2
 80059b6:	4798      	blx	r3
	}
}
 80059b8:	bf00      	nop
 80059ba:	3768      	adds	r7, #104	; 0x68
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000e30 	.word	0x20000e30
 80059c4:	0800f424 	.word	0x0800f424

080059c8 <processUserDescConf>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUserDescConf(uint8_t *rpcBuff, uint8_t rpcLen) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUserDescConf) {
 80059d4:	4b21      	ldr	r3, [pc, #132]	; (8005a5c <processUserDescConf+0x94>)
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d03b      	beq.n	8005a54 <processUserDescConf+0x8c>
		uint8_t msgIdx = 2;
 80059dc:	2302      	movs	r3, #2
 80059de:	73fb      	strb	r3, [r7, #15]
		UserDescConfFormat_t rsp;
		if (rpcLen < 5) {
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d802      	bhi.n	80059ec <processUserDescConf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80059e6:	481e      	ldr	r0, [pc, #120]	; (8005a60 <processUserDescConf+0x98>)
 80059e8:	f007 fe7c 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4413      	add	r3, r2
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	3301      	adds	r3, #1
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	440b      	add	r3, r1
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	3302      	adds	r3, #2
 8005a10:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	73fa      	strb	r2, [r7, #15]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	440b      	add	r3, r1
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	3302      	adds	r3, #2
 8005a46:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoUserDescConf(&rsp);
 8005a48:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <processUserDescConf+0x94>)
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	f107 0208 	add.w	r2, r7, #8
 8005a50:	4610      	mov	r0, r2
 8005a52:	4798      	blx	r3
	}
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000e30 	.word	0x20000e30
 8005a60:	0800f424 	.word	0x0800f424

08005a64 <processServerDiscRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processServerDiscRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoServerDiscRsp) {
 8005a70:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <processServerDiscRsp+0x94>)
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d03b      	beq.n	8005af0 <processServerDiscRsp+0x8c>
		uint8_t msgIdx = 2;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	73fb      	strb	r3, [r7, #15]
		ServerDiscRspFormat_t rsp;
		if (rpcLen < 5) {
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d802      	bhi.n	8005a88 <processServerDiscRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8005a82:	481e      	ldr	r0, [pc, #120]	; (8005afc <processServerDiscRsp+0x98>)
 8005a84:	f007 fe2e 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	3301      	adds	r3, #1
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	440b      	add	r3, r1
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	3302      	adds	r3, #2
 8005aac:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	73fa      	strb	r2, [r7, #15]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4413      	add	r3, r2
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	72bb      	strb	r3, [r7, #10]
		rsp.ServerMask = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	3301      	adds	r3, #1
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	440b      	add	r3, r1
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	4413      	add	r3, r2
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoServerDiscRsp(&rsp);
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <processServerDiscRsp+0x94>)
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	f107 0208 	add.w	r2, r7, #8
 8005aec:	4610      	mov	r0, r2
 8005aee:	4798      	blx	r3
	}
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20000e30 	.word	0x20000e30
 8005afc:	0800f424 	.word	0x0800f424

08005b00 <processEndDeviceBindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processEndDeviceBindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoEndDeviceBindRsp) {
 8005b0c:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <processEndDeviceBindRsp+0x70>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d028      	beq.n	8005b66 <processEndDeviceBindRsp+0x66>
		uint8_t msgIdx = 2;
 8005b14:	2302      	movs	r3, #2
 8005b16:	73fb      	strb	r3, [r7, #15]
		EndDeviceBindRspFormat_t rsp;
		if (rpcLen < 3) {
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d802      	bhi.n	8005b24 <processEndDeviceBindRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8005b1e:	4815      	ldr	r0, [pc, #84]	; (8005b74 <processEndDeviceBindRsp+0x74>)
 8005b20:	f007 fde0 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4413      	add	r3, r2
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	3301      	adds	r3, #1
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	440b      	add	r3, r1
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	3302      	adds	r3, #2
 8005b48:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	73fa      	strb	r2, [r7, #15]
 8005b50:	461a      	mov	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4413      	add	r3, r2
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoEndDeviceBindRsp(&rsp);
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <processEndDeviceBindRsp+0x70>)
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	f107 0208 	add.w	r2, r7, #8
 8005b62:	4610      	mov	r0, r2
 8005b64:	4798      	blx	r3
	}
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000e30 	.word	0x20000e30
 8005b74:	0800f424 	.word	0x0800f424

08005b78 <processBindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processBindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoBindRsp) {
 8005b84:	4b18      	ldr	r3, [pc, #96]	; (8005be8 <processBindRsp+0x70>)
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d028      	beq.n	8005bde <processBindRsp+0x66>
		uint8_t msgIdx = 2;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	73fb      	strb	r3, [r7, #15]
		BindRspFormat_t rsp;
		if (rpcLen < 3) {
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d802      	bhi.n	8005b9c <processBindRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8005b96:	4815      	ldr	r0, [pc, #84]	; (8005bec <processBindRsp+0x74>)
 8005b98:	f007 fda4 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	440b      	add	r3, r1
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	3302      	adds	r3, #2
 8005bc0:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	73fa      	strb	r2, [r7, #15]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4413      	add	r3, r2
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoBindRsp(&rsp);
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <processBindRsp+0x70>)
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	f107 0208 	add.w	r2, r7, #8
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4798      	blx	r3
	}
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000e30 	.word	0x20000e30
 8005bec:	0800f424 	.word	0x0800f424

08005bf0 <processUnbindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUnbindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUnbindRsp) {
 8005bfc:	4b18      	ldr	r3, [pc, #96]	; (8005c60 <processUnbindRsp+0x70>)
 8005bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d028      	beq.n	8005c56 <processUnbindRsp+0x66>
		uint8_t msgIdx = 2;
 8005c04:	2302      	movs	r3, #2
 8005c06:	73fb      	strb	r3, [r7, #15]
		UnbindRspFormat_t rsp;
		if (rpcLen < 3) {
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d802      	bhi.n	8005c14 <processUnbindRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8005c0e:	4815      	ldr	r0, [pc, #84]	; (8005c64 <processUnbindRsp+0x74>)
 8005c10:	f007 fd68 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	4413      	add	r3, r2
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	3301      	adds	r3, #1
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	440b      	add	r3, r1
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	4413      	add	r3, r2
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	3302      	adds	r3, #2
 8005c38:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	73fa      	strb	r2, [r7, #15]
 8005c40:	461a      	mov	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4413      	add	r3, r2
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoUnbindRsp(&rsp);
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <processUnbindRsp+0x70>)
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	f107 0208 	add.w	r2, r7, #8
 8005c52:	4610      	mov	r0, r2
 8005c54:	4798      	blx	r3
	}
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20000e30 	.word	0x20000e30
 8005c64:	0800f424 	.word	0x0800f424

08005c68 <processMgmtNwkDiscRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtNwkDiscRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c6c:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	6018      	str	r0, [r3, #0]
 8005c76:	460a      	mov	r2, r1
 8005c78:	1cfb      	adds	r3, r7, #3
 8005c7a:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtNwkDiscRsp) {
 8005c7c:	4b8f      	ldr	r3, [pc, #572]	; (8005ebc <processMgmtNwkDiscRsp+0x254>)
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8114 	beq.w	8005eae <processMgmtNwkDiscRsp+0x246>
		uint8_t msgIdx = 2;
 8005c86:	2302      	movs	r3, #2
 8005c88:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		MgmtNwkDiscRspFormat_t rsp;
		if (rpcLen < 6) {
 8005c8c:	1cfb      	adds	r3, r7, #3
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d802      	bhi.n	8005c9a <processMgmtNwkDiscRsp+0x32>
			printf("MT_RPC_ERR_LENGTH\n");
 8005c94:	488a      	ldr	r0, [pc, #552]	; (8005ec0 <processMgmtNwkDiscRsp+0x258>)
 8005c96:	f007 fd25 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005c9a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005c9e:	1d3a      	adds	r2, r7, #4
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005cac:	3301      	adds	r3, #1
 8005cae:	1d39      	adds	r1, r7, #4
 8005cb0:	6809      	ldr	r1, [r1, #0]
 8005cb2:	440b      	add	r3, r1
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	f107 0308 	add.w	r3, r7, #8
 8005cc4:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8005cc6:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005cca:	3302      	adds	r3, #2
 8005ccc:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		rsp.Status = rpcBuff[msgIdx++];
 8005cd0:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8005cda:	461a      	mov	r2, r3
 8005cdc:	1d3b      	adds	r3, r7, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	781a      	ldrb	r2, [r3, #0]
 8005ce4:	f107 0308 	add.w	r3, r7, #8
 8005ce8:	709a      	strb	r2, [r3, #2]
		rsp.NetworkCount = rpcBuff[msgIdx++];
 8005cea:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	f107 0308 	add.w	r3, r7, #8
 8005d02:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8005d04:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8005d0e:	461a      	mov	r2, r3
 8005d10:	1d3b      	adds	r3, r7, #4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4413      	add	r3, r2
 8005d16:	781a      	ldrb	r2, [r3, #0]
 8005d18:	f107 0308 	add.w	r3, r7, #8
 8005d1c:	711a      	strb	r2, [r3, #4]
		rsp.NetworkListCount = rpcBuff[msgIdx++];
 8005d1e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8005d28:	461a      	mov	r2, r3
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4413      	add	r3, r2
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	f107 0308 	add.w	r3, r7, #8
 8005d36:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 8005d38:	1cfb      	adds	r3, r7, #3
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b06      	cmp	r3, #6
 8005d3e:	f240 80b0 	bls.w	8005ea2 <processMgmtNwkDiscRsp+0x23a>
			uint32_t i;
			for (i = 0; i < rsp.NetworkListCount; i++) {
 8005d42:	2300      	movs	r3, #0
 8005d44:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8005d48:	e0a2      	b.n	8005e90 <processMgmtNwkDiscRsp+0x228>
				rsp.NetworkList[i].PanID = 0;
 8005d4a:	f107 0208 	add.w	r2, r7, #8
 8005d4e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	4413      	add	r3, r2
 8005d56:	f103 0108 	add.w	r1, r3, #8
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8005d66:	2300      	movs	r3, #0
 8005d68:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8005d6c:	e038      	b.n	8005de0 <processMgmtNwkDiscRsp+0x178>
					rsp.NetworkList[i].PanID |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8005d6e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8005d78:	461a      	mov	r2, r3
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4413      	add	r3, r2
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	f897 1497 	ldrb.w	r1, [r7, #1175]	; 0x497
 8005d8c:	00c9      	lsls	r1, r1, #3
 8005d8e:	f1a1 0620 	sub.w	r6, r1, #32
 8005d92:	f1c1 0020 	rsb	r0, r1, #32
 8005d96:	fa03 f501 	lsl.w	r5, r3, r1
 8005d9a:	fa02 f606 	lsl.w	r6, r2, r6
 8005d9e:	4335      	orrs	r5, r6
 8005da0:	fa22 f000 	lsr.w	r0, r2, r0
 8005da4:	4305      	orrs	r5, r0
 8005da6:	fa02 f401 	lsl.w	r4, r2, r1
 8005daa:	f107 0208 	add.w	r2, r7, #8
 8005dae:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	4413      	add	r3, r2
 8005db6:	3308      	adds	r3, #8
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	ea44 0802 	orr.w	r8, r4, r2
 8005dc0:	ea45 0903 	orr.w	r9, r5, r3
 8005dc4:	f107 0208 	add.w	r2, r7, #8
 8005dc8:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	4413      	add	r3, r2
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	e9c3 8900 	strd	r8, r9, [r3]
				for (ind = 0; ind < 8; ind++)
 8005dd6:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8005dda:	3301      	adds	r3, #1
 8005ddc:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8005de0:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8005de4:	2b07      	cmp	r3, #7
 8005de6:	d9c2      	bls.n	8005d6e <processMgmtNwkDiscRsp+0x106>
				rsp.NetworkList[i].LogicalChannel = rpcBuff[msgIdx++];
 8005de8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8005df2:	461a      	mov	r2, r3
 8005df4:	1d3b      	adds	r3, r7, #4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4413      	add	r3, r2
 8005dfa:	7819      	ldrb	r1, [r3, #0]
 8005dfc:	f107 0208 	add.w	r2, r7, #8
 8005e00:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8005e04:	3301      	adds	r3, #1
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	4413      	add	r3, r2
 8005e0a:	460a      	mov	r2, r1
 8005e0c:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].StackProf_ZigVer = rpcBuff[msgIdx++];
 8005e0e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8005e18:	461a      	mov	r2, r3
 8005e1a:	1d3b      	adds	r3, r7, #4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4413      	add	r3, r2
 8005e20:	7819      	ldrb	r1, [r3, #0]
 8005e22:	f107 0208 	add.w	r2, r7, #8
 8005e26:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	4413      	add	r3, r2
 8005e30:	3301      	adds	r3, #1
 8005e32:	460a      	mov	r2, r1
 8005e34:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].BeacOrd_SupFramOrd = rpcBuff[msgIdx++];
 8005e36:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8005e40:	461a      	mov	r2, r3
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4413      	add	r3, r2
 8005e48:	7819      	ldrb	r1, [r3, #0]
 8005e4a:	f107 0208 	add.w	r2, r7, #8
 8005e4e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8005e52:	3301      	adds	r3, #1
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	4413      	add	r3, r2
 8005e58:	3302      	adds	r3, #2
 8005e5a:	460a      	mov	r2, r1
 8005e5c:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].PermitJoin = rpcBuff[msgIdx++];
 8005e5e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8005e68:	461a      	mov	r2, r3
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4413      	add	r3, r2
 8005e70:	7819      	ldrb	r1, [r3, #0]
 8005e72:	f107 0208 	add.w	r2, r7, #8
 8005e76:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	4413      	add	r3, r2
 8005e80:	3303      	adds	r3, #3
 8005e82:	460a      	mov	r2, r1
 8005e84:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.NetworkListCount; i++) {
 8005e86:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8005e90:	f107 0308 	add.w	r3, r7, #8
 8005e94:	795b      	ldrb	r3, [r3, #5]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	f4ff af54 	bcc.w	8005d4a <processMgmtNwkDiscRsp+0xe2>
			}
		}
		mtZdoCbs.pfnZdoMgmtNwkDiscRsp(&rsp);
 8005ea2:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <processMgmtNwkDiscRsp+0x254>)
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	f107 0208 	add.w	r2, r7, #8
 8005eaa:	4610      	mov	r0, r2
 8005eac:	4798      	blx	r3
	}
}
 8005eae:	bf00      	nop
 8005eb0:	f207 47a4 	addw	r7, r7, #1188	; 0x4a4
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000e30 	.word	0x20000e30
 8005ec0:	0800f424 	.word	0x0800f424

08005ec4 <processMgmtLqiRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtLqiRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	f2ad 6d5c 	subw	sp, sp, #1628	; 0x65c
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	f107 030c 	add.w	r3, r7, #12
 8005ed2:	6018      	str	r0, [r3, #0]
 8005ed4:	460a      	mov	r2, r1
 8005ed6:	f107 030b 	add.w	r3, r7, #11
 8005eda:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtLqiRsp) {
 8005edc:	4b6f      	ldr	r3, [pc, #444]	; (800609c <processMgmtLqiRsp+0x1d8>)
 8005ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 81c3 	beq.w	800626c <processMgmtLqiRsp+0x3a8>
		uint8_t msgIdx = 2;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
		MgmtLqiRspFormat_t rsp;
		if (rpcLen < 6) {
 8005eec:	f107 030b 	add.w	r3, r7, #11
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	d802      	bhi.n	8005efc <processMgmtLqiRsp+0x38>
			printf("MT_RPC_ERR_LENGTH\n");
 8005ef6:	486a      	ldr	r0, [pc, #424]	; (80060a0 <processMgmtLqiRsp+0x1dc>)
 8005ef8:	f007 fbf4 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005efc:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005f00:	f107 020c 	add.w	r2, r7, #12
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	4413      	add	r3, r2
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005f10:	3301      	adds	r3, #1
 8005f12:	f107 010c 	add.w	r1, r7, #12
 8005f16:	6809      	ldr	r1, [r1, #0]
 8005f18:	440b      	add	r3, r1
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	4413      	add	r3, r2
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	f107 0310 	add.w	r3, r7, #16
 8005f2a:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8005f2c:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005f30:	3302      	adds	r3, #2
 8005f32:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
		rsp.Status = rpcBuff[msgIdx++];
 8005f36:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8005f40:	461a      	mov	r2, r3
 8005f42:	f107 030c 	add.w	r3, r7, #12
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4413      	add	r3, r2
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	f107 0310 	add.w	r3, r7, #16
 8005f50:	709a      	strb	r2, [r3, #2]
		rsp.NeighborTableEntries = rpcBuff[msgIdx++];
 8005f52:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f107 030c 	add.w	r3, r7, #12
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4413      	add	r3, r2
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	f107 0310 	add.w	r3, r7, #16
 8005f6c:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8005f6e:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f107 030c 	add.w	r3, r7, #12
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4413      	add	r3, r2
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	f107 0310 	add.w	r3, r7, #16
 8005f88:	711a      	strb	r2, [r3, #4]
		rsp.NeighborLqiListCount = rpcBuff[msgIdx++];
 8005f8a:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8005f94:	461a      	mov	r2, r3
 8005f96:	f107 030c 	add.w	r3, r7, #12
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	781a      	ldrb	r2, [r3, #0]
 8005fa0:	f107 0310 	add.w	r3, r7, #16
 8005fa4:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 8005fa6:	f107 030b 	add.w	r3, r7, #11
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	f240 8154 	bls.w	800625a <processMgmtLqiRsp+0x396>
			uint32_t i;
			for (i = 0; i < rsp.NeighborLqiListCount; i++) {
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 8005fb8:	e146      	b.n	8006248 <processMgmtLqiRsp+0x384>

				rsp.NeighborLqiList[i].ExtendedPanID = 0;
 8005fba:	f107 0110 	add.w	r1, r7, #16
 8005fbe:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	440b      	add	r3, r1
 8005fcc:	f103 0108 	add.w	r1, r3, #8
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
 8005fe2:	e041      	b.n	8006068 <processMgmtLqiRsp+0x1a4>
					rsp.NeighborLqiList[i].ExtendedPanID |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8005fe4:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f107 030c 	add.w	r3, r7, #12
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	f897 164f 	ldrb.w	r1, [r7, #1615]	; 0x64f
 8006004:	00c9      	lsls	r1, r1, #3
 8006006:	f1a1 0620 	sub.w	r6, r1, #32
 800600a:	f1c1 0020 	rsb	r0, r1, #32
 800600e:	fa03 f901 	lsl.w	r9, r3, r1
 8006012:	fa02 f606 	lsl.w	r6, r2, r6
 8006016:	ea49 0906 	orr.w	r9, r9, r6
 800601a:	fa22 f000 	lsr.w	r0, r2, r0
 800601e:	ea49 0900 	orr.w	r9, r9, r0
 8006022:	fa02 f801 	lsl.w	r8, r2, r1
 8006026:	f107 0110 	add.w	r1, r7, #16
 800602a:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 800602e:	4613      	mov	r3, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	4413      	add	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	440b      	add	r3, r1
 8006038:	3308      	adds	r3, #8
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	ea48 0a02 	orr.w	sl, r8, r2
 8006042:	ea49 0b03 	orr.w	fp, r9, r3
 8006046:	f107 0110 	add.w	r1, r7, #16
 800604a:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 800604e:	4613      	mov	r3, r2
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	4413      	add	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	440b      	add	r3, r1
 8006058:	3308      	adds	r3, #8
 800605a:	e9c3 ab00 	strd	sl, fp, [r3]
				for (ind = 0; ind < 8; ind++)
 800605e:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8006062:	3301      	adds	r3, #1
 8006064:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
 8006068:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 800606c:	2b07      	cmp	r3, #7
 800606e:	d9b9      	bls.n	8005fe4 <processMgmtLqiRsp+0x120>
				rsp.NeighborLqiList[i].ExtendedAddress = 0;
 8006070:	f107 0110 	add.w	r1, r7, #16
 8006074:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 8006078:	4613      	mov	r3, r2
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	4413      	add	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	440b      	add	r3, r1
 8006082:	f103 0110 	add.w	r1, r3, #16
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	e9c1 2300 	strd	r2, r3, [r1]
				for (ind = 0; ind < 8; ind++)
 8006092:	2300      	movs	r3, #0
 8006094:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
 8006098:	e047      	b.n	800612a <processMgmtLqiRsp+0x266>
 800609a:	bf00      	nop
 800609c:	20000e30 	.word	0x20000e30
 80060a0:	0800f424 	.word	0x0800f424
					rsp.NeighborLqiList[i].ExtendedAddress |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 80060a4:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 80060ae:	461a      	mov	r2, r3
 80060b0:	f107 030c 	add.w	r3, r7, #12
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4413      	add	r3, r2
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	f897 164f 	ldrb.w	r1, [r7, #1615]	; 0x64f
 80060c4:	00c9      	lsls	r1, r1, #3
 80060c6:	f1a1 0620 	sub.w	r6, r1, #32
 80060ca:	f1c1 0020 	rsb	r0, r1, #32
 80060ce:	fa03 f501 	lsl.w	r5, r3, r1
 80060d2:	fa02 f606 	lsl.w	r6, r2, r6
 80060d6:	4335      	orrs	r5, r6
 80060d8:	fa22 f000 	lsr.w	r0, r2, r0
 80060dc:	4305      	orrs	r5, r0
 80060de:	fa02 f401 	lsl.w	r4, r2, r1
 80060e2:	f107 0110 	add.w	r1, r7, #16
 80060e6:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 80060ea:	4613      	mov	r3, r2
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	4413      	add	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	440b      	add	r3, r1
 80060f4:	3310      	adds	r3, #16
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	ea44 0102 	orr.w	r1, r4, r2
 80060fe:	6039      	str	r1, [r7, #0]
 8006100:	432b      	orrs	r3, r5
 8006102:	607b      	str	r3, [r7, #4]
 8006104:	f107 0110 	add.w	r1, r7, #16
 8006108:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 800610c:	4613      	mov	r3, r2
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	4413      	add	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	440b      	add	r3, r1
 8006116:	3310      	adds	r3, #16
 8006118:	e9d7 1200 	ldrd	r1, r2, [r7]
 800611c:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 8006120:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8006124:	3301      	adds	r3, #1
 8006126:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
 800612a:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 800612e:	2b07      	cmp	r3, #7
 8006130:	d9b8      	bls.n	80060a4 <processMgmtLqiRsp+0x1e0>
				rsp.NeighborLqiList[i].NetworkAddress = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006132:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8006136:	f107 020c 	add.w	r2, r7, #12
 800613a:	6812      	ldr	r2, [r2, #0]
 800613c:	4413      	add	r3, r2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	b29a      	uxth	r2, r3
 8006142:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8006146:	3301      	adds	r3, #1
 8006148:	f107 010c 	add.w	r1, r7, #12
 800614c:	6809      	ldr	r1, [r1, #0]
 800614e:	440b      	add	r3, r1
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	b29b      	uxth	r3, r3
 8006158:	4413      	add	r3, r2
 800615a:	b298      	uxth	r0, r3
 800615c:	f107 0110 	add.w	r1, r7, #16
 8006160:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	4613      	mov	r3, r2
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	4413      	add	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	440b      	add	r3, r1
 8006170:	4602      	mov	r2, r0
 8006172:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 8006174:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8006178:	3302      	adds	r3, #2
 800617a:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
				rsp.NeighborLqiList[i].DevTyp_RxOnWhenIdle_Relat = rpcBuff[msgIdx++];
 800617e:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8006188:	461a      	mov	r2, r3
 800618a:	f107 030c 	add.w	r3, r7, #12
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4413      	add	r3, r2
 8006192:	7818      	ldrb	r0, [r3, #0]
 8006194:	f107 0110 	add.w	r1, r7, #16
 8006198:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	4613      	mov	r3, r2
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	4413      	add	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	440b      	add	r3, r1
 80061a8:	3302      	adds	r3, #2
 80061aa:	4602      	mov	r2, r0
 80061ac:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].PermitJoining = rpcBuff[msgIdx++];
 80061ae:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 80061b8:	461a      	mov	r2, r3
 80061ba:	f107 030c 	add.w	r3, r7, #12
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4413      	add	r3, r2
 80061c2:	7818      	ldrb	r0, [r3, #0]
 80061c4:	f107 0110 	add.w	r1, r7, #16
 80061c8:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	4613      	mov	r3, r2
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	4413      	add	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	440b      	add	r3, r1
 80061d8:	3303      	adds	r3, #3
 80061da:	4602      	mov	r2, r0
 80061dc:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].Depth = rpcBuff[msgIdx++];
 80061de:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 80061e8:	461a      	mov	r2, r3
 80061ea:	f107 030c 	add.w	r3, r7, #12
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4413      	add	r3, r2
 80061f2:	7818      	ldrb	r0, [r3, #0]
 80061f4:	f107 0110 	add.w	r1, r7, #16
 80061f8:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	4613      	mov	r3, r2
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	4413      	add	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	440b      	add	r3, r1
 8006208:	3304      	adds	r3, #4
 800620a:	4602      	mov	r2, r0
 800620c:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].LQI = rpcBuff[msgIdx++];
 800620e:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8006218:	461a      	mov	r2, r3
 800621a:	f107 030c 	add.w	r3, r7, #12
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4413      	add	r3, r2
 8006222:	7818      	ldrb	r0, [r3, #0]
 8006224:	f107 0110 	add.w	r1, r7, #16
 8006228:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	4613      	mov	r3, r2
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	4413      	add	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	440b      	add	r3, r1
 8006238:	3305      	adds	r3, #5
 800623a:	4602      	mov	r2, r0
 800623c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.NeighborLqiListCount; i++) {
 800623e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8006242:	3301      	adds	r3, #1
 8006244:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 8006248:	f107 0310 	add.w	r3, r7, #16
 800624c:	795b      	ldrb	r3, [r3, #5]
 800624e:	461a      	mov	r2, r3
 8006250:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8006254:	4293      	cmp	r3, r2
 8006256:	f4ff aeb0 	bcc.w	8005fba <processMgmtLqiRsp+0xf6>

			}
		}
		MgmtLqiRspFormat_t *copyy = &rsp;
 800625a:	f107 0310 	add.w	r3, r7, #16
 800625e:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
		mtZdoCbs.pfnZdoMgmtLqiRsp(copyy);
 8006262:	4b05      	ldr	r3, [pc, #20]	; (8006278 <processMgmtLqiRsp+0x3b4>)
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 800626a:	4798      	blx	r3
	}
}
 800626c:	bf00      	nop
 800626e:	f207 675c 	addw	r7, r7, #1628	; 0x65c
 8006272:	46bd      	mov	sp, r7
 8006274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006278:	20000e30 	.word	0x20000e30

0800627c <processMgmtRtgRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtRtgRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b0f6      	sub	sp, #472	; 0x1d8
 8006280:	af00      	add	r7, sp, #0
 8006282:	1d3b      	adds	r3, r7, #4
 8006284:	6018      	str	r0, [r3, #0]
 8006286:	460a      	mov	r2, r1
 8006288:	1cfb      	adds	r3, r7, #3
 800628a:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtRtgRsp) {
 800628c:	4b6d      	ldr	r3, [pc, #436]	; (8006444 <processMgmtRtgRsp+0x1c8>)
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80d2 	beq.w	800643a <processMgmtRtgRsp+0x1be>
		uint8_t msgIdx = 2;
 8006296:	2302      	movs	r3, #2
 8006298:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		MgmtRtgRspFormat_t rsp;
		if (rpcLen < 6) {
 800629c:	1cfb      	adds	r3, r7, #3
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b05      	cmp	r3, #5
 80062a2:	d802      	bhi.n	80062aa <processMgmtRtgRsp+0x2e>
			printf("MT_RPC_ERR_LENGTH\n");
 80062a4:	4868      	ldr	r0, [pc, #416]	; (8006448 <processMgmtRtgRsp+0x1cc>)
 80062a6:	f007 fa1d 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80062aa:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80062ae:	1d3a      	adds	r2, r7, #4
 80062b0:	6812      	ldr	r2, [r2, #0]
 80062b2:	4413      	add	r3, r2
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80062bc:	3301      	adds	r3, #1
 80062be:	1d39      	adds	r1, r7, #4
 80062c0:	6809      	ldr	r1, [r1, #0]
 80062c2:	440b      	add	r3, r1
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	4413      	add	r3, r2
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	f107 0308 	add.w	r3, r7, #8
 80062d4:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 80062d6:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80062da:	3302      	adds	r3, #2
 80062dc:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		rsp.Status = rpcBuff[msgIdx++];
 80062e0:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 80062ea:	461a      	mov	r2, r3
 80062ec:	1d3b      	adds	r3, r7, #4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4413      	add	r3, r2
 80062f2:	781a      	ldrb	r2, [r3, #0]
 80062f4:	f107 0308 	add.w	r3, r7, #8
 80062f8:	709a      	strb	r2, [r3, #2]
		rsp.RoutingTableEntries = rpcBuff[msgIdx++];
 80062fa:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8006304:	461a      	mov	r2, r3
 8006306:	1d3b      	adds	r3, r7, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4413      	add	r3, r2
 800630c:	781a      	ldrb	r2, [r3, #0]
 800630e:	f107 0308 	add.w	r3, r7, #8
 8006312:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8006314:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 800631e:	461a      	mov	r2, r3
 8006320:	1d3b      	adds	r3, r7, #4
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4413      	add	r3, r2
 8006326:	781a      	ldrb	r2, [r3, #0]
 8006328:	f107 0308 	add.w	r3, r7, #8
 800632c:	711a      	strb	r2, [r3, #4]
		rsp.RoutingTableListCount = rpcBuff[msgIdx++];
 800632e:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8006338:	461a      	mov	r2, r3
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4413      	add	r3, r2
 8006340:	781a      	ldrb	r2, [r3, #0]
 8006342:	f107 0308 	add.w	r3, r7, #8
 8006346:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 8006348:	1cfb      	adds	r3, r7, #3
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b06      	cmp	r3, #6
 800634e:	d96e      	bls.n	800642e <processMgmtRtgRsp+0x1b2>
			uint32_t i;
			for (i = 0; i < rsp.RoutingTableListCount; i++) {
 8006350:	2300      	movs	r3, #0
 8006352:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006356:	e062      	b.n	800641e <processMgmtRtgRsp+0x1a2>
				rsp.RoutingTableList[i].DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006358:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800635c:	1d3a      	adds	r2, r7, #4
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	4413      	add	r3, r2
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	b29a      	uxth	r2, r3
 8006366:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800636a:	3301      	adds	r3, #1
 800636c:	1d39      	adds	r1, r7, #4
 800636e:	6809      	ldr	r1, [r1, #0]
 8006370:	440b      	add	r3, r1
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	b29b      	uxth	r3, r3
 800637a:	4413      	add	r3, r2
 800637c:	b298      	uxth	r0, r3
 800637e:	f107 0108 	add.w	r1, r7, #8
 8006382:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8006386:	4613      	mov	r3, r2
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	4413      	add	r3, r2
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	440b      	add	r3, r1
 8006390:	3306      	adds	r3, #6
 8006392:	4602      	mov	r2, r0
 8006394:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 8006396:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800639a:	3302      	adds	r3, #2
 800639c:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
				rsp.RoutingTableList[i].Status = rpcBuff[msgIdx++];
 80063a0:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 80063aa:	461a      	mov	r2, r3
 80063ac:	1d3b      	adds	r3, r7, #4
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4413      	add	r3, r2
 80063b2:	7818      	ldrb	r0, [r3, #0]
 80063b4:	f107 0108 	add.w	r1, r7, #8
 80063b8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80063bc:	4613      	mov	r3, r2
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	4413      	add	r3, r2
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	440b      	add	r3, r1
 80063c6:	3308      	adds	r3, #8
 80063c8:	4602      	mov	r2, r0
 80063ca:	701a      	strb	r2, [r3, #0]
				rsp.RoutingTableList[i].NextHop = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80063cc:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80063d0:	1d3a      	adds	r2, r7, #4
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	4413      	add	r3, r2
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80063de:	3301      	adds	r3, #1
 80063e0:	1d39      	adds	r1, r7, #4
 80063e2:	6809      	ldr	r1, [r1, #0]
 80063e4:	440b      	add	r3, r1
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	4413      	add	r3, r2
 80063f0:	b298      	uxth	r0, r3
 80063f2:	f107 0108 	add.w	r1, r7, #8
 80063f6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80063fa:	4613      	mov	r3, r2
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	4413      	add	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	440b      	add	r3, r1
 8006404:	330a      	adds	r3, #10
 8006406:	4602      	mov	r2, r0
 8006408:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 800640a:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800640e:	3302      	adds	r3, #2
 8006410:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
			for (i = 0; i < rsp.RoutingTableListCount; i++) {
 8006414:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006418:	3301      	adds	r3, #1
 800641a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	795b      	ldrb	r3, [r3, #5]
 8006424:	461a      	mov	r2, r3
 8006426:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800642a:	4293      	cmp	r3, r2
 800642c:	d394      	bcc.n	8006358 <processMgmtRtgRsp+0xdc>
			}
		}
		mtZdoCbs.pfnZdoMgmtRtgRsp(&rsp);
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <processMgmtRtgRsp+0x1c8>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f107 0208 	add.w	r2, r7, #8
 8006436:	4610      	mov	r0, r2
 8006438:	4798      	blx	r3
	}
}
 800643a:	bf00      	nop
 800643c:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20000e30 	.word	0x20000e30
 8006448:	0800f424 	.word	0x0800f424

0800644c <processMgmtBindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtBindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	f6ad 1d8c 	subw	sp, sp, #2444	; 0x98c
 8006454:	af00      	add	r7, sp, #0
 8006456:	f107 030c 	add.w	r3, r7, #12
 800645a:	6018      	str	r0, [r3, #0]
 800645c:	460a      	mov	r2, r1
 800645e:	f107 030b 	add.w	r3, r7, #11
 8006462:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtBindRsp) {
 8006464:	4bbe      	ldr	r3, [pc, #760]	; (8006760 <processMgmtBindRsp+0x314>)
 8006466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8173 	beq.w	8006754 <processMgmtBindRsp+0x308>
		uint8_t msgIdx = 2;
 800646e:	2302      	movs	r3, #2
 8006470:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
		MgmtBindRspFormat_t rsp;
		if (rpcLen < 6) {
 8006474:	f107 030b 	add.w	r3, r7, #11
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b05      	cmp	r3, #5
 800647c:	d802      	bhi.n	8006484 <processMgmtBindRsp+0x38>
			printf("MT_RPC_ERR_LENGTH\n");
 800647e:	48b9      	ldr	r0, [pc, #740]	; (8006764 <processMgmtBindRsp+0x318>)
 8006480:	f007 f930 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006484:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006488:	f107 020c 	add.w	r2, r7, #12
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	4413      	add	r3, r2
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	b29a      	uxth	r2, r3
 8006494:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006498:	3301      	adds	r3, #1
 800649a:	f107 010c 	add.w	r1, r7, #12
 800649e:	6809      	ldr	r1, [r1, #0]
 80064a0:	440b      	add	r3, r1
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	021b      	lsls	r3, r3, #8
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	4413      	add	r3, r2
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f107 0310 	add.w	r3, r7, #16
 80064b2:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 80064b4:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 80064b8:	3302      	adds	r3, #2
 80064ba:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
		rsp.Status = rpcBuff[msgIdx++];
 80064be:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 80064c8:	461a      	mov	r2, r3
 80064ca:	f107 030c 	add.w	r3, r7, #12
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4413      	add	r3, r2
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	f107 0310 	add.w	r3, r7, #16
 80064d8:	709a      	strb	r2, [r3, #2]
		rsp.BindingTableEntries = rpcBuff[msgIdx++];
 80064da:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 80064e4:	461a      	mov	r2, r3
 80064e6:	f107 030c 	add.w	r3, r7, #12
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4413      	add	r3, r2
 80064ee:	781a      	ldrb	r2, [r3, #0]
 80064f0:	f107 0310 	add.w	r3, r7, #16
 80064f4:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 80064f6:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006500:	461a      	mov	r2, r3
 8006502:	f107 030c 	add.w	r3, r7, #12
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4413      	add	r3, r2
 800650a:	781a      	ldrb	r2, [r3, #0]
 800650c:	f107 0310 	add.w	r3, r7, #16
 8006510:	711a      	strb	r2, [r3, #4]
		rsp.BindingTableListCount = rpcBuff[msgIdx++];
 8006512:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 800651c:	461a      	mov	r2, r3
 800651e:	f107 030c 	add.w	r3, r7, #12
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4413      	add	r3, r2
 8006526:	781a      	ldrb	r2, [r3, #0]
 8006528:	f107 0310 	add.w	r3, r7, #16
 800652c:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 800652e:	f107 030b 	add.w	r3, r7, #11
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b06      	cmp	r3, #6
 8006536:	f240 8107 	bls.w	8006748 <processMgmtBindRsp+0x2fc>
			uint32_t i;
			for (i = 0; i < rsp.BindingTableListCount; i++) {
 800653a:	2300      	movs	r3, #0
 800653c:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 8006540:	e0f9      	b.n	8006736 <processMgmtBindRsp+0x2ea>
				rsp.BindingTableList[i].SrcIEEEAddr = 0;
 8006542:	f107 0210 	add.w	r2, r7, #16
 8006546:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 800654a:	015b      	lsls	r3, r3, #5
 800654c:	4413      	add	r3, r2
 800654e:	f103 0108 	add.w	r1, r3, #8
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t i;
				for (i = 0; i < 8; i++)
 800655e:	2300      	movs	r3, #0
 8006560:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
 8006564:	e03b      	b.n	80065de <processMgmtBindRsp+0x192>
					rsp.BindingTableList[i].SrcIEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8006566:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006570:	461a      	mov	r2, r3
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4413      	add	r3, r2
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	f897 197f 	ldrb.w	r1, [r7, #2431]	; 0x97f
 8006586:	00c9      	lsls	r1, r1, #3
 8006588:	f1a1 0620 	sub.w	r6, r1, #32
 800658c:	f1c1 0020 	rsb	r0, r1, #32
 8006590:	fa03 f901 	lsl.w	r9, r3, r1
 8006594:	fa02 f606 	lsl.w	r6, r2, r6
 8006598:	ea49 0906 	orr.w	r9, r9, r6
 800659c:	fa22 f000 	lsr.w	r0, r2, r0
 80065a0:	ea49 0900 	orr.w	r9, r9, r0
 80065a4:	fa02 f801 	lsl.w	r8, r2, r1
 80065a8:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80065ac:	f107 0210 	add.w	r2, r7, #16
 80065b0:	015b      	lsls	r3, r3, #5
 80065b2:	4413      	add	r3, r2
 80065b4:	3308      	adds	r3, #8
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f897 197f 	ldrb.w	r1, [r7, #2431]	; 0x97f
 80065be:	ea48 0a02 	orr.w	sl, r8, r2
 80065c2:	ea49 0b03 	orr.w	fp, r9, r3
 80065c6:	f107 0210 	add.w	r2, r7, #16
 80065ca:	014b      	lsls	r3, r1, #5
 80065cc:	4413      	add	r3, r2
 80065ce:	3308      	adds	r3, #8
 80065d0:	e9c3 ab00 	strd	sl, fp, [r3]
				for (i = 0; i < 8; i++)
 80065d4:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80065d8:	3301      	adds	r3, #1
 80065da:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
 80065de:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80065e2:	2b07      	cmp	r3, #7
 80065e4:	d9bf      	bls.n	8006566 <processMgmtBindRsp+0x11a>
				rsp.BindingTableList[i].SrcEndpoint = rpcBuff[msgIdx++];
 80065e6:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 80065f0:	461a      	mov	r2, r3
 80065f2:	f107 030c 	add.w	r3, r7, #12
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	441a      	add	r2, r3
 80065fa:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80065fe:	7811      	ldrb	r1, [r2, #0]
 8006600:	f107 0210 	add.w	r2, r7, #16
 8006604:	015b      	lsls	r3, r3, #5
 8006606:	4413      	add	r3, r2
 8006608:	3310      	adds	r3, #16
 800660a:	460a      	mov	r2, r1
 800660c:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].ClusterID = rpcBuff[msgIdx++];
 800660e:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006618:	461a      	mov	r2, r3
 800661a:	f107 030c 	add.w	r3, r7, #12
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	441a      	add	r2, r3
 8006622:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006626:	7811      	ldrb	r1, [r2, #0]
 8006628:	f107 0210 	add.w	r2, r7, #16
 800662c:	015b      	lsls	r3, r3, #5
 800662e:	4413      	add	r3, r2
 8006630:	3311      	adds	r3, #17
 8006632:	460a      	mov	r2, r1
 8006634:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].DstAddrMode = rpcBuff[msgIdx++];
 8006636:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006640:	461a      	mov	r2, r3
 8006642:	f107 030c 	add.w	r3, r7, #12
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	441a      	add	r2, r3
 800664a:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800664e:	7811      	ldrb	r1, [r2, #0]
 8006650:	f107 0210 	add.w	r2, r7, #16
 8006654:	015b      	lsls	r3, r3, #5
 8006656:	4413      	add	r3, r2
 8006658:	3312      	adds	r3, #18
 800665a:	460a      	mov	r2, r1
 800665c:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].DstIEEEAddr = 0;
 800665e:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006662:	f107 0210 	add.w	r2, r7, #16
 8006666:	015b      	lsls	r3, r3, #5
 8006668:	4413      	add	r3, r2
 800666a:	f103 0118 	add.w	r1, r3, #24
 800666e:	f04f 0200 	mov.w	r2, #0
 8006672:	f04f 0300 	mov.w	r3, #0
 8006676:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 800667a:	2300      	movs	r3, #0
 800667c:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
 8006680:	e03c      	b.n	80066fc <processMgmtBindRsp+0x2b0>
					rsp.BindingTableList[i].DstIEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8006682:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 800668c:	461a      	mov	r2, r3
 800668e:	f107 030c 	add.w	r3, r7, #12
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4413      	add	r3, r2
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	f897 197f 	ldrb.w	r1, [r7, #2431]	; 0x97f
 80066a2:	00c9      	lsls	r1, r1, #3
 80066a4:	f1a1 0620 	sub.w	r6, r1, #32
 80066a8:	f1c1 0020 	rsb	r0, r1, #32
 80066ac:	fa03 f501 	lsl.w	r5, r3, r1
 80066b0:	fa02 f606 	lsl.w	r6, r2, r6
 80066b4:	4335      	orrs	r5, r6
 80066b6:	fa22 f000 	lsr.w	r0, r2, r0
 80066ba:	4305      	orrs	r5, r0
 80066bc:	fa02 f401 	lsl.w	r4, r2, r1
 80066c0:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80066c4:	f107 0210 	add.w	r2, r7, #16
 80066c8:	015b      	lsls	r3, r3, #5
 80066ca:	4413      	add	r3, r2
 80066cc:	3318      	adds	r3, #24
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f897 197f 	ldrb.w	r1, [r7, #2431]	; 0x97f
 80066d6:	ea44 0002 	orr.w	r0, r4, r2
 80066da:	6038      	str	r0, [r7, #0]
 80066dc:	432b      	orrs	r3, r5
 80066de:	607b      	str	r3, [r7, #4]
 80066e0:	f107 0210 	add.w	r2, r7, #16
 80066e4:	014b      	lsls	r3, r1, #5
 80066e6:	4413      	add	r3, r2
 80066e8:	3318      	adds	r3, #24
 80066ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066ee:	e9c3 1200 	strd	r1, r2, [r3]
				for (i = 0; i < 8; i++)
 80066f2:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80066f6:	3301      	adds	r3, #1
 80066f8:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
 80066fc:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006700:	2b07      	cmp	r3, #7
 8006702:	d9be      	bls.n	8006682 <processMgmtBindRsp+0x236>
				rsp.BindingTableList[i].DstEndpoint = rpcBuff[msgIdx++];
 8006704:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 800670e:	461a      	mov	r2, r3
 8006710:	f107 030c 	add.w	r3, r7, #12
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	441a      	add	r2, r3
 8006718:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800671c:	7811      	ldrb	r1, [r2, #0]
 800671e:	f107 0210 	add.w	r2, r7, #16
 8006722:	3301      	adds	r3, #1
 8006724:	015b      	lsls	r3, r3, #5
 8006726:	4413      	add	r3, r2
 8006728:	460a      	mov	r2, r1
 800672a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.BindingTableListCount; i++) {
 800672c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8006730:	3301      	adds	r3, #1
 8006732:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 8006736:	f107 0310 	add.w	r3, r7, #16
 800673a:	795b      	ldrb	r3, [r3, #5]
 800673c:	461a      	mov	r2, r3
 800673e:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8006742:	4293      	cmp	r3, r2
 8006744:	f4ff aefd 	bcc.w	8006542 <processMgmtBindRsp+0xf6>
			}
		}
		mtZdoCbs.pfnZdoMgmtBindRsp(&rsp);
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <processMgmtBindRsp+0x314>)
 800674a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674c:	f107 0210 	add.w	r2, r7, #16
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
	}
}
 8006754:	bf00      	nop
 8006756:	f607 178c 	addw	r7, r7, #2444	; 0x98c
 800675a:	46bd      	mov	sp, r7
 800675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006760:	20000e30 	.word	0x20000e30
 8006764:	0800f424 	.word	0x0800f424

08006768 <processMgmtLeaveRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtLeaveRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtLeaveRsp) {
 8006774:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <processMgmtLeaveRsp+0x70>)
 8006776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006778:	2b00      	cmp	r3, #0
 800677a:	d028      	beq.n	80067ce <processMgmtLeaveRsp+0x66>
		uint8_t msgIdx = 2;
 800677c:	2302      	movs	r3, #2
 800677e:	73fb      	strb	r3, [r7, #15]
		MgmtLeaveRspFormat_t rsp;
		if (rpcLen < 3) {
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d802      	bhi.n	800678c <processMgmtLeaveRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8006786:	4815      	ldr	r0, [pc, #84]	; (80067dc <processMgmtLeaveRsp+0x74>)
 8006788:	f006 ffac 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	b29a      	uxth	r2, r3
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	3301      	adds	r3, #1
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	440b      	add	r3, r1
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	4413      	add	r3, r2
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	3302      	adds	r3, #2
 80067b0:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	73fa      	strb	r2, [r7, #15]
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4413      	add	r3, r2
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtLeaveRsp(&rsp);
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <processMgmtLeaveRsp+0x70>)
 80067c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c6:	f107 0208 	add.w	r2, r7, #8
 80067ca:	4610      	mov	r0, r2
 80067cc:	4798      	blx	r3
	}
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000e30 	.word	0x20000e30
 80067dc:	0800f424 	.word	0x0800f424

080067e0 <processMgmtDirectJoinRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtDirectJoinRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtDirectJoinRsp) {
 80067ec:	4b18      	ldr	r3, [pc, #96]	; (8006850 <processMgmtDirectJoinRsp+0x70>)
 80067ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d028      	beq.n	8006846 <processMgmtDirectJoinRsp+0x66>
		uint8_t msgIdx = 2;
 80067f4:	2302      	movs	r3, #2
 80067f6:	73fb      	strb	r3, [r7, #15]
		MgmtDirectJoinRspFormat_t rsp;
		if (rpcLen < 3) {
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d802      	bhi.n	8006804 <processMgmtDirectJoinRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80067fe:	4815      	ldr	r0, [pc, #84]	; (8006854 <processMgmtDirectJoinRsp+0x74>)
 8006800:	f006 ff70 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	4413      	add	r3, r2
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	b29a      	uxth	r2, r3
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	3301      	adds	r3, #1
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	440b      	add	r3, r1
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	b29b      	uxth	r3, r3
 800681e:	4413      	add	r3, r2
 8006820:	b29b      	uxth	r3, r3
 8006822:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	3302      	adds	r3, #2
 8006828:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	73fa      	strb	r2, [r7, #15]
 8006830:	461a      	mov	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4413      	add	r3, r2
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtDirectJoinRsp(&rsp);
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <processMgmtDirectJoinRsp+0x70>)
 800683c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683e:	f107 0208 	add.w	r2, r7, #8
 8006842:	4610      	mov	r0, r2
 8006844:	4798      	blx	r3
	}
}
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000e30 	.word	0x20000e30
 8006854:	0800f424 	.word	0x0800f424

08006858 <processMgmtPermitJoinRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtPermitJoinRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtPermitJoinRsp) {
 8006864:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <processMgmtPermitJoinRsp+0x70>)
 8006866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006868:	2b00      	cmp	r3, #0
 800686a:	d028      	beq.n	80068be <processMgmtPermitJoinRsp+0x66>
		uint8_t msgIdx = 2;
 800686c:	2302      	movs	r3, #2
 800686e:	73fb      	strb	r3, [r7, #15]
		MgmtPermitJoinRspFormat_t rsp;
		if (rpcLen < 3) {
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d802      	bhi.n	800687c <processMgmtPermitJoinRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8006876:	4815      	ldr	r0, [pc, #84]	; (80068cc <processMgmtPermitJoinRsp+0x74>)
 8006878:	f006 ff34 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	4413      	add	r3, r2
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	b29a      	uxth	r2, r3
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	3301      	adds	r3, #1
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	440b      	add	r3, r1
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	b29b      	uxth	r3, r3
 8006896:	4413      	add	r3, r2
 8006898:	b29b      	uxth	r3, r3
 800689a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	3302      	adds	r3, #2
 80068a0:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	73fa      	strb	r2, [r7, #15]
 80068a8:	461a      	mov	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4413      	add	r3, r2
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtPermitJoinRsp(&rsp);
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <processMgmtPermitJoinRsp+0x70>)
 80068b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b6:	f107 0208 	add.w	r2, r7, #8
 80068ba:	4610      	mov	r0, r2
 80068bc:	4798      	blx	r3
	}
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000e30 	.word	0x20000e30
 80068cc:	0800f424 	.word	0x0800f424

080068d0 <processEndDeviceAnnceInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processEndDeviceAnnceInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 80068d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068d4:	b08b      	sub	sp, #44	; 0x2c
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoEndDeviceAnnceInd) {
 80068de:	4b44      	ldr	r3, [pc, #272]	; (80069f0 <processEndDeviceAnnceInd+0x120>)
 80068e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d07e      	beq.n	80069e4 <processEndDeviceAnnceInd+0x114>
		uint8_t msgIdx = 2;
 80068e6:	2302      	movs	r3, #2
 80068e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		EndDeviceAnnceIndFormat_t rsp;
		if (rpcLen < 13) {
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	2b0c      	cmp	r3, #12
 80068f0:	d802      	bhi.n	80068f8 <processEndDeviceAnnceInd+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 80068f2:	4840      	ldr	r0, [pc, #256]	; (80069f4 <processEndDeviceAnnceInd+0x124>)
 80068f4:	f006 fef6 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80068f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	4413      	add	r3, r2
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	b29a      	uxth	r2, r3
 8006904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006908:	3301      	adds	r3, #1
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	440b      	add	r3, r1
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	b29b      	uxth	r3, r3
 8006916:	4413      	add	r3, r2
 8006918:	b29b      	uxth	r3, r3
 800691a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 800691c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006920:	3302      	adds	r3, #2
 8006922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	b29a      	uxth	r2, r3
 8006932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006936:	3301      	adds	r3, #1
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	440b      	add	r3, r1
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	021b      	lsls	r3, r3, #8
 8006942:	b29b      	uxth	r3, r3
 8006944:	4413      	add	r3, r2
 8006946:	b29b      	uxth	r3, r3
 8006948:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 800694a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800694e:	3302      	adds	r3, #2
 8006950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rsp.IEEEAddr = 0;
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006966:	e029      	b.n	80069bc <processEndDeviceAnnceInd+0xec>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8006968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8006972:	461a      	mov	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4413      	add	r3, r2
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006984:	00c9      	lsls	r1, r1, #3
 8006986:	f1a1 0620 	sub.w	r6, r1, #32
 800698a:	f1c1 0020 	rsb	r0, r1, #32
 800698e:	fa03 f501 	lsl.w	r5, r3, r1
 8006992:	fa02 f606 	lsl.w	r6, r2, r6
 8006996:	4335      	orrs	r5, r6
 8006998:	fa22 f000 	lsr.w	r0, r2, r0
 800699c:	4305      	orrs	r5, r0
 800699e:	fa02 f401 	lsl.w	r4, r2, r1
 80069a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069a6:	ea44 0802 	orr.w	r8, r4, r2
 80069aa:	ea45 0903 	orr.w	r9, r5, r3
 80069ae:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++)
 80069b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069b6:	3301      	adds	r3, #1
 80069b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069c0:	2b07      	cmp	r3, #7
 80069c2:	d9d1      	bls.n	8006968 <processEndDeviceAnnceInd+0x98>
		rsp.Capabilities = rpcBuff[msgIdx++];
 80069c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4413      	add	r3, r2
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	763b      	strb	r3, [r7, #24]

		mtZdoCbs.pfnZdoEndDeviceAnnceInd(&rsp);
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <processEndDeviceAnnceInd+0x120>)
 80069da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069dc:	f107 0208 	add.w	r2, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
	}
}
 80069e4:	bf00      	nop
 80069e6:	372c      	adds	r7, #44	; 0x2c
 80069e8:	46bd      	mov	sp, r7
 80069ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069ee:	bf00      	nop
 80069f0:	20000e30 	.word	0x20000e30
 80069f4:	0800f424 	.word	0x0800f424

080069f8 <processMatchDescRspSent>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMatchDescRspSent(uint8_t *rpcBuff, uint8_t rpcLen) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b096      	sub	sp, #88	; 0x58
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMatchDescRspSent) {
 8006a04:	4b4a      	ldr	r3, [pc, #296]	; (8006b30 <processMatchDescRspSent+0x138>)
 8006a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 808d 	beq.w	8006b28 <processMatchDescRspSent+0x130>
		uint8_t msgIdx = 2;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		MatchDescRspSentFormat_t rsp;
		if (rpcLen < 4) {
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d802      	bhi.n	8006a20 <processMatchDescRspSent+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 8006a1a:	4846      	ldr	r0, [pc, #280]	; (8006b34 <processMatchDescRspSent+0x13c>)
 8006a1c:	f006 fe62 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006a20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	4413      	add	r3, r2
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a30:	3301      	adds	r3, #1
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	440b      	add	r3, r1
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4413      	add	r3, r2
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8006a44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a48:	3302      	adds	r3, #2
 8006a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		rsp.NumInClusters = rpcBuff[msgIdx++];
 8006a4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 8006a58:	461a      	mov	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	72bb      	strb	r3, [r7, #10]
		uint32_t i;
		for (i = 0; i < rsp.NumInClusters; i++) {
 8006a62:	2300      	movs	r3, #0
 8006a64:	653b      	str	r3, [r7, #80]	; 0x50
 8006a66:	e01f      	b.n	8006aa8 <processMatchDescRspSent+0xb0>
			rsp.InClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	4413      	add	r3, r2
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a78:	3301      	adds	r3, #1
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	440b      	add	r3, r1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	4413      	add	r3, r2
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006a92:	440b      	add	r3, r1
 8006a94:	f823 2c4c 	strh.w	r2, [r3, #-76]
			msgIdx += 2;
 8006a98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for (i = 0; i < rsp.NumInClusters; i++) {
 8006aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8006aa8:	7abb      	ldrb	r3, [r7, #10]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d3da      	bcc.n	8006a68 <processMatchDescRspSent+0x70>
		}
		rsp.NumOutClusters = rpcBuff[msgIdx++];
 8006ab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 8006abc:	461a      	mov	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		for (i = 0; i < rsp.NumOutClusters; i++) {
 8006ac8:	2300      	movs	r3, #0
 8006aca:	653b      	str	r3, [r7, #80]	; 0x50
 8006acc:	e020      	b.n	8006b10 <processMatchDescRspSent+0x118>
			rsp.OutClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006ace:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ade:	3301      	adds	r3, #1
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	440b      	add	r3, r1
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	4413      	add	r3, r2
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af2:	3310      	adds	r3, #16
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006afa:	440b      	add	r3, r1
 8006afc:	f823 2c4a 	strh.w	r2, [r3, #-74]
			msgIdx += 2;
 8006b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b04:	3302      	adds	r3, #2
 8006b06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for (i = 0; i < rsp.NumOutClusters; i++) {
 8006b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b14:	461a      	mov	r2, r3
 8006b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d3d8      	bcc.n	8006ace <processMatchDescRspSent+0xd6>
		}

		mtZdoCbs.pfnZdoMatchDescRspSent(&rsp);
 8006b1c:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <processMatchDescRspSent+0x138>)
 8006b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b20:	f107 0208 	add.w	r2, r7, #8
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
	}
}
 8006b28:	bf00      	nop
 8006b2a:	3758      	adds	r7, #88	; 0x58
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	20000e30 	.word	0x20000e30
 8006b34:	0800f424 	.word	0x0800f424

08006b38 <processStatusErrorRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processStatusErrorRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoStatusErrorRsp) {
 8006b44:	4b18      	ldr	r3, [pc, #96]	; (8006ba8 <processStatusErrorRsp+0x70>)
 8006b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d028      	beq.n	8006b9e <processStatusErrorRsp+0x66>
		uint8_t msgIdx = 2;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	73fb      	strb	r3, [r7, #15]
		StatusErrorRspFormat_t rsp;
		if (rpcLen < 3) {
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d802      	bhi.n	8006b5c <processStatusErrorRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8006b56:	4815      	ldr	r0, [pc, #84]	; (8006bac <processStatusErrorRsp+0x74>)
 8006b58:	f006 fdc4 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	4413      	add	r3, r2
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	440b      	add	r3, r1
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	4413      	add	r3, r2
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	3302      	adds	r3, #2
 8006b80:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	73fa      	strb	r2, [r7, #15]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoStatusErrorRsp(&rsp);
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <processStatusErrorRsp+0x70>)
 8006b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b96:	f107 0208 	add.w	r2, r7, #8
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4798      	blx	r3
	}
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000e30 	.word	0x20000e30
 8006bac:	0800f424 	.word	0x0800f424

08006bb0 <processSrcRtgInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processSrcRtgInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	1d3b      	adds	r3, r7, #4
 8006bba:	6018      	str	r0, [r3, #0]
 8006bbc:	460a      	mov	r2, r1
 8006bbe:	1cfb      	adds	r3, r7, #3
 8006bc0:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoSrcRtgInd) {
 8006bc2:	4b39      	ldr	r3, [pc, #228]	; (8006ca8 <processSrcRtgInd+0xf8>)
 8006bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d068      	beq.n	8006c9c <processSrcRtgInd+0xec>
		uint8_t msgIdx = 2;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		SrcRtgIndFormat_t rsp;
		if (rpcLen < 4) {
 8006bd0:	1cfb      	adds	r3, r7, #3
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d802      	bhi.n	8006bde <processSrcRtgInd+0x2e>
			printf("MT_RPC_ERR_LENGTH\n");
 8006bd8:	4834      	ldr	r0, [pc, #208]	; (8006cac <processSrcRtgInd+0xfc>)
 8006bda:	f006 fd83 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006bde:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006be2:	1d3a      	adds	r2, r7, #4
 8006be4:	6812      	ldr	r2, [r2, #0]
 8006be6:	4413      	add	r3, r2
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	1d39      	adds	r1, r7, #4
 8006bf4:	6809      	ldr	r1, [r1, #0]
 8006bf6:	440b      	add	r3, r1
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	f107 030c 	add.w	r3, r7, #12
 8006c08:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8006c0a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006c0e:	3302      	adds	r3, #2
 8006c10:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		rsp.RelayCount = rpcBuff[msgIdx++];
 8006c14:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006c1e:	461a      	mov	r2, r3
 8006c20:	1d3b      	adds	r3, r7, #4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4413      	add	r3, r2
 8006c26:	781a      	ldrb	r2, [r3, #0]
 8006c28:	f107 030c 	add.w	r3, r7, #12
 8006c2c:	709a      	strb	r2, [r3, #2]
		uint32_t i;
		for (i = 0; i < rsp.RelayCount; i++) {
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8006c34:	e024      	b.n	8006c80 <processSrcRtgInd+0xd0>
			rsp.RelayList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006c36:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006c3a:	1d3a      	adds	r2, r7, #4
 8006c3c:	6812      	ldr	r2, [r2, #0]
 8006c3e:	4413      	add	r3, r2
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006c48:	3301      	adds	r3, #1
 8006c4a:	1d39      	adds	r1, r7, #4
 8006c4c:	6809      	ldr	r1, [r1, #0]
 8006c4e:	440b      	add	r3, r1
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	4413      	add	r3, r2
 8006c5a:	b299      	uxth	r1, r3
 8006c5c:	f107 020c 	add.w	r2, r7, #12
 8006c60:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4413      	add	r3, r2
 8006c68:	460a      	mov	r2, r1
 8006c6a:	809a      	strh	r2, [r3, #4]
			msgIdx += 2;
 8006c6c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006c70:	3302      	adds	r3, #2
 8006c72:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		for (i = 0; i < rsp.RelayCount; i++) {
 8006c76:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8006c80:	f107 030c 	add.w	r3, r7, #12
 8006c84:	789b      	ldrb	r3, [r3, #2]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d3d2      	bcc.n	8006c36 <processSrcRtgInd+0x86>
		}

		mtZdoCbs.pfnZdoSrcRtgInd(&rsp);
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <processSrcRtgInd+0xf8>)
 8006c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c94:	f107 020c 	add.w	r2, r7, #12
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
	}
}
 8006c9c:	bf00      	nop
 8006c9e:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000e30 	.word	0x20000e30
 8006cac:	0800f424 	.word	0x0800f424

08006cb0 <processBeaconNotifyInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processBeaconNotifyInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	1d3b      	adds	r3, r7, #4
 8006cbc:	6018      	str	r0, [r3, #0]
 8006cbe:	460a      	mov	r2, r1
 8006cc0:	1cfb      	adds	r3, r7, #3
 8006cc2:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoBeaconNotifyInd) {
 8006cc4:	4bd4      	ldr	r3, [pc, #848]	; (8007018 <processBeaconNotifyInd+0x368>)
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 819f 	beq.w	800700c <processBeaconNotifyInd+0x35c>
		uint8_t msgIdx = 2;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		BeaconNotifyIndFormat_t rsp;
		if (rpcLen < 1) {
 8006cd4:	1cfb      	adds	r3, r7, #3
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <processBeaconNotifyInd+0x32>
			printf("MT_RPC_ERR_LENGTH\n");
 8006cdc:	48cf      	ldr	r0, [pc, #828]	; (800701c <processBeaconNotifyInd+0x36c>)
 8006cde:	f006 fd01 	bl	800d6e4 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 8006ce2:	1cfb      	adds	r3, r7, #3
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	48cd      	ldr	r0, [pc, #820]	; (8007020 <processBeaconNotifyInd+0x370>)
 8006cea:	f006 fc75 	bl	800d5d8 <iprintf>

		rsp.BeaconCount = rpcBuff[msgIdx++];
 8006cee:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	1d3b      	adds	r3, r7, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4413      	add	r3, r2
 8006d00:	781a      	ldrb	r2, [r3, #0]
 8006d02:	f107 0308 	add.w	r3, r7, #8
 8006d06:	701a      	strb	r2, [r3, #0]
		if (rpcLen > 1) {
 8006d08:	1cfb      	adds	r3, r7, #3
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	f240 8177 	bls.w	8007000 <processBeaconNotifyInd+0x350>
			uint32_t i;
			for (i = 0; i < rsp.BeaconCount; i++) {
 8006d12:	2300      	movs	r3, #0
 8006d14:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8006d18:	e169      	b.n	8006fee <processBeaconNotifyInd+0x33e>
				rsp.BeaconList[i].SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006d1a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006d1e:	1d3a      	adds	r2, r7, #4
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	4413      	add	r3, r2
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	1d39      	adds	r1, r7, #4
 8006d30:	6809      	ldr	r1, [r1, #0]
 8006d32:	440b      	add	r3, r1
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	021b      	lsls	r3, r3, #8
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	b298      	uxth	r0, r3
 8006d40:	f107 0108 	add.w	r1, r7, #8
 8006d44:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006d48:	4613      	mov	r3, r2
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	4413      	add	r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	440b      	add	r3, r1
 8006d52:	3308      	adds	r3, #8
 8006d54:	4602      	mov	r2, r0
 8006d56:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 8006d58:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				rsp.BeaconList[i].PanId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006d62:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006d66:	1d3a      	adds	r2, r7, #4
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006d74:	3301      	adds	r3, #1
 8006d76:	1d39      	adds	r1, r7, #4
 8006d78:	6809      	ldr	r1, [r1, #0]
 8006d7a:	440b      	add	r3, r1
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4413      	add	r3, r2
 8006d86:	b298      	uxth	r0, r3
 8006d88:	f107 0108 	add.w	r1, r7, #8
 8006d8c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006d90:	4613      	mov	r3, r2
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	4413      	add	r3, r2
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	440b      	add	r3, r1
 8006d9a:	330a      	adds	r3, #10
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 8006da0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006da4:	3302      	adds	r3, #2
 8006da6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				rsp.BeaconList[i].LogicalChannel = rpcBuff[msgIdx++];
 8006daa:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006db4:	461a      	mov	r2, r3
 8006db6:	1d3b      	adds	r3, r7, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4413      	add	r3, r2
 8006dbc:	7818      	ldrb	r0, [r3, #0]
 8006dbe:	f107 0108 	add.w	r1, r7, #8
 8006dc2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4413      	add	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	440b      	add	r3, r1
 8006dd0:	330c      	adds	r3, #12
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].PermitJoining = rpcBuff[msgIdx++];
 8006dd6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006de0:	461a      	mov	r2, r3
 8006de2:	1d3b      	adds	r3, r7, #4
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4413      	add	r3, r2
 8006de8:	7818      	ldrb	r0, [r3, #0]
 8006dea:	f107 0108 	add.w	r1, r7, #8
 8006dee:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006df2:	4613      	mov	r3, r2
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	4413      	add	r3, r2
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	440b      	add	r3, r1
 8006dfc:	330d      	adds	r3, #13
 8006dfe:	4602      	mov	r2, r0
 8006e00:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].RouterCap = rpcBuff[msgIdx++];
 8006e02:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	1d3b      	adds	r3, r7, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4413      	add	r3, r2
 8006e14:	7818      	ldrb	r0, [r3, #0]
 8006e16:	f107 0108 	add.w	r1, r7, #8
 8006e1a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006e1e:	4613      	mov	r3, r2
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	4413      	add	r3, r2
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	440b      	add	r3, r1
 8006e28:	330e      	adds	r3, #14
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].DevCap = rpcBuff[msgIdx++];
 8006e2e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006e38:	461a      	mov	r2, r3
 8006e3a:	1d3b      	adds	r3, r7, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4413      	add	r3, r2
 8006e40:	7818      	ldrb	r0, [r3, #0]
 8006e42:	f107 0108 	add.w	r1, r7, #8
 8006e46:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	4413      	add	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	440b      	add	r3, r1
 8006e54:	330f      	adds	r3, #15
 8006e56:	4602      	mov	r2, r0
 8006e58:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].ProtocolVer = rpcBuff[msgIdx++];
 8006e5a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006e64:	461a      	mov	r2, r3
 8006e66:	1d3b      	adds	r3, r7, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	7818      	ldrb	r0, [r3, #0]
 8006e6e:	f107 0108 	add.w	r1, r7, #8
 8006e72:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006e76:	4613      	mov	r3, r2
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	440b      	add	r3, r1
 8006e80:	3310      	adds	r3, #16
 8006e82:	4602      	mov	r2, r0
 8006e84:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].StackProf = rpcBuff[msgIdx++];
 8006e86:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006e90:	461a      	mov	r2, r3
 8006e92:	1d3b      	adds	r3, r7, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4413      	add	r3, r2
 8006e98:	7818      	ldrb	r0, [r3, #0]
 8006e9a:	f107 0108 	add.w	r1, r7, #8
 8006e9e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	440b      	add	r3, r1
 8006eac:	3311      	adds	r3, #17
 8006eae:	4602      	mov	r2, r0
 8006eb0:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].Lqi = rpcBuff[msgIdx++];
 8006eb2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	7818      	ldrb	r0, [r3, #0]
 8006ec6:	f107 0108 	add.w	r1, r7, #8
 8006eca:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006ece:	4613      	mov	r3, r2
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	4413      	add	r3, r2
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	440b      	add	r3, r1
 8006ed8:	3312      	adds	r3, #18
 8006eda:	4602      	mov	r2, r0
 8006edc:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].Depth = rpcBuff[msgIdx++];
 8006ede:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006ee8:	461a      	mov	r2, r3
 8006eea:	1d3b      	adds	r3, r7, #4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4413      	add	r3, r2
 8006ef0:	7818      	ldrb	r0, [r3, #0]
 8006ef2:	f107 0108 	add.w	r1, r7, #8
 8006ef6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006efa:	4613      	mov	r3, r2
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	4413      	add	r3, r2
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	440b      	add	r3, r1
 8006f04:	3313      	adds	r3, #19
 8006f06:	4602      	mov	r2, r0
 8006f08:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].UpdateId = rpcBuff[msgIdx++];
 8006f0a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006f14:	461a      	mov	r2, r3
 8006f16:	1d3b      	adds	r3, r7, #4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	7818      	ldrb	r0, [r3, #0]
 8006f1e:	f107 0108 	add.w	r1, r7, #8
 8006f22:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006f26:	4613      	mov	r3, r2
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	4413      	add	r3, r2
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	440b      	add	r3, r1
 8006f30:	3314      	adds	r3, #20
 8006f32:	4602      	mov	r2, r0
 8006f34:	701a      	strb	r2, [r3, #0]

				rsp.BeaconList[i].ExtendedPanId = 0;
 8006f36:	f107 0108 	add.w	r1, r7, #8
 8006f3a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	4613      	mov	r3, r2
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	4413      	add	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	4419      	add	r1, r3
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8006f56:	2300      	movs	r3, #0
 8006f58:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8006f5c:	e03e      	b.n	8006fdc <processBeaconNotifyInd+0x32c>
					rsp.BeaconList[i].ExtendedPanId |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8006f5e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8006f68:	461a      	mov	r2, r3
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4413      	add	r3, r2
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	f897 120f 	ldrb.w	r1, [r7, #527]	; 0x20f
 8006f7c:	00c9      	lsls	r1, r1, #3
 8006f7e:	f1a1 0620 	sub.w	r6, r1, #32
 8006f82:	f1c1 0020 	rsb	r0, r1, #32
 8006f86:	fa03 f501 	lsl.w	r5, r3, r1
 8006f8a:	fa02 f606 	lsl.w	r6, r2, r6
 8006f8e:	4335      	orrs	r5, r6
 8006f90:	fa22 f000 	lsr.w	r0, r2, r0
 8006f94:	4305      	orrs	r5, r0
 8006f96:	fa02 f401 	lsl.w	r4, r2, r1
 8006f9a:	f107 0108 	add.w	r1, r7, #8
 8006f9e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	4413      	add	r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	440b      	add	r3, r1
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	ea44 0802 	orr.w	r8, r4, r2
 8006fb6:	ea45 0903 	orr.w	r9, r5, r3
 8006fba:	f107 0108 	add.w	r1, r7, #8
 8006fbe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	4413      	add	r3, r2
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	440b      	add	r3, r1
 8006fce:	e9c3 8900 	strd	r8, r9, [r3]
				for (ind = 0; ind < 8; ind++)
 8006fd2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8006fdc:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8006fe0:	2b07      	cmp	r3, #7
 8006fe2:	d9bc      	bls.n	8006f5e <processBeaconNotifyInd+0x2ae>
			for (i = 0; i < rsp.BeaconCount; i++) {
 8006fe4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006fe8:	3301      	adds	r3, #1
 8006fea:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8006fee:	f107 0308 	add.w	r3, r7, #8
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	f4ff ae8d 	bcc.w	8006d1a <processBeaconNotifyInd+0x6a>

			}
		}
		mtZdoCbs.pfnZdoBeaconNotifyInd(&rsp);
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <processBeaconNotifyInd+0x368>)
 8007002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007004:	f107 0208 	add.w	r2, r7, #8
 8007008:	4610      	mov	r0, r2
 800700a:	4798      	blx	r3
	}
}
 800700c:	bf00      	nop
 800700e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8007012:	46bd      	mov	sp, r7
 8007014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007018:	20000e30 	.word	0x20000e30
 800701c:	0800f424 	.word	0x0800f424
 8007020:	0800f438 	.word	0x0800f438

08007024 <processJoinCnf>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processJoinCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoJoinCnf) {
 8007030:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <processJoinCnf+0xa0>)
 8007032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007034:	2b00      	cmp	r3, #0
 8007036:	d040      	beq.n	80070ba <processJoinCnf+0x96>
		uint8_t msgIdx = 2;
 8007038:	2302      	movs	r3, #2
 800703a:	73fb      	strb	r3, [r7, #15]
		JoinCnfFormat_t rsp;
		if (rpcLen < 5) {
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d802      	bhi.n	8007048 <processJoinCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8007042:	4821      	ldr	r0, [pc, #132]	; (80070c8 <processJoinCnf+0xa4>)
 8007044:	f006 fb4e 	bl	800d6e4 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	4619      	mov	r1, r3
 800704c:	481f      	ldr	r0, [pc, #124]	; (80070cc <processJoinCnf+0xa8>)
 800704e:	f006 fac3 	bl	800d5d8 <iprintf>

		rsp.Status = rpcBuff[msgIdx++];
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	73fa      	strb	r2, [r7, #15]
 8007058:	461a      	mov	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4413      	add	r3, r2
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	723b      	strb	r3, [r7, #8]
		rsp.DevAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4413      	add	r3, r2
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	b29a      	uxth	r2, r3
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	3301      	adds	r3, #1
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	440b      	add	r3, r1
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	021b      	lsls	r3, r3, #8
 800707a:	b29b      	uxth	r3, r3
 800707c:	4413      	add	r3, r2
 800707e:	b29b      	uxth	r3, r3
 8007080:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	3302      	adds	r3, #2
 8007086:	73fb      	strb	r3, [r7, #15]
		rsp.ParentAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4413      	add	r3, r2
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	b29a      	uxth	r2, r3
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	3301      	adds	r3, #1
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	440b      	add	r3, r1
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	4413      	add	r3, r2
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	3302      	adds	r3, #2
 80070ac:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoJoinCnf(&rsp);
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <processJoinCnf+0xa0>)
 80070b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b2:	f107 0208 	add.w	r2, r7, #8
 80070b6:	4610      	mov	r0, r2
 80070b8:	4798      	blx	r3
	}
}
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000e30 	.word	0x20000e30
 80070c8:	0800f424 	.word	0x0800f424
 80070cc:	0800f438 	.word	0x0800f438

080070d0 <processNwkDiscoveryCnf>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNwkDiscoveryCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNwkDiscoveryCnf) {
 80070dc:	4b11      	ldr	r3, [pc, #68]	; (8007124 <processNwkDiscoveryCnf+0x54>)
 80070de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01a      	beq.n	800711a <processNwkDiscoveryCnf+0x4a>
		uint8_t msgIdx = 2;
 80070e4:	2302      	movs	r3, #2
 80070e6:	73fb      	strb	r3, [r7, #15]
		NwkDiscoveryCnfFormat_t rsp;
		if (rpcLen < 1) {
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d102      	bne.n	80070f4 <processNwkDiscoveryCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80070ee:	480e      	ldr	r0, [pc, #56]	; (8007128 <processNwkDiscoveryCnf+0x58>)
 80070f0:	f006 faf8 	bl	800d6e4 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	4619      	mov	r1, r3
 80070f8:	480c      	ldr	r0, [pc, #48]	; (800712c <processNwkDiscoveryCnf+0x5c>)
 80070fa:	f006 fa6d 	bl	800d5d8 <iprintf>

		rsp.Status = rpcBuff[msgIdx++];
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	73fa      	strb	r2, [r7, #15]
 8007104:	461a      	mov	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4413      	add	r3, r2
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	733b      	strb	r3, [r7, #12]

		mtZdoCbs.pfnZdoNwkDiscoveryCnf(&rsp);
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <processNwkDiscoveryCnf+0x54>)
 8007110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007112:	f107 020c 	add.w	r2, r7, #12
 8007116:	4610      	mov	r0, r2
 8007118:	4798      	blx	r3
	}
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000e30 	.word	0x20000e30
 8007128:	0800f424 	.word	0x0800f424
 800712c:	0800f438 	.word	0x0800f438

08007130 <processLeaveInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processLeaveInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 8007130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007134:	b08b      	sub	sp, #44	; 0x2c
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoLeaveInd) {
 800713e:	4b42      	ldr	r3, [pc, #264]	; (8007248 <processLeaveInd+0x118>)
 8007140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007142:	2b00      	cmp	r3, #0
 8007144:	d07b      	beq.n	800723e <processLeaveInd+0x10e>
		uint8_t msgIdx = 2;
 8007146:	2302      	movs	r3, #2
 8007148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		LeaveIndFormat_t rsp;
		if (rpcLen < 13) {
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	2b0c      	cmp	r3, #12
 8007150:	d802      	bhi.n	8007158 <processLeaveInd+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 8007152:	483e      	ldr	r0, [pc, #248]	; (800724c <processLeaveInd+0x11c>)
 8007154:	f006 fac6 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	4413      	add	r3, r2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	b29a      	uxth	r2, r3
 8007164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007168:	3301      	adds	r3, #1
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	440b      	add	r3, r1
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	b29b      	uxth	r3, r3
 8007176:	4413      	add	r3, r2
 8007178:	b29b      	uxth	r3, r3
 800717a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 800717c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007180:	3302      	adds	r3, #2
 8007182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		rsp.ExtAddr = 0;
 8007186:	f04f 0200 	mov.w	r2, #0
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 8007192:	2300      	movs	r3, #0
 8007194:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007198:	e029      	b.n	80071ee <processLeaveInd+0xbe>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 800719a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80071a4:	461a      	mov	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4413      	add	r3, r2
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80071b6:	00c9      	lsls	r1, r1, #3
 80071b8:	f1a1 0620 	sub.w	r6, r1, #32
 80071bc:	f1c1 0020 	rsb	r0, r1, #32
 80071c0:	fa03 f501 	lsl.w	r5, r3, r1
 80071c4:	fa02 f606 	lsl.w	r6, r2, r6
 80071c8:	4335      	orrs	r5, r6
 80071ca:	fa22 f000 	lsr.w	r0, r2, r0
 80071ce:	4305      	orrs	r5, r0
 80071d0:	fa02 f401 	lsl.w	r4, r2, r1
 80071d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80071d8:	ea44 0802 	orr.w	r8, r4, r2
 80071dc:	ea45 0903 	orr.w	r9, r5, r3
 80071e0:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++) {
 80071e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071e8:	3301      	adds	r3, #1
 80071ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071f2:	2b07      	cmp	r3, #7
 80071f4:	d9d1      	bls.n	800719a <processLeaveInd+0x6a>
		}
		rsp.Request = rpcBuff[msgIdx++];
 80071f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8007200:	461a      	mov	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4413      	add	r3, r2
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	763b      	strb	r3, [r7, #24]
		rsp.Remove = rpcBuff[msgIdx++];
 800720a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8007214:	461a      	mov	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4413      	add	r3, r2
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	767b      	strb	r3, [r7, #25]
		rsp.Rejoin = rpcBuff[msgIdx++];
 800721e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8007228:	461a      	mov	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4413      	add	r3, r2
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	76bb      	strb	r3, [r7, #26]

		mtZdoCbs.pfnZdoLeaveInd(&rsp);
 8007232:	4b05      	ldr	r3, [pc, #20]	; (8007248 <processLeaveInd+0x118>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	f107 0208 	add.w	r2, r7, #8
 800723a:	4610      	mov	r0, r2
 800723c:	4798      	blx	r3
	}
}
 800723e:	bf00      	nop
 8007240:	372c      	adds	r7, #44	; 0x2c
 8007242:	46bd      	mov	sp, r7
 8007244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007248:	20000e30 	.word	0x20000e30
 800724c:	0800f424 	.word	0x0800f424

08007250 <processMsgCbIncoming>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMsgCbIncoming(uint8_t *rpcBuff, uint8_t rpcLen) {
 8007250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007254:	b08d      	sub	sp, #52	; 0x34
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMsgCbIncoming) {
 800725e:	4b6b      	ldr	r3, [pc, #428]	; (800740c <processMsgCbIncoming+0x1bc>)
 8007260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 80cd 	beq.w	8007402 <processMsgCbIncoming+0x1b2>
		uint8_t msgIdx = 2;
 8007268:	2302      	movs	r3, #2
 800726a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		MsgCbIncomingFormat_t rsp;
		if (rpcLen < 9) {
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	2b08      	cmp	r3, #8
 8007272:	d802      	bhi.n	800727a <processMsgCbIncoming+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 8007274:	4866      	ldr	r0, [pc, #408]	; (8007410 <processMsgCbIncoming+0x1c0>)
 8007276:	f006 fa35 	bl	800d6e4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800727a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	4413      	add	r3, r2
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b29a      	uxth	r2, r3
 8007286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800728a:	3301      	adds	r3, #1
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	440b      	add	r3, r1
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	b29b      	uxth	r3, r3
 8007298:	4413      	add	r3, r2
 800729a:	b29b      	uxth	r3, r3
 800729c:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 800729e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072a2:	3302      	adds	r3, #2
 80072a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		rsp.WasBroadcast = rpcBuff[msgIdx++];
 80072a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4413      	add	r3, r2
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	72bb      	strb	r3, [r7, #10]
		rsp.ClusterID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80072bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	4413      	add	r3, r2
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072cc:	3301      	adds	r3, #1
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	440b      	add	r3, r1
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	021b      	lsls	r3, r3, #8
 80072d8:	b29b      	uxth	r3, r3
 80072da:	4413      	add	r3, r2
 80072dc:	b29b      	uxth	r3, r3
 80072de:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80072e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072e4:	3302      	adds	r3, #2
 80072e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		rsp.SecurityUse = rpcBuff[msgIdx++];
 80072ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80072f4:	461a      	mov	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	73bb      	strb	r3, [r7, #14]
		rsp.SeqNum = rpcBuff[msgIdx++];
 80072fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007308:	461a      	mov	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4413      	add	r3, r2
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	73fb      	strb	r3, [r7, #15]
		rsp.MacDstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	4413      	add	r3, r2
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	b29a      	uxth	r2, r3
 800731e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007322:	3301      	adds	r3, #1
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	440b      	add	r3, r1
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	b29b      	uxth	r3, r3
 8007330:	4413      	add	r3, r2
 8007332:	b29b      	uxth	r3, r3
 8007334:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8007336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800733a:	3302      	adds	r3, #2
 800733c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		rsp.Status = rpcBuff[msgIdx++];
 8007340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800734a:	461a      	mov	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4413      	add	r3, r2
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	74bb      	strb	r3, [r7, #18]
		rsp.ExtAddr = 0;
 8007354:	f04f 0200 	mov.w	r2, #0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 8007360:	2300      	movs	r3, #0
 8007362:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007366:	e029      	b.n	80073bc <processMsgCbIncoming+0x16c>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8007368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	b2da      	uxtb	r2, r3
 800737c:	f04f 0300 	mov.w	r3, #0
 8007380:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8007384:	00c9      	lsls	r1, r1, #3
 8007386:	f1a1 0620 	sub.w	r6, r1, #32
 800738a:	f1c1 0020 	rsb	r0, r1, #32
 800738e:	fa03 f501 	lsl.w	r5, r3, r1
 8007392:	fa02 f606 	lsl.w	r6, r2, r6
 8007396:	4335      	orrs	r5, r6
 8007398:	fa22 f000 	lsr.w	r0, r2, r0
 800739c:	4305      	orrs	r5, r0
 800739e:	fa02 f401 	lsl.w	r4, r2, r1
 80073a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073a6:	ea44 0802 	orr.w	r8, r4, r2
 80073aa:	ea45 0903 	orr.w	r9, r5, r3
 80073ae:	e9c7 8906 	strd	r8, r9, [r7, #24]
		for (i = 0; i < 8; i++) {
 80073b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80073b6:	3301      	adds	r3, #1
 80073b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80073bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80073c0:	2b07      	cmp	r3, #7
 80073c2:	d9d1      	bls.n	8007368 <processMsgCbIncoming+0x118>
		}
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80073c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073d4:	3301      	adds	r3, #1
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	440b      	add	r3, r1
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	021b      	lsls	r3, r3, #8
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	4413      	add	r3, r2
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	843b      	strh	r3, [r7, #32]
		rsp.NotUsed = rpcBuff[msgIdx];
 80073e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	4413      	add	r3, r2
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		mtZdoCbs.pfnZdoMsgCbIncoming(&rsp);
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <processMsgCbIncoming+0x1bc>)
 80073f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fa:	f107 0208 	add.w	r2, r7, #8
 80073fe:	4610      	mov	r0, r2
 8007400:	4798      	blx	r3
	}
}
 8007402:	bf00      	nop
 8007404:	3734      	adds	r7, #52	; 0x34
 8007406:	46bd      	mov	sp, r7
 8007408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800740c:	20000e30 	.word	0x20000e30
 8007410:	0800f424 	.word	0x0800f424

08007414 <zdoProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 ***********************************************************************************************/
void zdoProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007428:	2b60      	cmp	r3, #96	; 0x60
 800742a:	d105      	bne.n	8007438 <zdoProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9d7 	bl	80077e4 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "zdoProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8007436:	e1ce      	b.n	80077d6 <zdoProcess+0x3c2>
		switch (rpcBuff[1]) {
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3301      	adds	r3, #1
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	3b80      	subs	r3, #128	; 0x80
 8007440:	2b7f      	cmp	r3, #127	; 0x7f
 8007442:	f200 81bd 	bhi.w	80077c0 <zdoProcess+0x3ac>
 8007446:	a201      	add	r2, pc, #4	; (adr r2, 800744c <zdoProcess+0x38>)
 8007448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744c:	08007659 	.word	0x08007659
 8007450:	08007665 	.word	0x08007665
 8007454:	08007671 	.word	0x08007671
 8007458:	0800767d 	.word	0x0800767d
 800745c:	08007689 	.word	0x08007689
 8007460:	08007695 	.word	0x08007695
 8007464:	080076a1 	.word	0x080076a1
 8007468:	080077c1 	.word	0x080077c1
 800746c:	080077c1 	.word	0x080077c1
 8007470:	080077c1 	.word	0x080077c1
 8007474:	080077c1 	.word	0x080077c1
 8007478:	080077c1 	.word	0x080077c1
 800747c:	080077c1 	.word	0x080077c1
 8007480:	080077c1 	.word	0x080077c1
 8007484:	080077c1 	.word	0x080077c1
 8007488:	080077c1 	.word	0x080077c1
 800748c:	080076ad 	.word	0x080076ad
 8007490:	080076b9 	.word	0x080076b9
 8007494:	080077c1 	.word	0x080077c1
 8007498:	080077c1 	.word	0x080077c1
 800749c:	080076c5 	.word	0x080076c5
 80074a0:	080076d1 	.word	0x080076d1
 80074a4:	080077c1 	.word	0x080077c1
 80074a8:	080077c1 	.word	0x080077c1
 80074ac:	080077c1 	.word	0x080077c1
 80074b0:	080077c1 	.word	0x080077c1
 80074b4:	080077c1 	.word	0x080077c1
 80074b8:	080077c1 	.word	0x080077c1
 80074bc:	080077c1 	.word	0x080077c1
 80074c0:	080077c1 	.word	0x080077c1
 80074c4:	080077c1 	.word	0x080077c1
 80074c8:	080077c1 	.word	0x080077c1
 80074cc:	080076dd 	.word	0x080076dd
 80074d0:	080076e9 	.word	0x080076e9
 80074d4:	080076f5 	.word	0x080076f5
 80074d8:	080077c1 	.word	0x080077c1
 80074dc:	080077c1 	.word	0x080077c1
 80074e0:	080077c1 	.word	0x080077c1
 80074e4:	080077c1 	.word	0x080077c1
 80074e8:	080077c1 	.word	0x080077c1
 80074ec:	080077c1 	.word	0x080077c1
 80074f0:	080077c1 	.word	0x080077c1
 80074f4:	080077c1 	.word	0x080077c1
 80074f8:	080077c1 	.word	0x080077c1
 80074fc:	080077c1 	.word	0x080077c1
 8007500:	080077c1 	.word	0x080077c1
 8007504:	080077c1 	.word	0x080077c1
 8007508:	080077c1 	.word	0x080077c1
 800750c:	08007701 	.word	0x08007701
 8007510:	0800770d 	.word	0x0800770d
 8007514:	08007719 	.word	0x08007719
 8007518:	08007725 	.word	0x08007725
 800751c:	08007731 	.word	0x08007731
 8007520:	0800773d 	.word	0x0800773d
 8007524:	08007749 	.word	0x08007749
 8007528:	080077c1 	.word	0x080077c1
 800752c:	080077c1 	.word	0x080077c1
 8007530:	080077c1 	.word	0x080077c1
 8007534:	080077c1 	.word	0x080077c1
 8007538:	080077c1 	.word	0x080077c1
 800753c:	080077c1 	.word	0x080077c1
 8007540:	080077c1 	.word	0x080077c1
 8007544:	080077c1 	.word	0x080077c1
 8007548:	080077c1 	.word	0x080077c1
 800754c:	0800764d 	.word	0x0800764d
 8007550:	08007755 	.word	0x08007755
 8007554:	08007761 	.word	0x08007761
 8007558:	0800776d 	.word	0x0800776d
 800755c:	08007779 	.word	0x08007779
 8007560:	08007785 	.word	0x08007785
 8007564:	08007791 	.word	0x08007791
 8007568:	0800779d 	.word	0x0800779d
 800756c:	080077c1 	.word	0x080077c1
 8007570:	080077a9 	.word	0x080077a9
 8007574:	080077c1 	.word	0x080077c1
 8007578:	080077c1 	.word	0x080077c1
 800757c:	080077c1 	.word	0x080077c1
 8007580:	080077c1 	.word	0x080077c1
 8007584:	080077c1 	.word	0x080077c1
 8007588:	080077c1 	.word	0x080077c1
 800758c:	080077c1 	.word	0x080077c1
 8007590:	080077c1 	.word	0x080077c1
 8007594:	080077c1 	.word	0x080077c1
 8007598:	080077c1 	.word	0x080077c1
 800759c:	080077c1 	.word	0x080077c1
 80075a0:	080077c1 	.word	0x080077c1
 80075a4:	080077c1 	.word	0x080077c1
 80075a8:	080077c1 	.word	0x080077c1
 80075ac:	080077c1 	.word	0x080077c1
 80075b0:	080077c1 	.word	0x080077c1
 80075b4:	080077c1 	.word	0x080077c1
 80075b8:	080077c1 	.word	0x080077c1
 80075bc:	080077c1 	.word	0x080077c1
 80075c0:	080077c1 	.word	0x080077c1
 80075c4:	080077c1 	.word	0x080077c1
 80075c8:	080077c1 	.word	0x080077c1
 80075cc:	080077c1 	.word	0x080077c1
 80075d0:	080077c1 	.word	0x080077c1
 80075d4:	080077c1 	.word	0x080077c1
 80075d8:	080077c1 	.word	0x080077c1
 80075dc:	080077c1 	.word	0x080077c1
 80075e0:	080077c1 	.word	0x080077c1
 80075e4:	080077c1 	.word	0x080077c1
 80075e8:	080077c1 	.word	0x080077c1
 80075ec:	080077c1 	.word	0x080077c1
 80075f0:	080077c1 	.word	0x080077c1
 80075f4:	080077c1 	.word	0x080077c1
 80075f8:	080077c1 	.word	0x080077c1
 80075fc:	080077c1 	.word	0x080077c1
 8007600:	080077c1 	.word	0x080077c1
 8007604:	080077c1 	.word	0x080077c1
 8007608:	080077c1 	.word	0x080077c1
 800760c:	080077c1 	.word	0x080077c1
 8007610:	080077c1 	.word	0x080077c1
 8007614:	080077c1 	.word	0x080077c1
 8007618:	080077c1 	.word	0x080077c1
 800761c:	080077c1 	.word	0x080077c1
 8007620:	080077c1 	.word	0x080077c1
 8007624:	080077c1 	.word	0x080077c1
 8007628:	080077c1 	.word	0x080077c1
 800762c:	080077c1 	.word	0x080077c1
 8007630:	080077c1 	.word	0x080077c1
 8007634:	080077c1 	.word	0x080077c1
 8007638:	080077c1 	.word	0x080077c1
 800763c:	080077c1 	.word	0x080077c1
 8007640:	080077c1 	.word	0x080077c1
 8007644:	080077c1 	.word	0x080077c1
 8007648:	080077b5 	.word	0x080077b5
				processStateChange(rpcBuff, rpcLen);
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7fd fa85 	bl	8004b60 <processStateChange>
				break;
 8007656:	e0be      	b.n	80077d6 <zdoProcess+0x3c2>
				processNwkAddrRsp(rpcBuff, rpcLen);
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fd fbf3 	bl	8004e48 <processNwkAddrRsp>
				break;
 8007662:	e0b8      	b.n	80077d6 <zdoProcess+0x3c2>
				processIeeeAddrRsp(rpcBuff, rpcLen);
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7fd fcaf 	bl	8004fcc <processIeeeAddrRsp>
				break;
 800766e:	e0b2      	b.n	80077d6 <zdoProcess+0x3c2>
				processNodeDescRsp(rpcBuff, rpcLen);
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7fd fd73 	bl	8005160 <processNodeDescRsp>
				break;
 800767a:	e0ac      	b.n	80077d6 <zdoProcess+0x3c2>
				processPowerDescRsp(rpcBuff, rpcLen);
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7fd fe31 	bl	80052e8 <processPowerDescRsp>
				break;
 8007686:	e0a6      	b.n	80077d6 <zdoProcess+0x3c2>
				processSimpleDescRsp(rpcBuff, rpcLen);
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7fd fe89 	bl	80053a4 <processSimpleDescRsp>
				break;
 8007692:	e0a0      	b.n	80077d6 <zdoProcess+0x3c2>
				processActiveEpRsp(rpcBuff, rpcLen);
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7fd ff95 	bl	80055c8 <processActiveEpRsp>
				break;
 800769e:	e09a      	b.n	80077d6 <zdoProcess+0x3c2>
				processMatchDescRsp(rpcBuff, rpcLen);
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7fe f80f 	bl	80056c8 <processMatchDescRsp>
				break;
 80076aa:	e094      	b.n	80077d6 <zdoProcess+0x3c2>
				processComplexDescRsp(rpcBuff, rpcLen);
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7fe f889 	bl	80057c8 <processComplexDescRsp>
				break;
 80076b6:	e08e      	b.n	80077d6 <zdoProcess+0x3c2>
				processUserDescRsp(rpcBuff, rpcLen);
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7fe f903 	bl	80058c8 <processUserDescRsp>
				break;
 80076c2:	e088      	b.n	80077d6 <zdoProcess+0x3c2>
				processUserDescConf(rpcBuff, rpcLen);
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7fe f97d 	bl	80059c8 <processUserDescConf>
				break;
 80076ce:	e082      	b.n	80077d6 <zdoProcess+0x3c2>
				processServerDiscRsp(rpcBuff, rpcLen);
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7fe f9c5 	bl	8005a64 <processServerDiscRsp>
				break;
 80076da:	e07c      	b.n	80077d6 <zdoProcess+0x3c2>
				processEndDeviceBindRsp(rpcBuff, rpcLen);
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7fe fa0d 	bl	8005b00 <processEndDeviceBindRsp>
				break;
 80076e6:	e076      	b.n	80077d6 <zdoProcess+0x3c2>
				processBindRsp(rpcBuff, rpcLen);
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fe fa43 	bl	8005b78 <processBindRsp>
				break;
 80076f2:	e070      	b.n	80077d6 <zdoProcess+0x3c2>
				processUnbindRsp(rpcBuff, rpcLen);
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7fe fa79 	bl	8005bf0 <processUnbindRsp>
				break;
 80076fe:	e06a      	b.n	80077d6 <zdoProcess+0x3c2>
				processMgmtNwkDiscRsp(rpcBuff, rpcLen);
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7fe faaf 	bl	8005c68 <processMgmtNwkDiscRsp>
				break;
 800770a:	e064      	b.n	80077d6 <zdoProcess+0x3c2>
				processMgmtLqiRsp(rpcBuff, rpcLen);
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7fe fbd7 	bl	8005ec4 <processMgmtLqiRsp>
				break;
 8007716:	e05e      	b.n	80077d6 <zdoProcess+0x3c2>
				processMgmtRtgRsp(rpcBuff, rpcLen);
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7fe fdad 	bl	800627c <processMgmtRtgRsp>
				break;
 8007722:	e058      	b.n	80077d6 <zdoProcess+0x3c2>
				processMgmtBindRsp(rpcBuff, rpcLen);
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fe fe8f 	bl	800644c <processMgmtBindRsp>
				break;
 800772e:	e052      	b.n	80077d6 <zdoProcess+0x3c2>
				processMgmtLeaveRsp(rpcBuff, rpcLen);
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff f817 	bl	8006768 <processMgmtLeaveRsp>
				break;
 800773a:	e04c      	b.n	80077d6 <zdoProcess+0x3c2>
				processMgmtDirectJoinRsp(rpcBuff, rpcLen);
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff f84d 	bl	80067e0 <processMgmtDirectJoinRsp>
				break;
 8007746:	e046      	b.n	80077d6 <zdoProcess+0x3c2>
				processMgmtPermitJoinRsp(rpcBuff, rpcLen);
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff f883 	bl	8006858 <processMgmtPermitJoinRsp>
				break;
 8007752:	e040      	b.n	80077d6 <zdoProcess+0x3c2>
				processEndDeviceAnnceInd(rpcBuff, rpcLen);
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff f8b9 	bl	80068d0 <processEndDeviceAnnceInd>
				break;
 800775e:	e03a      	b.n	80077d6 <zdoProcess+0x3c2>
				processMatchDescRspSent(rpcBuff, rpcLen);
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff f947 	bl	80069f8 <processMatchDescRspSent>
				break;
 800776a:	e034      	b.n	80077d6 <zdoProcess+0x3c2>
				processStatusErrorRsp(rpcBuff, rpcLen);
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff f9e1 	bl	8006b38 <processStatusErrorRsp>
				break;
 8007776:	e02e      	b.n	80077d6 <zdoProcess+0x3c2>
				processSrcRtgInd(rpcBuff, rpcLen);
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff fa17 	bl	8006bb0 <processSrcRtgInd>
				break;
 8007782:	e028      	b.n	80077d6 <zdoProcess+0x3c2>
				processBeaconNotifyInd(rpcBuff, rpcLen);
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff fa91 	bl	8006cb0 <processBeaconNotifyInd>
				break;
 800778e:	e022      	b.n	80077d6 <zdoProcess+0x3c2>
				processJoinCnf(rpcBuff, rpcLen);
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7ff fc45 	bl	8007024 <processJoinCnf>
				break;
 800779a:	e01c      	b.n	80077d6 <zdoProcess+0x3c2>
				processNwkDiscoveryCnf(rpcBuff, rpcLen);
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7ff fc95 	bl	80070d0 <processNwkDiscoveryCnf>
				break;
 80077a6:	e016      	b.n	80077d6 <zdoProcess+0x3c2>
				processLeaveInd(rpcBuff, rpcLen);
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff fcbf 	bl	8007130 <processLeaveInd>
				break;
 80077b2:	e010      	b.n	80077d6 <zdoProcess+0x3c2>
				processMsgCbIncoming(rpcBuff, rpcLen);
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff fd49 	bl	8007250 <processMsgCbIncoming>
				break;
 80077be:	e00a      	b.n	80077d6 <zdoProcess+0x3c2>
				dbg_print(PRINT_LEVEL_WARNING, "zdoProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	4619      	mov	r1, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3301      	adds	r3, #1
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	4804      	ldr	r0, [pc, #16]	; (80077e0 <zdoProcess+0x3cc>)
 80077d0:	f7f8 ff76 	bl	80006c0 <log_print>
				break;
 80077d4:	bf00      	nop
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	0800f448 	.word	0x0800f448

080077e4 <processSrsp>:
 *
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	480b      	ldr	r0, [pc, #44]	; (8007824 <processSrsp+0x40>)
 80077f8:	f005 fed8 	bl	800d5ac <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3301      	adds	r3, #1
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b25      	cmp	r3, #37	; 0x25
 8007804:	d105      	bne.n	8007812 <processSrsp+0x2e>
		case MT_ZDO_GET_LINK_KEY:
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_GET_LINK_KEY\n");
			processGetLinkKey(rpcBuff, rpcLen);
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fd faa4 	bl	8004d58 <processGetLinkKey>
			break;
 8007810:	e003      	b.n	800781a <processSrsp+0x36>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message\n");
 8007812:	4805      	ldr	r0, [pc, #20]	; (8007828 <processSrsp+0x44>)
 8007814:	f7f8 ff54 	bl	80006c0 <log_print>
			break;
 8007818:	bf00      	nop
	}
}
 800781a:	bf00      	nop
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200086a4 	.word	0x200086a4
 8007828:	0800f474 	.word	0x0800f474

0800782c <mtProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
void mtProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
	//Read CMD0
	switch (rpcBuff[0] & MT_RPC_SUBSYSTEM_MASK) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	3b01      	subs	r3, #1
 8007842:	2b0e      	cmp	r3, #14
 8007844:	d844      	bhi.n	80078d0 <mtProcess+0xa4>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <mtProcess+0x20>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	08007895 	.word	0x08007895
 8007850:	080078d1 	.word	0x080078d1
 8007854:	080078d1 	.word	0x080078d1
 8007858:	080078a1 	.word	0x080078a1
 800785c:	08007889 	.word	0x08007889
 8007860:	080078ad 	.word	0x080078ad
 8007864:	080078b9 	.word	0x080078b9
 8007868:	080078d1 	.word	0x080078d1
 800786c:	080078d1 	.word	0x080078d1
 8007870:	080078d1 	.word	0x080078d1
 8007874:	080078d1 	.word	0x080078d1
 8007878:	080078d1 	.word	0x080078d1
 800787c:	080078d1 	.word	0x080078d1
 8007880:	080078d1 	.word	0x080078d1
 8007884:	080078c5 	.word	0x080078c5
		case MT_RPC_SYS_ZDO:
			//process ZDO RPC's in the ZDO module
			zdoProcess(rpcBuff, rpcLen);
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff fdc1 	bl	8007414 <zdoProcess>
			break;
 8007892:	e01e      	b.n	80078d2 <mtProcess+0xa6>

		case MT_RPC_SYS_SYS:
			//process SYS RPC's in the Sys module
			sysProcess(rpcBuff, rpcLen);
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7fc ffe3 	bl	8004864 <sysProcess>
			break;
 800789e:	e018      	b.n	80078d2 <mtProcess+0xa6>

		case MT_RPC_SYS_AF:
			//process SYS RPC's in the Sys module
			afProcess(rpcBuff, rpcLen);
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7fb fe3b 	bl	8003520 <afProcess>
			break;
 80078aa:	e012      	b.n	80078d2 <mtProcess+0xa6>

		case MT_RPC_SYS_SAPI:
			//process SYS RPC's in the Sys module
			sapiProcess(rpcBuff, rpcLen);
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7fc fa75 	bl	8003da0 <sapiProcess>
			break;
 80078b6:	e00c      	b.n	80078d2 <mtProcess+0xa6>

		case MT_RPC_SYS_UTIL:
			//process SYS RPC's in the Util module
			utilProcess(rpcBuff, rpcLen);
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7fd f915 	bl	8004aec <utilProcess>
			break;
 80078c2:	e006      	b.n	80078d2 <mtProcess+0xa6>

		case MT_RPC_SYS_APP_CFG:
			//process SYS RPC's in the App Cfg module
			appCfgProcess(rpcBuff, rpcLen);
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fb ff67 	bl	800379c <appCfgProcess>
			break;
 80078ce:	e000      	b.n	80078d2 <mtProcess+0xa6>

		default:
			dbg_print(PRINT_LEVEL_VERBOSE, "mtProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);

			break;
 80078d0:	bf00      	nop
	}

}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop

080078dc <rpcTransportOpen>:
 *
 * @brief   opens the serial port to the CC253x.
 *
 * @return  status
 */
int32_t rpcTransportOpen(void) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
	// create queues
	rpc_q_uart_tx = xQueueCreate(256, sizeof(uint8_t));
 80078e0:	2200      	movs	r2, #0
 80078e2:	2101      	movs	r1, #1
 80078e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80078e8:	f003 fc1c 	bl	800b124 <xQueueGenericCreate>
 80078ec:	4603      	mov	r3, r0
 80078ee:	4a10      	ldr	r2, [pc, #64]	; (8007930 <rpcTransportOpen+0x54>)
 80078f0:	6013      	str	r3, [r2, #0]
	rpc_q_uart_rx = xQueueCreate(256, sizeof(uint8_t));
 80078f2:	2200      	movs	r2, #0
 80078f4:	2101      	movs	r1, #1
 80078f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80078fa:	f003 fc13 	bl	800b124 <xQueueGenericCreate>
 80078fe:	4603      	mov	r3, r0
 8007900:	4a0c      	ldr	r2, [pc, #48]	; (8007934 <rpcTransportOpen+0x58>)
 8007902:	6013      	str	r3, [r2, #0]

	// enable receive interrupt
	SET_BIT(hlpuart1.Instance->CR1, USART_CR1_RXNEIE);
 8007904:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <rpcTransportOpen+0x5c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <rpcTransportOpen+0x5c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0220 	orr.w	r2, r2, #32
 8007912:	601a      	str	r2, [r3, #0]

	// throw an error if one queue couldn't be created
	return (rpc_q_uart_tx == NULL || rpc_q_uart_rx == NULL) ? -1 : 0;
 8007914:	4b06      	ldr	r3, [pc, #24]	; (8007930 <rpcTransportOpen+0x54>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <rpcTransportOpen+0x48>
 800791c:	4b05      	ldr	r3, [pc, #20]	; (8007934 <rpcTransportOpen+0x58>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d102      	bne.n	800792a <rpcTransportOpen+0x4e>
 8007924:	f04f 33ff 	mov.w	r3, #4294967295
 8007928:	e000      	b.n	800792c <rpcTransportOpen+0x50>
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000eb4 	.word	0x20000eb4
 8007934:	20000eb8 	.word	0x20000eb8
 8007938:	200085a0 	.word	0x200085a0

0800793c <rpcTransportISR>:
/*********************************************************************
 * @fn      rpcTransportISR
 *
 * @brief   Interrupt Service Routine for RPC uart
 */
void rpcTransportISR(void) {
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
	// read status register
	isr_stat = hlpuart1.Instance->ISR;
 8007940:	4b23      	ldr	r3, [pc, #140]	; (80079d0 <rpcTransportISR+0x94>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	4a23      	ldr	r2, [pc, #140]	; (80079d4 <rpcTransportISR+0x98>)
 8007948:	6013      	str	r3, [r2, #0]

	// overrun error?
	if (isr_stat & USART_ISR_ORE)
 800794a:	4b22      	ldr	r3, [pc, #136]	; (80079d4 <rpcTransportISR+0x98>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0308 	and.w	r3, r3, #8
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <rpcTransportISR+0x2a>
		hlpuart1.Instance->ICR |= USART_ICR_ORECF;
 8007956:	4b1e      	ldr	r3, [pc, #120]	; (80079d0 <rpcTransportISR+0x94>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6a1a      	ldr	r2, [r3, #32]
 800795c:	4b1c      	ldr	r3, [pc, #112]	; (80079d0 <rpcTransportISR+0x94>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0208 	orr.w	r2, r2, #8
 8007964:	621a      	str	r2, [r3, #32]

	// check for rx interrupt
	if (isr_stat & USART_ISR_RXNE) {
 8007966:	4b1b      	ldr	r3, [pc, #108]	; (80079d4 <rpcTransportISR+0x98>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00d      	beq.n	800798e <rpcTransportISR+0x52>
		// read the data
		isr_data = hlpuart1.Instance->RDR & 0xFF;
 8007972:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <rpcTransportISR+0x94>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007978:	b29b      	uxth	r3, r3
 800797a:	b2da      	uxtb	r2, r3
 800797c:	4b16      	ldr	r3, [pc, #88]	; (80079d8 <rpcTransportISR+0x9c>)
 800797e:	701a      	strb	r2, [r3, #0]

		// Transmit data to queue
		xQueueSendFromISR(rpc_q_uart_rx, (void* ) &isr_data, NULL);
 8007980:	4b16      	ldr	r3, [pc, #88]	; (80079dc <rpcTransportISR+0xa0>)
 8007982:	6818      	ldr	r0, [r3, #0]
 8007984:	2300      	movs	r3, #0
 8007986:	2200      	movs	r2, #0
 8007988:	4913      	ldr	r1, [pc, #76]	; (80079d8 <rpcTransportISR+0x9c>)
 800798a:	f003 fd2d 	bl	800b3e8 <xQueueGenericSendFromISR>
	}

	// check for data to send
	if (isr_stat & USART_ISR_TC) {
 800798e:	4b11      	ldr	r3, [pc, #68]	; (80079d4 <rpcTransportISR+0x98>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d018      	beq.n	80079cc <rpcTransportISR+0x90>
		// grab data from fifo
		if (xQueueReceiveFromISR(rpc_q_uart_tx, (void*) &isr_data, NULL) == pdFALSE) {
 800799a:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <rpcTransportISR+0xa4>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2200      	movs	r2, #0
 80079a0:	490d      	ldr	r1, [pc, #52]	; (80079d8 <rpcTransportISR+0x9c>)
 80079a2:	4618      	mov	r0, r3
 80079a4:	f003 ffa4 	bl	800b8f0 <xQueueReceiveFromISR>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d108      	bne.n	80079c0 <rpcTransportISR+0x84>
			// end of transmission, disable TX empty interrupt
			CLEAR_BIT(hlpuart1.Instance->CR1, USART_CR1_TCIE);
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <rpcTransportISR+0x94>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <rpcTransportISR+0x94>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079bc:	601a      	str	r2, [r3, #0]
		else {
			// send another byte
			hlpuart1.Instance->TDR = isr_data;
		}
	}
}
 80079be:	e005      	b.n	80079cc <rpcTransportISR+0x90>
			hlpuart1.Instance->TDR = isr_data;
 80079c0:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <rpcTransportISR+0x9c>)
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	4b02      	ldr	r3, [pc, #8]	; (80079d0 <rpcTransportISR+0x94>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	b292      	uxth	r2, r2
 80079ca:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80079cc:	bf00      	nop
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	200085a0 	.word	0x200085a0
 80079d4:	20000ebc 	.word	0x20000ebc
 80079d8:	20000ec0 	.word	0x20000ec0
 80079dc:	20000eb8 	.word	0x20000eb8
 80079e0:	20000eb4 	.word	0x20000eb4

080079e4 <rpcTransportWrite>:
 * @param   buf - Buffer for data to be placed in
 * @param   len - Length of the given buffer
 *
 * @return  status
 */
void rpcTransportWrite(uint8_t *buf, uint8_t len) {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	70fb      	strb	r3, [r7, #3]
	for (uint16_t i = 0; i < len; i++) {
 80079f0:	2300      	movs	r3, #0
 80079f2:	81fb      	strh	r3, [r7, #14]
 80079f4:	e01b      	b.n	8007a2e <rpcTransportWrite+0x4a>
		// add data to tx queue
		xQueueSend(rpc_q_uart_tx, (void* ) &buf[i], 1);
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <rpcTransportWrite+0x60>)
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	89fb      	ldrh	r3, [r7, #14]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	18d1      	adds	r1, r2, r3
 8007a00:	2300      	movs	r3, #0
 8007a02:	2201      	movs	r2, #1
 8007a04:	f003 fbf2 	bl	800b1ec <xQueueGenericSend>

		// enable "RX Not Empty" and "TX Empty" interrupt
		SET_BIT(hlpuart1.Instance->CR1, USART_CR1_RXNEIE);
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <rpcTransportWrite+0x64>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <rpcTransportWrite+0x64>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0220 	orr.w	r2, r2, #32
 8007a16:	601a      	str	r2, [r3, #0]
		SET_BIT(hlpuart1.Instance->CR1, USART_CR1_TCIE);
 8007a18:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <rpcTransportWrite+0x64>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <rpcTransportWrite+0x64>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a26:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < len; i++) {
 8007a28:	89fb      	ldrh	r3, [r7, #14]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	81fb      	strh	r3, [r7, #14]
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	89fa      	ldrh	r2, [r7, #14]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d3de      	bcc.n	80079f6 <rpcTransportWrite+0x12>
	}
}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20000eb4 	.word	0x20000eb4
 8007a48:	200085a0 	.word	0x200085a0

08007a4c <rpcTransportRead>:
 * @param   buf - Buffer for data to be placed in
 * @param   len - Length of the given buffer
 *
 * @return  amount of bytes read
 */
uint8_t rpcTransportRead(uint8_t *buf, uint8_t len) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
	int index = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]

	// keep waiting for data btyes
	while (xQueueReceive(rpc_q_uart_rx, &buf[index], 1) == pdTRUE) {
 8007a5c:	e006      	b.n	8007a6c <rpcTransportRead+0x20>
		// increment position in buffer
		index++;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3301      	adds	r3, #1
 8007a62:	60fb      	str	r3, [r7, #12]

		// all data received?
		if (index == len)
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d00c      	beq.n	8007a86 <rpcTransportRead+0x3a>
	while (xQueueReceive(rpc_q_uart_rx, &buf[index], 1) == pdTRUE) {
 8007a6c:	4b09      	ldr	r3, [pc, #36]	; (8007a94 <rpcTransportRead+0x48>)
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	4413      	add	r3, r2
 8007a76:	2201      	movs	r2, #1
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f003 fd4d 	bl	800b518 <xQueueReceive>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d0ec      	beq.n	8007a5e <rpcTransportRead+0x12>
 8007a84:	e000      	b.n	8007a88 <rpcTransportRead+0x3c>
			break;
 8007a86:	bf00      	nop
	}

	// return the amount of data read
	return index;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	b2db      	uxtb	r3, r3
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20000eb8 	.word	0x20000eb8

08007a98 <rpcOpen>:
 *
 * @param   devicePath - path to the UART device
 *
 * @return  status
 */
int32_t rpcOpen(void) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
	// open RPC transport (create communication queues)
	if (rpcTransportOpen() < 0) {
 8007a9c:	f7ff ff1e 	bl	80078dc <rpcTransportOpen>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da05      	bge.n	8007ab2 <rpcOpen+0x1a>
		dbg_print(PRINT_LEVEL_ERROR, "rpcOpen: device open failed\n");
 8007aa6:	4809      	ldr	r0, [pc, #36]	; (8007acc <rpcOpen+0x34>)
 8007aa8:	f7f8 fe0a 	bl	80006c0 <log_print>
		return (-1);
 8007aac:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab0:	e00a      	b.n	8007ac8 <rpcOpen+0x30>
	}

	// create binary semaphore
	srspSem = xSemaphoreCreateBinary();
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	2001      	movs	r0, #1
 8007ab8:	f003 fb34 	bl	800b124 <xQueueGenericCreate>
 8007abc:	4603      	mov	r3, r0
 8007abe:	4a04      	ldr	r2, [pc, #16]	; (8007ad0 <rpcOpen+0x38>)
 8007ac0:	6013      	str	r3, [r2, #0]

	// send force run command to CC2530
	rpcForceRun();
 8007ac2:	f000 f849 	bl	8007b58 <rpcForceRun>

	// return result
	return 0;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	0800f498 	.word	0x0800f498
 8007ad0:	20000ec4 	.word	0x20000ec4

08007ad4 <rpcInitMq>:
 *
 * @param   -
 *
 * @return  status
 */
int32_t rpcInitMq(void) {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
	llq_open(&rpcLlq);
 8007ad8:	4802      	ldr	r0, [pc, #8]	; (8007ae4 <rpcInitMq+0x10>)
 8007ada:	f000 fa72 	bl	8007fc2 <llq_open>
	return 0;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000ecc 	.word	0x20000ecc

08007ae8 <rpcWaitMqClientMsg>:
 *
 * @param   -
 *
 * @return  status
 */
int32_t rpcWaitMqClientMsg(uint32_t timeout) {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b0c4      	sub	sp, #272	; 0x110
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	1d3b      	adds	r3, r7, #4
 8007af0:	6018      	str	r0, [r3, #0]
	uint8_t rpcFrame[RPC_MAX_LEN + 1];
	int32_t rpcLen;

	rpcLen = llq_timedreceive(&rpcLlq, (char*) rpcFrame, RPC_MAX_LEN + 1, timeout);
 8007af2:	1d3b      	adds	r3, r7, #4
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f107 0108 	add.w	r1, r7, #8
 8007afa:	f240 1201 	movw	r2, #257	; 0x101
 8007afe:	4813      	ldr	r0, [pc, #76]	; (8007b4c <rpcWaitMqClientMsg+0x64>)
 8007b00:	f000 fa70 	bl	8007fe4 <llq_timedreceive>
 8007b04:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	if (rpcLen != -1) {
 8007b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d00f      	beq.n	8007b32 <rpcWaitMqClientMsg+0x4a>
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: processing MT[%d]\n", rpcLen);
 8007b12:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007b16:	480e      	ldr	r0, [pc, #56]	; (8007b50 <rpcWaitMqClientMsg+0x68>)
 8007b18:	f7f8 fdd2 	bl	80006c0 <log_print>
		// process incoming message
		mtProcess(rpcFrame, rpcLen);
 8007b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	f107 0308 	add.w	r3, r7, #8
 8007b26:	4611      	mov	r1, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fe7f 	bl	800782c <mtProcess>
	else {
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: Timed out [%d]\n", rpcLen);
		return -1;
	}

	return 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e006      	b.n	8007b40 <rpcWaitMqClientMsg+0x58>
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: Timed out [%d]\n", rpcLen);
 8007b32:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007b36:	4807      	ldr	r0, [pc, #28]	; (8007b54 <rpcWaitMqClientMsg+0x6c>)
 8007b38:	f7f8 fdc2 	bl	80006c0 <log_print>
		return -1;
 8007b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000ecc 	.word	0x20000ecc
 8007b50:	0800f4f8 	.word	0x0800f4f8
 8007b54:	0800f520 	.word	0x0800f520

08007b58 <rpcForceRun>:
 *
 * @param   -
 *
 * @return  -
 */
void rpcForceRun(void) {
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
	uint8_t forceBoot = SB_FORCE_RUN;
 8007b5e:	2307      	movs	r3, #7
 8007b60:	71fb      	strb	r3, [r7, #7]

	// send the bootloader force boot incase we have a bootloader that waits
	rpcTransportWrite(&forceBoot, 1);
 8007b62:	1dfb      	adds	r3, r7, #7
 8007b64:	2101      	movs	r1, #1
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff ff3c 	bl	80079e4 <rpcTransportWrite>
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <rpcProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
int32_t rpcProcess(void) {
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b0c3      	sub	sp, #268	; 0x10c
 8007b78:	af00      	add	r7, sp, #0
	uint8_t rpcLen, rpcTempLen, bytesRead, sofByte, rpcBuffIdx;
	uint8_t retryAttempts = 0, len, rpcBuff[RPC_MAX_LEN];
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t fcs;

	//read first byte and check it is a SOF
	bytesRead = rpcTransportRead(&sofByte, 1);
 8007b80:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007b84:	2101      	movs	r1, #1
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff ff60 	bl	8007a4c <rpcTransportRead>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

	// did we recieve SOF?
	if ((sofByte == MT_RPC_SOF) && (bytesRead == 1))
 8007b92:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8007b96:	2bfe      	cmp	r3, #254	; 0xfe
 8007b98:	f040 8105 	bne.w	8007da6 <rpcProcess+0x232>
 8007b9c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	f040 8100 	bne.w	8007da6 <rpcProcess+0x232>
	{
		// clear retry counter
		retryAttempts = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

		// read length byte
		bytesRead = rpcTransportRead(&rpcLen, 1);
 8007bac:	f207 1301 	addw	r3, r7, #257	; 0x101
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff ff4a 	bl	8007a4c <rpcTransportRead>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

		if (bytesRead == 1) {
 8007bbe:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	f040 80e9 	bne.w	8007d9a <rpcProcess+0x226>
			len = rpcLen;
 8007bc8:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8007bcc:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			rpcBuff[0] = rpcLen;
 8007bd0:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	701a      	strb	r2, [r3, #0]

			//allocating RPC payload (+ cmd0, cmd1 and fcs)
			rpcLen += RPC_CMD0_FIELD_LEN + RPC_CMD1_FIELD_LEN + RPC_UART_FCS_LEN;
 8007bd8:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8007bdc:	3303      	adds	r3, #3
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101

			//non blocking read, so we need to wait for the rpc to be read
			rpcBuffIdx = 1;
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			rpcTempLen = rpcLen;
 8007bea:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8007bee:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			while (rpcTempLen > 0) {
 8007bf2:	e04d      	b.n	8007c90 <rpcProcess+0x11c>
				// read RPC frame
				bytesRead = rpcTransportRead(&(rpcBuff[rpcBuffIdx]), rpcTempLen);
 8007bf4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007bf8:	463a      	mov	r2, r7
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff ff22 	bl	8007a4c <rpcTransportRead>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

				// check for error
				if (bytesRead > rpcTempLen) {
 8007c0e:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8007c12:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d922      	bls.n	8007c60 <rpcProcess+0xec>
					//there was an error
					dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: read of %d bytes failed - %s\n", rpcTempLen, strerror(errno));
 8007c1a:	f897 4107 	ldrb.w	r4, [r7, #263]	; 0x107
 8007c1e:	f005 fc9b 	bl	800d558 <__errno>
 8007c22:	4603      	mov	r3, r0
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f005 ff7e 	bl	800db28 <strerror>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4621      	mov	r1, r4
 8007c32:	4860      	ldr	r0, [pc, #384]	; (8007db4 <rpcProcess+0x240>)
 8007c34:	f7f8 fd44 	bl	80006c0 <log_print>

					// check whether retry limits has been reached
					if (retryAttempts++ < 5) {
 8007c38:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d806      	bhi.n	8007c54 <rpcProcess+0xe0>
						// sleep for 10ms
						vTaskDelay(10);
 8007c46:	200a      	movs	r0, #10
 8007c48:	f004 f99c 	bl	800bf84 <vTaskDelay>

						// try again
						bytesRead = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8007c52:	e005      	b.n	8007c60 <rpcProcess+0xec>
					}
					else {
						// something went wrong, abort
						dbg_print(PRINT_LEVEL_ERROR, "rpcProcess: transport read failed too many times\n");
 8007c54:	4858      	ldr	r0, [pc, #352]	; (8007db8 <rpcProcess+0x244>)
 8007c56:	f7f8 fd33 	bl	80006c0 <log_print>

						return -1;
 8007c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5e:	e0a4      	b.n	8007daa <rpcProcess+0x236>
					}
				}

				// update counters
				if (rpcTempLen > bytesRead) {
 8007c60:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8007c64:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d907      	bls.n	8007c7c <rpcProcess+0x108>
					rpcTempLen -= bytesRead;
 8007c6c:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8007c70:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8007c7a:	e002      	b.n	8007c82 <rpcProcess+0x10e>
				}
				else {
					rpcTempLen = 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				}
				rpcBuffIdx += bytesRead;
 8007c82:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8007c86:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			while (rpcTempLen > 0) {
 8007c90:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1ad      	bne.n	8007bf4 <rpcProcess+0x80>
			}

			// print out incoming RPC frame
			printRpcMsg("SOC IN  <--", MT_RPC_SOF, len, &rpcBuff[1]);
 8007c98:	463b      	mov	r3, r7
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f897 2103 	ldrb.w	r2, [r7, #259]	; 0x103
 8007ca0:	21fe      	movs	r1, #254	; 0xfe
 8007ca2:	4846      	ldr	r0, [pc, #280]	; (8007dbc <rpcProcess+0x248>)
 8007ca4:	f000 f972 	bl	8007f8c <printRpcMsg>

			//Verify FCS of incoming MT frames
			fcs = calcFcs(&rpcBuff[0], (len + 3));
 8007ca8:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007cac:	3303      	adds	r3, #3
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 f94d 	bl	8007f54 <calcFcs>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102

			if (rpcBuff[len + 3] != fcs) {
 8007cc0:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007cc4:	3303      	adds	r3, #3
 8007cc6:	463a      	mov	r2, r7
 8007cc8:	5cd3      	ldrb	r3, [r2, r3]
 8007cca:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d00e      	beq.n	8007cf0 <rpcProcess+0x17c>
				dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: fcs error %x:%x\n", rpcBuff[len + 3], fcs);
 8007cd2:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007cd6:	3303      	adds	r3, #3
 8007cd8:	463a      	mov	r2, r7
 8007cda:	5cd3      	ldrb	r3, [r2, r3]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4836      	ldr	r0, [pc, #216]	; (8007dc0 <rpcProcess+0x24c>)
 8007ce6:	f7f8 fceb 	bl	80006c0 <log_print>
				return -1;
 8007cea:	f04f 33ff 	mov.w	r3, #4294967295
 8007cee:	e05c      	b.n	8007daa <rpcProcess+0x236>
			}

			dbg_print(PRINT_LEVEL_INFO, "rpcProcess: checksum done %02x %02x\n", expectedSrspCmdId, rpcBuff[1]);
 8007cf0:	4b34      	ldr	r3, [pc, #208]	; (8007dc4 <rpcProcess+0x250>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	785b      	ldrb	r3, [r3, #1]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	4832      	ldr	r0, [pc, #200]	; (8007dc8 <rpcProcess+0x254>)
 8007cfe:	f7f8 fcdf 	bl	80006c0 <log_print>

			if ((rpcBuff[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8007d02:	463b      	mov	r3, r7
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007d0a:	2b60      	cmp	r3, #96	; 0x60
 8007d0c:	d134      	bne.n	8007d78 <rpcProcess+0x204>
				// SRSP command ID deteced
				if (expectedSrspCmdId == (rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK)) {
 8007d0e:	4b2d      	ldr	r3, [pc, #180]	; (8007dc4 <rpcProcess+0x250>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	463b      	mov	r3, r7
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d11e      	bne.n	8007d5e <rpcProcess+0x1ea>
					dbg_print(PRINT_LEVEL_INFO, "rpcProcess: processing expected srsp [%02X]\n", rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK);
 8007d20:	463b      	mov	r3, r7
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	f003 031f 	and.w	r3, r3, #31
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4828      	ldr	r0, [pc, #160]	; (8007dcc <rpcProcess+0x258>)
 8007d2c:	f7f8 fcc8 	bl	80006c0 <log_print>

					//unblock waiting sreq
					xSemaphoreGive(srspSem);
 8007d30:	4b27      	ldr	r3, [pc, #156]	; (8007dd0 <rpcProcess+0x25c>)
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	2300      	movs	r3, #0
 8007d36:	2200      	movs	r2, #0
 8007d38:	2100      	movs	r1, #0
 8007d3a:	f003 fa57 	bl	800b1ec <xQueueGenericSend>

					dbg_print(PRINT_LEVEL_INFO, "rpcProcess: writing %d bytes SRSP to head of the queue\n", rpcLen);
 8007d3e:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8007d42:	4619      	mov	r1, r3
 8007d44:	4823      	ldr	r0, [pc, #140]	; (8007dd4 <rpcProcess+0x260>)
 8007d46:	f7f8 fcbb 	bl	80006c0 <log_print>

					// send message to queue
					llq_add(&rpcLlq, (char*) &rpcBuff[1], rpcLen, 1);
 8007d4a:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8007d4e:	461a      	mov	r2, r3
 8007d50:	463b      	mov	r3, r7
 8007d52:	1c59      	adds	r1, r3, #1
 8007d54:	2301      	movs	r3, #1
 8007d56:	4820      	ldr	r0, [pc, #128]	; (8007dd8 <rpcProcess+0x264>)
 8007d58:	f000 f98a 	bl	8008070 <llq_add>
 8007d5c:	e01b      	b.n	8007d96 <rpcProcess+0x222>
				}
				else {
					// unexpected SRSP discard
					dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: UNEXPECTED SREQ!: %02X%s:%02X%s", expectedSrspCmdId, (rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK));
 8007d5e:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <rpcProcess+0x250>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	4619      	mov	r1, r3
 8007d64:	463b      	mov	r3, r7
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	f003 031f 	and.w	r3, r3, #31
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	481b      	ldr	r0, [pc, #108]	; (8007ddc <rpcProcess+0x268>)
 8007d70:	f7f8 fca6 	bl	80006c0 <log_print>
					return 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e018      	b.n	8007daa <rpcProcess+0x236>
				}
			}
			else {
				// should be AREQ frame
				dbg_print(PRINT_LEVEL_INFO, "rpcProcess: writing %d bytes AREQ to tail of the queue\n", rpcLen);
 8007d78:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4818      	ldr	r0, [pc, #96]	; (8007de0 <rpcProcess+0x26c>)
 8007d80:	f7f8 fc9e 	bl	80006c0 <log_print>

				// send message to queue
				llq_add(&rpcLlq, (char*) &rpcBuff[1], rpcLen, 0);
 8007d84:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8007d88:	461a      	mov	r2, r3
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	1c59      	adds	r1, r3, #1
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4811      	ldr	r0, [pc, #68]	; (8007dd8 <rpcProcess+0x264>)
 8007d92:	f000 f96d 	bl	8008070 <llq_add>
			}

			return 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	e007      	b.n	8007daa <rpcProcess+0x236>
		}
		else {
			dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: Len Not read [%x]\n", bytesRead);
 8007d9a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4810      	ldr	r0, [pc, #64]	; (8007de4 <rpcProcess+0x270>)
 8007da2:	f7f8 fc8d 	bl	80006c0 <log_print>
		}
	}

	// nothing received yet
	return -1;
 8007da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd90      	pop	{r4, r7, pc}
 8007db4:	0800f544 	.word	0x0800f544
 8007db8:	0800f570 	.word	0x0800f570
 8007dbc:	0800f5a4 	.word	0x0800f5a4
 8007dc0:	0800f5b0 	.word	0x0800f5b0
 8007dc4:	20000ec8 	.word	0x20000ec8
 8007dc8:	0800f5d0 	.word	0x0800f5d0
 8007dcc:	0800f5f8 	.word	0x0800f5f8
 8007dd0:	20000ec4 	.word	0x20000ec4
 8007dd4:	0800f628 	.word	0x0800f628
 8007dd8:	20000ecc 	.word	0x20000ecc
 8007ddc:	0800f660 	.word	0x0800f660
 8007de0:	0800f68c 	.word	0x0800f68c
 8007de4:	0800f6c4 	.word	0x0800f6c4

08007de8 <rpcSendFrame>:
 *
 * @param   cmd0 System, cmd1 subsystem, ptr to payload, lenght of payload
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
uint8_t rpcSendFrame(uint8_t cmd0, uint8_t cmd1, uint8_t *payload, uint8_t payload_len) {
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b0c5      	sub	sp, #276	; 0x114
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	4639      	mov	r1, r7
 8007df4:	600a      	str	r2, [r1, #0]
 8007df6:	4619      	mov	r1, r3
 8007df8:	1dfb      	adds	r3, r7, #7
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	1dbb      	adds	r3, r7, #6
 8007e00:	4602      	mov	r2, r0
 8007e02:	701a      	strb	r2, [r3, #0]
 8007e04:	1d7b      	adds	r3, r7, #5
 8007e06:	460a      	mov	r2, r1
 8007e08:	701a      	strb	r2, [r3, #0]
	uint8_t buf[RPC_MAX_LEN];
	int32_t status = MT_RPC_SUCCESS;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	// block here if SREQ is in progress
	dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Sending RPC\n");
 8007e10:	4849      	ldr	r0, [pc, #292]	; (8007f38 <rpcSendFrame+0x150>)
 8007e12:	f7f8 fc55 	bl	80006c0 <log_print>

	// fill in header bytes
	buf[0] = MT_RPC_SOF;
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	22fe      	movs	r2, #254	; 0xfe
 8007e1c:	701a      	strb	r2, [r3, #0]
	buf[1] = payload_len;
 8007e1e:	f107 030c 	add.w	r3, r7, #12
 8007e22:	1d7a      	adds	r2, r7, #5
 8007e24:	7812      	ldrb	r2, [r2, #0]
 8007e26:	705a      	strb	r2, [r3, #1]
	buf[2] = cmd0;
 8007e28:	f107 030c 	add.w	r3, r7, #12
 8007e2c:	1dfa      	adds	r2, r7, #7
 8007e2e:	7812      	ldrb	r2, [r2, #0]
 8007e30:	709a      	strb	r2, [r3, #2]
	buf[3] = cmd1;
 8007e32:	f107 030c 	add.w	r3, r7, #12
 8007e36:	1dba      	adds	r2, r7, #6
 8007e38:	7812      	ldrb	r2, [r2, #0]
 8007e3a:	70da      	strb	r2, [r3, #3]

	if ((cmd0 & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ) {
 8007e3c:	1dfb      	adds	r3, r7, #7
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007e44:	2b20      	cmp	r3, #32
 8007e46:	d106      	bne.n	8007e56 <rpcSendFrame+0x6e>
		// calculate expected SRSP
		expectedSrspCmdId = (cmd0 & MT_RPC_SUBSYSTEM_MASK);
 8007e48:	1dfb      	adds	r3, r7, #7
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	f003 031f 	and.w	r3, r3, #31
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	4b3a      	ldr	r3, [pc, #232]	; (8007f3c <rpcSendFrame+0x154>)
 8007e54:	701a      	strb	r2, [r3, #0]
	}

	if (payload_len > 0) {
 8007e56:	1d7b      	adds	r3, r7, #5
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d009      	beq.n	8007e72 <rpcSendFrame+0x8a>
		// copy payload to buffer
		memcpy(buf + RPC_UART_HDR_LEN, payload, payload_len);
 8007e5e:	f107 030c 	add.w	r3, r7, #12
 8007e62:	3304      	adds	r3, #4
 8007e64:	1d7a      	adds	r2, r7, #5
 8007e66:	7812      	ldrb	r2, [r2, #0]
 8007e68:	4639      	mov	r1, r7
 8007e6a:	6809      	ldr	r1, [r1, #0]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f005 fb9d 	bl	800d5ac <memcpy>
	}

	// calculate FCS field
	buf[payload_len + RPC_UART_HDR_LEN] = calcFcs(&buf[RPC_UART_FRAME_START_IDX], payload_len + RPC_HDR_LEN);
 8007e72:	1d7b      	adds	r3, r7, #5
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	3303      	adds	r3, #3
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	1d7b      	adds	r3, r7, #5
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	1d1c      	adds	r4, r3, #4
 8007e80:	f107 030c 	add.w	r3, r7, #12
 8007e84:	3301      	adds	r3, #1
 8007e86:	4611      	mov	r1, r2
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 f863 	bl	8007f54 <calcFcs>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	461a      	mov	r2, r3
 8007e92:	f107 030c 	add.w	r3, r7, #12
 8007e96:	551a      	strb	r2, [r3, r4]

	// NOT SURE IF THIS IS OK???
	xSemaphoreTake(srspSem, 0);
 8007e98:	4b29      	ldr	r3, [pc, #164]	; (8007f40 <rpcSendFrame+0x158>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f003 fc1a 	bl	800b6d8 <xQueueSemaphoreTake>

	// send out RPC  message
	rpcTransportWrite(buf, payload_len + RPC_UART_HDR_LEN + RPC_UART_FCS_LEN);
 8007ea4:	1d7b      	adds	r3, r7, #5
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	3305      	adds	r3, #5
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	f107 030c 	add.w	r3, r7, #12
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff fd96 	bl	80079e4 <rpcTransportWrite>

	// print out message to be sent
	printRpcMsg("SOC OUT -->", buf[0], payload_len, &buf[2]);
 8007eb8:	f107 030c 	add.w	r3, r7, #12
 8007ebc:	7819      	ldrb	r1, [r3, #0]
 8007ebe:	f107 030c 	add.w	r3, r7, #12
 8007ec2:	1c98      	adds	r0, r3, #2
 8007ec4:	1d7b      	adds	r3, r7, #5
 8007ec6:	781a      	ldrb	r2, [r3, #0]
 8007ec8:	4603      	mov	r3, r0
 8007eca:	481e      	ldr	r0, [pc, #120]	; (8007f44 <rpcSendFrame+0x15c>)
 8007ecc:	f000 f85e 	bl	8007f8c <printRpcMsg>

	// wait for SRSP if necessary
	if ((cmd0 & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ) {
 8007ed0:	1dfb      	adds	r3, r7, #7
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007ed8:	2b20      	cmp	r3, #32
 8007eda:	d124      	bne.n	8007f26 <rpcSendFrame+0x13e>
		// feedback
		dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: waiting for SRSP [%02x]\n", expectedSrspCmdId);
 8007edc:	4b17      	ldr	r3, [pc, #92]	; (8007f3c <rpcSendFrame+0x154>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4819      	ldr	r0, [pc, #100]	; (8007f48 <rpcSendFrame+0x160>)
 8007ee4:	f7f8 fbec 	bl	80006c0 <log_print>

		// Wait for the SRSP
		if (xSemaphoreTake(srspSem, SRSP_TIMEOUT_MS) == pdFALSE) {
 8007ee8:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <rpcSendFrame+0x158>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f003 fbf1 	bl	800b6d8 <xQueueSemaphoreTake>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10b      	bne.n	8007f14 <rpcSendFrame+0x12c>
			dbg_print(PRINT_LEVEL_WARNING, "rpcSendFrame: SRSP Error - CMD0: 0x%02X CMD1: 0x%02X\n", cmd0, cmd1);
 8007efc:	1dfb      	adds	r3, r7, #7
 8007efe:	7819      	ldrb	r1, [r3, #0]
 8007f00:	1dbb      	adds	r3, r7, #6
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	461a      	mov	r2, r3
 8007f06:	4811      	ldr	r0, [pc, #68]	; (8007f4c <rpcSendFrame+0x164>)
 8007f08:	f7f8 fbda 	bl	80006c0 <log_print>
			status = MT_RPC_ERR_SUBSYSTEM;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f12:	e005      	b.n	8007f20 <rpcSendFrame+0x138>
		}
		else {
			dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Receive SRSP\n");
 8007f14:	480e      	ldr	r0, [pc, #56]	; (8007f50 <rpcSendFrame+0x168>)
 8007f16:	f7f8 fbd3 	bl	80006c0 <log_print>
			status = MT_RPC_SUCCESS;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		}

		//set expected SRSP to invalid
		expectedSrspCmdId = 0xFF;
 8007f20:	4b06      	ldr	r3, [pc, #24]	; (8007f3c <rpcSendFrame+0x154>)
 8007f22:	22ff      	movs	r2, #255	; 0xff
 8007f24:	701a      	strb	r2, [r3, #0]
	}

	// return found status
	return status;
 8007f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f2a:	b2db      	uxtb	r3, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd90      	pop	{r4, r7, pc}
 8007f36:	bf00      	nop
 8007f38:	0800f6e4 	.word	0x0800f6e4
 8007f3c:	20000ec8 	.word	0x20000ec8
 8007f40:	20000ec4 	.word	0x20000ec4
 8007f44:	0800f700 	.word	0x0800f700
 8007f48:	0800f70c 	.word	0x0800f70c
 8007f4c:	0800f734 	.word	0x0800f734
 8007f50:	0800f76c 	.word	0x0800f76c

08007f54 <calcFcs>:
 * @param   msg  - pointer to the RPC general format frame message
 * @param   size - RPC general format frame size
 *
 * @return  FCS value
 */
static uint8_t calcFcs(uint8_t *msg, uint8_t size) {
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]

	// calculate FCS by XORing all bytes
	while (size--) {
 8007f64:	e006      	b.n	8007f74 <calcFcs+0x20>
		result ^= *msg++;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	781a      	ldrb	r2, [r3, #0]
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	4053      	eors	r3, r2
 8007f72:	73fb      	strb	r3, [r7, #15]
	while (size--) {
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	1e5a      	subs	r2, r3, #1
 8007f78:	70fa      	strb	r2, [r7, #3]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1f3      	bne.n	8007f66 <calcFcs+0x12>
	}

	return result;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <printRpcMsg>:
 * @param   len - length byte
 * @param   msg  - pointer to the RPC message starting from Cmd0 byte
 *
 * @return  FCS value
 */
static void printRpcMsg(char *preMsg, uint8_t sof, uint8_t len, uint8_t *msg) {
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	607b      	str	r3, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	72fb      	strb	r3, [r7, #11]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	72bb      	strb	r3, [r7, #10]

	// print headers
	dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, "%s %d Bytes: SOF:%02X, Len:%02X, CMD0:%02X, CMD1:%02X, Payload:", preMsg, len + 5, sof, len, msg[0], msg[1]);

	// print frame payload
	for (i = 2; i < len + 2; i++) {
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	75fb      	strb	r3, [r7, #23]
 8007fa2:	e002      	b.n	8007faa <printRpcMsg+0x1e>
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	75fb      	strb	r3, [r7, #23]
 8007faa:	7abb      	ldrb	r3, [r7, #10]
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	daf7      	bge.n	8007fa4 <printRpcMsg+0x18>
	}

	// print FCS
	dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, " FCS:%02X\n", msg[i]);

}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <llq_open>:
 *
 * @param    llq_t *hndl - handle to queue to be created
 *
 * @return   none
 */
void llq_open(llq_t *hndl) {
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
	hndl->queue = xQueueCreate(Q_SIZE, sizeof(queue_data_t));
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007fd0:	2008      	movs	r0, #8
 8007fd2:	f003 f8a7 	bl	800b124 <xQueueGenericCreate>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	601a      	str	r2, [r3, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <llq_timedreceive>:
 * @Param	int maxLength - Max length of message to read
 * @Param	struct timespec * timeout - Timeout value
 *
 * @return   length of message read from queue
 */
int llq_timedreceive(llq_t *hndl, char *buffer, int maxLength, int timeout) {
 8007fe4:	b590      	push	{r4, r7, lr}
 8007fe6:	b0c9      	sub	sp, #292	; 0x124
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	f107 040c 	add.w	r4, r7, #12
 8007fee:	6020      	str	r0, [r4, #0]
 8007ff0:	f107 0008 	add.w	r0, r7, #8
 8007ff4:	6001      	str	r1, [r0, #0]
 8007ff6:	1d39      	adds	r1, r7, #4
 8007ff8:	600a      	str	r2, [r1, #0]
 8007ffa:	463a      	mov	r2, r7
 8007ffc:	6013      	str	r3, [r2, #0]
	int sepmRnt = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	queue_data_t q_buf = { 0 };
 8008004:	f107 0314 	add.w	r3, r7, #20
 8008008:	4618      	mov	r0, r3
 800800a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800800e:	461a      	mov	r2, r3
 8008010:	2100      	movs	r1, #0
 8008012:	f005 fad9 	bl	800d5c8 <memset>

	// wait for a message or timeout
	if (xQueueReceive(hndl->queue, &q_buf, timeout) != pdTRUE) {
 8008016:	f107 030c 	add.w	r3, r7, #12
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	463b      	mov	r3, r7
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	f107 0314 	add.w	r3, r7, #20
 8008026:	4619      	mov	r1, r3
 8008028:	f003 fa76 	bl	800b518 <xQueueReceive>
 800802c:	4603      	mov	r3, r0
 800802e:	2b01      	cmp	r3, #1
 8008030:	d002      	beq.n	8008038 <llq_timedreceive+0x54>
		return -1;
 8008032:	f04f 33ff 	mov.w	r3, #4294967295
 8008036:	e016      	b.n	8008066 <llq_timedreceive+0x82>
	}

	// we read with success?
	int rLength = MIN(q_buf.len, maxLength);
 8008038:	f107 0314 	add.w	r3, r7, #20
 800803c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8008040:	461a      	mov	r2, r3
 8008042:	1d3b      	adds	r3, r7, #4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4293      	cmp	r3, r2
 8008048:	bfa8      	it	ge
 800804a:	4613      	movge	r3, r2
 800804c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	memcpy(buffer, q_buf.data, rLength);
 8008050:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008054:	f107 0114 	add.w	r1, r7, #20
 8008058:	f107 0308 	add.w	r3, r7, #8
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	f005 faa5 	bl	800d5ac <memcpy>

	// return
	return rLength;
 8008062:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8008066:	4618      	mov	r0, r3
 8008068:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800806c:	46bd      	mov	sp, r7
 800806e:	bd90      	pop	{r4, r7, pc}

08008070 <llq_add>:
 * @Param	int prio - 1 message has priority and should be added to
 * 			head of queue, 0 message assed to tail of queue
 *
 * @return   length of message read from queue
 */
int llq_add(llq_t *hndl, char *buffer, int len, int prio) {
 8008070:	b590      	push	{r4, r7, lr}
 8008072:	b0c7      	sub	sp, #284	; 0x11c
 8008074:	af00      	add	r7, sp, #0
 8008076:	f107 040c 	add.w	r4, r7, #12
 800807a:	6020      	str	r0, [r4, #0]
 800807c:	f107 0008 	add.w	r0, r7, #8
 8008080:	6001      	str	r1, [r0, #0]
 8008082:	1d39      	adds	r1, r7, #4
 8008084:	600a      	str	r2, [r1, #0]
 8008086:	463a      	mov	r2, r7
 8008088:	6013      	str	r3, [r2, #0]
	int ret = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	queue_data_t q_buf = { 0 };
 8008090:	f107 0310 	add.w	r3, r7, #16
 8008094:	4618      	mov	r0, r3
 8008096:	f44f 7381 	mov.w	r3, #258	; 0x102
 800809a:	461a      	mov	r2, r3
 800809c:	2100      	movs	r1, #0
 800809e:	f005 fa93 	bl	800d5c8 <memset>

	// length
	q_buf.len = MIN(Q_FRAME_SIZE, len);
 80080a2:	1d3b      	adds	r3, r7, #4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080aa:	bfa8      	it	ge
 80080ac:	f44f 7380 	movge.w	r3, #256	; 0x100
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	f107 0310 	add.w	r3, r7, #16
 80080b6:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	// data
	memcpy(q_buf.data, buffer, q_buf.len);
 80080ba:	f107 0310 	add.w	r3, r7, #16
 80080be:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80080c2:	461a      	mov	r2, r3
 80080c4:	f107 0308 	add.w	r3, r7, #8
 80080c8:	f107 0010 	add.w	r0, r7, #16
 80080cc:	6819      	ldr	r1, [r3, #0]
 80080ce:	f005 fa6d 	bl	800d5ac <memcpy>

	if (prio == 1) {
 80080d2:	463b      	mov	r3, r7
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d10a      	bne.n	80080f0 <llq_add+0x80>
		xQueueSendToFront(hndl->queue, &q_buf, 10);
 80080da:	f107 030c 	add.w	r3, r7, #12
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	f107 0110 	add.w	r1, r7, #16
 80080e6:	2301      	movs	r3, #1
 80080e8:	220a      	movs	r2, #10
 80080ea:	f003 f87f 	bl	800b1ec <xQueueGenericSend>
 80080ee:	e009      	b.n	8008104 <llq_add+0x94>
	}
	else {
		xQueueSendToBack(hndl->queue, &q_buf, 10);
 80080f0:	f107 030c 	add.w	r3, r7, #12
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6818      	ldr	r0, [r3, #0]
 80080f8:	f107 0110 	add.w	r1, r7, #16
 80080fc:	2300      	movs	r3, #0
 80080fe:	220a      	movs	r2, #10
 8008100:	f003 f874 	bl	800b1ec <xQueueGenericSend>
	}

	return ret;
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 8008108:	4618      	mov	r0, r3
 800810a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800810e:	46bd      	mov	sp, r7
 8008110:	bd90      	pop	{r4, r7, pc}

08008112 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800811c:	2003      	movs	r0, #3
 800811e:	f000 f8dc 	bl	80082da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008122:	2000      	movs	r0, #0
 8008124:	f7f8 fde2 	bl	8000cec <HAL_InitTick>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	71fb      	strb	r3, [r7, #7]
 8008132:	e001      	b.n	8008138 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008134:	f7f8 fdb2 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008138:	79fb      	ldrb	r3, [r7, #7]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008144:	b480      	push	{r7}
 8008146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <HAL_IncTick+0x1c>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <HAL_IncTick+0x20>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4413      	add	r3, r2
 8008152:	4a03      	ldr	r2, [pc, #12]	; (8008160 <HAL_IncTick+0x1c>)
 8008154:	6013      	str	r3, [r2, #0]
}
 8008156:	bf00      	nop
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	200087a4 	.word	0x200087a4
 8008164:	20000008 	.word	0x20000008

08008168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
  return uwTick;
 800816c:	4b03      	ldr	r3, [pc, #12]	; (800817c <HAL_GetTick+0x14>)
 800816e:	681b      	ldr	r3, [r3, #0]
}
 8008170:	4618      	mov	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	200087a4 	.word	0x200087a4

08008180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008190:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <__NVIC_SetPriorityGrouping+0x44>)
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800819c:	4013      	ands	r3, r2
 800819e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80081a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80081ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80081b2:	4a04      	ldr	r2, [pc, #16]	; (80081c4 <__NVIC_SetPriorityGrouping+0x44>)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	60d3      	str	r3, [r2, #12]
}
 80081b8:	bf00      	nop
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	e000ed00 	.word	0xe000ed00

080081c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081cc:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <__NVIC_GetPriorityGrouping+0x18>)
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	0a1b      	lsrs	r3, r3, #8
 80081d2:	f003 0307 	and.w	r3, r3, #7
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	e000ed00 	.word	0xe000ed00

080081e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	db0b      	blt.n	800820e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	f003 021f 	and.w	r2, r3, #31
 80081fc:	4907      	ldr	r1, [pc, #28]	; (800821c <__NVIC_EnableIRQ+0x38>)
 80081fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	2001      	movs	r0, #1
 8008206:	fa00 f202 	lsl.w	r2, r0, r2
 800820a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800820e:	bf00      	nop
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	e000e100 	.word	0xe000e100

08008220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	6039      	str	r1, [r7, #0]
 800822a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800822c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008230:	2b00      	cmp	r3, #0
 8008232:	db0a      	blt.n	800824a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	b2da      	uxtb	r2, r3
 8008238:	490c      	ldr	r1, [pc, #48]	; (800826c <__NVIC_SetPriority+0x4c>)
 800823a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800823e:	0112      	lsls	r2, r2, #4
 8008240:	b2d2      	uxtb	r2, r2
 8008242:	440b      	add	r3, r1
 8008244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008248:	e00a      	b.n	8008260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	b2da      	uxtb	r2, r3
 800824e:	4908      	ldr	r1, [pc, #32]	; (8008270 <__NVIC_SetPriority+0x50>)
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	3b04      	subs	r3, #4
 8008258:	0112      	lsls	r2, r2, #4
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	440b      	add	r3, r1
 800825e:	761a      	strb	r2, [r3, #24]
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	e000e100 	.word	0xe000e100
 8008270:	e000ed00 	.word	0xe000ed00

08008274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008274:	b480      	push	{r7}
 8008276:	b089      	sub	sp, #36	; 0x24
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f1c3 0307 	rsb	r3, r3, #7
 800828e:	2b04      	cmp	r3, #4
 8008290:	bf28      	it	cs
 8008292:	2304      	movcs	r3, #4
 8008294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	3304      	adds	r3, #4
 800829a:	2b06      	cmp	r3, #6
 800829c:	d902      	bls.n	80082a4 <NVIC_EncodePriority+0x30>
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	3b03      	subs	r3, #3
 80082a2:	e000      	b.n	80082a6 <NVIC_EncodePriority+0x32>
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	fa02 f303 	lsl.w	r3, r2, r3
 80082b2:	43da      	mvns	r2, r3
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	401a      	ands	r2, r3
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80082bc:	f04f 31ff 	mov.w	r1, #4294967295
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	fa01 f303 	lsl.w	r3, r1, r3
 80082c6:	43d9      	mvns	r1, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082cc:	4313      	orrs	r3, r2
         );
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3724      	adds	r7, #36	; 0x24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff ff4c 	bl	8008180 <__NVIC_SetPriorityGrouping>
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008302:	f7ff ff61 	bl	80081c8 <__NVIC_GetPriorityGrouping>
 8008306:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	6978      	ldr	r0, [r7, #20]
 800830e:	f7ff ffb1 	bl	8008274 <NVIC_EncodePriority>
 8008312:	4602      	mov	r2, r0
 8008314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008318:	4611      	mov	r1, r2
 800831a:	4618      	mov	r0, r3
 800831c:	f7ff ff80 	bl	8008220 <__NVIC_SetPriority>
}
 8008320:	bf00      	nop
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff ff54 	bl	80081e4 <__NVIC_EnableIRQ>
}
 800833c:	bf00      	nop
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008352:	e166      	b.n	8008622 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	2101      	movs	r1, #1
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	fa01 f303 	lsl.w	r3, r1, r3
 8008360:	4013      	ands	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 8158 	beq.w	800861c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d00b      	beq.n	800838c <HAL_GPIO_Init+0x48>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b02      	cmp	r3, #2
 800837a:	d007      	beq.n	800838c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008380:	2b11      	cmp	r3, #17
 8008382:	d003      	beq.n	800838c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2b12      	cmp	r3, #18
 800838a:	d130      	bne.n	80083ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	2203      	movs	r2, #3
 8008398:	fa02 f303 	lsl.w	r3, r2, r3
 800839c:	43db      	mvns	r3, r3
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	4013      	ands	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	fa02 f303 	lsl.w	r3, r2, r3
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80083c2:	2201      	movs	r2, #1
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ca:	43db      	mvns	r3, r3
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4013      	ands	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	091b      	lsrs	r3, r3, #4
 80083d8:	f003 0201 	and.w	r2, r3, #1
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	fa02 f303 	lsl.w	r3, r2, r3
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	2203      	movs	r2, #3
 80083fa:	fa02 f303 	lsl.w	r3, r2, r3
 80083fe:	43db      	mvns	r3, r3
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	4013      	ands	r3, r2
 8008404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	689a      	ldr	r2, [r3, #8]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	4313      	orrs	r3, r2
 8008416:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d003      	beq.n	800842e <HAL_GPIO_Init+0xea>
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2b12      	cmp	r3, #18
 800842c:	d123      	bne.n	8008476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	08da      	lsrs	r2, r3, #3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	3208      	adds	r2, #8
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	220f      	movs	r2, #15
 8008446:	fa02 f303 	lsl.w	r3, r2, r3
 800844a:	43db      	mvns	r3, r3
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	4013      	ands	r3, r2
 8008450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	691a      	ldr	r2, [r3, #16]
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f003 0307 	and.w	r3, r3, #7
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	fa02 f303 	lsl.w	r3, r2, r3
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4313      	orrs	r3, r2
 8008466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	08da      	lsrs	r2, r3, #3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3208      	adds	r2, #8
 8008470:	6939      	ldr	r1, [r7, #16]
 8008472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	2203      	movs	r2, #3
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	43db      	mvns	r3, r3
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4013      	ands	r3, r2
 800848c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f003 0203 	and.w	r2, r3, #3
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	fa02 f303 	lsl.w	r3, r2, r3
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 80b2 	beq.w	800861c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084b8:	4b61      	ldr	r3, [pc, #388]	; (8008640 <HAL_GPIO_Init+0x2fc>)
 80084ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084bc:	4a60      	ldr	r2, [pc, #384]	; (8008640 <HAL_GPIO_Init+0x2fc>)
 80084be:	f043 0301 	orr.w	r3, r3, #1
 80084c2:	6613      	str	r3, [r2, #96]	; 0x60
 80084c4:	4b5e      	ldr	r3, [pc, #376]	; (8008640 <HAL_GPIO_Init+0x2fc>)
 80084c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	60bb      	str	r3, [r7, #8]
 80084ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80084d0:	4a5c      	ldr	r2, [pc, #368]	; (8008644 <HAL_GPIO_Init+0x300>)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	089b      	lsrs	r3, r3, #2
 80084d6:	3302      	adds	r3, #2
 80084d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	220f      	movs	r2, #15
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	43db      	mvns	r3, r3
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4013      	ands	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80084fa:	d02b      	beq.n	8008554 <HAL_GPIO_Init+0x210>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a52      	ldr	r2, [pc, #328]	; (8008648 <HAL_GPIO_Init+0x304>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d025      	beq.n	8008550 <HAL_GPIO_Init+0x20c>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a51      	ldr	r2, [pc, #324]	; (800864c <HAL_GPIO_Init+0x308>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d01f      	beq.n	800854c <HAL_GPIO_Init+0x208>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a50      	ldr	r2, [pc, #320]	; (8008650 <HAL_GPIO_Init+0x30c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d019      	beq.n	8008548 <HAL_GPIO_Init+0x204>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a4f      	ldr	r2, [pc, #316]	; (8008654 <HAL_GPIO_Init+0x310>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d013      	beq.n	8008544 <HAL_GPIO_Init+0x200>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a4e      	ldr	r2, [pc, #312]	; (8008658 <HAL_GPIO_Init+0x314>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00d      	beq.n	8008540 <HAL_GPIO_Init+0x1fc>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a4d      	ldr	r2, [pc, #308]	; (800865c <HAL_GPIO_Init+0x318>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d007      	beq.n	800853c <HAL_GPIO_Init+0x1f8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a4c      	ldr	r2, [pc, #304]	; (8008660 <HAL_GPIO_Init+0x31c>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d101      	bne.n	8008538 <HAL_GPIO_Init+0x1f4>
 8008534:	2307      	movs	r3, #7
 8008536:	e00e      	b.n	8008556 <HAL_GPIO_Init+0x212>
 8008538:	2308      	movs	r3, #8
 800853a:	e00c      	b.n	8008556 <HAL_GPIO_Init+0x212>
 800853c:	2306      	movs	r3, #6
 800853e:	e00a      	b.n	8008556 <HAL_GPIO_Init+0x212>
 8008540:	2305      	movs	r3, #5
 8008542:	e008      	b.n	8008556 <HAL_GPIO_Init+0x212>
 8008544:	2304      	movs	r3, #4
 8008546:	e006      	b.n	8008556 <HAL_GPIO_Init+0x212>
 8008548:	2303      	movs	r3, #3
 800854a:	e004      	b.n	8008556 <HAL_GPIO_Init+0x212>
 800854c:	2302      	movs	r3, #2
 800854e:	e002      	b.n	8008556 <HAL_GPIO_Init+0x212>
 8008550:	2301      	movs	r3, #1
 8008552:	e000      	b.n	8008556 <HAL_GPIO_Init+0x212>
 8008554:	2300      	movs	r3, #0
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	f002 0203 	and.w	r2, r2, #3
 800855c:	0092      	lsls	r2, r2, #2
 800855e:	4093      	lsls	r3, r2
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4313      	orrs	r3, r2
 8008564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008566:	4937      	ldr	r1, [pc, #220]	; (8008644 <HAL_GPIO_Init+0x300>)
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	089b      	lsrs	r3, r3, #2
 800856c:	3302      	adds	r3, #2
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008574:	4b3b      	ldr	r3, [pc, #236]	; (8008664 <HAL_GPIO_Init+0x320>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	43db      	mvns	r3, r3
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	4013      	ands	r3, r2
 8008582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4313      	orrs	r3, r2
 8008596:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008598:	4a32      	ldr	r2, [pc, #200]	; (8008664 <HAL_GPIO_Init+0x320>)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800859e:	4b31      	ldr	r3, [pc, #196]	; (8008664 <HAL_GPIO_Init+0x320>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	43db      	mvns	r3, r3
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	4013      	ands	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80085c2:	4a28      	ldr	r2, [pc, #160]	; (8008664 <HAL_GPIO_Init+0x320>)
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085c8:	4b26      	ldr	r3, [pc, #152]	; (8008664 <HAL_GPIO_Init+0x320>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	43db      	mvns	r3, r3
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4013      	ands	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80085ec:	4a1d      	ldr	r2, [pc, #116]	; (8008664 <HAL_GPIO_Init+0x320>)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80085f2:	4b1c      	ldr	r3, [pc, #112]	; (8008664 <HAL_GPIO_Init+0x320>)
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	43db      	mvns	r3, r3
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	4013      	ands	r3, r2
 8008600:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008616:	4a13      	ldr	r2, [pc, #76]	; (8008664 <HAL_GPIO_Init+0x320>)
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	3301      	adds	r3, #1
 8008620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	f47f ae91 	bne.w	8008354 <HAL_GPIO_Init+0x10>
  }
}
 8008632:	bf00      	nop
 8008634:	bf00      	nop
 8008636:	371c      	adds	r7, #28
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	40021000 	.word	0x40021000
 8008644:	40010000 	.word	0x40010000
 8008648:	48000400 	.word	0x48000400
 800864c:	48000800 	.word	0x48000800
 8008650:	48000c00 	.word	0x48000c00
 8008654:	48001000 	.word	0x48001000
 8008658:	48001400 	.word	0x48001400
 800865c:	48001800 	.word	0x48001800
 8008660:	48001c00 	.word	0x48001c00
 8008664:	40010400 	.word	0x40010400

08008668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <HAL_PWREx_GetVoltageRange+0x18>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008674:	4618      	mov	r0, r3
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	40007000 	.word	0x40007000

08008684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008692:	d130      	bne.n	80086f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008694:	4b23      	ldr	r3, [pc, #140]	; (8008724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800869c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086a0:	d038      	beq.n	8008714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80086a2:	4b20      	ldr	r3, [pc, #128]	; (8008724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80086aa:	4a1e      	ldr	r2, [pc, #120]	; (8008724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80086b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80086b2:	4b1d      	ldr	r3, [pc, #116]	; (8008728 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2232      	movs	r2, #50	; 0x32
 80086b8:	fb02 f303 	mul.w	r3, r2, r3
 80086bc:	4a1b      	ldr	r2, [pc, #108]	; (800872c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80086be:	fba2 2303 	umull	r2, r3, r2, r3
 80086c2:	0c9b      	lsrs	r3, r3, #18
 80086c4:	3301      	adds	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086c8:	e002      	b.n	80086d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086d0:	4b14      	ldr	r3, [pc, #80]	; (8008724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086dc:	d102      	bne.n	80086e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1f2      	bne.n	80086ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80086e4:	4b0f      	ldr	r3, [pc, #60]	; (8008724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f0:	d110      	bne.n	8008714 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e00f      	b.n	8008716 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80086f6:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008702:	d007      	beq.n	8008714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008704:	4b07      	ldr	r3, [pc, #28]	; (8008724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800870c:	4a05      	ldr	r2, [pc, #20]	; (8008724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800870e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008712:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	40007000 	.word	0x40007000
 8008728:	20000000 	.word	0x20000000
 800872c:	431bde83 	.word	0x431bde83

08008730 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008734:	4b05      	ldr	r3, [pc, #20]	; (800874c <HAL_PWREx_EnableVddIO2+0x1c>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	4a04      	ldr	r2, [pc, #16]	; (800874c <HAL_PWREx_EnableVddIO2+0x1c>)
 800873a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800873e:	6053      	str	r3, [r2, #4]
}
 8008740:	bf00      	nop
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	40007000 	.word	0x40007000

08008750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b088      	sub	sp, #32
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d102      	bne.n	8008764 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	f000 bc16 	b.w	8008f90 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008764:	4ba0      	ldr	r3, [pc, #640]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 030c 	and.w	r3, r3, #12
 800876c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800876e:	4b9e      	ldr	r3, [pc, #632]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0310 	and.w	r3, r3, #16
 8008780:	2b00      	cmp	r3, #0
 8008782:	f000 80e4 	beq.w	800894e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d007      	beq.n	800879c <HAL_RCC_OscConfig+0x4c>
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	2b0c      	cmp	r3, #12
 8008790:	f040 808b 	bne.w	80088aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2b01      	cmp	r3, #1
 8008798:	f040 8087 	bne.w	80088aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800879c:	4b92      	ldr	r3, [pc, #584]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <HAL_RCC_OscConfig+0x64>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e3ed      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a1a      	ldr	r2, [r3, #32]
 80087b8:	4b8b      	ldr	r3, [pc, #556]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0308 	and.w	r3, r3, #8
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <HAL_RCC_OscConfig+0x7e>
 80087c4:	4b88      	ldr	r3, [pc, #544]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087cc:	e005      	b.n	80087da <HAL_RCC_OscConfig+0x8a>
 80087ce:	4b86      	ldr	r3, [pc, #536]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80087d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087d4:	091b      	lsrs	r3, r3, #4
 80087d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087da:	4293      	cmp	r3, r2
 80087dc:	d223      	bcs.n	8008826 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fdb2 	bl	800934c <RCC_SetFlashLatencyFromMSIRange>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e3ce      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087f2:	4b7d      	ldr	r3, [pc, #500]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a7c      	ldr	r2, [pc, #496]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80087f8:	f043 0308 	orr.w	r3, r3, #8
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	4b7a      	ldr	r3, [pc, #488]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	4977      	ldr	r1, [pc, #476]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 800880c:	4313      	orrs	r3, r2
 800880e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008810:	4b75      	ldr	r3, [pc, #468]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	4972      	ldr	r1, [pc, #456]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008820:	4313      	orrs	r3, r2
 8008822:	604b      	str	r3, [r1, #4]
 8008824:	e025      	b.n	8008872 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008826:	4b70      	ldr	r3, [pc, #448]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a6f      	ldr	r2, [pc, #444]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 800882c:	f043 0308 	orr.w	r3, r3, #8
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	4b6d      	ldr	r3, [pc, #436]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	496a      	ldr	r1, [pc, #424]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008840:	4313      	orrs	r3, r2
 8008842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008844:	4b68      	ldr	r3, [pc, #416]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	4965      	ldr	r1, [pc, #404]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008854:	4313      	orrs	r3, r2
 8008856:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d109      	bne.n	8008872 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fd72 	bl	800934c <RCC_SetFlashLatencyFromMSIRange>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e38e      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008872:	f000 fc75 	bl	8009160 <HAL_RCC_GetSysClockFreq>
 8008876:	4602      	mov	r2, r0
 8008878:	4b5b      	ldr	r3, [pc, #364]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	091b      	lsrs	r3, r3, #4
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	495a      	ldr	r1, [pc, #360]	; (80089ec <HAL_RCC_OscConfig+0x29c>)
 8008884:	5ccb      	ldrb	r3, [r1, r3]
 8008886:	f003 031f 	and.w	r3, r3, #31
 800888a:	fa22 f303 	lsr.w	r3, r2, r3
 800888e:	4a58      	ldr	r2, [pc, #352]	; (80089f0 <HAL_RCC_OscConfig+0x2a0>)
 8008890:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008892:	4b58      	ldr	r3, [pc, #352]	; (80089f4 <HAL_RCC_OscConfig+0x2a4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f7f8 fa28 	bl	8000cec <HAL_InitTick>
 800889c:	4603      	mov	r3, r0
 800889e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d052      	beq.n	800894c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	e372      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d032      	beq.n	8008918 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80088b2:	4b4d      	ldr	r3, [pc, #308]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a4c      	ldr	r2, [pc, #304]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80088be:	f7ff fc53 	bl	8008168 <HAL_GetTick>
 80088c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80088c4:	e008      	b.n	80088d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80088c6:	f7ff fc4f 	bl	8008168 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d901      	bls.n	80088d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e35b      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80088d8:	4b43      	ldr	r3, [pc, #268]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0302 	and.w	r3, r3, #2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d0f0      	beq.n	80088c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80088e4:	4b40      	ldr	r3, [pc, #256]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a3f      	ldr	r2, [pc, #252]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80088ea:	f043 0308 	orr.w	r3, r3, #8
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	4b3d      	ldr	r3, [pc, #244]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	493a      	ldr	r1, [pc, #232]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008902:	4b39      	ldr	r3, [pc, #228]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	021b      	lsls	r3, r3, #8
 8008910:	4935      	ldr	r1, [pc, #212]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008912:	4313      	orrs	r3, r2
 8008914:	604b      	str	r3, [r1, #4]
 8008916:	e01a      	b.n	800894e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008918:	4b33      	ldr	r3, [pc, #204]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a32      	ldr	r2, [pc, #200]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 800891e:	f023 0301 	bic.w	r3, r3, #1
 8008922:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008924:	f7ff fc20 	bl	8008168 <HAL_GetTick>
 8008928:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800892c:	f7ff fc1c 	bl	8008168 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e328      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800893e:	4b2a      	ldr	r3, [pc, #168]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f0      	bne.n	800892c <HAL_RCC_OscConfig+0x1dc>
 800894a:	e000      	b.n	800894e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800894c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	2b00      	cmp	r3, #0
 8008958:	d073      	beq.n	8008a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2b08      	cmp	r3, #8
 800895e:	d005      	beq.n	800896c <HAL_RCC_OscConfig+0x21c>
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	2b0c      	cmp	r3, #12
 8008964:	d10e      	bne.n	8008984 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b03      	cmp	r3, #3
 800896a:	d10b      	bne.n	8008984 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800896c:	4b1e      	ldr	r3, [pc, #120]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d063      	beq.n	8008a40 <HAL_RCC_OscConfig+0x2f0>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d15f      	bne.n	8008a40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e305      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898c:	d106      	bne.n	800899c <HAL_RCC_OscConfig+0x24c>
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a15      	ldr	r2, [pc, #84]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 8008994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	e01d      	b.n	80089d8 <HAL_RCC_OscConfig+0x288>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089a4:	d10c      	bne.n	80089c0 <HAL_RCC_OscConfig+0x270>
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a0f      	ldr	r2, [pc, #60]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80089ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a0c      	ldr	r2, [pc, #48]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80089b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	e00b      	b.n	80089d8 <HAL_RCC_OscConfig+0x288>
 80089c0:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80089c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a05      	ldr	r2, [pc, #20]	; (80089e8 <HAL_RCC_OscConfig+0x298>)
 80089d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01b      	beq.n	8008a18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e0:	f7ff fbc2 	bl	8008168 <HAL_GetTick>
 80089e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089e6:	e010      	b.n	8008a0a <HAL_RCC_OscConfig+0x2ba>
 80089e8:	40021000 	.word	0x40021000
 80089ec:	0800f7b8 	.word	0x0800f7b8
 80089f0:	20000000 	.word	0x20000000
 80089f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089f8:	f7ff fbb6 	bl	8008168 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b64      	cmp	r3, #100	; 0x64
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e2c2      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a0a:	4baf      	ldr	r3, [pc, #700]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0f0      	beq.n	80089f8 <HAL_RCC_OscConfig+0x2a8>
 8008a16:	e014      	b.n	8008a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a18:	f7ff fba6 	bl	8008168 <HAL_GetTick>
 8008a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a20:	f7ff fba2 	bl	8008168 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b64      	cmp	r3, #100	; 0x64
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e2ae      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008a32:	4ba5      	ldr	r3, [pc, #660]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f0      	bne.n	8008a20 <HAL_RCC_OscConfig+0x2d0>
 8008a3e:	e000      	b.n	8008a42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d060      	beq.n	8008b10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d005      	beq.n	8008a60 <HAL_RCC_OscConfig+0x310>
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2b0c      	cmp	r3, #12
 8008a58:	d119      	bne.n	8008a8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d116      	bne.n	8008a8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a60:	4b99      	ldr	r3, [pc, #612]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <HAL_RCC_OscConfig+0x328>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e28b      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a78:	4b93      	ldr	r3, [pc, #588]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	061b      	lsls	r3, r3, #24
 8008a86:	4990      	ldr	r1, [pc, #576]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a8c:	e040      	b.n	8008b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d023      	beq.n	8008ade <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a96:	4b8c      	ldr	r3, [pc, #560]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a8b      	ldr	r2, [pc, #556]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa2:	f7ff fb61 	bl	8008168 <HAL_GetTick>
 8008aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008aa8:	e008      	b.n	8008abc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aaa:	f7ff fb5d 	bl	8008168 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e269      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008abc:	4b82      	ldr	r3, [pc, #520]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0f0      	beq.n	8008aaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ac8:	4b7f      	ldr	r3, [pc, #508]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	061b      	lsls	r3, r3, #24
 8008ad6:	497c      	ldr	r1, [pc, #496]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	604b      	str	r3, [r1, #4]
 8008adc:	e018      	b.n	8008b10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ade:	4b7a      	ldr	r3, [pc, #488]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a79      	ldr	r2, [pc, #484]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aea:	f7ff fb3d 	bl	8008168 <HAL_GetTick>
 8008aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008af0:	e008      	b.n	8008b04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008af2:	f7ff fb39 	bl	8008168 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d901      	bls.n	8008b04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e245      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b04:	4b70      	ldr	r3, [pc, #448]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1f0      	bne.n	8008af2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0308 	and.w	r3, r3, #8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d03c      	beq.n	8008b96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01c      	beq.n	8008b5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b24:	4b68      	ldr	r3, [pc, #416]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b2a:	4a67      	ldr	r2, [pc, #412]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008b2c:	f043 0301 	orr.w	r3, r3, #1
 8008b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b34:	f7ff fb18 	bl	8008168 <HAL_GetTick>
 8008b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b3a:	e008      	b.n	8008b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b3c:	f7ff fb14 	bl	8008168 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d901      	bls.n	8008b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e220      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b4e:	4b5e      	ldr	r3, [pc, #376]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b54:	f003 0302 	and.w	r3, r3, #2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d0ef      	beq.n	8008b3c <HAL_RCC_OscConfig+0x3ec>
 8008b5c:	e01b      	b.n	8008b96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b5e:	4b5a      	ldr	r3, [pc, #360]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b64:	4a58      	ldr	r2, [pc, #352]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008b66:	f023 0301 	bic.w	r3, r3, #1
 8008b6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b6e:	f7ff fafb 	bl	8008168 <HAL_GetTick>
 8008b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b74:	e008      	b.n	8008b88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b76:	f7ff faf7 	bl	8008168 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d901      	bls.n	8008b88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e203      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b88:	4b4f      	ldr	r3, [pc, #316]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1ef      	bne.n	8008b76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0304 	and.w	r3, r3, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 80a6 	beq.w	8008cf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008ba8:	4b47      	ldr	r3, [pc, #284]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10d      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bb4:	4b44      	ldr	r3, [pc, #272]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb8:	4a43      	ldr	r2, [pc, #268]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8008bc0:	4b41      	ldr	r3, [pc, #260]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bc8:	60bb      	str	r3, [r7, #8]
 8008bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bd0:	4b3e      	ldr	r3, [pc, #248]	; (8008ccc <HAL_RCC_OscConfig+0x57c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d118      	bne.n	8008c0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bdc:	4b3b      	ldr	r3, [pc, #236]	; (8008ccc <HAL_RCC_OscConfig+0x57c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a3a      	ldr	r2, [pc, #232]	; (8008ccc <HAL_RCC_OscConfig+0x57c>)
 8008be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008be8:	f7ff fabe 	bl	8008168 <HAL_GetTick>
 8008bec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bee:	e008      	b.n	8008c02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bf0:	f7ff faba 	bl	8008168 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e1c6      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c02:	4b32      	ldr	r3, [pc, #200]	; (8008ccc <HAL_RCC_OscConfig+0x57c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0f0      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d108      	bne.n	8008c28 <HAL_RCC_OscConfig+0x4d8>
 8008c16:	4b2c      	ldr	r3, [pc, #176]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1c:	4a2a      	ldr	r2, [pc, #168]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008c26:	e024      	b.n	8008c72 <HAL_RCC_OscConfig+0x522>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	2b05      	cmp	r3, #5
 8008c2e:	d110      	bne.n	8008c52 <HAL_RCC_OscConfig+0x502>
 8008c30:	4b25      	ldr	r3, [pc, #148]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c36:	4a24      	ldr	r2, [pc, #144]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c38:	f043 0304 	orr.w	r3, r3, #4
 8008c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008c40:	4b21      	ldr	r3, [pc, #132]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c46:	4a20      	ldr	r2, [pc, #128]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c48:	f043 0301 	orr.w	r3, r3, #1
 8008c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008c50:	e00f      	b.n	8008c72 <HAL_RCC_OscConfig+0x522>
 8008c52:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c58:	4a1b      	ldr	r2, [pc, #108]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c5a:	f023 0301 	bic.w	r3, r3, #1
 8008c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008c62:	4b19      	ldr	r3, [pc, #100]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c68:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c6a:	f023 0304 	bic.w	r3, r3, #4
 8008c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d016      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c7a:	f7ff fa75 	bl	8008168 <HAL_GetTick>
 8008c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c80:	e00a      	b.n	8008c98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c82:	f7ff fa71 	bl	8008168 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d901      	bls.n	8008c98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e17b      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c98:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <HAL_RCC_OscConfig+0x578>)
 8008c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0ed      	beq.n	8008c82 <HAL_RCC_OscConfig+0x532>
 8008ca6:	e01a      	b.n	8008cde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca8:	f7ff fa5e 	bl	8008168 <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008cae:	e00f      	b.n	8008cd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cb0:	f7ff fa5a 	bl	8008168 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d906      	bls.n	8008cd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e164      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
 8008cc6:	bf00      	nop
 8008cc8:	40021000 	.word	0x40021000
 8008ccc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008cd0:	4ba8      	ldr	r3, [pc, #672]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e8      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008cde:	7ffb      	ldrb	r3, [r7, #31]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d105      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ce4:	4ba3      	ldr	r3, [pc, #652]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce8:	4aa2      	ldr	r2, [pc, #648]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0320 	and.w	r3, r3, #32
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d03c      	beq.n	8008d76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d01c      	beq.n	8008d3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d04:	4b9b      	ldr	r3, [pc, #620]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d0a:	4a9a      	ldr	r2, [pc, #616]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008d0c:	f043 0301 	orr.w	r3, r3, #1
 8008d10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d14:	f7ff fa28 	bl	8008168 <HAL_GetTick>
 8008d18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008d1a:	e008      	b.n	8008d2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d1c:	f7ff fa24 	bl	8008168 <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d901      	bls.n	8008d2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e130      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008d2e:	4b91      	ldr	r3, [pc, #580]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0ef      	beq.n	8008d1c <HAL_RCC_OscConfig+0x5cc>
 8008d3c:	e01b      	b.n	8008d76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d3e:	4b8d      	ldr	r3, [pc, #564]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d44:	4a8b      	ldr	r2, [pc, #556]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008d46:	f023 0301 	bic.w	r3, r3, #1
 8008d4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d4e:	f7ff fa0b 	bl	8008168 <HAL_GetTick>
 8008d52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d54:	e008      	b.n	8008d68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d56:	f7ff fa07 	bl	8008168 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d901      	bls.n	8008d68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e113      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d68:	4b82      	ldr	r3, [pc, #520]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1ef      	bne.n	8008d56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 8107 	beq.w	8008f8e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	f040 80cb 	bne.w	8008f20 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008d8a:	4b7a      	ldr	r3, [pc, #488]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f003 0203 	and.w	r2, r3, #3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d12c      	bne.n	8008df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da8:	3b01      	subs	r3, #1
 8008daa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d123      	bne.n	8008df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d11b      	bne.n	8008df8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d113      	bne.n	8008df8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dda:	085b      	lsrs	r3, r3, #1
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d109      	bne.n	8008df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	085b      	lsrs	r3, r3, #1
 8008df0:	3b01      	subs	r3, #1
 8008df2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d06d      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	2b0c      	cmp	r3, #12
 8008dfc:	d068      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008dfe:	4b5d      	ldr	r3, [pc, #372]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d105      	bne.n	8008e16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008e0a:	4b5a      	ldr	r3, [pc, #360]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e0ba      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008e1a:	4b56      	ldr	r3, [pc, #344]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a55      	ldr	r2, [pc, #340]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008e26:	f7ff f99f 	bl	8008168 <HAL_GetTick>
 8008e2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e2c:	e008      	b.n	8008e40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e2e:	f7ff f99b 	bl	8008168 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d901      	bls.n	8008e40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e0a7      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e40:	4b4c      	ldr	r3, [pc, #304]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1f0      	bne.n	8008e2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e4c:	4b49      	ldr	r3, [pc, #292]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	4b49      	ldr	r3, [pc, #292]	; (8008f78 <HAL_RCC_OscConfig+0x828>)
 8008e52:	4013      	ands	r3, r2
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008e5c:	3a01      	subs	r2, #1
 8008e5e:	0112      	lsls	r2, r2, #4
 8008e60:	4311      	orrs	r1, r2
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008e66:	0212      	lsls	r2, r2, #8
 8008e68:	4311      	orrs	r1, r2
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008e6e:	0852      	lsrs	r2, r2, #1
 8008e70:	3a01      	subs	r2, #1
 8008e72:	0552      	lsls	r2, r2, #21
 8008e74:	4311      	orrs	r1, r2
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008e7a:	0852      	lsrs	r2, r2, #1
 8008e7c:	3a01      	subs	r2, #1
 8008e7e:	0652      	lsls	r2, r2, #25
 8008e80:	4311      	orrs	r1, r2
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e86:	06d2      	lsls	r2, r2, #27
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	493a      	ldr	r1, [pc, #232]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008e90:	4b38      	ldr	r3, [pc, #224]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a37      	ldr	r2, [pc, #220]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008e9c:	4b35      	ldr	r3, [pc, #212]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	4a34      	ldr	r2, [pc, #208]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ea6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008ea8:	f7ff f95e 	bl	8008168 <HAL_GetTick>
 8008eac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008eae:	e008      	b.n	8008ec2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eb0:	f7ff f95a 	bl	8008168 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e066      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ec2:	4b2c      	ldr	r3, [pc, #176]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0f0      	beq.n	8008eb0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008ece:	e05e      	b.n	8008f8e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e05d      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ed4:	4b27      	ldr	r3, [pc, #156]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d156      	bne.n	8008f8e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008ee0:	4b24      	ldr	r3, [pc, #144]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a23      	ldr	r2, [pc, #140]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008eea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008eec:	4b21      	ldr	r3, [pc, #132]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	4a20      	ldr	r2, [pc, #128]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ef6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ef8:	f7ff f936 	bl	8008168 <HAL_GetTick>
 8008efc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008efe:	e008      	b.n	8008f12 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f00:	f7ff f932 	bl	8008168 <HAL_GetTick>
 8008f04:	4602      	mov	r2, r0
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d901      	bls.n	8008f12 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e03e      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f12:	4b18      	ldr	r3, [pc, #96]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0f0      	beq.n	8008f00 <HAL_RCC_OscConfig+0x7b0>
 8008f1e:	e036      	b.n	8008f8e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	2b0c      	cmp	r3, #12
 8008f24:	d031      	beq.n	8008f8a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f26:	4b13      	ldr	r3, [pc, #76]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a12      	ldr	r2, [pc, #72]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008f32:	4b10      	ldr	r3, [pc, #64]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d105      	bne.n	8008f4a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	4a0c      	ldr	r2, [pc, #48]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008f44:	f023 0303 	bic.w	r3, r3, #3
 8008f48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008f4a:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	4a09      	ldr	r2, [pc, #36]	; (8008f74 <HAL_RCC_OscConfig+0x824>)
 8008f50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f5a:	f7ff f905 	bl	8008168 <HAL_GetTick>
 8008f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f60:	e00c      	b.n	8008f7c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f62:	f7ff f901 	bl	8008168 <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d905      	bls.n	8008f7c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e00d      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
 8008f74:	40021000 	.word	0x40021000
 8008f78:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f7c:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <HAL_RCC_OscConfig+0x848>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1ec      	bne.n	8008f62 <HAL_RCC_OscConfig+0x812>
 8008f88:	e001      	b.n	8008f8e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e000      	b.n	8008f90 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3720      	adds	r7, #32
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	40021000 	.word	0x40021000

08008f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e0c8      	b.n	8009142 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fb0:	4b66      	ldr	r3, [pc, #408]	; (800914c <HAL_RCC_ClockConfig+0x1b0>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d910      	bls.n	8008fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fbe:	4b63      	ldr	r3, [pc, #396]	; (800914c <HAL_RCC_ClockConfig+0x1b0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f023 0207 	bic.w	r2, r3, #7
 8008fc6:	4961      	ldr	r1, [pc, #388]	; (800914c <HAL_RCC_ClockConfig+0x1b0>)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fce:	4b5f      	ldr	r3, [pc, #380]	; (800914c <HAL_RCC_ClockConfig+0x1b0>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d001      	beq.n	8008fe0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e0b0      	b.n	8009142 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d04c      	beq.n	8009086 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d107      	bne.n	8009004 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ff4:	4b56      	ldr	r3, [pc, #344]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d121      	bne.n	8009044 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e09e      	b.n	8009142 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d107      	bne.n	800901c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800900c:	4b50      	ldr	r3, [pc, #320]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d115      	bne.n	8009044 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e092      	b.n	8009142 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d107      	bne.n	8009034 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009024:	4b4a      	ldr	r3, [pc, #296]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0302 	and.w	r3, r3, #2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d109      	bne.n	8009044 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e086      	b.n	8009142 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009034:	4b46      	ldr	r3, [pc, #280]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e07e      	b.n	8009142 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009044:	4b42      	ldr	r3, [pc, #264]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f023 0203 	bic.w	r2, r3, #3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	493f      	ldr	r1, [pc, #252]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 8009052:	4313      	orrs	r3, r2
 8009054:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009056:	f7ff f887 	bl	8008168 <HAL_GetTick>
 800905a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800905c:	e00a      	b.n	8009074 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800905e:	f7ff f883 	bl	8008168 <HAL_GetTick>
 8009062:	4602      	mov	r2, r0
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	f241 3288 	movw	r2, #5000	; 0x1388
 800906c:	4293      	cmp	r3, r2
 800906e:	d901      	bls.n	8009074 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e066      	b.n	8009142 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009074:	4b36      	ldr	r3, [pc, #216]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f003 020c 	and.w	r2, r3, #12
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	429a      	cmp	r2, r3
 8009084:	d1eb      	bne.n	800905e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d008      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009092:	4b2f      	ldr	r3, [pc, #188]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	492c      	ldr	r1, [pc, #176]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80090a4:	4b29      	ldr	r3, [pc, #164]	; (800914c <HAL_RCC_ClockConfig+0x1b0>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d210      	bcs.n	80090d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090b2:	4b26      	ldr	r3, [pc, #152]	; (800914c <HAL_RCC_ClockConfig+0x1b0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f023 0207 	bic.w	r2, r3, #7
 80090ba:	4924      	ldr	r1, [pc, #144]	; (800914c <HAL_RCC_ClockConfig+0x1b0>)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	4313      	orrs	r3, r2
 80090c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090c2:	4b22      	ldr	r3, [pc, #136]	; (800914c <HAL_RCC_ClockConfig+0x1b0>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d001      	beq.n	80090d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e036      	b.n	8009142 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d008      	beq.n	80090f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090e0:	4b1b      	ldr	r3, [pc, #108]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	4918      	ldr	r1, [pc, #96]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0308 	and.w	r3, r3, #8
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d009      	beq.n	8009112 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090fe:	4b14      	ldr	r3, [pc, #80]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	4910      	ldr	r1, [pc, #64]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 800910e:	4313      	orrs	r3, r2
 8009110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009112:	f000 f825 	bl	8009160 <HAL_RCC_GetSysClockFreq>
 8009116:	4602      	mov	r2, r0
 8009118:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <HAL_RCC_ClockConfig+0x1b4>)
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	091b      	lsrs	r3, r3, #4
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	490c      	ldr	r1, [pc, #48]	; (8009154 <HAL_RCC_ClockConfig+0x1b8>)
 8009124:	5ccb      	ldrb	r3, [r1, r3]
 8009126:	f003 031f 	and.w	r3, r3, #31
 800912a:	fa22 f303 	lsr.w	r3, r2, r3
 800912e:	4a0a      	ldr	r2, [pc, #40]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 8009130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009132:	4b0a      	ldr	r3, [pc, #40]	; (800915c <HAL_RCC_ClockConfig+0x1c0>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f7f7 fdd8 	bl	8000cec <HAL_InitTick>
 800913c:	4603      	mov	r3, r0
 800913e:	72fb      	strb	r3, [r7, #11]

  return status;
 8009140:	7afb      	ldrb	r3, [r7, #11]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	40022000 	.word	0x40022000
 8009150:	40021000 	.word	0x40021000
 8009154:	0800f7b8 	.word	0x0800f7b8
 8009158:	20000000 	.word	0x20000000
 800915c:	20000004 	.word	0x20000004

08009160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009160:	b480      	push	{r7}
 8009162:	b089      	sub	sp, #36	; 0x24
 8009164:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	61fb      	str	r3, [r7, #28]
 800916a:	2300      	movs	r3, #0
 800916c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800916e:	4b3e      	ldr	r3, [pc, #248]	; (8009268 <HAL_RCC_GetSysClockFreq+0x108>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f003 030c 	and.w	r3, r3, #12
 8009176:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009178:	4b3b      	ldr	r3, [pc, #236]	; (8009268 <HAL_RCC_GetSysClockFreq+0x108>)
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f003 0303 	and.w	r3, r3, #3
 8009180:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d005      	beq.n	8009194 <HAL_RCC_GetSysClockFreq+0x34>
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b0c      	cmp	r3, #12
 800918c:	d121      	bne.n	80091d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d11e      	bne.n	80091d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009194:	4b34      	ldr	r3, [pc, #208]	; (8009268 <HAL_RCC_GetSysClockFreq+0x108>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0308 	and.w	r3, r3, #8
 800919c:	2b00      	cmp	r3, #0
 800919e:	d107      	bne.n	80091b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80091a0:	4b31      	ldr	r3, [pc, #196]	; (8009268 <HAL_RCC_GetSysClockFreq+0x108>)
 80091a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091a6:	0a1b      	lsrs	r3, r3, #8
 80091a8:	f003 030f 	and.w	r3, r3, #15
 80091ac:	61fb      	str	r3, [r7, #28]
 80091ae:	e005      	b.n	80091bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80091b0:	4b2d      	ldr	r3, [pc, #180]	; (8009268 <HAL_RCC_GetSysClockFreq+0x108>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	091b      	lsrs	r3, r3, #4
 80091b6:	f003 030f 	and.w	r3, r3, #15
 80091ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80091bc:	4a2b      	ldr	r2, [pc, #172]	; (800926c <HAL_RCC_GetSysClockFreq+0x10c>)
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10d      	bne.n	80091e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80091d0:	e00a      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d102      	bne.n	80091de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80091d8:	4b25      	ldr	r3, [pc, #148]	; (8009270 <HAL_RCC_GetSysClockFreq+0x110>)
 80091da:	61bb      	str	r3, [r7, #24]
 80091dc:	e004      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	2b08      	cmp	r3, #8
 80091e2:	d101      	bne.n	80091e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80091e4:	4b23      	ldr	r3, [pc, #140]	; (8009274 <HAL_RCC_GetSysClockFreq+0x114>)
 80091e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2b0c      	cmp	r3, #12
 80091ec:	d134      	bne.n	8009258 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80091ee:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <HAL_RCC_GetSysClockFreq+0x108>)
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f003 0303 	and.w	r3, r3, #3
 80091f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d003      	beq.n	8009206 <HAL_RCC_GetSysClockFreq+0xa6>
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b03      	cmp	r3, #3
 8009202:	d003      	beq.n	800920c <HAL_RCC_GetSysClockFreq+0xac>
 8009204:	e005      	b.n	8009212 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009206:	4b1a      	ldr	r3, [pc, #104]	; (8009270 <HAL_RCC_GetSysClockFreq+0x110>)
 8009208:	617b      	str	r3, [r7, #20]
      break;
 800920a:	e005      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800920c:	4b19      	ldr	r3, [pc, #100]	; (8009274 <HAL_RCC_GetSysClockFreq+0x114>)
 800920e:	617b      	str	r3, [r7, #20]
      break;
 8009210:	e002      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	617b      	str	r3, [r7, #20]
      break;
 8009216:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009218:	4b13      	ldr	r3, [pc, #76]	; (8009268 <HAL_RCC_GetSysClockFreq+0x108>)
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	091b      	lsrs	r3, r3, #4
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	3301      	adds	r3, #1
 8009224:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009226:	4b10      	ldr	r3, [pc, #64]	; (8009268 <HAL_RCC_GetSysClockFreq+0x108>)
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	0a1b      	lsrs	r3, r3, #8
 800922c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	fb02 f203 	mul.w	r2, r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	fbb2 f3f3 	udiv	r3, r2, r3
 800923c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800923e:	4b0a      	ldr	r3, [pc, #40]	; (8009268 <HAL_RCC_GetSysClockFreq+0x108>)
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	0e5b      	lsrs	r3, r3, #25
 8009244:	f003 0303 	and.w	r3, r3, #3
 8009248:	3301      	adds	r3, #1
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	fbb2 f3f3 	udiv	r3, r2, r3
 8009256:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009258:	69bb      	ldr	r3, [r7, #24]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3724      	adds	r7, #36	; 0x24
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40021000 	.word	0x40021000
 800926c:	0800f7d0 	.word	0x0800f7d0
 8009270:	00f42400 	.word	0x00f42400
 8009274:	007a1200 	.word	0x007a1200

08009278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800927c:	4b03      	ldr	r3, [pc, #12]	; (800928c <HAL_RCC_GetHCLKFreq+0x14>)
 800927e:	681b      	ldr	r3, [r3, #0]
}
 8009280:	4618      	mov	r0, r3
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000000 	.word	0x20000000

08009290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009294:	f7ff fff0 	bl	8009278 <HAL_RCC_GetHCLKFreq>
 8009298:	4602      	mov	r2, r0
 800929a:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	0a1b      	lsrs	r3, r3, #8
 80092a0:	f003 0307 	and.w	r3, r3, #7
 80092a4:	4904      	ldr	r1, [pc, #16]	; (80092b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092a6:	5ccb      	ldrb	r3, [r1, r3]
 80092a8:	f003 031f 	and.w	r3, r3, #31
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	40021000 	.word	0x40021000
 80092b8:	0800f7c8 	.word	0x0800f7c8

080092bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80092c0:	f7ff ffda 	bl	8009278 <HAL_RCC_GetHCLKFreq>
 80092c4:	4602      	mov	r2, r0
 80092c6:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	0adb      	lsrs	r3, r3, #11
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	4904      	ldr	r1, [pc, #16]	; (80092e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092d2:	5ccb      	ldrb	r3, [r1, r3]
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092dc:	4618      	mov	r0, r3
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	40021000 	.word	0x40021000
 80092e4:	0800f7c8 	.word	0x0800f7c8

080092e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	220f      	movs	r2, #15
 80092f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80092f8:	4b12      	ldr	r3, [pc, #72]	; (8009344 <HAL_RCC_GetClockConfig+0x5c>)
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f003 0203 	and.w	r2, r3, #3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009304:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <HAL_RCC_GetClockConfig+0x5c>)
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009310:	4b0c      	ldr	r3, [pc, #48]	; (8009344 <HAL_RCC_GetClockConfig+0x5c>)
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800931c:	4b09      	ldr	r3, [pc, #36]	; (8009344 <HAL_RCC_GetClockConfig+0x5c>)
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	08db      	lsrs	r3, r3, #3
 8009322:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800932a:	4b07      	ldr	r3, [pc, #28]	; (8009348 <HAL_RCC_GetClockConfig+0x60>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0207 	and.w	r2, r3, #7
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	601a      	str	r2, [r3, #0]
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	40021000 	.word	0x40021000
 8009348:	40022000 	.word	0x40022000

0800934c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009354:	2300      	movs	r3, #0
 8009356:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009358:	4b2a      	ldr	r3, [pc, #168]	; (8009404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800935a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d003      	beq.n	800936c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009364:	f7ff f980 	bl	8008668 <HAL_PWREx_GetVoltageRange>
 8009368:	6178      	str	r0, [r7, #20]
 800936a:	e014      	b.n	8009396 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800936c:	4b25      	ldr	r3, [pc, #148]	; (8009404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800936e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009370:	4a24      	ldr	r2, [pc, #144]	; (8009404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009376:	6593      	str	r3, [r2, #88]	; 0x58
 8009378:	4b22      	ldr	r3, [pc, #136]	; (8009404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800937a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800937c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009384:	f7ff f970 	bl	8008668 <HAL_PWREx_GetVoltageRange>
 8009388:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800938a:	4b1e      	ldr	r3, [pc, #120]	; (8009404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800938c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800938e:	4a1d      	ldr	r2, [pc, #116]	; (8009404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009394:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800939c:	d10b      	bne.n	80093b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b80      	cmp	r3, #128	; 0x80
 80093a2:	d919      	bls.n	80093d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2ba0      	cmp	r3, #160	; 0xa0
 80093a8:	d902      	bls.n	80093b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80093aa:	2302      	movs	r3, #2
 80093ac:	613b      	str	r3, [r7, #16]
 80093ae:	e013      	b.n	80093d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80093b0:	2301      	movs	r3, #1
 80093b2:	613b      	str	r3, [r7, #16]
 80093b4:	e010      	b.n	80093d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b80      	cmp	r3, #128	; 0x80
 80093ba:	d902      	bls.n	80093c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80093bc:	2303      	movs	r3, #3
 80093be:	613b      	str	r3, [r7, #16]
 80093c0:	e00a      	b.n	80093d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b80      	cmp	r3, #128	; 0x80
 80093c6:	d102      	bne.n	80093ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80093c8:	2302      	movs	r3, #2
 80093ca:	613b      	str	r3, [r7, #16]
 80093cc:	e004      	b.n	80093d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b70      	cmp	r3, #112	; 0x70
 80093d2:	d101      	bne.n	80093d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80093d4:	2301      	movs	r3, #1
 80093d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80093d8:	4b0b      	ldr	r3, [pc, #44]	; (8009408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f023 0207 	bic.w	r2, r3, #7
 80093e0:	4909      	ldr	r1, [pc, #36]	; (8009408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80093e8:	4b07      	ldr	r3, [pc, #28]	; (8009408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0307 	and.w	r3, r3, #7
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d001      	beq.n	80093fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e000      	b.n	80093fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	40021000 	.word	0x40021000
 8009408:	40022000 	.word	0x40022000

0800940c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009414:	2300      	movs	r3, #0
 8009416:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009418:	2300      	movs	r3, #0
 800941a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009424:	2b00      	cmp	r3, #0
 8009426:	d041      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800942c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009430:	d02a      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009432:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009436:	d824      	bhi.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800943c:	d008      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800943e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009442:	d81e      	bhi.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00a      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800944c:	d010      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800944e:	e018      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009450:	4b86      	ldr	r3, [pc, #536]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	4a85      	ldr	r2, [pc, #532]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800945a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800945c:	e015      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3304      	adds	r3, #4
 8009462:	2100      	movs	r1, #0
 8009464:	4618      	mov	r0, r3
 8009466:	f000 facd 	bl	8009a04 <RCCEx_PLLSAI1_Config>
 800946a:	4603      	mov	r3, r0
 800946c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800946e:	e00c      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3320      	adds	r3, #32
 8009474:	2100      	movs	r1, #0
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fbb6 	bl	8009be8 <RCCEx_PLLSAI2_Config>
 800947c:	4603      	mov	r3, r0
 800947e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009480:	e003      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	74fb      	strb	r3, [r7, #19]
      break;
 8009486:	e000      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800948a:	7cfb      	ldrb	r3, [r7, #19]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10b      	bne.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009490:	4b76      	ldr	r3, [pc, #472]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800949e:	4973      	ldr	r1, [pc, #460]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80094a6:	e001      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a8:	7cfb      	ldrb	r3, [r7, #19]
 80094aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d041      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80094c0:	d02a      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80094c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80094c6:	d824      	bhi.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80094c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094cc:	d008      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80094ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094d2:	d81e      	bhi.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00a      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80094d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094dc:	d010      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80094de:	e018      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80094e0:	4b62      	ldr	r3, [pc, #392]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	4a61      	ldr	r2, [pc, #388]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80094ec:	e015      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3304      	adds	r3, #4
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fa85 	bl	8009a04 <RCCEx_PLLSAI1_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80094fe:	e00c      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3320      	adds	r3, #32
 8009504:	2100      	movs	r1, #0
 8009506:	4618      	mov	r0, r3
 8009508:	f000 fb6e 	bl	8009be8 <RCCEx_PLLSAI2_Config>
 800950c:	4603      	mov	r3, r0
 800950e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009510:	e003      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	74fb      	strb	r3, [r7, #19]
      break;
 8009516:	e000      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800951a:	7cfb      	ldrb	r3, [r7, #19]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10b      	bne.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009520:	4b52      	ldr	r3, [pc, #328]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009526:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952e:	494f      	ldr	r1, [pc, #316]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009530:	4313      	orrs	r3, r2
 8009532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009536:	e001      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009538:	7cfb      	ldrb	r3, [r7, #19]
 800953a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 80a0 	beq.w	800968a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800954a:	2300      	movs	r3, #0
 800954c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800954e:	4b47      	ldr	r3, [pc, #284]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800955a:	2301      	movs	r3, #1
 800955c:	e000      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800955e:	2300      	movs	r3, #0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00d      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009564:	4b41      	ldr	r3, [pc, #260]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009568:	4a40      	ldr	r2, [pc, #256]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800956a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800956e:	6593      	str	r3, [r2, #88]	; 0x58
 8009570:	4b3e      	ldr	r3, [pc, #248]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009578:	60bb      	str	r3, [r7, #8]
 800957a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800957c:	2301      	movs	r3, #1
 800957e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009580:	4b3b      	ldr	r3, [pc, #236]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a3a      	ldr	r2, [pc, #232]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800958a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800958c:	f7fe fdec 	bl	8008168 <HAL_GetTick>
 8009590:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009592:	e009      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009594:	f7fe fde8 	bl	8008168 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d902      	bls.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	74fb      	strb	r3, [r7, #19]
        break;
 80095a6:	e005      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095a8:	4b31      	ldr	r3, [pc, #196]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d0ef      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80095b4:	7cfb      	ldrb	r3, [r7, #19]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d15c      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095ba:	4b2c      	ldr	r3, [pc, #176]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80095bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01f      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d019      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80095d8:	4b24      	ldr	r3, [pc, #144]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80095da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095e4:	4b21      	ldr	r3, [pc, #132]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80095e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ea:	4a20      	ldr	r2, [pc, #128]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80095ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095f4:	4b1d      	ldr	r3, [pc, #116]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80095f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fa:	4a1c      	ldr	r2, [pc, #112]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80095fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009604:	4a19      	ldr	r2, [pc, #100]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d016      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009616:	f7fe fda7 	bl	8008168 <HAL_GetTick>
 800961a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800961c:	e00b      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800961e:	f7fe fda3 	bl	8008168 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	f241 3288 	movw	r2, #5000	; 0x1388
 800962c:	4293      	cmp	r3, r2
 800962e:	d902      	bls.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	74fb      	strb	r3, [r7, #19]
            break;
 8009634:	e006      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009636:	4b0d      	ldr	r3, [pc, #52]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d0ec      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009644:	7cfb      	ldrb	r3, [r7, #19]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10c      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800964a:	4b08      	ldr	r3, [pc, #32]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800964c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965a:	4904      	ldr	r1, [pc, #16]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800965c:	4313      	orrs	r3, r2
 800965e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009662:	e009      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009664:	7cfb      	ldrb	r3, [r7, #19]
 8009666:	74bb      	strb	r3, [r7, #18]
 8009668:	e006      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800966a:	bf00      	nop
 800966c:	40021000 	.word	0x40021000
 8009670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009674:	7cfb      	ldrb	r3, [r7, #19]
 8009676:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009678:	7c7b      	ldrb	r3, [r7, #17]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d105      	bne.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800967e:	4ba6      	ldr	r3, [pc, #664]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009682:	4aa5      	ldr	r2, [pc, #660]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009688:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00a      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009696:	4ba0      	ldr	r3, [pc, #640]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969c:	f023 0203 	bic.w	r2, r3, #3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	499c      	ldr	r1, [pc, #624]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0302 	and.w	r3, r3, #2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00a      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096b8:	4b97      	ldr	r3, [pc, #604]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80096ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096be:	f023 020c 	bic.w	r2, r3, #12
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c6:	4994      	ldr	r1, [pc, #592]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0304 	and.w	r3, r3, #4
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80096da:	4b8f      	ldr	r3, [pc, #572]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80096dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	498b      	ldr	r1, [pc, #556]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0308 	and.w	r3, r3, #8
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00a      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80096fc:	4b86      	ldr	r3, [pc, #536]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009702:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970a:	4983      	ldr	r1, [pc, #524]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800970c:	4313      	orrs	r3, r2
 800970e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0310 	and.w	r3, r3, #16
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800971e:	4b7e      	ldr	r3, [pc, #504]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800972c:	497a      	ldr	r1, [pc, #488]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800972e:	4313      	orrs	r3, r2
 8009730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0320 	and.w	r3, r3, #32
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00a      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009740:	4b75      	ldr	r3, [pc, #468]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009746:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974e:	4972      	ldr	r1, [pc, #456]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009750:	4313      	orrs	r3, r2
 8009752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009762:	4b6d      	ldr	r3, [pc, #436]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009770:	4969      	ldr	r1, [pc, #420]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009772:	4313      	orrs	r3, r2
 8009774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00a      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009784:	4b64      	ldr	r3, [pc, #400]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009792:	4961      	ldr	r1, [pc, #388]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009794:	4313      	orrs	r3, r2
 8009796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80097a6:	4b5c      	ldr	r3, [pc, #368]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80097a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b4:	4958      	ldr	r1, [pc, #352]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00a      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80097c8:	4b53      	ldr	r3, [pc, #332]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80097ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d6:	4950      	ldr	r1, [pc, #320]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80097ea:	4b4b      	ldr	r3, [pc, #300]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80097ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f8:	4947      	ldr	r1, [pc, #284]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800980c:	4b42      	ldr	r3, [pc, #264]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800980e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009812:	f023 0203 	bic.w	r2, r3, #3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800981a:	493f      	ldr	r1, [pc, #252]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800981c:	4313      	orrs	r3, r2
 800981e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d028      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800982e:	4b3a      	ldr	r3, [pc, #232]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009834:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983c:	4936      	ldr	r1, [pc, #216]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800983e:	4313      	orrs	r3, r2
 8009840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800984c:	d106      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800984e:	4b32      	ldr	r3, [pc, #200]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	4a31      	ldr	r2, [pc, #196]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009858:	60d3      	str	r3, [r2, #12]
 800985a:	e011      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009864:	d10c      	bne.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3304      	adds	r3, #4
 800986a:	2101      	movs	r1, #1
 800986c:	4618      	mov	r0, r3
 800986e:	f000 f8c9 	bl	8009a04 <RCCEx_PLLSAI1_Config>
 8009872:	4603      	mov	r3, r0
 8009874:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009876:	7cfb      	ldrb	r3, [r7, #19]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800987c:	7cfb      	ldrb	r3, [r7, #19]
 800987e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d028      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800988c:	4b22      	ldr	r3, [pc, #136]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800988e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009892:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800989a:	491f      	ldr	r1, [pc, #124]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800989c:	4313      	orrs	r3, r2
 800989e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098aa:	d106      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098ac:	4b1a      	ldr	r3, [pc, #104]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	4a19      	ldr	r2, [pc, #100]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80098b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098b6:	60d3      	str	r3, [r2, #12]
 80098b8:	e011      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098c2:	d10c      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	3304      	adds	r3, #4
 80098c8:	2101      	movs	r1, #1
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 f89a 	bl	8009a04 <RCCEx_PLLSAI1_Config>
 80098d0:	4603      	mov	r3, r0
 80098d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80098d4:	7cfb      	ldrb	r3, [r7, #19]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80098da:	7cfb      	ldrb	r3, [r7, #19]
 80098dc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d02a      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80098ea:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80098ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098f8:	4907      	ldr	r1, [pc, #28]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009908:	d108      	bne.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800990a:	4b03      	ldr	r3, [pc, #12]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	4a02      	ldr	r2, [pc, #8]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009914:	60d3      	str	r3, [r2, #12]
 8009916:	e013      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8009918:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009924:	d10c      	bne.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	3304      	adds	r3, #4
 800992a:	2101      	movs	r1, #1
 800992c:	4618      	mov	r0, r3
 800992e:	f000 f869 	bl	8009a04 <RCCEx_PLLSAI1_Config>
 8009932:	4603      	mov	r3, r0
 8009934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009936:	7cfb      	ldrb	r3, [r7, #19]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800993c:	7cfb      	ldrb	r3, [r7, #19]
 800993e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d02f      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800994c:	4b2c      	ldr	r3, [pc, #176]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800994e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009952:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800995a:	4929      	ldr	r1, [pc, #164]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800995c:	4313      	orrs	r3, r2
 800995e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800996a:	d10d      	bne.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3304      	adds	r3, #4
 8009970:	2102      	movs	r1, #2
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f846 	bl	8009a04 <RCCEx_PLLSAI1_Config>
 8009978:	4603      	mov	r3, r0
 800997a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800997c:	7cfb      	ldrb	r3, [r7, #19]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d014      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8009982:	7cfb      	ldrb	r3, [r7, #19]
 8009984:	74bb      	strb	r3, [r7, #18]
 8009986:	e011      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800998c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009990:	d10c      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	3320      	adds	r3, #32
 8009996:	2102      	movs	r1, #2
 8009998:	4618      	mov	r0, r3
 800999a:	f000 f925 	bl	8009be8 <RCCEx_PLLSAI2_Config>
 800999e:	4603      	mov	r3, r0
 80099a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80099a2:	7cfb      	ldrb	r3, [r7, #19]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80099a8:	7cfb      	ldrb	r3, [r7, #19]
 80099aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80099b8:	4b11      	ldr	r3, [pc, #68]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80099ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099c8:	490d      	ldr	r1, [pc, #52]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099dc:	4b08      	ldr	r3, [pc, #32]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80099de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ec:	4904      	ldr	r1, [pc, #16]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80099f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	40021000 	.word	0x40021000

08009a04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009a12:	4b74      	ldr	r3, [pc, #464]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d018      	beq.n	8009a50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009a1e:	4b71      	ldr	r3, [pc, #452]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f003 0203 	and.w	r2, r3, #3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d10d      	bne.n	8009a4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
       ||
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d009      	beq.n	8009a4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009a36:	4b6b      	ldr	r3, [pc, #428]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	091b      	lsrs	r3, r3, #4
 8009a3c:	f003 0307 	and.w	r3, r3, #7
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
       ||
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d047      	beq.n	8009ada <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	73fb      	strb	r3, [r7, #15]
 8009a4e:	e044      	b.n	8009ada <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b03      	cmp	r3, #3
 8009a56:	d018      	beq.n	8009a8a <RCCEx_PLLSAI1_Config+0x86>
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d825      	bhi.n	8009aa8 <RCCEx_PLLSAI1_Config+0xa4>
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d002      	beq.n	8009a66 <RCCEx_PLLSAI1_Config+0x62>
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d009      	beq.n	8009a78 <RCCEx_PLLSAI1_Config+0x74>
 8009a64:	e020      	b.n	8009aa8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009a66:	4b5f      	ldr	r3, [pc, #380]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d11d      	bne.n	8009aae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a76:	e01a      	b.n	8009aae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009a78:	4b5a      	ldr	r3, [pc, #360]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d116      	bne.n	8009ab2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a88:	e013      	b.n	8009ab2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009a8a:	4b56      	ldr	r3, [pc, #344]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10f      	bne.n	8009ab6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009a96:	4b53      	ldr	r3, [pc, #332]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d109      	bne.n	8009ab6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009aa6:	e006      	b.n	8009ab6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8009aac:	e004      	b.n	8009ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009aae:	bf00      	nop
 8009ab0:	e002      	b.n	8009ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009ab2:	bf00      	nop
 8009ab4:	e000      	b.n	8009ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10d      	bne.n	8009ada <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009abe:	4b49      	ldr	r3, [pc, #292]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6819      	ldr	r1, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	011b      	lsls	r3, r3, #4
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	4943      	ldr	r1, [pc, #268]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d17c      	bne.n	8009bda <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009ae0:	4b40      	ldr	r3, [pc, #256]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a3f      	ldr	r2, [pc, #252]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aec:	f7fe fb3c 	bl	8008168 <HAL_GetTick>
 8009af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009af2:	e009      	b.n	8009b08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009af4:	f7fe fb38 	bl	8008168 <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d902      	bls.n	8009b08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	73fb      	strb	r3, [r7, #15]
        break;
 8009b06:	e005      	b.n	8009b14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009b08:	4b36      	ldr	r3, [pc, #216]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1ef      	bne.n	8009af4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d15f      	bne.n	8009bda <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d110      	bne.n	8009b42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009b20:	4b30      	ldr	r3, [pc, #192]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009b28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	6892      	ldr	r2, [r2, #8]
 8009b30:	0211      	lsls	r1, r2, #8
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	68d2      	ldr	r2, [r2, #12]
 8009b36:	06d2      	lsls	r2, r2, #27
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	492a      	ldr	r1, [pc, #168]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	610b      	str	r3, [r1, #16]
 8009b40:	e027      	b.n	8009b92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d112      	bne.n	8009b6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009b48:	4b26      	ldr	r3, [pc, #152]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009b50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	6892      	ldr	r2, [r2, #8]
 8009b58:	0211      	lsls	r1, r2, #8
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6912      	ldr	r2, [r2, #16]
 8009b5e:	0852      	lsrs	r2, r2, #1
 8009b60:	3a01      	subs	r2, #1
 8009b62:	0552      	lsls	r2, r2, #21
 8009b64:	430a      	orrs	r2, r1
 8009b66:	491f      	ldr	r1, [pc, #124]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	610b      	str	r3, [r1, #16]
 8009b6c:	e011      	b.n	8009b92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009b6e:	4b1d      	ldr	r3, [pc, #116]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009b76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	6892      	ldr	r2, [r2, #8]
 8009b7e:	0211      	lsls	r1, r2, #8
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6952      	ldr	r2, [r2, #20]
 8009b84:	0852      	lsrs	r2, r2, #1
 8009b86:	3a01      	subs	r2, #1
 8009b88:	0652      	lsls	r2, r2, #25
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	4915      	ldr	r1, [pc, #84]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009b92:	4b14      	ldr	r3, [pc, #80]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a13      	ldr	r2, [pc, #76]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b9e:	f7fe fae3 	bl	8008168 <HAL_GetTick>
 8009ba2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009ba4:	e009      	b.n	8009bba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ba6:	f7fe fadf 	bl	8008168 <HAL_GetTick>
 8009baa:	4602      	mov	r2, r0
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d902      	bls.n	8009bba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	73fb      	strb	r3, [r7, #15]
          break;
 8009bb8:	e005      	b.n	8009bc6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009bba:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0ef      	beq.n	8009ba6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009bcc:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009bce:	691a      	ldr	r2, [r3, #16]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	4903      	ldr	r1, [pc, #12]	; (8009be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	40021000 	.word	0x40021000

08009be8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009bf6:	4b69      	ldr	r3, [pc, #420]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d018      	beq.n	8009c34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009c02:	4b66      	ldr	r3, [pc, #408]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f003 0203 	and.w	r2, r3, #3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d10d      	bne.n	8009c2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
       ||
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d009      	beq.n	8009c2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009c1a:	4b60      	ldr	r3, [pc, #384]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	091b      	lsrs	r3, r3, #4
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	1c5a      	adds	r2, r3, #1
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
       ||
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d047      	beq.n	8009cbe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	73fb      	strb	r3, [r7, #15]
 8009c32:	e044      	b.n	8009cbe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d018      	beq.n	8009c6e <RCCEx_PLLSAI2_Config+0x86>
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	d825      	bhi.n	8009c8c <RCCEx_PLLSAI2_Config+0xa4>
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d002      	beq.n	8009c4a <RCCEx_PLLSAI2_Config+0x62>
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d009      	beq.n	8009c5c <RCCEx_PLLSAI2_Config+0x74>
 8009c48:	e020      	b.n	8009c8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009c4a:	4b54      	ldr	r3, [pc, #336]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d11d      	bne.n	8009c92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c5a:	e01a      	b.n	8009c92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009c5c:	4b4f      	ldr	r3, [pc, #316]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d116      	bne.n	8009c96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c6c:	e013      	b.n	8009c96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009c6e:	4b4b      	ldr	r3, [pc, #300]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10f      	bne.n	8009c9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009c7a:	4b48      	ldr	r3, [pc, #288]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d109      	bne.n	8009c9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c8a:	e006      	b.n	8009c9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c90:	e004      	b.n	8009c9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009c92:	bf00      	nop
 8009c94:	e002      	b.n	8009c9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009c96:	bf00      	nop
 8009c98:	e000      	b.n	8009c9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009c9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10d      	bne.n	8009cbe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009ca2:	4b3e      	ldr	r3, [pc, #248]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6819      	ldr	r1, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	011b      	lsls	r3, r3, #4
 8009cb6:	430b      	orrs	r3, r1
 8009cb8:	4938      	ldr	r1, [pc, #224]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d166      	bne.n	8009d92 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009cc4:	4b35      	ldr	r3, [pc, #212]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a34      	ldr	r2, [pc, #208]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cd0:	f7fe fa4a 	bl	8008168 <HAL_GetTick>
 8009cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009cd6:	e009      	b.n	8009cec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009cd8:	f7fe fa46 	bl	8008168 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d902      	bls.n	8009cec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8009cea:	e005      	b.n	8009cf8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009cec:	4b2b      	ldr	r3, [pc, #172]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1ef      	bne.n	8009cd8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d149      	bne.n	8009d92 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d110      	bne.n	8009d26 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009d04:	4b25      	ldr	r3, [pc, #148]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009d0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	6892      	ldr	r2, [r2, #8]
 8009d14:	0211      	lsls	r1, r2, #8
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	68d2      	ldr	r2, [r2, #12]
 8009d1a:	06d2      	lsls	r2, r2, #27
 8009d1c:	430a      	orrs	r2, r1
 8009d1e:	491f      	ldr	r1, [pc, #124]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	614b      	str	r3, [r1, #20]
 8009d24:	e011      	b.n	8009d4a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009d26:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009d2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	6892      	ldr	r2, [r2, #8]
 8009d36:	0211      	lsls	r1, r2, #8
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	6912      	ldr	r2, [r2, #16]
 8009d3c:	0852      	lsrs	r2, r2, #1
 8009d3e:	3a01      	subs	r2, #1
 8009d40:	0652      	lsls	r2, r2, #25
 8009d42:	430a      	orrs	r2, r1
 8009d44:	4915      	ldr	r1, [pc, #84]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009d46:	4313      	orrs	r3, r2
 8009d48:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009d4a:	4b14      	ldr	r3, [pc, #80]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a13      	ldr	r2, [pc, #76]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d56:	f7fe fa07 	bl	8008168 <HAL_GetTick>
 8009d5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009d5c:	e009      	b.n	8009d72 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009d5e:	f7fe fa03 	bl	8008168 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d902      	bls.n	8009d72 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	73fb      	strb	r3, [r7, #15]
          break;
 8009d70:	e005      	b.n	8009d7e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009d72:	4b0a      	ldr	r3, [pc, #40]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d0ef      	beq.n	8009d5e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d106      	bne.n	8009d92 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009d84:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	4903      	ldr	r1, [pc, #12]	; (8009d9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	40021000 	.word	0x40021000

08009da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e01d      	b.n	8009dee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d106      	bne.n	8009dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f815 	bl	8009df6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4610      	mov	r0, r2
 8009de0:	f000 f986 	bl	800a0f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009dfe:	bf00      	nop
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
	...

08009e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68da      	ldr	r2, [r3, #12]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0201 	orr.w	r2, r2, #1
 8009e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689a      	ldr	r2, [r3, #8]
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <HAL_TIM_Base_Start_IT+0x50>)
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b06      	cmp	r3, #6
 8009e34:	d00b      	beq.n	8009e4e <HAL_TIM_Base_Start_IT+0x42>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e3c:	d007      	beq.n	8009e4e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0201 	orr.w	r2, r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	00010007 	.word	0x00010007

08009e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d122      	bne.n	8009ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	f003 0302 	and.w	r3, r3, #2
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d11b      	bne.n	8009ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f06f 0202 	mvn.w	r2, #2
 8009e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	f003 0303 	and.w	r3, r3, #3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f905 	bl	800a0b2 <HAL_TIM_IC_CaptureCallback>
 8009ea8:	e005      	b.n	8009eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f8f7 	bl	800a09e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f908 	bl	800a0c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	f003 0304 	and.w	r3, r3, #4
 8009ec6:	2b04      	cmp	r3, #4
 8009ec8:	d122      	bne.n	8009f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f003 0304 	and.w	r3, r3, #4
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	d11b      	bne.n	8009f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f06f 0204 	mvn.w	r2, #4
 8009ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f8db 	bl	800a0b2 <HAL_TIM_IC_CaptureCallback>
 8009efc:	e005      	b.n	8009f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f8cd 	bl	800a09e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f8de 	bl	800a0c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d122      	bne.n	8009f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d11b      	bne.n	8009f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f06f 0208 	mvn.w	r2, #8
 8009f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2204      	movs	r2, #4
 8009f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	f003 0303 	and.w	r3, r3, #3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f8b1 	bl	800a0b2 <HAL_TIM_IC_CaptureCallback>
 8009f50:	e005      	b.n	8009f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f8a3 	bl	800a09e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f8b4 	bl	800a0c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	f003 0310 	and.w	r3, r3, #16
 8009f6e:	2b10      	cmp	r3, #16
 8009f70:	d122      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b10      	cmp	r3, #16
 8009f7e:	d11b      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f06f 0210 	mvn.w	r2, #16
 8009f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2208      	movs	r2, #8
 8009f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f887 	bl	800a0b2 <HAL_TIM_IC_CaptureCallback>
 8009fa4:	e005      	b.n	8009fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f879 	bl	800a09e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f88a 	bl	800a0c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d10e      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d107      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f06f 0201 	mvn.w	r2, #1
 8009fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7f6 fe42 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fee:	2b80      	cmp	r3, #128	; 0x80
 8009ff0:	d10e      	bne.n	800a010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffc:	2b80      	cmp	r3, #128	; 0x80
 8009ffe:	d107      	bne.n	800a010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f914 	bl	800a238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a01a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a01e:	d10e      	bne.n	800a03e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02a:	2b80      	cmp	r3, #128	; 0x80
 800a02c:	d107      	bne.n	800a03e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f907 	bl	800a24c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	d10e      	bne.n	800a06a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a056:	2b40      	cmp	r3, #64	; 0x40
 800a058:	d107      	bne.n	800a06a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f838 	bl	800a0da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	f003 0320 	and.w	r3, r3, #32
 800a074:	2b20      	cmp	r3, #32
 800a076:	d10e      	bne.n	800a096 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f003 0320 	and.w	r3, r3, #32
 800a082:	2b20      	cmp	r3, #32
 800a084:	d107      	bne.n	800a096 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f06f 0220 	mvn.w	r2, #32
 800a08e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f8c7 	bl	800a224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a096:	bf00      	nop
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0a6:	bf00      	nop
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b083      	sub	sp, #12
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0ba:	bf00      	nop
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b083      	sub	sp, #12
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0ce:	bf00      	nop
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0e2:	bf00      	nop
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
	...

0800a0f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a40      	ldr	r2, [pc, #256]	; (800a204 <TIM_Base_SetConfig+0x114>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d013      	beq.n	800a130 <TIM_Base_SetConfig+0x40>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a10e:	d00f      	beq.n	800a130 <TIM_Base_SetConfig+0x40>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a3d      	ldr	r2, [pc, #244]	; (800a208 <TIM_Base_SetConfig+0x118>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d00b      	beq.n	800a130 <TIM_Base_SetConfig+0x40>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a3c      	ldr	r2, [pc, #240]	; (800a20c <TIM_Base_SetConfig+0x11c>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d007      	beq.n	800a130 <TIM_Base_SetConfig+0x40>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a3b      	ldr	r2, [pc, #236]	; (800a210 <TIM_Base_SetConfig+0x120>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d003      	beq.n	800a130 <TIM_Base_SetConfig+0x40>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a3a      	ldr	r2, [pc, #232]	; (800a214 <TIM_Base_SetConfig+0x124>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d108      	bne.n	800a142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	4313      	orrs	r3, r2
 800a140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a2f      	ldr	r2, [pc, #188]	; (800a204 <TIM_Base_SetConfig+0x114>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d01f      	beq.n	800a18a <TIM_Base_SetConfig+0x9a>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a150:	d01b      	beq.n	800a18a <TIM_Base_SetConfig+0x9a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a2c      	ldr	r2, [pc, #176]	; (800a208 <TIM_Base_SetConfig+0x118>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d017      	beq.n	800a18a <TIM_Base_SetConfig+0x9a>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a2b      	ldr	r2, [pc, #172]	; (800a20c <TIM_Base_SetConfig+0x11c>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d013      	beq.n	800a18a <TIM_Base_SetConfig+0x9a>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a2a      	ldr	r2, [pc, #168]	; (800a210 <TIM_Base_SetConfig+0x120>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d00f      	beq.n	800a18a <TIM_Base_SetConfig+0x9a>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a29      	ldr	r2, [pc, #164]	; (800a214 <TIM_Base_SetConfig+0x124>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d00b      	beq.n	800a18a <TIM_Base_SetConfig+0x9a>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a28      	ldr	r2, [pc, #160]	; (800a218 <TIM_Base_SetConfig+0x128>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d007      	beq.n	800a18a <TIM_Base_SetConfig+0x9a>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a27      	ldr	r2, [pc, #156]	; (800a21c <TIM_Base_SetConfig+0x12c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d003      	beq.n	800a18a <TIM_Base_SetConfig+0x9a>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a26      	ldr	r2, [pc, #152]	; (800a220 <TIM_Base_SetConfig+0x130>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d108      	bne.n	800a19c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	4313      	orrs	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	689a      	ldr	r2, [r3, #8]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a10      	ldr	r2, [pc, #64]	; (800a204 <TIM_Base_SetConfig+0x114>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d00f      	beq.n	800a1e8 <TIM_Base_SetConfig+0xf8>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a12      	ldr	r2, [pc, #72]	; (800a214 <TIM_Base_SetConfig+0x124>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d00b      	beq.n	800a1e8 <TIM_Base_SetConfig+0xf8>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a11      	ldr	r2, [pc, #68]	; (800a218 <TIM_Base_SetConfig+0x128>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d007      	beq.n	800a1e8 <TIM_Base_SetConfig+0xf8>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a10      	ldr	r2, [pc, #64]	; (800a21c <TIM_Base_SetConfig+0x12c>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d003      	beq.n	800a1e8 <TIM_Base_SetConfig+0xf8>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a0f      	ldr	r2, [pc, #60]	; (800a220 <TIM_Base_SetConfig+0x130>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d103      	bne.n	800a1f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	691a      	ldr	r2, [r3, #16]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	615a      	str	r2, [r3, #20]
}
 800a1f6:	bf00      	nop
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	40012c00 	.word	0x40012c00
 800a208:	40000400 	.word	0x40000400
 800a20c:	40000800 	.word	0x40000800
 800a210:	40000c00 	.word	0x40000c00
 800a214:	40013400 	.word	0x40013400
 800a218:	40014000 	.word	0x40014000
 800a21c:	40014400 	.word	0x40014400
 800a220:	40014800 	.word	0x40014800

0800a224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e040      	b.n	800a2f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7f6 feee 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2224      	movs	r2, #36	; 0x24
 800a28c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f022 0201 	bic.w	r2, r2, #1
 800a29c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f8c0 	bl	800a424 <UART_SetConfig>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d101      	bne.n	800a2ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e022      	b.n	800a2f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fc36 	bl	800ab28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689a      	ldr	r2, [r3, #8]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0201 	orr.w	r2, r2, #1
 800a2ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fcbd 	bl	800ac6c <UART_CheckIdleState>
 800a2f2:	4603      	mov	r3, r0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b08a      	sub	sp, #40	; 0x28
 800a300:	af02      	add	r7, sp, #8
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	603b      	str	r3, [r7, #0]
 800a308:	4613      	mov	r3, r2
 800a30a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a310:	2b20      	cmp	r3, #32
 800a312:	f040 8081 	bne.w	800a418 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <HAL_UART_Transmit+0x26>
 800a31c:	88fb      	ldrh	r3, [r7, #6]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e079      	b.n	800a41a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d101      	bne.n	800a334 <HAL_UART_Transmit+0x38>
 800a330:	2302      	movs	r3, #2
 800a332:	e072      	b.n	800a41a <HAL_UART_Transmit+0x11e>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2221      	movs	r2, #33	; 0x21
 800a346:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a348:	f7fd ff0e 	bl	8008168 <HAL_GetTick>
 800a34c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	88fa      	ldrh	r2, [r7, #6]
 800a352:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	88fa      	ldrh	r2, [r7, #6]
 800a35a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a366:	d108      	bne.n	800a37a <HAL_UART_Transmit+0x7e>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d104      	bne.n	800a37a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800a370:	2300      	movs	r3, #0
 800a372:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	61bb      	str	r3, [r7, #24]
 800a378:	e003      	b.n	800a382 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a37e:	2300      	movs	r3, #0
 800a380:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a38a:	e02d      	b.n	800a3e8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	2200      	movs	r2, #0
 800a394:	2180      	movs	r1, #128	; 0x80
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 fcad 	bl	800acf6 <UART_WaitOnFlagUntilTimeout>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e039      	b.n	800a41a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10b      	bne.n	800a3c4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	881a      	ldrh	r2, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3b8:	b292      	uxth	r2, r2
 800a3ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	3302      	adds	r3, #2
 800a3c0:	61bb      	str	r3, [r7, #24]
 800a3c2:	e008      	b.n	800a3d6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	781a      	ldrb	r2, [r3, #0]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	b292      	uxth	r2, r2
 800a3ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1cb      	bne.n	800a38c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2140      	movs	r1, #64	; 0x40
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f000 fc79 	bl	800acf6 <UART_WaitOnFlagUntilTimeout>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e005      	b.n	800a41a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2220      	movs	r2, #32
 800a412:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	e000      	b.n	800a41a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a418:	2302      	movs	r3, #2
  }
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3720      	adds	r7, #32
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
	...

0800a424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a428:	b08c      	sub	sp, #48	; 0x30
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a42e:	2300      	movs	r3, #0
 800a430:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a438:	2300      	movs	r3, #0
 800a43a:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	431a      	orrs	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	431a      	orrs	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	69db      	ldr	r3, [r3, #28]
 800a450:	4313      	orrs	r3, r2
 800a452:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	4bb9      	ldr	r3, [pc, #740]	; (800a740 <UART_SetConfig+0x31c>)
 800a45c:	4013      	ands	r3, r2
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	6812      	ldr	r2, [r2, #0]
 800a462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a464:	430b      	orrs	r3, r1
 800a466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	68da      	ldr	r2, [r3, #12]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4aae      	ldr	r2, [pc, #696]	; (800a744 <UART_SetConfig+0x320>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d004      	beq.n	800a498 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a494:	4313      	orrs	r3, r2
 800a496:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4aa5      	ldr	r2, [pc, #660]	; (800a748 <UART_SetConfig+0x324>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d126      	bne.n	800a504 <UART_SetConfig+0xe0>
 800a4b6:	4ba5      	ldr	r3, [pc, #660]	; (800a74c <UART_SetConfig+0x328>)
 800a4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4bc:	f003 0303 	and.w	r3, r3, #3
 800a4c0:	2b03      	cmp	r3, #3
 800a4c2:	d81b      	bhi.n	800a4fc <UART_SetConfig+0xd8>
 800a4c4:	a201      	add	r2, pc, #4	; (adr r2, 800a4cc <UART_SetConfig+0xa8>)
 800a4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ca:	bf00      	nop
 800a4cc:	0800a4dd 	.word	0x0800a4dd
 800a4d0:	0800a4ed 	.word	0x0800a4ed
 800a4d4:	0800a4e5 	.word	0x0800a4e5
 800a4d8:	0800a4f5 	.word	0x0800a4f5
 800a4dc:	2301      	movs	r3, #1
 800a4de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4e2:	e106      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4ea:	e102      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a4ec:	2304      	movs	r3, #4
 800a4ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4f2:	e0fe      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a4f4:	2308      	movs	r3, #8
 800a4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4fa:	e0fa      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a4fc:	2310      	movs	r3, #16
 800a4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a502:	e0f6      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a91      	ldr	r2, [pc, #580]	; (800a750 <UART_SetConfig+0x32c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d138      	bne.n	800a580 <UART_SetConfig+0x15c>
 800a50e:	4b8f      	ldr	r3, [pc, #572]	; (800a74c <UART_SetConfig+0x328>)
 800a510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a514:	f003 030c 	and.w	r3, r3, #12
 800a518:	2b0c      	cmp	r3, #12
 800a51a:	d82d      	bhi.n	800a578 <UART_SetConfig+0x154>
 800a51c:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <UART_SetConfig+0x100>)
 800a51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a522:	bf00      	nop
 800a524:	0800a559 	.word	0x0800a559
 800a528:	0800a579 	.word	0x0800a579
 800a52c:	0800a579 	.word	0x0800a579
 800a530:	0800a579 	.word	0x0800a579
 800a534:	0800a569 	.word	0x0800a569
 800a538:	0800a579 	.word	0x0800a579
 800a53c:	0800a579 	.word	0x0800a579
 800a540:	0800a579 	.word	0x0800a579
 800a544:	0800a561 	.word	0x0800a561
 800a548:	0800a579 	.word	0x0800a579
 800a54c:	0800a579 	.word	0x0800a579
 800a550:	0800a579 	.word	0x0800a579
 800a554:	0800a571 	.word	0x0800a571
 800a558:	2300      	movs	r3, #0
 800a55a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a55e:	e0c8      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a560:	2302      	movs	r3, #2
 800a562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a566:	e0c4      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a568:	2304      	movs	r3, #4
 800a56a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a56e:	e0c0      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a570:	2308      	movs	r3, #8
 800a572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a576:	e0bc      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a578:	2310      	movs	r3, #16
 800a57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a57e:	e0b8      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a73      	ldr	r2, [pc, #460]	; (800a754 <UART_SetConfig+0x330>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d125      	bne.n	800a5d6 <UART_SetConfig+0x1b2>
 800a58a:	4b70      	ldr	r3, [pc, #448]	; (800a74c <UART_SetConfig+0x328>)
 800a58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a590:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a594:	2b30      	cmp	r3, #48	; 0x30
 800a596:	d016      	beq.n	800a5c6 <UART_SetConfig+0x1a2>
 800a598:	2b30      	cmp	r3, #48	; 0x30
 800a59a:	d818      	bhi.n	800a5ce <UART_SetConfig+0x1aa>
 800a59c:	2b20      	cmp	r3, #32
 800a59e:	d00a      	beq.n	800a5b6 <UART_SetConfig+0x192>
 800a5a0:	2b20      	cmp	r3, #32
 800a5a2:	d814      	bhi.n	800a5ce <UART_SetConfig+0x1aa>
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <UART_SetConfig+0x18a>
 800a5a8:	2b10      	cmp	r3, #16
 800a5aa:	d008      	beq.n	800a5be <UART_SetConfig+0x19a>
 800a5ac:	e00f      	b.n	800a5ce <UART_SetConfig+0x1aa>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5b4:	e09d      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5bc:	e099      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a5be:	2304      	movs	r3, #4
 800a5c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5c4:	e095      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a5c6:	2308      	movs	r3, #8
 800a5c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5cc:	e091      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a5ce:	2310      	movs	r3, #16
 800a5d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5d4:	e08d      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a5f      	ldr	r2, [pc, #380]	; (800a758 <UART_SetConfig+0x334>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d125      	bne.n	800a62c <UART_SetConfig+0x208>
 800a5e0:	4b5a      	ldr	r3, [pc, #360]	; (800a74c <UART_SetConfig+0x328>)
 800a5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5ea:	2bc0      	cmp	r3, #192	; 0xc0
 800a5ec:	d016      	beq.n	800a61c <UART_SetConfig+0x1f8>
 800a5ee:	2bc0      	cmp	r3, #192	; 0xc0
 800a5f0:	d818      	bhi.n	800a624 <UART_SetConfig+0x200>
 800a5f2:	2b80      	cmp	r3, #128	; 0x80
 800a5f4:	d00a      	beq.n	800a60c <UART_SetConfig+0x1e8>
 800a5f6:	2b80      	cmp	r3, #128	; 0x80
 800a5f8:	d814      	bhi.n	800a624 <UART_SetConfig+0x200>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <UART_SetConfig+0x1e0>
 800a5fe:	2b40      	cmp	r3, #64	; 0x40
 800a600:	d008      	beq.n	800a614 <UART_SetConfig+0x1f0>
 800a602:	e00f      	b.n	800a624 <UART_SetConfig+0x200>
 800a604:	2300      	movs	r3, #0
 800a606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a60a:	e072      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a60c:	2302      	movs	r3, #2
 800a60e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a612:	e06e      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a614:	2304      	movs	r3, #4
 800a616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a61a:	e06a      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a61c:	2308      	movs	r3, #8
 800a61e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a622:	e066      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a624:	2310      	movs	r3, #16
 800a626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a62a:	e062      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a4a      	ldr	r2, [pc, #296]	; (800a75c <UART_SetConfig+0x338>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d12a      	bne.n	800a68c <UART_SetConfig+0x268>
 800a636:	4b45      	ldr	r3, [pc, #276]	; (800a74c <UART_SetConfig+0x328>)
 800a638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a644:	d01a      	beq.n	800a67c <UART_SetConfig+0x258>
 800a646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a64a:	d81b      	bhi.n	800a684 <UART_SetConfig+0x260>
 800a64c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a650:	d00c      	beq.n	800a66c <UART_SetConfig+0x248>
 800a652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a656:	d815      	bhi.n	800a684 <UART_SetConfig+0x260>
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d003      	beq.n	800a664 <UART_SetConfig+0x240>
 800a65c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a660:	d008      	beq.n	800a674 <UART_SetConfig+0x250>
 800a662:	e00f      	b.n	800a684 <UART_SetConfig+0x260>
 800a664:	2300      	movs	r3, #0
 800a666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a66a:	e042      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a66c:	2302      	movs	r3, #2
 800a66e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a672:	e03e      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a674:	2304      	movs	r3, #4
 800a676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a67a:	e03a      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a67c:	2308      	movs	r3, #8
 800a67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a682:	e036      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a684:	2310      	movs	r3, #16
 800a686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a68a:	e032      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a2c      	ldr	r2, [pc, #176]	; (800a744 <UART_SetConfig+0x320>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d12a      	bne.n	800a6ec <UART_SetConfig+0x2c8>
 800a696:	4b2d      	ldr	r3, [pc, #180]	; (800a74c <UART_SetConfig+0x328>)
 800a698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a69c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a6a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6a4:	d01a      	beq.n	800a6dc <UART_SetConfig+0x2b8>
 800a6a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6aa:	d81b      	bhi.n	800a6e4 <UART_SetConfig+0x2c0>
 800a6ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6b0:	d00c      	beq.n	800a6cc <UART_SetConfig+0x2a8>
 800a6b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6b6:	d815      	bhi.n	800a6e4 <UART_SetConfig+0x2c0>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <UART_SetConfig+0x2a0>
 800a6bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6c0:	d008      	beq.n	800a6d4 <UART_SetConfig+0x2b0>
 800a6c2:	e00f      	b.n	800a6e4 <UART_SetConfig+0x2c0>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ca:	e012      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6d2:	e00e      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6da:	e00a      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a6dc:	2308      	movs	r3, #8
 800a6de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6e2:	e006      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a6e4:	2310      	movs	r3, #16
 800a6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ea:	e002      	b.n	800a6f2 <UART_SetConfig+0x2ce>
 800a6ec:	2310      	movs	r3, #16
 800a6ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a13      	ldr	r2, [pc, #76]	; (800a744 <UART_SetConfig+0x320>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	f040 8105 	bne.w	800a908 <UART_SetConfig+0x4e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a702:	2b08      	cmp	r3, #8
 800a704:	d836      	bhi.n	800a774 <UART_SetConfig+0x350>
 800a706:	a201      	add	r2, pc, #4	; (adr r2, 800a70c <UART_SetConfig+0x2e8>)
 800a708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70c:	0800a731 	.word	0x0800a731
 800a710:	0800a775 	.word	0x0800a775
 800a714:	0800a739 	.word	0x0800a739
 800a718:	0800a775 	.word	0x0800a775
 800a71c:	0800a765 	.word	0x0800a765
 800a720:	0800a775 	.word	0x0800a775
 800a724:	0800a775 	.word	0x0800a775
 800a728:	0800a775 	.word	0x0800a775
 800a72c:	0800a76d 	.word	0x0800a76d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800a730:	f7fe fdae 	bl	8009290 <HAL_RCC_GetPCLK1Freq>
 800a734:	61f8      	str	r0, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a736:	e021      	b.n	800a77c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a738:	4b09      	ldr	r3, [pc, #36]	; (800a760 <UART_SetConfig+0x33c>)
 800a73a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a73c:	e01e      	b.n	800a77c <UART_SetConfig+0x358>
 800a73e:	bf00      	nop
 800a740:	efff69f3 	.word	0xefff69f3
 800a744:	40008000 	.word	0x40008000
 800a748:	40013800 	.word	0x40013800
 800a74c:	40021000 	.word	0x40021000
 800a750:	40004400 	.word	0x40004400
 800a754:	40004800 	.word	0x40004800
 800a758:	40004c00 	.word	0x40004c00
 800a75c:	40005000 	.word	0x40005000
 800a760:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a764:	f7fe fcfc 	bl	8009160 <HAL_RCC_GetSysClockFreq>
 800a768:	61f8      	str	r0, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a76a:	e007      	b.n	800a77c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a76c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a770:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a772:	e003      	b.n	800a77c <UART_SetConfig+0x358>
      default:
        ret = HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800a77a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 81c5 	beq.w	800ab0e <UART_SetConfig+0x6ea>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	4613      	mov	r3, r2
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	4413      	add	r3, r2
 800a78e:	69fa      	ldr	r2, [r7, #28]
 800a790:	429a      	cmp	r2, r3
 800a792:	d305      	bcc.n	800a7a0 <UART_SetConfig+0x37c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a79a:	69fa      	ldr	r2, [r7, #28]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d903      	bls.n	800a7a8 <UART_SetConfig+0x384>
      {
        ret = HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7a6:	e1b2      	b.n	800ab0e <UART_SetConfig+0x6ea>
      }
      else
      {
        switch (clocksource)
 800a7a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	f200 8096 	bhi.w	800a8de <UART_SetConfig+0x4ba>
 800a7b2:	a201      	add	r2, pc, #4	; (adr r2, 800a7b8 <UART_SetConfig+0x394>)
 800a7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b8:	0800a7dd 	.word	0x0800a7dd
 800a7bc:	0800a8df 	.word	0x0800a8df
 800a7c0:	0800a82b 	.word	0x0800a82b
 800a7c4:	0800a8df 	.word	0x0800a8df
 800a7c8:	0800a861 	.word	0x0800a861
 800a7cc:	0800a8df 	.word	0x0800a8df
 800a7d0:	0800a8df 	.word	0x0800a8df
 800a7d4:	0800a8df 	.word	0x0800a8df
 800a7d8:	0800a8af 	.word	0x0800a8af
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800a7dc:	f7fe fd58 	bl	8009290 <HAL_RCC_GetPCLK1Freq>
 800a7e0:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f04f 0100 	mov.w	r1, #0
 800a7ea:	f04f 0200 	mov.w	r2, #0
 800a7ee:	f04f 0300 	mov.w	r3, #0
 800a7f2:	020b      	lsls	r3, r1, #8
 800a7f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7f8:	0202      	lsls	r2, r0, #8
 800a7fa:	68f9      	ldr	r1, [r7, #12]
 800a7fc:	6849      	ldr	r1, [r1, #4]
 800a7fe:	0849      	lsrs	r1, r1, #1
 800a800:	4608      	mov	r0, r1
 800a802:	f04f 0100 	mov.w	r1, #0
 800a806:	1814      	adds	r4, r2, r0
 800a808:	603c      	str	r4, [r7, #0]
 800a80a:	414b      	adcs	r3, r1
 800a80c:	607b      	str	r3, [r7, #4]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	461a      	mov	r2, r3
 800a814:	f04f 0300 	mov.w	r3, #0
 800a818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a81c:	f7f5 fd40 	bl	80002a0 <__aeabi_uldivmod>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	4613      	mov	r3, r2
 800a826:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 800a828:	e05d      	b.n	800a8e6 <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	085b      	lsrs	r3, r3, #1
 800a830:	461a      	mov	r2, r3
 800a832:	f04f 0300 	mov.w	r3, #0
 800a836:	48b3      	ldr	r0, [pc, #716]	; (800ab04 <UART_SetConfig+0x6e0>)
 800a838:	f04f 0100 	mov.w	r1, #0
 800a83c:	eb12 0a00 	adds.w	sl, r2, r0
 800a840:	eb43 0b01 	adc.w	fp, r3, r1
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	461a      	mov	r2, r3
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	4650      	mov	r0, sl
 800a850:	4659      	mov	r1, fp
 800a852:	f7f5 fd25 	bl	80002a0 <__aeabi_uldivmod>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	4613      	mov	r3, r2
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 800a85e:	e042      	b.n	800a8e6 <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800a860:	f7fe fc7e 	bl	8009160 <HAL_RCC_GetSysClockFreq>
 800a864:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	4618      	mov	r0, r3
 800a86a:	f04f 0100 	mov.w	r1, #0
 800a86e:	f04f 0200 	mov.w	r2, #0
 800a872:	f04f 0300 	mov.w	r3, #0
 800a876:	020b      	lsls	r3, r1, #8
 800a878:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a87c:	0202      	lsls	r2, r0, #8
 800a87e:	68f9      	ldr	r1, [r7, #12]
 800a880:	6849      	ldr	r1, [r1, #4]
 800a882:	0849      	lsrs	r1, r1, #1
 800a884:	4608      	mov	r0, r1
 800a886:	f04f 0100 	mov.w	r1, #0
 800a88a:	eb12 0800 	adds.w	r8, r2, r0
 800a88e:	eb43 0901 	adc.w	r9, r3, r1
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	461a      	mov	r2, r3
 800a898:	f04f 0300 	mov.w	r3, #0
 800a89c:	4640      	mov	r0, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7f5 fcfe 	bl	80002a0 <__aeabi_uldivmod>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 800a8ac:	e01b      	b.n	800a8e6 <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	085b      	lsrs	r3, r3, #1
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	f04f 0300 	mov.w	r3, #0
 800a8ba:	f512 0400 	adds.w	r4, r2, #8388608	; 0x800000
 800a8be:	f143 0500 	adc.w	r5, r3, #0
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	f04f 0300 	mov.w	r3, #0
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f7f5 fce6 	bl	80002a0 <__aeabi_uldivmod>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4613      	mov	r3, r2
 800a8da:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 800a8dc:	e003      	b.n	800a8e6 <UART_SetConfig+0x4c2>
          default:
            ret = HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 800a8e4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8ec:	d308      	bcc.n	800a900 <UART_SetConfig+0x4dc>
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8f4:	d204      	bcs.n	800a900 <UART_SetConfig+0x4dc>
        {
          huart->Instance->BRR = usartdiv;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8fc:	60da      	str	r2, [r3, #12]
 800a8fe:	e106      	b.n	800ab0e <UART_SetConfig+0x6ea>
        }
        else
        {
          ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a906:	e102      	b.n	800ab0e <UART_SetConfig+0x6ea>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a910:	f040 8086 	bne.w	800aa20 <UART_SetConfig+0x5fc>
  {
    switch (clocksource)
 800a914:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a918:	2b08      	cmp	r3, #8
 800a91a:	d85f      	bhi.n	800a9dc <UART_SetConfig+0x5b8>
 800a91c:	a201      	add	r2, pc, #4	; (adr r2, 800a924 <UART_SetConfig+0x500>)
 800a91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a922:	bf00      	nop
 800a924:	0800a949 	.word	0x0800a949
 800a928:	0800a969 	.word	0x0800a969
 800a92c:	0800a989 	.word	0x0800a989
 800a930:	0800a9dd 	.word	0x0800a9dd
 800a934:	0800a9a5 	.word	0x0800a9a5
 800a938:	0800a9dd 	.word	0x0800a9dd
 800a93c:	0800a9dd 	.word	0x0800a9dd
 800a940:	0800a9dd 	.word	0x0800a9dd
 800a944:	0800a9c5 	.word	0x0800a9c5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a948:	f7fe fca2 	bl	8009290 <HAL_RCC_GetPCLK1Freq>
 800a94c:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	005a      	lsls	r2, r3, #1
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	085b      	lsrs	r3, r3, #1
 800a958:	441a      	add	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a962:	b29b      	uxth	r3, r3
 800a964:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800a966:	e03d      	b.n	800a9e4 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a968:	f7fe fca8 	bl	80092bc <HAL_RCC_GetPCLK2Freq>
 800a96c:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	005a      	lsls	r2, r3, #1
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	085b      	lsrs	r3, r3, #1
 800a978:	441a      	add	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a982:	b29b      	uxth	r3, r3
 800a984:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800a986:	e02d      	b.n	800a9e4 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	085b      	lsrs	r3, r3, #1
 800a98e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800a992:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	6852      	ldr	r2, [r2, #4]
 800a99a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800a9a2:	e01f      	b.n	800a9e4 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9a4:	f7fe fbdc 	bl	8009160 <HAL_RCC_GetSysClockFreq>
 800a9a8:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	005a      	lsls	r2, r3, #1
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	085b      	lsrs	r3, r3, #1
 800a9b4:	441a      	add	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800a9c2:	e00f      	b.n	800a9e4 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	085b      	lsrs	r3, r3, #1
 800a9ca:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800a9da:	e003      	b.n	800a9e4 <UART_SetConfig+0x5c0>
      default:
        ret = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800a9e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	2b0f      	cmp	r3, #15
 800a9e8:	d916      	bls.n	800aa18 <UART_SetConfig+0x5f4>
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f0:	d212      	bcs.n	800aa18 <UART_SetConfig+0x5f4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	f023 030f 	bic.w	r3, r3, #15
 800a9fa:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	085b      	lsrs	r3, r3, #1
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	f003 0307 	and.w	r3, r3, #7
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	8afb      	ldrh	r3, [r7, #22]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	8afa      	ldrh	r2, [r7, #22]
 800aa14:	60da      	str	r2, [r3, #12]
 800aa16:	e07a      	b.n	800ab0e <UART_SetConfig+0x6ea>
    }
    else
    {
      ret = HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa1e:	e076      	b.n	800ab0e <UART_SetConfig+0x6ea>
    }
  }
  else
  {
    switch (clocksource)
 800aa20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa24:	2b08      	cmp	r3, #8
 800aa26:	d85c      	bhi.n	800aae2 <UART_SetConfig+0x6be>
 800aa28:	a201      	add	r2, pc, #4	; (adr r2, 800aa30 <UART_SetConfig+0x60c>)
 800aa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2e:	bf00      	nop
 800aa30:	0800aa55 	.word	0x0800aa55
 800aa34:	0800aa73 	.word	0x0800aa73
 800aa38:	0800aa91 	.word	0x0800aa91
 800aa3c:	0800aae3 	.word	0x0800aae3
 800aa40:	0800aaad 	.word	0x0800aaad
 800aa44:	0800aae3 	.word	0x0800aae3
 800aa48:	0800aae3 	.word	0x0800aae3
 800aa4c:	0800aae3 	.word	0x0800aae3
 800aa50:	0800aacb 	.word	0x0800aacb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa54:	f7fe fc1c 	bl	8009290 <HAL_RCC_GetPCLK1Freq>
 800aa58:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	085a      	lsrs	r2, r3, #1
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	441a      	add	r2, r3
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800aa70:	e03b      	b.n	800aaea <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa72:	f7fe fc23 	bl	80092bc <HAL_RCC_GetPCLK2Freq>
 800aa76:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	085a      	lsrs	r2, r3, #1
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	441a      	add	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800aa8e:	e02c      	b.n	800aaea <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	085b      	lsrs	r3, r3, #1
 800aa96:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800aa9a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	6852      	ldr	r2, [r2, #4]
 800aaa2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800aaaa:	e01e      	b.n	800aaea <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aaac:	f7fe fb58 	bl	8009160 <HAL_RCC_GetSysClockFreq>
 800aab0:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	085a      	lsrs	r2, r3, #1
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	441a      	add	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800aac8:	e00f      	b.n	800aaea <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	085b      	lsrs	r3, r3, #1
 800aad0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aadc:	b29b      	uxth	r3, r3
 800aade:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800aae0:	e003      	b.n	800aaea <UART_SetConfig+0x6c6>
      default:
        ret = HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800aae8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	2b0f      	cmp	r3, #15
 800aaee:	d90b      	bls.n	800ab08 <UART_SetConfig+0x6e4>
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf6:	d207      	bcs.n	800ab08 <UART_SetConfig+0x6e4>
    {
      huart->Instance->BRR = usartdiv;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aafe:	60da      	str	r2, [r3, #12]
 800ab00:	e005      	b.n	800ab0e <UART_SetConfig+0x6ea>
 800ab02:	bf00      	nop
 800ab04:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ab1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3730      	adds	r7, #48	; 0x30
 800ab22:	46bd      	mov	sp, r7
 800ab24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ab28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00a      	beq.n	800ab52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	430a      	orrs	r2, r1
 800ab50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	430a      	orrs	r2, r1
 800ab72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab78:	f003 0304 	and.w	r3, r3, #4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00a      	beq.n	800ab96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	430a      	orrs	r2, r1
 800ab94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	f003 0308 	and.w	r3, r3, #8
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	430a      	orrs	r2, r1
 800abb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	f003 0310 	and.w	r3, r3, #16
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abde:	f003 0320 	and.w	r3, r3, #32
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01a      	beq.n	800ac3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac26:	d10a      	bne.n	800ac3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	605a      	str	r2, [r3, #4]
  }
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ac7a:	f7fd fa75 	bl	8008168 <HAL_GetTick>
 800ac7e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0308 	and.w	r3, r3, #8
 800ac8a:	2b08      	cmp	r3, #8
 800ac8c:	d10e      	bne.n	800acac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f82a 	bl	800acf6 <UART_WaitOnFlagUntilTimeout>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e020      	b.n	800acee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0304 	and.w	r3, r3, #4
 800acb6:	2b04      	cmp	r3, #4
 800acb8:	d10e      	bne.n	800acd8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f814 	bl	800acf6 <UART_WaitOnFlagUntilTimeout>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d001      	beq.n	800acd8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e00a      	b.n	800acee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2220      	movs	r2, #32
 800acdc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2220      	movs	r2, #32
 800ace2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	60f8      	str	r0, [r7, #12]
 800acfe:	60b9      	str	r1, [r7, #8]
 800ad00:	603b      	str	r3, [r7, #0]
 800ad02:	4613      	mov	r3, r2
 800ad04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad06:	e05d      	b.n	800adc4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0e:	d059      	beq.n	800adc4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad10:	f7fd fa2a 	bl	8008168 <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	69ba      	ldr	r2, [r7, #24]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d302      	bcc.n	800ad26 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d11b      	bne.n	800ad5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ad34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	689a      	ldr	r2, [r3, #8]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f022 0201 	bic.w	r2, r2, #1
 800ad44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2220      	movs	r2, #32
 800ad4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2220      	movs	r2, #32
 800ad50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e042      	b.n	800ade4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 0304 	and.w	r3, r3, #4
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d02b      	beq.n	800adc4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad7a:	d123      	bne.n	800adc4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad84:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ad94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	689a      	ldr	r2, [r3, #8]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f022 0201 	bic.w	r2, r2, #1
 800ada4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2220      	movs	r2, #32
 800adaa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2220      	movs	r2, #32
 800adb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2220      	movs	r2, #32
 800adb6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e00f      	b.n	800ade4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	69da      	ldr	r2, [r3, #28]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	4013      	ands	r3, r2
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	429a      	cmp	r2, r3
 800add2:	bf0c      	ite	eq
 800add4:	2301      	moveq	r3, #1
 800add6:	2300      	movne	r3, #0
 800add8:	b2db      	uxtb	r3, r3
 800adda:	461a      	mov	r2, r3
 800addc:	79fb      	ldrb	r3, [r7, #7]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d092      	beq.n	800ad08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800adf6:	2300      	movs	r3, #0
 800adf8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800adfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800adfe:	2b84      	cmp	r3, #132	; 0x84
 800ae00:	d005      	beq.n	800ae0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ae02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	4413      	add	r3, r2
 800ae0a:	3303      	adds	r3, #3
 800ae0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ae20:	f001 f8e4 	bl	800bfec <vTaskStartScheduler>
  
  return osOK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ae2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae2c:	b089      	sub	sp, #36	; 0x24
 800ae2e:	af04      	add	r7, sp, #16
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	695b      	ldr	r3, [r3, #20]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d020      	beq.n	800ae7e <osThreadCreate+0x54>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d01c      	beq.n	800ae7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685c      	ldr	r4, [r3, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681d      	ldr	r5, [r3, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	691e      	ldr	r6, [r3, #16]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7ff ffc8 	bl	800adec <makeFreeRtosPriority>
 800ae5c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae66:	9202      	str	r2, [sp, #8]
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	9100      	str	r1, [sp, #0]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	4632      	mov	r2, r6
 800ae70:	4629      	mov	r1, r5
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 fee4 	bl	800bc40 <xTaskCreateStatic>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	e01c      	b.n	800aeb8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685c      	ldr	r4, [r3, #4]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae8a:	b29e      	uxth	r6, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff ffaa 	bl	800adec <makeFreeRtosPriority>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	f107 030c 	add.w	r3, r7, #12
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	9200      	str	r2, [sp, #0]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	4632      	mov	r2, r6
 800aea6:	4629      	mov	r1, r5
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 ff26 	bl	800bcfa <xTaskCreate>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d001      	beq.n	800aeb8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e000      	b.n	800aeba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aec2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <osDelay+0x16>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	e000      	b.n	800aeda <osDelay+0x18>
 800aed8:	2301      	movs	r3, #1
 800aeda:	4618      	mov	r0, r3
 800aedc:	f001 f852 	bl	800bf84 <vTaskDelay>
  
  return osOK;
 800aee0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aeea:	b480      	push	{r7}
 800aeec:	b083      	sub	sp, #12
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f103 0208 	add.w	r2, r3, #8
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f04f 32ff 	mov.w	r2, #4294967295
 800af02:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f103 0208 	add.w	r2, r3, #8
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f103 0208 	add.w	r2, r3, #8
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af1e:	bf00      	nop
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af2a:	b480      	push	{r7}
 800af2c:	b083      	sub	sp, #12
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	689a      	ldr	r2, [r3, #8]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	1c5a      	adds	r2, r3, #1
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	601a      	str	r2, [r3, #0]
}
 800af80:	bf00      	nop
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa2:	d103      	bne.n	800afac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	60fb      	str	r3, [r7, #12]
 800afaa:	e00c      	b.n	800afc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3308      	adds	r3, #8
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	e002      	b.n	800afba <vListInsert+0x2e>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	60fb      	str	r3, [r7, #12]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d2f6      	bcs.n	800afb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	1c5a      	adds	r2, r3, #1
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	601a      	str	r2, [r3, #0]
}
 800aff2:	bf00      	nop
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800affe:	b480      	push	{r7}
 800b000:	b085      	sub	sp, #20
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	6892      	ldr	r2, [r2, #8]
 800b014:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	6852      	ldr	r2, [r2, #4]
 800b01e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	429a      	cmp	r2, r3
 800b028:	d103      	bne.n	800b032 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	689a      	ldr	r2, [r3, #8]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	1e5a      	subs	r2, r3, #1
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
	...

0800b054 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10a      	bne.n	800b07e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b07a:	bf00      	nop
 800b07c:	e7fe      	b.n	800b07c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b07e:	f001 ff69 	bl	800cf54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b08a:	68f9      	ldr	r1, [r7, #12]
 800b08c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b08e:	fb01 f303 	mul.w	r3, r1, r3
 800b092:	441a      	add	r2, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	68f9      	ldr	r1, [r7, #12]
 800b0b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0b4:	fb01 f303 	mul.w	r3, r1, r3
 800b0b8:	441a      	add	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	22ff      	movs	r2, #255	; 0xff
 800b0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	22ff      	movs	r2, #255	; 0xff
 800b0ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d114      	bne.n	800b0fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d01a      	beq.n	800b112 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3310      	adds	r3, #16
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f001 fa19 	bl	800c518 <xTaskRemoveFromEventList>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d012      	beq.n	800b112 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b0ec:	4b0c      	ldr	r3, [pc, #48]	; (800b120 <xQueueGenericReset+0xcc>)
 800b0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f2:	601a      	str	r2, [r3, #0]
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	e009      	b.n	800b112 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3310      	adds	r3, #16
 800b102:	4618      	mov	r0, r3
 800b104:	f7ff fef1 	bl	800aeea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3324      	adds	r3, #36	; 0x24
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7ff feec 	bl	800aeea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b112:	f001 ff4f 	bl	800cfb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b116:	2301      	movs	r3, #1
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	e000ed04 	.word	0xe000ed04

0800b124 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08a      	sub	sp, #40	; 0x28
 800b128:	af02      	add	r7, sp, #8
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	4613      	mov	r3, r2
 800b130:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10a      	bne.n	800b14e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	613b      	str	r3, [r7, #16]
}
 800b14a:	bf00      	nop
 800b14c:	e7fe      	b.n	800b14c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b154:	2300      	movs	r3, #0
 800b156:	61fb      	str	r3, [r7, #28]
 800b158:	e004      	b.n	800b164 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	fb02 f303 	mul.w	r3, r2, r3
 800b162:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	3350      	adds	r3, #80	; 0x50
 800b168:	4618      	mov	r0, r3
 800b16a:	f002 f815 	bl	800d198 <pvPortMalloc>
 800b16e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d011      	beq.n	800b19a <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	3350      	adds	r3, #80	; 0x50
 800b17e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b188:	79fa      	ldrb	r2, [r7, #7]
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	4613      	mov	r3, r2
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	68b9      	ldr	r1, [r7, #8]
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 f805 	bl	800b1a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b19a:	69bb      	ldr	r3, [r7, #24]
	}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3720      	adds	r7, #32
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d103      	bne.n	800b1c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	69ba      	ldr	r2, [r7, #24]
 800b1bc:	601a      	str	r2, [r3, #0]
 800b1be:	e002      	b.n	800b1c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	69b8      	ldr	r0, [r7, #24]
 800b1d6:	f7ff ff3d 	bl	800b054 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	78fa      	ldrb	r2, [r7, #3]
 800b1de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b1e2:	bf00      	nop
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b08e      	sub	sp, #56	; 0x38
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
 800b1f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <xQueueGenericSend+0x32>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b21a:	bf00      	nop
 800b21c:	e7fe      	b.n	800b21c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d103      	bne.n	800b22c <xQueueGenericSend+0x40>
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d101      	bne.n	800b230 <xQueueGenericSend+0x44>
 800b22c:	2301      	movs	r3, #1
 800b22e:	e000      	b.n	800b232 <xQueueGenericSend+0x46>
 800b230:	2300      	movs	r3, #0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10a      	bne.n	800b24c <xQueueGenericSend+0x60>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b248:	bf00      	nop
 800b24a:	e7fe      	b.n	800b24a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d103      	bne.n	800b25a <xQueueGenericSend+0x6e>
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b256:	2b01      	cmp	r3, #1
 800b258:	d101      	bne.n	800b25e <xQueueGenericSend+0x72>
 800b25a:	2301      	movs	r3, #1
 800b25c:	e000      	b.n	800b260 <xQueueGenericSend+0x74>
 800b25e:	2300      	movs	r3, #0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10a      	bne.n	800b27a <xQueueGenericSend+0x8e>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	623b      	str	r3, [r7, #32]
}
 800b276:	bf00      	nop
 800b278:	e7fe      	b.n	800b278 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b27a:	f001 fb09 	bl	800c890 <xTaskGetSchedulerState>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d102      	bne.n	800b28a <xQueueGenericSend+0x9e>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d101      	bne.n	800b28e <xQueueGenericSend+0xa2>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e000      	b.n	800b290 <xQueueGenericSend+0xa4>
 800b28e:	2300      	movs	r3, #0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10a      	bne.n	800b2aa <xQueueGenericSend+0xbe>
	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	f383 8811 	msr	BASEPRI, r3
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	61fb      	str	r3, [r7, #28]
}
 800b2a6:	bf00      	nop
 800b2a8:	e7fe      	b.n	800b2a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2aa:	f001 fe53 	bl	800cf54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d302      	bcc.n	800b2c0 <xQueueGenericSend+0xd4>
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d129      	bne.n	800b314 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	68b9      	ldr	r1, [r7, #8]
 800b2c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2c6:	f000 fbab 	bl	800ba20 <prvCopyDataToQueue>
 800b2ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d010      	beq.n	800b2f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	3324      	adds	r3, #36	; 0x24
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f001 f91d 	bl	800c518 <xTaskRemoveFromEventList>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d013      	beq.n	800b30c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b2e4:	4b3f      	ldr	r3, [pc, #252]	; (800b3e4 <xQueueGenericSend+0x1f8>)
 800b2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2ea:	601a      	str	r2, [r3, #0]
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	e00a      	b.n	800b30c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d007      	beq.n	800b30c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b2fc:	4b39      	ldr	r3, [pc, #228]	; (800b3e4 <xQueueGenericSend+0x1f8>)
 800b2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b30c:	f001 fe52 	bl	800cfb4 <vPortExitCritical>
				return pdPASS;
 800b310:	2301      	movs	r3, #1
 800b312:	e063      	b.n	800b3dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d103      	bne.n	800b322 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b31a:	f001 fe4b 	bl	800cfb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b31e:	2300      	movs	r3, #0
 800b320:	e05c      	b.n	800b3dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b324:	2b00      	cmp	r3, #0
 800b326:	d106      	bne.n	800b336 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b328:	f107 0314 	add.w	r3, r7, #20
 800b32c:	4618      	mov	r0, r3
 800b32e:	f001 f955 	bl	800c5dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b332:	2301      	movs	r3, #1
 800b334:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b336:	f001 fe3d 	bl	800cfb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b33a:	f000 feb9 	bl	800c0b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b33e:	f001 fe09 	bl	800cf54 <vPortEnterCritical>
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b348:	b25b      	sxtb	r3, r3
 800b34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34e:	d103      	bne.n	800b358 <xQueueGenericSend+0x16c>
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b35e:	b25b      	sxtb	r3, r3
 800b360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b364:	d103      	bne.n	800b36e <xQueueGenericSend+0x182>
 800b366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b36e:	f001 fe21 	bl	800cfb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b372:	1d3a      	adds	r2, r7, #4
 800b374:	f107 0314 	add.w	r3, r7, #20
 800b378:	4611      	mov	r1, r2
 800b37a:	4618      	mov	r0, r3
 800b37c:	f001 f944 	bl	800c608 <xTaskCheckForTimeOut>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d124      	bne.n	800b3d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b388:	f000 fc42 	bl	800bc10 <prvIsQueueFull>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d018      	beq.n	800b3c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	3310      	adds	r3, #16
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	4611      	mov	r1, r2
 800b39a:	4618      	mov	r0, r3
 800b39c:	f001 f898 	bl	800c4d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3a2:	f000 fbcd 	bl	800bb40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b3a6:	f000 fe91 	bl	800c0cc <xTaskResumeAll>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f47f af7c 	bne.w	800b2aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b3b2:	4b0c      	ldr	r3, [pc, #48]	; (800b3e4 <xQueueGenericSend+0x1f8>)
 800b3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	e772      	b.n	800b2aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b3c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3c6:	f000 fbbb 	bl	800bb40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3ca:	f000 fe7f 	bl	800c0cc <xTaskResumeAll>
 800b3ce:	e76c      	b.n	800b2aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3d2:	f000 fbb5 	bl	800bb40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3d6:	f000 fe79 	bl	800c0cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b3da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3738      	adds	r7, #56	; 0x38
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	e000ed04 	.word	0xe000ed04

0800b3e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08e      	sub	sp, #56	; 0x38
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10a      	bne.n	800b416 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b412:	bf00      	nop
 800b414:	e7fe      	b.n	800b414 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d103      	bne.n	800b424 <xQueueGenericSendFromISR+0x3c>
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <xQueueGenericSendFromISR+0x40>
 800b424:	2301      	movs	r3, #1
 800b426:	e000      	b.n	800b42a <xQueueGenericSendFromISR+0x42>
 800b428:	2300      	movs	r3, #0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10a      	bne.n	800b444 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	623b      	str	r3, [r7, #32]
}
 800b440:	bf00      	nop
 800b442:	e7fe      	b.n	800b442 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b02      	cmp	r3, #2
 800b448:	d103      	bne.n	800b452 <xQueueGenericSendFromISR+0x6a>
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d101      	bne.n	800b456 <xQueueGenericSendFromISR+0x6e>
 800b452:	2301      	movs	r3, #1
 800b454:	e000      	b.n	800b458 <xQueueGenericSendFromISR+0x70>
 800b456:	2300      	movs	r3, #0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10a      	bne.n	800b472 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	61fb      	str	r3, [r7, #28]
}
 800b46e:	bf00      	nop
 800b470:	e7fe      	b.n	800b470 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b472:	f001 fe51 	bl	800d118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b476:	f3ef 8211 	mrs	r2, BASEPRI
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	61ba      	str	r2, [r7, #24]
 800b48c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b48e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b490:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d302      	bcc.n	800b4a4 <xQueueGenericSendFromISR+0xbc>
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d12c      	bne.n	800b4fe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	68b9      	ldr	r1, [r7, #8]
 800b4b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4b4:	f000 fab4 	bl	800ba20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b4b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c0:	d112      	bne.n	800b4e8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d016      	beq.n	800b4f8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	3324      	adds	r3, #36	; 0x24
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f001 f822 	bl	800c518 <xTaskRemoveFromEventList>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00e      	beq.n	800b4f8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00b      	beq.n	800b4f8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	e007      	b.n	800b4f8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b4e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	b25a      	sxtb	r2, r3
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b4fc:	e001      	b.n	800b502 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	637b      	str	r3, [r7, #52]	; 0x34
 800b502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b504:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b50c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b510:	4618      	mov	r0, r3
 800b512:	3738      	adds	r7, #56	; 0x38
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08c      	sub	sp, #48	; 0x30
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b524:	2300      	movs	r3, #0
 800b526:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10a      	bne.n	800b548 <xQueueReceive+0x30>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	623b      	str	r3, [r7, #32]
}
 800b544:	bf00      	nop
 800b546:	e7fe      	b.n	800b546 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d103      	bne.n	800b556 <xQueueReceive+0x3e>
 800b54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <xQueueReceive+0x42>
 800b556:	2301      	movs	r3, #1
 800b558:	e000      	b.n	800b55c <xQueueReceive+0x44>
 800b55a:	2300      	movs	r3, #0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10a      	bne.n	800b576 <xQueueReceive+0x5e>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	61fb      	str	r3, [r7, #28]
}
 800b572:	bf00      	nop
 800b574:	e7fe      	b.n	800b574 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b576:	f001 f98b 	bl	800c890 <xTaskGetSchedulerState>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d102      	bne.n	800b586 <xQueueReceive+0x6e>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <xQueueReceive+0x72>
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <xQueueReceive+0x74>
 800b58a:	2300      	movs	r3, #0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10a      	bne.n	800b5a6 <xQueueReceive+0x8e>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	61bb      	str	r3, [r7, #24]
}
 800b5a2:	bf00      	nop
 800b5a4:	e7fe      	b.n	800b5a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5a6:	f001 fcd5 	bl	800cf54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d01f      	beq.n	800b5f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b5b6:	68b9      	ldr	r1, [r7, #8]
 800b5b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5ba:	f000 fa9b 	bl	800baf4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	1e5a      	subs	r2, r3, #1
 800b5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00f      	beq.n	800b5ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d0:	3310      	adds	r3, #16
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 ffa0 	bl	800c518 <xTaskRemoveFromEventList>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d007      	beq.n	800b5ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b5de:	4b3d      	ldr	r3, [pc, #244]	; (800b6d4 <xQueueReceive+0x1bc>)
 800b5e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b5ee:	f001 fce1 	bl	800cfb4 <vPortExitCritical>
				return pdPASS;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e069      	b.n	800b6ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d103      	bne.n	800b604 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5fc:	f001 fcda 	bl	800cfb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b600:	2300      	movs	r3, #0
 800b602:	e062      	b.n	800b6ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d106      	bne.n	800b618 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b60a:	f107 0310 	add.w	r3, r7, #16
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 ffe4 	bl	800c5dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b614:	2301      	movs	r3, #1
 800b616:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b618:	f001 fccc 	bl	800cfb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b61c:	f000 fd48 	bl	800c0b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b620:	f001 fc98 	bl	800cf54 <vPortEnterCritical>
 800b624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b62a:	b25b      	sxtb	r3, r3
 800b62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b630:	d103      	bne.n	800b63a <xQueueReceive+0x122>
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b640:	b25b      	sxtb	r3, r3
 800b642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b646:	d103      	bne.n	800b650 <xQueueReceive+0x138>
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b650:	f001 fcb0 	bl	800cfb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b654:	1d3a      	adds	r2, r7, #4
 800b656:	f107 0310 	add.w	r3, r7, #16
 800b65a:	4611      	mov	r1, r2
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 ffd3 	bl	800c608 <xTaskCheckForTimeOut>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d123      	bne.n	800b6b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b66a:	f000 fabb 	bl	800bbe4 <prvIsQueueEmpty>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d017      	beq.n	800b6a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b676:	3324      	adds	r3, #36	; 0x24
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	4611      	mov	r1, r2
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 ff27 	bl	800c4d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b684:	f000 fa5c 	bl	800bb40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b688:	f000 fd20 	bl	800c0cc <xTaskResumeAll>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d189      	bne.n	800b5a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b692:	4b10      	ldr	r3, [pc, #64]	; (800b6d4 <xQueueReceive+0x1bc>)
 800b694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	e780      	b.n	800b5a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6a6:	f000 fa4b 	bl	800bb40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6aa:	f000 fd0f 	bl	800c0cc <xTaskResumeAll>
 800b6ae:	e77a      	b.n	800b5a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6b2:	f000 fa45 	bl	800bb40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b6b6:	f000 fd09 	bl	800c0cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6bc:	f000 fa92 	bl	800bbe4 <prvIsQueueEmpty>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f43f af6f 	beq.w	800b5a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b6c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3730      	adds	r7, #48	; 0x30
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08e      	sub	sp, #56	; 0x38
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10a      	bne.n	800b70a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	623b      	str	r3, [r7, #32]
}
 800b706:	bf00      	nop
 800b708:	e7fe      	b.n	800b708 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00a      	beq.n	800b728 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	61fb      	str	r3, [r7, #28]
}
 800b724:	bf00      	nop
 800b726:	e7fe      	b.n	800b726 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b728:	f001 f8b2 	bl	800c890 <xTaskGetSchedulerState>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d102      	bne.n	800b738 <xQueueSemaphoreTake+0x60>
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d101      	bne.n	800b73c <xQueueSemaphoreTake+0x64>
 800b738:	2301      	movs	r3, #1
 800b73a:	e000      	b.n	800b73e <xQueueSemaphoreTake+0x66>
 800b73c:	2300      	movs	r3, #0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	61bb      	str	r3, [r7, #24]
}
 800b754:	bf00      	nop
 800b756:	e7fe      	b.n	800b756 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b758:	f001 fbfc 	bl	800cf54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b760:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	2b00      	cmp	r3, #0
 800b766:	d024      	beq.n	800b7b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	1e5a      	subs	r2, r3, #1
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d104      	bne.n	800b782 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b778:	f001 fa48 	bl	800cc0c <pvTaskIncrementMutexHeldCount>
 800b77c:	4602      	mov	r2, r0
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00f      	beq.n	800b7aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	3310      	adds	r3, #16
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fec2 	bl	800c518 <xTaskRemoveFromEventList>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d007      	beq.n	800b7aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b79a:	4b54      	ldr	r3, [pc, #336]	; (800b8ec <xQueueSemaphoreTake+0x214>)
 800b79c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a0:	601a      	str	r2, [r3, #0]
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b7aa:	f001 fc03 	bl	800cfb4 <vPortExitCritical>
				return pdPASS;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e097      	b.n	800b8e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d111      	bne.n	800b7dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00a      	beq.n	800b7d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	617b      	str	r3, [r7, #20]
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b7d4:	f001 fbee 	bl	800cfb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	e082      	b.n	800b8e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d106      	bne.n	800b7f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7e2:	f107 030c 	add.w	r3, r7, #12
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 fef8 	bl	800c5dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7f0:	f001 fbe0 	bl	800cfb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7f4:	f000 fc5c 	bl	800c0b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7f8:	f001 fbac 	bl	800cf54 <vPortEnterCritical>
 800b7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b802:	b25b      	sxtb	r3, r3
 800b804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b808:	d103      	bne.n	800b812 <xQueueSemaphoreTake+0x13a>
 800b80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b818:	b25b      	sxtb	r3, r3
 800b81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81e:	d103      	bne.n	800b828 <xQueueSemaphoreTake+0x150>
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	2200      	movs	r2, #0
 800b824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b828:	f001 fbc4 	bl	800cfb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b82c:	463a      	mov	r2, r7
 800b82e:	f107 030c 	add.w	r3, r7, #12
 800b832:	4611      	mov	r1, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f000 fee7 	bl	800c608 <xTaskCheckForTimeOut>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d132      	bne.n	800b8a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b842:	f000 f9cf 	bl	800bbe4 <prvIsQueueEmpty>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d026      	beq.n	800b89a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d109      	bne.n	800b868 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b854:	f001 fb7e 	bl	800cf54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f001 f835 	bl	800c8cc <xTaskPriorityInherit>
 800b862:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b864:	f001 fba6 	bl	800cfb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86a:	3324      	adds	r3, #36	; 0x24
 800b86c:	683a      	ldr	r2, [r7, #0]
 800b86e:	4611      	mov	r1, r2
 800b870:	4618      	mov	r0, r3
 800b872:	f000 fe2d 	bl	800c4d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b878:	f000 f962 	bl	800bb40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b87c:	f000 fc26 	bl	800c0cc <xTaskResumeAll>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	f47f af68 	bne.w	800b758 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b888:	4b18      	ldr	r3, [pc, #96]	; (800b8ec <xQueueSemaphoreTake+0x214>)
 800b88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	e75e      	b.n	800b758 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b89a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b89c:	f000 f950 	bl	800bb40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8a0:	f000 fc14 	bl	800c0cc <xTaskResumeAll>
 800b8a4:	e758      	b.n	800b758 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b8a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8a8:	f000 f94a 	bl	800bb40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8ac:	f000 fc0e 	bl	800c0cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8b2:	f000 f997 	bl	800bbe4 <prvIsQueueEmpty>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f43f af4d 	beq.w	800b758 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00d      	beq.n	800b8e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b8c4:	f001 fb46 	bl	800cf54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b8c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8ca:	f000 f891 	bl	800b9f0 <prvGetDisinheritPriorityAfterTimeout>
 800b8ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f001 f8fe 	bl	800cad8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b8dc:	f001 fb6a 	bl	800cfb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3738      	adds	r7, #56	; 0x38
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	e000ed04 	.word	0xe000ed04

0800b8f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b08e      	sub	sp, #56	; 0x38
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10a      	bne.n	800b91c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	623b      	str	r3, [r7, #32]
}
 800b918:	bf00      	nop
 800b91a:	e7fe      	b.n	800b91a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d103      	bne.n	800b92a <xQueueReceiveFromISR+0x3a>
 800b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <xQueueReceiveFromISR+0x3e>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e000      	b.n	800b930 <xQueueReceiveFromISR+0x40>
 800b92e:	2300      	movs	r3, #0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10a      	bne.n	800b94a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	61fb      	str	r3, [r7, #28]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b94a:	f001 fbe5 	bl	800d118 <vPortValidateInterruptPriority>
	__asm volatile
 800b94e:	f3ef 8211 	mrs	r2, BASEPRI
 800b952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	61ba      	str	r2, [r7, #24]
 800b964:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b966:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b968:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	2b00      	cmp	r3, #0
 800b974:	d02f      	beq.n	800b9d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b97c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b980:	68b9      	ldr	r1, [r7, #8]
 800b982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b984:	f000 f8b6 	bl	800baf4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	1e5a      	subs	r2, r3, #1
 800b98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b990:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b998:	d112      	bne.n	800b9c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d016      	beq.n	800b9d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a4:	3310      	adds	r3, #16
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 fdb6 	bl	800c518 <xTaskRemoveFromEventList>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00e      	beq.n	800b9d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00b      	beq.n	800b9d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	601a      	str	r2, [r3, #0]
 800b9be:	e007      	b.n	800b9d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	b25a      	sxtb	r2, r3
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d4:	e001      	b.n	800b9da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f383 8811 	msr	BASEPRI, r3
}
 800b9e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3738      	adds	r7, #56	; 0x38
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d006      	beq.n	800ba0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f1c3 0307 	rsb	r3, r3, #7
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	e001      	b.n	800ba12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ba12:	68fb      	ldr	r3, [r7, #12]
	}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3714      	adds	r7, #20
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10d      	bne.n	800ba5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d14d      	bne.n	800bae2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 ffbe 	bl	800c9cc <xTaskPriorityDisinherit>
 800ba50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	609a      	str	r2, [r3, #8]
 800ba58:	e043      	b.n	800bae2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d119      	bne.n	800ba94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6858      	ldr	r0, [r3, #4]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba68:	461a      	mov	r2, r3
 800ba6a:	68b9      	ldr	r1, [r7, #8]
 800ba6c:	f001 fd9e 	bl	800d5ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	685a      	ldr	r2, [r3, #4]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba78:	441a      	add	r2, r3
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d32b      	bcc.n	800bae2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	605a      	str	r2, [r3, #4]
 800ba92:	e026      	b.n	800bae2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	68d8      	ldr	r0, [r3, #12]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	68b9      	ldr	r1, [r7, #8]
 800baa0:	f001 fd84 	bl	800d5ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	68da      	ldr	r2, [r3, #12]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baac:	425b      	negs	r3, r3
 800baae:	441a      	add	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	68da      	ldr	r2, [r3, #12]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	429a      	cmp	r2, r3
 800babe:	d207      	bcs.n	800bad0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	689a      	ldr	r2, [r3, #8]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac8:	425b      	negs	r3, r3
 800baca:	441a      	add	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d105      	bne.n	800bae2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	3b01      	subs	r3, #1
 800bae0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	1c5a      	adds	r2, r3, #1
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800baea:	697b      	ldr	r3, [r7, #20]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d018      	beq.n	800bb38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	68da      	ldr	r2, [r3, #12]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0e:	441a      	add	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	68da      	ldr	r2, [r3, #12]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d303      	bcc.n	800bb28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	68d9      	ldr	r1, [r3, #12]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb30:	461a      	mov	r2, r3
 800bb32:	6838      	ldr	r0, [r7, #0]
 800bb34:	f001 fd3a 	bl	800d5ac <memcpy>
	}
}
 800bb38:	bf00      	nop
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb48:	f001 fa04 	bl	800cf54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb54:	e011      	b.n	800bb7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d012      	beq.n	800bb84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	3324      	adds	r3, #36	; 0x24
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 fcd8 	bl	800c518 <xTaskRemoveFromEventList>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb6e:	f000 fdad 	bl	800c6cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	3b01      	subs	r3, #1
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	dce9      	bgt.n	800bb56 <prvUnlockQueue+0x16>
 800bb82:	e000      	b.n	800bb86 <prvUnlockQueue+0x46>
					break;
 800bb84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	22ff      	movs	r2, #255	; 0xff
 800bb8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bb8e:	f001 fa11 	bl	800cfb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb92:	f001 f9df 	bl	800cf54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb9e:	e011      	b.n	800bbc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d012      	beq.n	800bbce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	3310      	adds	r3, #16
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 fcb3 	bl	800c518 <xTaskRemoveFromEventList>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bbb8:	f000 fd88 	bl	800c6cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bbbc:	7bbb      	ldrb	r3, [r7, #14]
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	dce9      	bgt.n	800bba0 <prvUnlockQueue+0x60>
 800bbcc:	e000      	b.n	800bbd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bbce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	22ff      	movs	r2, #255	; 0xff
 800bbd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bbd8:	f001 f9ec 	bl	800cfb4 <vPortExitCritical>
}
 800bbdc:	bf00      	nop
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbec:	f001 f9b2 	bl	800cf54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d102      	bne.n	800bbfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	e001      	b.n	800bc02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc02:	f001 f9d7 	bl	800cfb4 <vPortExitCritical>

	return xReturn;
 800bc06:	68fb      	ldr	r3, [r7, #12]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc18:	f001 f99c 	bl	800cf54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d102      	bne.n	800bc2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	e001      	b.n	800bc32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc32:	f001 f9bf 	bl	800cfb4 <vPortExitCritical>

	return xReturn;
 800bc36:	68fb      	ldr	r3, [r7, #12]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08e      	sub	sp, #56	; 0x38
 800bc44:	af04      	add	r7, sp, #16
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <xTaskCreateStatic+0x2a>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	623b      	str	r3, [r7, #32]
}
 800bc66:	bf00      	nop
 800bc68:	e7fe      	b.n	800bc68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10a      	bne.n	800bc86 <xTaskCreateStatic+0x46>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	61fb      	str	r3, [r7, #28]
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc86:	2360      	movs	r3, #96	; 0x60
 800bc88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	2b60      	cmp	r3, #96	; 0x60
 800bc8e:	d00a      	beq.n	800bca6 <xTaskCreateStatic+0x66>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	61bb      	str	r3, [r7, #24]
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bca6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d01e      	beq.n	800bcec <xTaskCreateStatic+0xac>
 800bcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01b      	beq.n	800bcec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	9303      	str	r3, [sp, #12]
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	9302      	str	r3, [sp, #8]
 800bcce:	f107 0314 	add.w	r3, r7, #20
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	68b9      	ldr	r1, [r7, #8]
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f000 f850 	bl	800bd84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bce6:	f000 f8df 	bl	800bea8 <prvAddNewTaskToReadyList>
 800bcea:	e001      	b.n	800bcf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bcec:	2300      	movs	r3, #0
 800bcee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bcf0:	697b      	ldr	r3, [r7, #20]
	}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3728      	adds	r7, #40	; 0x28
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b08c      	sub	sp, #48	; 0x30
 800bcfe:	af04      	add	r7, sp, #16
 800bd00:	60f8      	str	r0, [r7, #12]
 800bd02:	60b9      	str	r1, [r7, #8]
 800bd04:	603b      	str	r3, [r7, #0]
 800bd06:	4613      	mov	r3, r2
 800bd08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd0a:	88fb      	ldrh	r3, [r7, #6]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f001 fa42 	bl	800d198 <pvPortMalloc>
 800bd14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00e      	beq.n	800bd3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd1c:	2060      	movs	r0, #96	; 0x60
 800bd1e:	f001 fa3b 	bl	800d198 <pvPortMalloc>
 800bd22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	697a      	ldr	r2, [r7, #20]
 800bd2e:	631a      	str	r2, [r3, #48]	; 0x30
 800bd30:	e005      	b.n	800bd3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd32:	6978      	ldr	r0, [r7, #20]
 800bd34:	f001 fafa 	bl	800d32c <vPortFree>
 800bd38:	e001      	b.n	800bd3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d017      	beq.n	800bd74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd4c:	88fa      	ldrh	r2, [r7, #6]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	9303      	str	r3, [sp, #12]
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	9302      	str	r3, [sp, #8]
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	68b9      	ldr	r1, [r7, #8]
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f000 f80e 	bl	800bd84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd68:	69f8      	ldr	r0, [r7, #28]
 800bd6a:	f000 f89d 	bl	800bea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	61bb      	str	r3, [r7, #24]
 800bd72:	e002      	b.n	800bd7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd74:	f04f 33ff 	mov.w	r3, #4294967295
 800bd78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd7a:	69bb      	ldr	r3, [r7, #24]
	}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3720      	adds	r7, #32
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	607a      	str	r2, [r7, #4]
 800bd90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	21a5      	movs	r1, #165	; 0xa5
 800bd9e:	f001 fc13 	bl	800d5c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bdac:	3b01      	subs	r3, #1
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	4413      	add	r3, r2
 800bdb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	f023 0307 	bic.w	r3, r3, #7
 800bdba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	f003 0307 	and.w	r3, r3, #7
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00a      	beq.n	800bddc <prvInitialiseNewTask+0x58>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	617b      	str	r3, [r7, #20]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d01f      	beq.n	800be22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bde2:	2300      	movs	r3, #0
 800bde4:	61fb      	str	r3, [r7, #28]
 800bde6:	e012      	b.n	800be0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	4413      	add	r3, r2
 800bdee:	7819      	ldrb	r1, [r3, #0]
 800bdf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3334      	adds	r3, #52	; 0x34
 800bdf8:	460a      	mov	r2, r1
 800bdfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	4413      	add	r3, r2
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d006      	beq.n	800be16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	3301      	adds	r3, #1
 800be0c:	61fb      	str	r3, [r7, #28]
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	2b0f      	cmp	r3, #15
 800be12:	d9e9      	bls.n	800bde8 <prvInitialiseNewTask+0x64>
 800be14:	e000      	b.n	800be18 <prvInitialiseNewTask+0x94>
			{
				break;
 800be16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be20:	e003      	b.n	800be2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	2200      	movs	r2, #0
 800be26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2c:	2b06      	cmp	r3, #6
 800be2e:	d901      	bls.n	800be34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be30:	2306      	movs	r3, #6
 800be32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800be40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be42:	2200      	movs	r2, #0
 800be44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be48:	3304      	adds	r3, #4
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7ff f86d 	bl	800af2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	3318      	adds	r3, #24
 800be54:	4618      	mov	r0, r3
 800be56:	f7ff f868 	bl	800af2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	f1c3 0207 	rsb	r2, r3, #7
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800be70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be72:	2200      	movs	r2, #0
 800be74:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	2200      	movs	r2, #0
 800be7a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	68f9      	ldr	r1, [r7, #12]
 800be88:	69b8      	ldr	r0, [r7, #24]
 800be8a:	f000 ff39 	bl	800cd00 <pxPortInitialiseStack>
 800be8e:	4602      	mov	r2, r0
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be96:	2b00      	cmp	r3, #0
 800be98:	d002      	beq.n	800bea0 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bea0:	bf00      	nop
 800bea2:	3720      	adds	r7, #32
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800beb0:	f001 f850 	bl	800cf54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800beb4:	4b2c      	ldr	r3, [pc, #176]	; (800bf68 <prvAddNewTaskToReadyList+0xc0>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	3301      	adds	r3, #1
 800beba:	4a2b      	ldr	r2, [pc, #172]	; (800bf68 <prvAddNewTaskToReadyList+0xc0>)
 800bebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bebe:	4b2b      	ldr	r3, [pc, #172]	; (800bf6c <prvAddNewTaskToReadyList+0xc4>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d109      	bne.n	800beda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bec6:	4a29      	ldr	r2, [pc, #164]	; (800bf6c <prvAddNewTaskToReadyList+0xc4>)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800becc:	4b26      	ldr	r3, [pc, #152]	; (800bf68 <prvAddNewTaskToReadyList+0xc0>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d110      	bne.n	800bef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bed4:	f000 fc1e 	bl	800c714 <prvInitialiseTaskLists>
 800bed8:	e00d      	b.n	800bef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800beda:	4b25      	ldr	r3, [pc, #148]	; (800bf70 <prvAddNewTaskToReadyList+0xc8>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d109      	bne.n	800bef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bee2:	4b22      	ldr	r3, [pc, #136]	; (800bf6c <prvAddNewTaskToReadyList+0xc4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	429a      	cmp	r2, r3
 800beee:	d802      	bhi.n	800bef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bef0:	4a1e      	ldr	r2, [pc, #120]	; (800bf6c <prvAddNewTaskToReadyList+0xc4>)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bef6:	4b1f      	ldr	r3, [pc, #124]	; (800bf74 <prvAddNewTaskToReadyList+0xcc>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	3301      	adds	r3, #1
 800befc:	4a1d      	ldr	r2, [pc, #116]	; (800bf74 <prvAddNewTaskToReadyList+0xcc>)
 800befe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bf00:	4b1c      	ldr	r3, [pc, #112]	; (800bf74 <prvAddNewTaskToReadyList+0xcc>)
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	409a      	lsls	r2, r3
 800bf10:	4b19      	ldr	r3, [pc, #100]	; (800bf78 <prvAddNewTaskToReadyList+0xd0>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4313      	orrs	r3, r2
 800bf16:	4a18      	ldr	r2, [pc, #96]	; (800bf78 <prvAddNewTaskToReadyList+0xd0>)
 800bf18:	6013      	str	r3, [r2, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf1e:	4613      	mov	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4a15      	ldr	r2, [pc, #84]	; (800bf7c <prvAddNewTaskToReadyList+0xd4>)
 800bf28:	441a      	add	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4610      	mov	r0, r2
 800bf32:	f7ff f807 	bl	800af44 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf36:	f001 f83d 	bl	800cfb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf3a:	4b0d      	ldr	r3, [pc, #52]	; (800bf70 <prvAddNewTaskToReadyList+0xc8>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00e      	beq.n	800bf60 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf42:	4b0a      	ldr	r3, [pc, #40]	; (800bf6c <prvAddNewTaskToReadyList+0xc4>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d207      	bcs.n	800bf60 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf50:	4b0b      	ldr	r3, [pc, #44]	; (800bf80 <prvAddNewTaskToReadyList+0xd8>)
 800bf52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	20000fd0 	.word	0x20000fd0
 800bf6c:	20000ed0 	.word	0x20000ed0
 800bf70:	20000fdc 	.word	0x20000fdc
 800bf74:	20000fec 	.word	0x20000fec
 800bf78:	20000fd8 	.word	0x20000fd8
 800bf7c:	20000ed4 	.word	0x20000ed4
 800bf80:	e000ed04 	.word	0xe000ed04

0800bf84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d017      	beq.n	800bfc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bf96:	4b13      	ldr	r3, [pc, #76]	; (800bfe4 <vTaskDelay+0x60>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00a      	beq.n	800bfb4 <vTaskDelay+0x30>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	60bb      	str	r3, [r7, #8]
}
 800bfb0:	bf00      	nop
 800bfb2:	e7fe      	b.n	800bfb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bfb4:	f000 f87c 	bl	800c0b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bfb8:	2100      	movs	r1, #0
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 fe3a 	bl	800cc34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bfc0:	f000 f884 	bl	800c0cc <xTaskResumeAll>
 800bfc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d107      	bne.n	800bfdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bfcc:	4b06      	ldr	r3, [pc, #24]	; (800bfe8 <vTaskDelay+0x64>)
 800bfce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfdc:	bf00      	nop
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	20000ff8 	.word	0x20000ff8
 800bfe8:	e000ed04 	.word	0xe000ed04

0800bfec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08a      	sub	sp, #40	; 0x28
 800bff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bff2:	2300      	movs	r3, #0
 800bff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bffa:	463a      	mov	r2, r7
 800bffc:	1d39      	adds	r1, r7, #4
 800bffe:	f107 0308 	add.w	r3, r7, #8
 800c002:	4618      	mov	r0, r3
 800c004:	f7f4 fad8 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	9202      	str	r2, [sp, #8]
 800c010:	9301      	str	r3, [sp, #4]
 800c012:	2300      	movs	r3, #0
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	2300      	movs	r3, #0
 800c018:	460a      	mov	r2, r1
 800c01a:	491f      	ldr	r1, [pc, #124]	; (800c098 <vTaskStartScheduler+0xac>)
 800c01c:	481f      	ldr	r0, [pc, #124]	; (800c09c <vTaskStartScheduler+0xb0>)
 800c01e:	f7ff fe0f 	bl	800bc40 <xTaskCreateStatic>
 800c022:	4603      	mov	r3, r0
 800c024:	4a1e      	ldr	r2, [pc, #120]	; (800c0a0 <vTaskStartScheduler+0xb4>)
 800c026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c028:	4b1d      	ldr	r3, [pc, #116]	; (800c0a0 <vTaskStartScheduler+0xb4>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d002      	beq.n	800c036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c030:	2301      	movs	r3, #1
 800c032:	617b      	str	r3, [r7, #20]
 800c034:	e001      	b.n	800c03a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c036:	2300      	movs	r3, #0
 800c038:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d118      	bne.n	800c072 <vTaskStartScheduler+0x86>
	__asm volatile
 800c040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c044:	f383 8811 	msr	BASEPRI, r3
 800c048:	f3bf 8f6f 	isb	sy
 800c04c:	f3bf 8f4f 	dsb	sy
 800c050:	613b      	str	r3, [r7, #16]
}
 800c052:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c054:	4b13      	ldr	r3, [pc, #76]	; (800c0a4 <vTaskStartScheduler+0xb8>)
 800c056:	f04f 32ff 	mov.w	r2, #4294967295
 800c05a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c05c:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <vTaskStartScheduler+0xbc>)
 800c05e:	2201      	movs	r2, #1
 800c060:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c062:	4b12      	ldr	r3, [pc, #72]	; (800c0ac <vTaskStartScheduler+0xc0>)
 800c064:	2200      	movs	r2, #0
 800c066:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c068:	f7f4 fa96 	bl	8000598 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c06c:	f000 fed0 	bl	800ce10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c070:	e00e      	b.n	800c090 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c078:	d10a      	bne.n	800c090 <vTaskStartScheduler+0xa4>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	60fb      	str	r3, [r7, #12]
}
 800c08c:	bf00      	nop
 800c08e:	e7fe      	b.n	800c08e <vTaskStartScheduler+0xa2>
}
 800c090:	bf00      	nop
 800c092:	3718      	adds	r7, #24
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	0800f788 	.word	0x0800f788
 800c09c:	0800c6e5 	.word	0x0800c6e5
 800c0a0:	20000ff4 	.word	0x20000ff4
 800c0a4:	20000ff0 	.word	0x20000ff0
 800c0a8:	20000fdc 	.word	0x20000fdc
 800c0ac:	20000fd4 	.word	0x20000fd4

0800c0b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c0b4:	4b04      	ldr	r3, [pc, #16]	; (800c0c8 <vTaskSuspendAll+0x18>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	4a03      	ldr	r2, [pc, #12]	; (800c0c8 <vTaskSuspendAll+0x18>)
 800c0bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c0be:	bf00      	nop
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	20000ff8 	.word	0x20000ff8

0800c0cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c0da:	4b41      	ldr	r3, [pc, #260]	; (800c1e0 <xTaskResumeAll+0x114>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10a      	bne.n	800c0f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	603b      	str	r3, [r7, #0]
}
 800c0f4:	bf00      	nop
 800c0f6:	e7fe      	b.n	800c0f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0f8:	f000 ff2c 	bl	800cf54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c0fc:	4b38      	ldr	r3, [pc, #224]	; (800c1e0 <xTaskResumeAll+0x114>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3b01      	subs	r3, #1
 800c102:	4a37      	ldr	r2, [pc, #220]	; (800c1e0 <xTaskResumeAll+0x114>)
 800c104:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c106:	4b36      	ldr	r3, [pc, #216]	; (800c1e0 <xTaskResumeAll+0x114>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d161      	bne.n	800c1d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c10e:	4b35      	ldr	r3, [pc, #212]	; (800c1e4 <xTaskResumeAll+0x118>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d05d      	beq.n	800c1d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c116:	e02e      	b.n	800c176 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c118:	4b33      	ldr	r3, [pc, #204]	; (800c1e8 <xTaskResumeAll+0x11c>)
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3318      	adds	r3, #24
 800c124:	4618      	mov	r0, r3
 800c126:	f7fe ff6a 	bl	800affe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3304      	adds	r3, #4
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe ff65 	bl	800affe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c138:	2201      	movs	r2, #1
 800c13a:	409a      	lsls	r2, r3
 800c13c:	4b2b      	ldr	r3, [pc, #172]	; (800c1ec <xTaskResumeAll+0x120>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4313      	orrs	r3, r2
 800c142:	4a2a      	ldr	r2, [pc, #168]	; (800c1ec <xTaskResumeAll+0x120>)
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14a:	4613      	mov	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4a27      	ldr	r2, [pc, #156]	; (800c1f0 <xTaskResumeAll+0x124>)
 800c154:	441a      	add	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	3304      	adds	r3, #4
 800c15a:	4619      	mov	r1, r3
 800c15c:	4610      	mov	r0, r2
 800c15e:	f7fe fef1 	bl	800af44 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c166:	4b23      	ldr	r3, [pc, #140]	; (800c1f4 <xTaskResumeAll+0x128>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d302      	bcc.n	800c176 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c170:	4b21      	ldr	r3, [pc, #132]	; (800c1f8 <xTaskResumeAll+0x12c>)
 800c172:	2201      	movs	r2, #1
 800c174:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c176:	4b1c      	ldr	r3, [pc, #112]	; (800c1e8 <xTaskResumeAll+0x11c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1cc      	bne.n	800c118 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c184:	f000 fb64 	bl	800c850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c188:	4b1c      	ldr	r3, [pc, #112]	; (800c1fc <xTaskResumeAll+0x130>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d010      	beq.n	800c1b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c194:	f000 f846 	bl	800c224 <xTaskIncrementTick>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d002      	beq.n	800c1a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c19e:	4b16      	ldr	r3, [pc, #88]	; (800c1f8 <xTaskResumeAll+0x12c>)
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1f1      	bne.n	800c194 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c1b0:	4b12      	ldr	r3, [pc, #72]	; (800c1fc <xTaskResumeAll+0x130>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c1b6:	4b10      	ldr	r3, [pc, #64]	; (800c1f8 <xTaskResumeAll+0x12c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d009      	beq.n	800c1d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c1c2:	4b0f      	ldr	r3, [pc, #60]	; (800c200 <xTaskResumeAll+0x134>)
 800c1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1d2:	f000 feef 	bl	800cfb4 <vPortExitCritical>

	return xAlreadyYielded;
 800c1d6:	68bb      	ldr	r3, [r7, #8]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	20000ff8 	.word	0x20000ff8
 800c1e4:	20000fd0 	.word	0x20000fd0
 800c1e8:	20000f90 	.word	0x20000f90
 800c1ec:	20000fd8 	.word	0x20000fd8
 800c1f0:	20000ed4 	.word	0x20000ed4
 800c1f4:	20000ed0 	.word	0x20000ed0
 800c1f8:	20000fe4 	.word	0x20000fe4
 800c1fc:	20000fe0 	.word	0x20000fe0
 800c200:	e000ed04 	.word	0xe000ed04

0800c204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <xTaskGetTickCount+0x1c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c210:	687b      	ldr	r3, [r7, #4]
}
 800c212:	4618      	mov	r0, r3
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	20000fd4 	.word	0x20000fd4

0800c224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c22a:	2300      	movs	r3, #0
 800c22c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c22e:	4b4e      	ldr	r3, [pc, #312]	; (800c368 <xTaskIncrementTick+0x144>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	f040 8088 	bne.w	800c348 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c238:	4b4c      	ldr	r3, [pc, #304]	; (800c36c <xTaskIncrementTick+0x148>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3301      	adds	r3, #1
 800c23e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c240:	4a4a      	ldr	r2, [pc, #296]	; (800c36c <xTaskIncrementTick+0x148>)
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d120      	bne.n	800c28e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c24c:	4b48      	ldr	r3, [pc, #288]	; (800c370 <xTaskIncrementTick+0x14c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00a      	beq.n	800c26c <xTaskIncrementTick+0x48>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	603b      	str	r3, [r7, #0]
}
 800c268:	bf00      	nop
 800c26a:	e7fe      	b.n	800c26a <xTaskIncrementTick+0x46>
 800c26c:	4b40      	ldr	r3, [pc, #256]	; (800c370 <xTaskIncrementTick+0x14c>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	4b40      	ldr	r3, [pc, #256]	; (800c374 <xTaskIncrementTick+0x150>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a3e      	ldr	r2, [pc, #248]	; (800c370 <xTaskIncrementTick+0x14c>)
 800c278:	6013      	str	r3, [r2, #0]
 800c27a:	4a3e      	ldr	r2, [pc, #248]	; (800c374 <xTaskIncrementTick+0x150>)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	4b3d      	ldr	r3, [pc, #244]	; (800c378 <xTaskIncrementTick+0x154>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3301      	adds	r3, #1
 800c286:	4a3c      	ldr	r2, [pc, #240]	; (800c378 <xTaskIncrementTick+0x154>)
 800c288:	6013      	str	r3, [r2, #0]
 800c28a:	f000 fae1 	bl	800c850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c28e:	4b3b      	ldr	r3, [pc, #236]	; (800c37c <xTaskIncrementTick+0x158>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	693a      	ldr	r2, [r7, #16]
 800c294:	429a      	cmp	r2, r3
 800c296:	d348      	bcc.n	800c32a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c298:	4b35      	ldr	r3, [pc, #212]	; (800c370 <xTaskIncrementTick+0x14c>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d104      	bne.n	800c2ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2a2:	4b36      	ldr	r3, [pc, #216]	; (800c37c <xTaskIncrementTick+0x158>)
 800c2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a8:	601a      	str	r2, [r3, #0]
					break;
 800c2aa:	e03e      	b.n	800c32a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ac:	4b30      	ldr	r3, [pc, #192]	; (800c370 <xTaskIncrementTick+0x14c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d203      	bcs.n	800c2cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c2c4:	4a2d      	ldr	r2, [pc, #180]	; (800c37c <xTaskIncrementTick+0x158>)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c2ca:	e02e      	b.n	800c32a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fe fe94 	bl	800affe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d004      	beq.n	800c2e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	3318      	adds	r3, #24
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe fe8b 	bl	800affe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	409a      	lsls	r2, r3
 800c2f0:	4b23      	ldr	r3, [pc, #140]	; (800c380 <xTaskIncrementTick+0x15c>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	4a22      	ldr	r2, [pc, #136]	; (800c380 <xTaskIncrementTick+0x15c>)
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fe:	4613      	mov	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4a1f      	ldr	r2, [pc, #124]	; (800c384 <xTaskIncrementTick+0x160>)
 800c308:	441a      	add	r2, r3
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	3304      	adds	r3, #4
 800c30e:	4619      	mov	r1, r3
 800c310:	4610      	mov	r0, r2
 800c312:	f7fe fe17 	bl	800af44 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c31a:	4b1b      	ldr	r3, [pc, #108]	; (800c388 <xTaskIncrementTick+0x164>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c320:	429a      	cmp	r2, r3
 800c322:	d3b9      	bcc.n	800c298 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c324:	2301      	movs	r3, #1
 800c326:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c328:	e7b6      	b.n	800c298 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c32a:	4b17      	ldr	r3, [pc, #92]	; (800c388 <xTaskIncrementTick+0x164>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c330:	4914      	ldr	r1, [pc, #80]	; (800c384 <xTaskIncrementTick+0x160>)
 800c332:	4613      	mov	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	4413      	add	r3, r2
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	440b      	add	r3, r1
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d907      	bls.n	800c352 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800c342:	2301      	movs	r3, #1
 800c344:	617b      	str	r3, [r7, #20]
 800c346:	e004      	b.n	800c352 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c348:	4b10      	ldr	r3, [pc, #64]	; (800c38c <xTaskIncrementTick+0x168>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	3301      	adds	r3, #1
 800c34e:	4a0f      	ldr	r2, [pc, #60]	; (800c38c <xTaskIncrementTick+0x168>)
 800c350:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c352:	4b0f      	ldr	r3, [pc, #60]	; (800c390 <xTaskIncrementTick+0x16c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800c35a:	2301      	movs	r3, #1
 800c35c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c35e:	697b      	ldr	r3, [r7, #20]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3718      	adds	r7, #24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	20000ff8 	.word	0x20000ff8
 800c36c:	20000fd4 	.word	0x20000fd4
 800c370:	20000f88 	.word	0x20000f88
 800c374:	20000f8c 	.word	0x20000f8c
 800c378:	20000fe8 	.word	0x20000fe8
 800c37c:	20000ff0 	.word	0x20000ff0
 800c380:	20000fd8 	.word	0x20000fd8
 800c384:	20000ed4 	.word	0x20000ed4
 800c388:	20000ed0 	.word	0x20000ed0
 800c38c:	20000fe0 	.word	0x20000fe0
 800c390:	20000fe4 	.word	0x20000fe4

0800c394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b088      	sub	sp, #32
 800c398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c39a:	4b46      	ldr	r3, [pc, #280]	; (800c4b4 <vTaskSwitchContext+0x120>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c3a2:	4b45      	ldr	r3, [pc, #276]	; (800c4b8 <vTaskSwitchContext+0x124>)
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c3a8:	e07f      	b.n	800c4aa <vTaskSwitchContext+0x116>
		xYieldPending = pdFALSE;
 800c3aa:	4b43      	ldr	r3, [pc, #268]	; (800c4b8 <vTaskSwitchContext+0x124>)
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c3b0:	f7f4 f8f9 	bl	80005a6 <getRunTimeCounterValue>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	4a41      	ldr	r2, [pc, #260]	; (800c4bc <vTaskSwitchContext+0x128>)
 800c3b8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c3ba:	4b40      	ldr	r3, [pc, #256]	; (800c4bc <vTaskSwitchContext+0x128>)
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	4b40      	ldr	r3, [pc, #256]	; (800c4c0 <vTaskSwitchContext+0x12c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d909      	bls.n	800c3da <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c3c6:	4b3f      	ldr	r3, [pc, #252]	; (800c4c4 <vTaskSwitchContext+0x130>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c3cc:	4a3b      	ldr	r2, [pc, #236]	; (800c4bc <vTaskSwitchContext+0x128>)
 800c3ce:	6810      	ldr	r0, [r2, #0]
 800c3d0:	4a3b      	ldr	r2, [pc, #236]	; (800c4c0 <vTaskSwitchContext+0x12c>)
 800c3d2:	6812      	ldr	r2, [r2, #0]
 800c3d4:	1a82      	subs	r2, r0, r2
 800c3d6:	440a      	add	r2, r1
 800c3d8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c3da:	4b38      	ldr	r3, [pc, #224]	; (800c4bc <vTaskSwitchContext+0x128>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a38      	ldr	r2, [pc, #224]	; (800c4c0 <vTaskSwitchContext+0x12c>)
 800c3e0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c3e2:	4b38      	ldr	r3, [pc, #224]	; (800c4c4 <vTaskSwitchContext+0x130>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e8:	61fb      	str	r3, [r7, #28]
 800c3ea:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c3ee:	61bb      	str	r3, [r7, #24]
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	69ba      	ldr	r2, [r7, #24]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d111      	bne.n	800c41e <vTaskSwitchContext+0x8a>
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	69ba      	ldr	r2, [r7, #24]
 800c402:	429a      	cmp	r2, r3
 800c404:	d10b      	bne.n	800c41e <vTaskSwitchContext+0x8a>
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	3308      	adds	r3, #8
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	69ba      	ldr	r2, [r7, #24]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d105      	bne.n	800c41e <vTaskSwitchContext+0x8a>
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	330c      	adds	r3, #12
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	69ba      	ldr	r2, [r7, #24]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d008      	beq.n	800c430 <vTaskSwitchContext+0x9c>
 800c41e:	4b29      	ldr	r3, [pc, #164]	; (800c4c4 <vTaskSwitchContext+0x130>)
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	4b28      	ldr	r3, [pc, #160]	; (800c4c4 <vTaskSwitchContext+0x130>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3334      	adds	r3, #52	; 0x34
 800c428:	4619      	mov	r1, r3
 800c42a:	4610      	mov	r0, r2
 800c42c:	f7f4 fb5e 	bl	8000aec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c430:	4b25      	ldr	r3, [pc, #148]	; (800c4c8 <vTaskSwitchContext+0x134>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	fab3 f383 	clz	r3, r3
 800c43c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c43e:	7afb      	ldrb	r3, [r7, #11]
 800c440:	f1c3 031f 	rsb	r3, r3, #31
 800c444:	617b      	str	r3, [r7, #20]
 800c446:	4921      	ldr	r1, [pc, #132]	; (800c4cc <vTaskSwitchContext+0x138>)
 800c448:	697a      	ldr	r2, [r7, #20]
 800c44a:	4613      	mov	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	440b      	add	r3, r1
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10a      	bne.n	800c470 <vTaskSwitchContext+0xdc>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	607b      	str	r3, [r7, #4]
}
 800c46c:	bf00      	nop
 800c46e:	e7fe      	b.n	800c46e <vTaskSwitchContext+0xda>
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	4613      	mov	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4a14      	ldr	r2, [pc, #80]	; (800c4cc <vTaskSwitchContext+0x138>)
 800c47c:	4413      	add	r3, r2
 800c47e:	613b      	str	r3, [r7, #16]
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	605a      	str	r2, [r3, #4]
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	685a      	ldr	r2, [r3, #4]
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	3308      	adds	r3, #8
 800c492:	429a      	cmp	r2, r3
 800c494:	d104      	bne.n	800c4a0 <vTaskSwitchContext+0x10c>
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	605a      	str	r2, [r3, #4]
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	4a07      	ldr	r2, [pc, #28]	; (800c4c4 <vTaskSwitchContext+0x130>)
 800c4a8:	6013      	str	r3, [r2, #0]
}
 800c4aa:	bf00      	nop
 800c4ac:	3720      	adds	r7, #32
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20000ff8 	.word	0x20000ff8
 800c4b8:	20000fe4 	.word	0x20000fe4
 800c4bc:	20001000 	.word	0x20001000
 800c4c0:	20000ffc 	.word	0x20000ffc
 800c4c4:	20000ed0 	.word	0x20000ed0
 800c4c8:	20000fd8 	.word	0x20000fd8
 800c4cc:	20000ed4 	.word	0x20000ed4

0800c4d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10a      	bne.n	800c4f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	60fb      	str	r3, [r7, #12]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4f6:	4b07      	ldr	r3, [pc, #28]	; (800c514 <vTaskPlaceOnEventList+0x44>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3318      	adds	r3, #24
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7fe fd44 	bl	800af8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c504:	2101      	movs	r1, #1
 800c506:	6838      	ldr	r0, [r7, #0]
 800c508:	f000 fb94 	bl	800cc34 <prvAddCurrentTaskToDelayedList>
}
 800c50c:	bf00      	nop
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	20000ed0 	.word	0x20000ed0

0800c518 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10a      	bne.n	800c544 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	60fb      	str	r3, [r7, #12]
}
 800c540:	bf00      	nop
 800c542:	e7fe      	b.n	800c542 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	3318      	adds	r3, #24
 800c548:	4618      	mov	r0, r3
 800c54a:	f7fe fd58 	bl	800affe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c54e:	4b1d      	ldr	r3, [pc, #116]	; (800c5c4 <xTaskRemoveFromEventList+0xac>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d11c      	bne.n	800c590 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	3304      	adds	r3, #4
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fe fd4f 	bl	800affe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c564:	2201      	movs	r2, #1
 800c566:	409a      	lsls	r2, r3
 800c568:	4b17      	ldr	r3, [pc, #92]	; (800c5c8 <xTaskRemoveFromEventList+0xb0>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	4a16      	ldr	r2, [pc, #88]	; (800c5c8 <xTaskRemoveFromEventList+0xb0>)
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c576:	4613      	mov	r3, r2
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	4413      	add	r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4a13      	ldr	r2, [pc, #76]	; (800c5cc <xTaskRemoveFromEventList+0xb4>)
 800c580:	441a      	add	r2, r3
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	3304      	adds	r3, #4
 800c586:	4619      	mov	r1, r3
 800c588:	4610      	mov	r0, r2
 800c58a:	f7fe fcdb 	bl	800af44 <vListInsertEnd>
 800c58e:	e005      	b.n	800c59c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	3318      	adds	r3, #24
 800c594:	4619      	mov	r1, r3
 800c596:	480e      	ldr	r0, [pc, #56]	; (800c5d0 <xTaskRemoveFromEventList+0xb8>)
 800c598:	f7fe fcd4 	bl	800af44 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a0:	4b0c      	ldr	r3, [pc, #48]	; (800c5d4 <xTaskRemoveFromEventList+0xbc>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d905      	bls.n	800c5b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c5ae:	4b0a      	ldr	r3, [pc, #40]	; (800c5d8 <xTaskRemoveFromEventList+0xc0>)
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	e001      	b.n	800c5ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c5ba:	697b      	ldr	r3, [r7, #20]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3718      	adds	r7, #24
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20000ff8 	.word	0x20000ff8
 800c5c8:	20000fd8 	.word	0x20000fd8
 800c5cc:	20000ed4 	.word	0x20000ed4
 800c5d0:	20000f90 	.word	0x20000f90
 800c5d4:	20000ed0 	.word	0x20000ed0
 800c5d8:	20000fe4 	.word	0x20000fe4

0800c5dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5e4:	4b06      	ldr	r3, [pc, #24]	; (800c600 <vTaskInternalSetTimeOutState+0x24>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5ec:	4b05      	ldr	r3, [pc, #20]	; (800c604 <vTaskInternalSetTimeOutState+0x28>)
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	605a      	str	r2, [r3, #4]
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	20000fe8 	.word	0x20000fe8
 800c604:	20000fd4 	.word	0x20000fd4

0800c608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10a      	bne.n	800c62e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	613b      	str	r3, [r7, #16]
}
 800c62a:	bf00      	nop
 800c62c:	e7fe      	b.n	800c62c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	60fb      	str	r3, [r7, #12]
}
 800c646:	bf00      	nop
 800c648:	e7fe      	b.n	800c648 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c64a:	f000 fc83 	bl	800cf54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c64e:	4b1d      	ldr	r3, [pc, #116]	; (800c6c4 <xTaskCheckForTimeOut+0xbc>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	69ba      	ldr	r2, [r7, #24]
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c666:	d102      	bne.n	800c66e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c668:	2300      	movs	r3, #0
 800c66a:	61fb      	str	r3, [r7, #28]
 800c66c:	e023      	b.n	800c6b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	4b15      	ldr	r3, [pc, #84]	; (800c6c8 <xTaskCheckForTimeOut+0xc0>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	429a      	cmp	r2, r3
 800c678:	d007      	beq.n	800c68a <xTaskCheckForTimeOut+0x82>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	69ba      	ldr	r2, [r7, #24]
 800c680:	429a      	cmp	r2, r3
 800c682:	d302      	bcc.n	800c68a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c684:	2301      	movs	r3, #1
 800c686:	61fb      	str	r3, [r7, #28]
 800c688:	e015      	b.n	800c6b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	697a      	ldr	r2, [r7, #20]
 800c690:	429a      	cmp	r2, r3
 800c692:	d20b      	bcs.n	800c6ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	1ad2      	subs	r2, r2, r3
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f7ff ff9b 	bl	800c5dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	61fb      	str	r3, [r7, #28]
 800c6aa:	e004      	b.n	800c6b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c6b6:	f000 fc7d 	bl	800cfb4 <vPortExitCritical>

	return xReturn;
 800c6ba:	69fb      	ldr	r3, [r7, #28]
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3720      	adds	r7, #32
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	20000fd4 	.word	0x20000fd4
 800c6c8:	20000fe8 	.word	0x20000fe8

0800c6cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c6d0:	4b03      	ldr	r3, [pc, #12]	; (800c6e0 <vTaskMissedYield+0x14>)
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	601a      	str	r2, [r3, #0]
}
 800c6d6:	bf00      	nop
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	20000fe4 	.word	0x20000fe4

0800c6e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6ec:	f000 f852 	bl	800c794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6f0:	4b06      	ldr	r3, [pc, #24]	; (800c70c <prvIdleTask+0x28>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d9f9      	bls.n	800c6ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6f8:	4b05      	ldr	r3, [pc, #20]	; (800c710 <prvIdleTask+0x2c>)
 800c6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6fe:	601a      	str	r2, [r3, #0]
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c708:	e7f0      	b.n	800c6ec <prvIdleTask+0x8>
 800c70a:	bf00      	nop
 800c70c:	20000ed4 	.word	0x20000ed4
 800c710:	e000ed04 	.word	0xe000ed04

0800c714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c71a:	2300      	movs	r3, #0
 800c71c:	607b      	str	r3, [r7, #4]
 800c71e:	e00c      	b.n	800c73a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	4613      	mov	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4a12      	ldr	r2, [pc, #72]	; (800c774 <prvInitialiseTaskLists+0x60>)
 800c72c:	4413      	add	r3, r2
 800c72e:	4618      	mov	r0, r3
 800c730:	f7fe fbdb 	bl	800aeea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3301      	adds	r3, #1
 800c738:	607b      	str	r3, [r7, #4]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2b06      	cmp	r3, #6
 800c73e:	d9ef      	bls.n	800c720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c740:	480d      	ldr	r0, [pc, #52]	; (800c778 <prvInitialiseTaskLists+0x64>)
 800c742:	f7fe fbd2 	bl	800aeea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c746:	480d      	ldr	r0, [pc, #52]	; (800c77c <prvInitialiseTaskLists+0x68>)
 800c748:	f7fe fbcf 	bl	800aeea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c74c:	480c      	ldr	r0, [pc, #48]	; (800c780 <prvInitialiseTaskLists+0x6c>)
 800c74e:	f7fe fbcc 	bl	800aeea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c752:	480c      	ldr	r0, [pc, #48]	; (800c784 <prvInitialiseTaskLists+0x70>)
 800c754:	f7fe fbc9 	bl	800aeea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c758:	480b      	ldr	r0, [pc, #44]	; (800c788 <prvInitialiseTaskLists+0x74>)
 800c75a:	f7fe fbc6 	bl	800aeea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c75e:	4b0b      	ldr	r3, [pc, #44]	; (800c78c <prvInitialiseTaskLists+0x78>)
 800c760:	4a05      	ldr	r2, [pc, #20]	; (800c778 <prvInitialiseTaskLists+0x64>)
 800c762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c764:	4b0a      	ldr	r3, [pc, #40]	; (800c790 <prvInitialiseTaskLists+0x7c>)
 800c766:	4a05      	ldr	r2, [pc, #20]	; (800c77c <prvInitialiseTaskLists+0x68>)
 800c768:	601a      	str	r2, [r3, #0]
}
 800c76a:	bf00      	nop
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	20000ed4 	.word	0x20000ed4
 800c778:	20000f60 	.word	0x20000f60
 800c77c:	20000f74 	.word	0x20000f74
 800c780:	20000f90 	.word	0x20000f90
 800c784:	20000fa4 	.word	0x20000fa4
 800c788:	20000fbc 	.word	0x20000fbc
 800c78c:	20000f88 	.word	0x20000f88
 800c790:	20000f8c 	.word	0x20000f8c

0800c794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c79a:	e019      	b.n	800c7d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c79c:	f000 fbda 	bl	800cf54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7a0:	4b10      	ldr	r3, [pc, #64]	; (800c7e4 <prvCheckTasksWaitingTermination+0x50>)
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	3304      	adds	r3, #4
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fe fc26 	bl	800affe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c7b2:	4b0d      	ldr	r3, [pc, #52]	; (800c7e8 <prvCheckTasksWaitingTermination+0x54>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	4a0b      	ldr	r2, [pc, #44]	; (800c7e8 <prvCheckTasksWaitingTermination+0x54>)
 800c7ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c7bc:	4b0b      	ldr	r3, [pc, #44]	; (800c7ec <prvCheckTasksWaitingTermination+0x58>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	4a0a      	ldr	r2, [pc, #40]	; (800c7ec <prvCheckTasksWaitingTermination+0x58>)
 800c7c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c7c6:	f000 fbf5 	bl	800cfb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 f810 	bl	800c7f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7d0:	4b06      	ldr	r3, [pc, #24]	; (800c7ec <prvCheckTasksWaitingTermination+0x58>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1e1      	bne.n	800c79c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	20000fa4 	.word	0x20000fa4
 800c7e8:	20000fd0 	.word	0x20000fd0
 800c7ec:	20000fb8 	.word	0x20000fb8

0800c7f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d108      	bne.n	800c814 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fd90 	bl	800d32c <vPortFree>
				vPortFree( pxTCB );
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fd8d 	bl	800d32c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c812:	e018      	b.n	800c846 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d103      	bne.n	800c826 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fd84 	bl	800d32c <vPortFree>
	}
 800c824:	e00f      	b.n	800c846 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d00a      	beq.n	800c846 <prvDeleteTCB+0x56>
	__asm volatile
 800c830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	60fb      	str	r3, [r7, #12]
}
 800c842:	bf00      	nop
 800c844:	e7fe      	b.n	800c844 <prvDeleteTCB+0x54>
	}
 800c846:	bf00      	nop
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
	...

0800c850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c856:	4b0c      	ldr	r3, [pc, #48]	; (800c888 <prvResetNextTaskUnblockTime+0x38>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d104      	bne.n	800c86a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c860:	4b0a      	ldr	r3, [pc, #40]	; (800c88c <prvResetNextTaskUnblockTime+0x3c>)
 800c862:	f04f 32ff 	mov.w	r2, #4294967295
 800c866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c868:	e008      	b.n	800c87c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c86a:	4b07      	ldr	r3, [pc, #28]	; (800c888 <prvResetNextTaskUnblockTime+0x38>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	4a04      	ldr	r2, [pc, #16]	; (800c88c <prvResetNextTaskUnblockTime+0x3c>)
 800c87a:	6013      	str	r3, [r2, #0]
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr
 800c888:	20000f88 	.word	0x20000f88
 800c88c:	20000ff0 	.word	0x20000ff0

0800c890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c896:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <xTaskGetSchedulerState+0x34>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d102      	bne.n	800c8a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	607b      	str	r3, [r7, #4]
 800c8a2:	e008      	b.n	800c8b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8a4:	4b08      	ldr	r3, [pc, #32]	; (800c8c8 <xTaskGetSchedulerState+0x38>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d102      	bne.n	800c8b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	607b      	str	r3, [r7, #4]
 800c8b0:	e001      	b.n	800c8b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c8b6:	687b      	ldr	r3, [r7, #4]
	}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	20000fdc 	.word	0x20000fdc
 800c8c8:	20000ff8 	.word	0x20000ff8

0800c8cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d069      	beq.n	800c9b6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e6:	4b36      	ldr	r3, [pc, #216]	; (800c9c0 <xTaskPriorityInherit+0xf4>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d259      	bcs.n	800c9a4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	db06      	blt.n	800c906 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8f8:	4b31      	ldr	r3, [pc, #196]	; (800c9c0 <xTaskPriorityInherit+0xf4>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fe:	f1c3 0207 	rsb	r2, r3, #7
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	6959      	ldr	r1, [r3, #20]
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c90e:	4613      	mov	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4413      	add	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4a2b      	ldr	r2, [pc, #172]	; (800c9c4 <xTaskPriorityInherit+0xf8>)
 800c918:	4413      	add	r3, r2
 800c91a:	4299      	cmp	r1, r3
 800c91c:	d13a      	bne.n	800c994 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	3304      	adds	r3, #4
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe fb6b 	bl	800affe <uxListRemove>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d115      	bne.n	800c95a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c932:	4924      	ldr	r1, [pc, #144]	; (800c9c4 <xTaskPriorityInherit+0xf8>)
 800c934:	4613      	mov	r3, r2
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	4413      	add	r3, r2
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	440b      	add	r3, r1
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10a      	bne.n	800c95a <xTaskPriorityInherit+0x8e>
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c948:	2201      	movs	r2, #1
 800c94a:	fa02 f303 	lsl.w	r3, r2, r3
 800c94e:	43da      	mvns	r2, r3
 800c950:	4b1d      	ldr	r3, [pc, #116]	; (800c9c8 <xTaskPriorityInherit+0xfc>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4013      	ands	r3, r2
 800c956:	4a1c      	ldr	r2, [pc, #112]	; (800c9c8 <xTaskPriorityInherit+0xfc>)
 800c958:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c95a:	4b19      	ldr	r3, [pc, #100]	; (800c9c0 <xTaskPriorityInherit+0xf4>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c968:	2201      	movs	r2, #1
 800c96a:	409a      	lsls	r2, r3
 800c96c:	4b16      	ldr	r3, [pc, #88]	; (800c9c8 <xTaskPriorityInherit+0xfc>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4313      	orrs	r3, r2
 800c972:	4a15      	ldr	r2, [pc, #84]	; (800c9c8 <xTaskPriorityInherit+0xfc>)
 800c974:	6013      	str	r3, [r2, #0]
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c97a:	4613      	mov	r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4413      	add	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4a10      	ldr	r2, [pc, #64]	; (800c9c4 <xTaskPriorityInherit+0xf8>)
 800c984:	441a      	add	r2, r3
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	3304      	adds	r3, #4
 800c98a:	4619      	mov	r1, r3
 800c98c:	4610      	mov	r0, r2
 800c98e:	f7fe fad9 	bl	800af44 <vListInsertEnd>
 800c992:	e004      	b.n	800c99e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c994:	4b0a      	ldr	r3, [pc, #40]	; (800c9c0 <xTaskPriorityInherit+0xf4>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	60fb      	str	r3, [r7, #12]
 800c9a2:	e008      	b.n	800c9b6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9a8:	4b05      	ldr	r3, [pc, #20]	; (800c9c0 <xTaskPriorityInherit+0xf4>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d201      	bcs.n	800c9b6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
	}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	20000ed0 	.word	0x20000ed0
 800c9c4:	20000ed4 	.word	0x20000ed4
 800c9c8:	20000fd8 	.word	0x20000fd8

0800c9cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b086      	sub	sp, #24
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d06e      	beq.n	800cac0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c9e2:	4b3a      	ldr	r3, [pc, #232]	; (800cacc <xTaskPriorityDisinherit+0x100>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	693a      	ldr	r2, [r7, #16]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d00a      	beq.n	800ca02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f0:	f383 8811 	msr	BASEPRI, r3
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	60fb      	str	r3, [r7, #12]
}
 800c9fe:	bf00      	nop
 800ca00:	e7fe      	b.n	800ca00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10a      	bne.n	800ca20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ca0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	60bb      	str	r3, [r7, #8]
}
 800ca1c:	bf00      	nop
 800ca1e:	e7fe      	b.n	800ca1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca24:	1e5a      	subs	r2, r3, #1
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d044      	beq.n	800cac0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d140      	bne.n	800cac0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	3304      	adds	r3, #4
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fe fadb 	bl	800affe <uxListRemove>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d115      	bne.n	800ca7a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca52:	491f      	ldr	r1, [pc, #124]	; (800cad0 <xTaskPriorityDisinherit+0x104>)
 800ca54:	4613      	mov	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10a      	bne.n	800ca7a <xTaskPriorityDisinherit+0xae>
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca68:	2201      	movs	r2, #1
 800ca6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca6e:	43da      	mvns	r2, r3
 800ca70:	4b18      	ldr	r3, [pc, #96]	; (800cad4 <xTaskPriorityDisinherit+0x108>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4013      	ands	r3, r2
 800ca76:	4a17      	ldr	r2, [pc, #92]	; (800cad4 <xTaskPriorityDisinherit+0x108>)
 800ca78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca86:	f1c3 0207 	rsb	r2, r3, #7
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca92:	2201      	movs	r2, #1
 800ca94:	409a      	lsls	r2, r3
 800ca96:	4b0f      	ldr	r3, [pc, #60]	; (800cad4 <xTaskPriorityDisinherit+0x108>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	4a0d      	ldr	r2, [pc, #52]	; (800cad4 <xTaskPriorityDisinherit+0x108>)
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa4:	4613      	mov	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4a08      	ldr	r2, [pc, #32]	; (800cad0 <xTaskPriorityDisinherit+0x104>)
 800caae:	441a      	add	r2, r3
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	3304      	adds	r3, #4
 800cab4:	4619      	mov	r1, r3
 800cab6:	4610      	mov	r0, r2
 800cab8:	f7fe fa44 	bl	800af44 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cabc:	2301      	movs	r3, #1
 800cabe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cac0:	697b      	ldr	r3, [r7, #20]
	}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3718      	adds	r7, #24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20000ed0 	.word	0x20000ed0
 800cad0:	20000ed4 	.word	0x20000ed4
 800cad4:	20000fd8 	.word	0x20000fd8

0800cad8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cae6:	2301      	movs	r3, #1
 800cae8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	f000 8083 	beq.w	800cbf8 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d10a      	bne.n	800cb10 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	60fb      	str	r3, [r7, #12]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb14:	683a      	ldr	r2, [r7, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d902      	bls.n	800cb20 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	61fb      	str	r3, [r7, #28]
 800cb1e:	e002      	b.n	800cb26 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb24:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2a:	69fa      	ldr	r2, [r7, #28]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d063      	beq.n	800cbf8 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb34:	697a      	ldr	r2, [r7, #20]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d15e      	bne.n	800cbf8 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cb3a:	4b31      	ldr	r3, [pc, #196]	; (800cc00 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	69ba      	ldr	r2, [r7, #24]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d10a      	bne.n	800cb5a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	60bb      	str	r3, [r7, #8]
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	69fa      	ldr	r2, [r7, #28]
 800cb64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	699b      	ldr	r3, [r3, #24]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	db04      	blt.n	800cb78 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	f1c3 0207 	rsb	r2, r3, #7
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	6959      	ldr	r1, [r3, #20]
 800cb7c:	693a      	ldr	r2, [r7, #16]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4a1f      	ldr	r2, [pc, #124]	; (800cc04 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800cb88:	4413      	add	r3, r2
 800cb8a:	4299      	cmp	r1, r3
 800cb8c:	d134      	bne.n	800cbf8 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	3304      	adds	r3, #4
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fe fa33 	bl	800affe <uxListRemove>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d115      	bne.n	800cbca <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba2:	4918      	ldr	r1, [pc, #96]	; (800cc04 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800cba4:	4613      	mov	r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	4413      	add	r3, r2
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	440b      	add	r3, r1
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10a      	bne.n	800cbca <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb8:	2201      	movs	r2, #1
 800cbba:	fa02 f303 	lsl.w	r3, r2, r3
 800cbbe:	43da      	mvns	r2, r3
 800cbc0:	4b11      	ldr	r3, [pc, #68]	; (800cc08 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	4a10      	ldr	r2, [pc, #64]	; (800cc08 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cbc8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbce:	2201      	movs	r2, #1
 800cbd0:	409a      	lsls	r2, r3
 800cbd2:	4b0d      	ldr	r3, [pc, #52]	; (800cc08 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	4a0b      	ldr	r2, [pc, #44]	; (800cc08 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4a06      	ldr	r2, [pc, #24]	; (800cc04 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800cbea:	441a      	add	r2, r3
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	f7fe f9a6 	bl	800af44 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbf8:	bf00      	nop
 800cbfa:	3720      	adds	r7, #32
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	20000ed0 	.word	0x20000ed0
 800cc04:	20000ed4 	.word	0x20000ed4
 800cc08:	20000fd8 	.word	0x20000fd8

0800cc0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cc0c:	b480      	push	{r7}
 800cc0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cc10:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d004      	beq.n	800cc22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cc18:	4b05      	ldr	r3, [pc, #20]	; (800cc30 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc1e:	3201      	adds	r2, #1
 800cc20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800cc22:	4b03      	ldr	r3, [pc, #12]	; (800cc30 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc24:	681b      	ldr	r3, [r3, #0]
	}
 800cc26:	4618      	mov	r0, r3
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr
 800cc30:	20000ed0 	.word	0x20000ed0

0800cc34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc3e:	4b29      	ldr	r3, [pc, #164]	; (800cce4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc44:	4b28      	ldr	r3, [pc, #160]	; (800cce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	3304      	adds	r3, #4
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fe f9d7 	bl	800affe <uxListRemove>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10b      	bne.n	800cc6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cc56:	4b24      	ldr	r3, [pc, #144]	; (800cce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc62:	43da      	mvns	r2, r3
 800cc64:	4b21      	ldr	r3, [pc, #132]	; (800ccec <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4013      	ands	r3, r2
 800cc6a:	4a20      	ldr	r2, [pc, #128]	; (800ccec <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc74:	d10a      	bne.n	800cc8c <prvAddCurrentTaskToDelayedList+0x58>
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d007      	beq.n	800cc8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc7c:	4b1a      	ldr	r3, [pc, #104]	; (800cce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3304      	adds	r3, #4
 800cc82:	4619      	mov	r1, r3
 800cc84:	481a      	ldr	r0, [pc, #104]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cc86:	f7fe f95d 	bl	800af44 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc8a:	e026      	b.n	800ccda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4413      	add	r3, r2
 800cc92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc94:	4b14      	ldr	r3, [pc, #80]	; (800cce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d209      	bcs.n	800ccb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cca4:	4b13      	ldr	r3, [pc, #76]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	4b0f      	ldr	r3, [pc, #60]	; (800cce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3304      	adds	r3, #4
 800ccae:	4619      	mov	r1, r3
 800ccb0:	4610      	mov	r0, r2
 800ccb2:	f7fe f96b 	bl	800af8c <vListInsert>
}
 800ccb6:	e010      	b.n	800ccda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccb8:	4b0f      	ldr	r3, [pc, #60]	; (800ccf8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	4b0a      	ldr	r3, [pc, #40]	; (800cce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	f7fe f961 	bl	800af8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ccca:	4b0c      	ldr	r3, [pc, #48]	; (800ccfc <prvAddCurrentTaskToDelayedList+0xc8>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d202      	bcs.n	800ccda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ccd4:	4a09      	ldr	r2, [pc, #36]	; (800ccfc <prvAddCurrentTaskToDelayedList+0xc8>)
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	6013      	str	r3, [r2, #0]
}
 800ccda:	bf00      	nop
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	20000fd4 	.word	0x20000fd4
 800cce8:	20000ed0 	.word	0x20000ed0
 800ccec:	20000fd8 	.word	0x20000fd8
 800ccf0:	20000fbc 	.word	0x20000fbc
 800ccf4:	20000f8c 	.word	0x20000f8c
 800ccf8:	20000f88 	.word	0x20000f88
 800ccfc:	20000ff0 	.word	0x20000ff0

0800cd00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	3b04      	subs	r3, #4
 800cd10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	3b04      	subs	r3, #4
 800cd1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	f023 0201 	bic.w	r2, r3, #1
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	3b04      	subs	r3, #4
 800cd2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd30:	4a0c      	ldr	r2, [pc, #48]	; (800cd64 <pxPortInitialiseStack+0x64>)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	3b14      	subs	r3, #20
 800cd3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	3b04      	subs	r3, #4
 800cd46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f06f 0202 	mvn.w	r2, #2
 800cd4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	3b20      	subs	r3, #32
 800cd54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd56:	68fb      	ldr	r3, [r7, #12]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr
 800cd64:	0800cd69 	.word	0x0800cd69

0800cd68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd72:	4b12      	ldr	r3, [pc, #72]	; (800cdbc <prvTaskExitError+0x54>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7a:	d00a      	beq.n	800cd92 <prvTaskExitError+0x2a>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	60fb      	str	r3, [r7, #12]
}
 800cd8e:	bf00      	nop
 800cd90:	e7fe      	b.n	800cd90 <prvTaskExitError+0x28>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	60bb      	str	r3, [r7, #8]
}
 800cda4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cda6:	bf00      	nop
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d0fc      	beq.n	800cda8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cdae:	bf00      	nop
 800cdb0:	bf00      	nop
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	2000000c 	.word	0x2000000c

0800cdc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cdc0:	4b07      	ldr	r3, [pc, #28]	; (800cde0 <pxCurrentTCBConst2>)
 800cdc2:	6819      	ldr	r1, [r3, #0]
 800cdc4:	6808      	ldr	r0, [r1, #0]
 800cdc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdca:	f380 8809 	msr	PSP, r0
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f04f 0000 	mov.w	r0, #0
 800cdd6:	f380 8811 	msr	BASEPRI, r0
 800cdda:	4770      	bx	lr
 800cddc:	f3af 8000 	nop.w

0800cde0 <pxCurrentTCBConst2>:
 800cde0:	20000ed0 	.word	0x20000ed0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop

0800cde8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cde8:	4808      	ldr	r0, [pc, #32]	; (800ce0c <prvPortStartFirstTask+0x24>)
 800cdea:	6800      	ldr	r0, [r0, #0]
 800cdec:	6800      	ldr	r0, [r0, #0]
 800cdee:	f380 8808 	msr	MSP, r0
 800cdf2:	f04f 0000 	mov.w	r0, #0
 800cdf6:	f380 8814 	msr	CONTROL, r0
 800cdfa:	b662      	cpsie	i
 800cdfc:	b661      	cpsie	f
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	df00      	svc	0
 800ce08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce0a:	bf00      	nop
 800ce0c:	e000ed08 	.word	0xe000ed08

0800ce10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce16:	4b46      	ldr	r3, [pc, #280]	; (800cf30 <xPortStartScheduler+0x120>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a46      	ldr	r2, [pc, #280]	; (800cf34 <xPortStartScheduler+0x124>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d10a      	bne.n	800ce36 <xPortStartScheduler+0x26>
	__asm volatile
 800ce20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	613b      	str	r3, [r7, #16]
}
 800ce32:	bf00      	nop
 800ce34:	e7fe      	b.n	800ce34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce36:	4b3e      	ldr	r3, [pc, #248]	; (800cf30 <xPortStartScheduler+0x120>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a3f      	ldr	r2, [pc, #252]	; (800cf38 <xPortStartScheduler+0x128>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d10a      	bne.n	800ce56 <xPortStartScheduler+0x46>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	60fb      	str	r3, [r7, #12]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce56:	4b39      	ldr	r3, [pc, #228]	; (800cf3c <xPortStartScheduler+0x12c>)
 800ce58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	22ff      	movs	r2, #255	; 0xff
 800ce66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce70:	78fb      	ldrb	r3, [r7, #3]
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	4b31      	ldr	r3, [pc, #196]	; (800cf40 <xPortStartScheduler+0x130>)
 800ce7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce7e:	4b31      	ldr	r3, [pc, #196]	; (800cf44 <xPortStartScheduler+0x134>)
 800ce80:	2207      	movs	r2, #7
 800ce82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce84:	e009      	b.n	800ce9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ce86:	4b2f      	ldr	r3, [pc, #188]	; (800cf44 <xPortStartScheduler+0x134>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	4a2d      	ldr	r2, [pc, #180]	; (800cf44 <xPortStartScheduler+0x134>)
 800ce8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce90:	78fb      	ldrb	r3, [r7, #3]
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce9a:	78fb      	ldrb	r3, [r7, #3]
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cea2:	2b80      	cmp	r3, #128	; 0x80
 800cea4:	d0ef      	beq.n	800ce86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cea6:	4b27      	ldr	r3, [pc, #156]	; (800cf44 <xPortStartScheduler+0x134>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f1c3 0307 	rsb	r3, r3, #7
 800ceae:	2b04      	cmp	r3, #4
 800ceb0:	d00a      	beq.n	800cec8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	60bb      	str	r3, [r7, #8]
}
 800cec4:	bf00      	nop
 800cec6:	e7fe      	b.n	800cec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cec8:	4b1e      	ldr	r3, [pc, #120]	; (800cf44 <xPortStartScheduler+0x134>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	021b      	lsls	r3, r3, #8
 800cece:	4a1d      	ldr	r2, [pc, #116]	; (800cf44 <xPortStartScheduler+0x134>)
 800ced0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ced2:	4b1c      	ldr	r3, [pc, #112]	; (800cf44 <xPortStartScheduler+0x134>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ceda:	4a1a      	ldr	r2, [pc, #104]	; (800cf44 <xPortStartScheduler+0x134>)
 800cedc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	b2da      	uxtb	r2, r3
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cee6:	4b18      	ldr	r3, [pc, #96]	; (800cf48 <xPortStartScheduler+0x138>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a17      	ldr	r2, [pc, #92]	; (800cf48 <xPortStartScheduler+0x138>)
 800ceec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cef2:	4b15      	ldr	r3, [pc, #84]	; (800cf48 <xPortStartScheduler+0x138>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a14      	ldr	r2, [pc, #80]	; (800cf48 <xPortStartScheduler+0x138>)
 800cef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cefc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cefe:	f000 f8dd 	bl	800d0bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf02:	4b12      	ldr	r3, [pc, #72]	; (800cf4c <xPortStartScheduler+0x13c>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf08:	f000 f8fc 	bl	800d104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf0c:	4b10      	ldr	r3, [pc, #64]	; (800cf50 <xPortStartScheduler+0x140>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a0f      	ldr	r2, [pc, #60]	; (800cf50 <xPortStartScheduler+0x140>)
 800cf12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cf16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf18:	f7ff ff66 	bl	800cde8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf1c:	f7ff fa3a 	bl	800c394 <vTaskSwitchContext>
	prvTaskExitError();
 800cf20:	f7ff ff22 	bl	800cd68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3718      	adds	r7, #24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	e000ed00 	.word	0xe000ed00
 800cf34:	410fc271 	.word	0x410fc271
 800cf38:	410fc270 	.word	0x410fc270
 800cf3c:	e000e400 	.word	0xe000e400
 800cf40:	20001004 	.word	0x20001004
 800cf44:	20001008 	.word	0x20001008
 800cf48:	e000ed20 	.word	0xe000ed20
 800cf4c:	2000000c 	.word	0x2000000c
 800cf50:	e000ef34 	.word	0xe000ef34

0800cf54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
	__asm volatile
 800cf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	607b      	str	r3, [r7, #4]
}
 800cf6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf6e:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <vPortEnterCritical+0x58>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	3301      	adds	r3, #1
 800cf74:	4a0d      	ldr	r2, [pc, #52]	; (800cfac <vPortEnterCritical+0x58>)
 800cf76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf78:	4b0c      	ldr	r3, [pc, #48]	; (800cfac <vPortEnterCritical+0x58>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d10f      	bne.n	800cfa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf80:	4b0b      	ldr	r3, [pc, #44]	; (800cfb0 <vPortEnterCritical+0x5c>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00a      	beq.n	800cfa0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	603b      	str	r3, [r7, #0]
}
 800cf9c:	bf00      	nop
 800cf9e:	e7fe      	b.n	800cf9e <vPortEnterCritical+0x4a>
	}
}
 800cfa0:	bf00      	nop
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr
 800cfac:	2000000c 	.word	0x2000000c
 800cfb0:	e000ed04 	.word	0xe000ed04

0800cfb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cfba:	4b12      	ldr	r3, [pc, #72]	; (800d004 <vPortExitCritical+0x50>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d10a      	bne.n	800cfd8 <vPortExitCritical+0x24>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	607b      	str	r3, [r7, #4]
}
 800cfd4:	bf00      	nop
 800cfd6:	e7fe      	b.n	800cfd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cfd8:	4b0a      	ldr	r3, [pc, #40]	; (800d004 <vPortExitCritical+0x50>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	4a09      	ldr	r2, [pc, #36]	; (800d004 <vPortExitCritical+0x50>)
 800cfe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cfe2:	4b08      	ldr	r3, [pc, #32]	; (800d004 <vPortExitCritical+0x50>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d105      	bne.n	800cff6 <vPortExitCritical+0x42>
 800cfea:	2300      	movs	r3, #0
 800cfec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	f383 8811 	msr	BASEPRI, r3
}
 800cff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cff6:	bf00      	nop
 800cff8:	370c      	adds	r7, #12
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	2000000c 	.word	0x2000000c
	...

0800d010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d010:	f3ef 8009 	mrs	r0, PSP
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	4b15      	ldr	r3, [pc, #84]	; (800d070 <pxCurrentTCBConst>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	f01e 0f10 	tst.w	lr, #16
 800d020:	bf08      	it	eq
 800d022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02a:	6010      	str	r0, [r2, #0]
 800d02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d030:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d034:	f380 8811 	msr	BASEPRI, r0
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	f3bf 8f6f 	isb	sy
 800d040:	f7ff f9a8 	bl	800c394 <vTaskSwitchContext>
 800d044:	f04f 0000 	mov.w	r0, #0
 800d048:	f380 8811 	msr	BASEPRI, r0
 800d04c:	bc09      	pop	{r0, r3}
 800d04e:	6819      	ldr	r1, [r3, #0]
 800d050:	6808      	ldr	r0, [r1, #0]
 800d052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d056:	f01e 0f10 	tst.w	lr, #16
 800d05a:	bf08      	it	eq
 800d05c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d060:	f380 8809 	msr	PSP, r0
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	f3af 8000 	nop.w

0800d070 <pxCurrentTCBConst>:
 800d070:	20000ed0 	.word	0x20000ed0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d074:	bf00      	nop
 800d076:	bf00      	nop

0800d078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	607b      	str	r3, [r7, #4]
}
 800d090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d092:	f7ff f8c7 	bl	800c224 <xTaskIncrementTick>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d003      	beq.n	800d0a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d09c:	4b06      	ldr	r3, [pc, #24]	; (800d0b8 <SysTick_Handler+0x40>)
 800d09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0a2:	601a      	str	r2, [r3, #0]
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	f383 8811 	msr	BASEPRI, r3
}
 800d0ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d0b0:	bf00      	nop
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	e000ed04 	.word	0xe000ed04

0800d0bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d0bc:	b480      	push	{r7}
 800d0be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d0c0:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <vPortSetupTimerInterrupt+0x34>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d0c6:	4b0b      	ldr	r3, [pc, #44]	; (800d0f4 <vPortSetupTimerInterrupt+0x38>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <vPortSetupTimerInterrupt+0x3c>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a0a      	ldr	r2, [pc, #40]	; (800d0fc <vPortSetupTimerInterrupt+0x40>)
 800d0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d6:	099b      	lsrs	r3, r3, #6
 800d0d8:	4a09      	ldr	r2, [pc, #36]	; (800d100 <vPortSetupTimerInterrupt+0x44>)
 800d0da:	3b01      	subs	r3, #1
 800d0dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d0de:	4b04      	ldr	r3, [pc, #16]	; (800d0f0 <vPortSetupTimerInterrupt+0x34>)
 800d0e0:	2207      	movs	r2, #7
 800d0e2:	601a      	str	r2, [r3, #0]
}
 800d0e4:	bf00      	nop
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	e000e010 	.word	0xe000e010
 800d0f4:	e000e018 	.word	0xe000e018
 800d0f8:	20000000 	.word	0x20000000
 800d0fc:	10624dd3 	.word	0x10624dd3
 800d100:	e000e014 	.word	0xe000e014

0800d104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d114 <vPortEnableVFP+0x10>
 800d108:	6801      	ldr	r1, [r0, #0]
 800d10a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d10e:	6001      	str	r1, [r0, #0]
 800d110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d112:	bf00      	nop
 800d114:	e000ed88 	.word	0xe000ed88

0800d118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d118:	b480      	push	{r7}
 800d11a:	b085      	sub	sp, #20
 800d11c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d11e:	f3ef 8305 	mrs	r3, IPSR
 800d122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b0f      	cmp	r3, #15
 800d128:	d914      	bls.n	800d154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d12a:	4a17      	ldr	r2, [pc, #92]	; (800d188 <vPortValidateInterruptPriority+0x70>)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	4413      	add	r3, r2
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d134:	4b15      	ldr	r3, [pc, #84]	; (800d18c <vPortValidateInterruptPriority+0x74>)
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	7afa      	ldrb	r2, [r7, #11]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d20a      	bcs.n	800d154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	607b      	str	r3, [r7, #4]
}
 800d150:	bf00      	nop
 800d152:	e7fe      	b.n	800d152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d154:	4b0e      	ldr	r3, [pc, #56]	; (800d190 <vPortValidateInterruptPriority+0x78>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d15c:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <vPortValidateInterruptPriority+0x7c>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	429a      	cmp	r2, r3
 800d162:	d90a      	bls.n	800d17a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	603b      	str	r3, [r7, #0]
}
 800d176:	bf00      	nop
 800d178:	e7fe      	b.n	800d178 <vPortValidateInterruptPriority+0x60>
	}
 800d17a:	bf00      	nop
 800d17c:	3714      	adds	r7, #20
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	e000e3f0 	.word	0xe000e3f0
 800d18c:	20001004 	.word	0x20001004
 800d190:	e000ed0c 	.word	0xe000ed0c
 800d194:	20001008 	.word	0x20001008

0800d198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08a      	sub	sp, #40	; 0x28
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d1a4:	f7fe ff84 	bl	800c0b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d1a8:	4b5b      	ldr	r3, [pc, #364]	; (800d318 <pvPortMalloc+0x180>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d101      	bne.n	800d1b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d1b0:	f000 f916 	bl	800d3e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d1b4:	4b59      	ldr	r3, [pc, #356]	; (800d31c <pvPortMalloc+0x184>)
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f040 808e 	bne.w	800d2de <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d01d      	beq.n	800d204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d1c8:	2208      	movs	r2, #8
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f003 0307 	and.w	r3, r3, #7
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d014      	beq.n	800d204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f023 0307 	bic.w	r3, r3, #7
 800d1e0:	3308      	adds	r3, #8
 800d1e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f003 0307 	and.w	r3, r3, #7
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00a      	beq.n	800d204 <pvPortMalloc+0x6c>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	617b      	str	r3, [r7, #20]
}
 800d200:	bf00      	nop
 800d202:	e7fe      	b.n	800d202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d069      	beq.n	800d2de <pvPortMalloc+0x146>
 800d20a:	4b45      	ldr	r3, [pc, #276]	; (800d320 <pvPortMalloc+0x188>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	429a      	cmp	r2, r3
 800d212:	d864      	bhi.n	800d2de <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d214:	4b43      	ldr	r3, [pc, #268]	; (800d324 <pvPortMalloc+0x18c>)
 800d216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d218:	4b42      	ldr	r3, [pc, #264]	; (800d324 <pvPortMalloc+0x18c>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d21e:	e004      	b.n	800d22a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	429a      	cmp	r2, r3
 800d232:	d903      	bls.n	800d23c <pvPortMalloc+0xa4>
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d1f1      	bne.n	800d220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d23c:	4b36      	ldr	r3, [pc, #216]	; (800d318 <pvPortMalloc+0x180>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d242:	429a      	cmp	r2, r3
 800d244:	d04b      	beq.n	800d2de <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d246:	6a3b      	ldr	r3, [r7, #32]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2208      	movs	r2, #8
 800d24c:	4413      	add	r3, r2
 800d24e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	6a3b      	ldr	r3, [r7, #32]
 800d256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	1ad2      	subs	r2, r2, r3
 800d260:	2308      	movs	r3, #8
 800d262:	005b      	lsls	r3, r3, #1
 800d264:	429a      	cmp	r2, r3
 800d266:	d91f      	bls.n	800d2a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4413      	add	r3, r2
 800d26e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d270:	69bb      	ldr	r3, [r7, #24]
 800d272:	f003 0307 	and.w	r3, r3, #7
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00a      	beq.n	800d290 <pvPortMalloc+0xf8>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	613b      	str	r3, [r7, #16]
}
 800d28c:	bf00      	nop
 800d28e:	e7fe      	b.n	800d28e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	1ad2      	subs	r2, r2, r3
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d2a2:	69b8      	ldr	r0, [r7, #24]
 800d2a4:	f000 f8fe 	bl	800d4a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d2a8:	4b1d      	ldr	r3, [pc, #116]	; (800d320 <pvPortMalloc+0x188>)
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	4a1b      	ldr	r2, [pc, #108]	; (800d320 <pvPortMalloc+0x188>)
 800d2b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d2b6:	4b1a      	ldr	r3, [pc, #104]	; (800d320 <pvPortMalloc+0x188>)
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	4b1b      	ldr	r3, [pc, #108]	; (800d328 <pvPortMalloc+0x190>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d203      	bcs.n	800d2ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d2c2:	4b17      	ldr	r3, [pc, #92]	; (800d320 <pvPortMalloc+0x188>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a18      	ldr	r2, [pc, #96]	; (800d328 <pvPortMalloc+0x190>)
 800d2c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	4b13      	ldr	r3, [pc, #76]	; (800d31c <pvPortMalloc+0x184>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	431a      	orrs	r2, r3
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2da:	2200      	movs	r2, #0
 800d2dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d2de:	f7fe fef5 	bl	800c0cc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d101      	bne.n	800d2ec <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d2e8:	f7f3 fc0c 	bl	8000b04 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	f003 0307 	and.w	r3, r3, #7
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00a      	beq.n	800d30c <pvPortMalloc+0x174>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	60fb      	str	r3, [r7, #12]
}
 800d308:	bf00      	nop
 800d30a:	e7fe      	b.n	800d30a <pvPortMalloc+0x172>
	return pvReturn;
 800d30c:	69fb      	ldr	r3, [r7, #28]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3728      	adds	r7, #40	; 0x28
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	20008544 	.word	0x20008544
 800d31c:	20008550 	.word	0x20008550
 800d320:	20008548 	.word	0x20008548
 800d324:	2000853c 	.word	0x2000853c
 800d328:	2000854c 	.word	0x2000854c

0800d32c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d048      	beq.n	800d3d0 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d33e:	2308      	movs	r3, #8
 800d340:	425b      	negs	r3, r3
 800d342:	697a      	ldr	r2, [r7, #20]
 800d344:	4413      	add	r3, r2
 800d346:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	685a      	ldr	r2, [r3, #4]
 800d350:	4b21      	ldr	r3, [pc, #132]	; (800d3d8 <vPortFree+0xac>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4013      	ands	r3, r2
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10a      	bne.n	800d370 <vPortFree+0x44>
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	60fb      	str	r3, [r7, #12]
}
 800d36c:	bf00      	nop
 800d36e:	e7fe      	b.n	800d36e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00a      	beq.n	800d38e <vPortFree+0x62>
	__asm volatile
 800d378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	60bb      	str	r3, [r7, #8]
}
 800d38a:	bf00      	nop
 800d38c:	e7fe      	b.n	800d38c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	685a      	ldr	r2, [r3, #4]
 800d392:	4b11      	ldr	r3, [pc, #68]	; (800d3d8 <vPortFree+0xac>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4013      	ands	r3, r2
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d019      	beq.n	800d3d0 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d115      	bne.n	800d3d0 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	685a      	ldr	r2, [r3, #4]
 800d3a8:	4b0b      	ldr	r3, [pc, #44]	; (800d3d8 <vPortFree+0xac>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	43db      	mvns	r3, r3
 800d3ae:	401a      	ands	r2, r3
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d3b4:	f7fe fe7c 	bl	800c0b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	4b07      	ldr	r3, [pc, #28]	; (800d3dc <vPortFree+0xb0>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	4a06      	ldr	r2, [pc, #24]	; (800d3dc <vPortFree+0xb0>)
 800d3c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d3c6:	6938      	ldr	r0, [r7, #16]
 800d3c8:	f000 f86c 	bl	800d4a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d3cc:	f7fe fe7e 	bl	800c0cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d3d0:	bf00      	nop
 800d3d2:	3718      	adds	r7, #24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	20008550 	.word	0x20008550
 800d3dc:	20008548 	.word	0x20008548

0800d3e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d3e6:	f247 5330 	movw	r3, #30000	; 0x7530
 800d3ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d3ec:	4b27      	ldr	r3, [pc, #156]	; (800d48c <prvHeapInit+0xac>)
 800d3ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f003 0307 	and.w	r3, r3, #7
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00c      	beq.n	800d414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3307      	adds	r3, #7
 800d3fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f023 0307 	bic.w	r3, r3, #7
 800d406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	4a1f      	ldr	r2, [pc, #124]	; (800d48c <prvHeapInit+0xac>)
 800d410:	4413      	add	r3, r2
 800d412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d418:	4a1d      	ldr	r2, [pc, #116]	; (800d490 <prvHeapInit+0xb0>)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d41e:	4b1c      	ldr	r3, [pc, #112]	; (800d490 <prvHeapInit+0xb0>)
 800d420:	2200      	movs	r2, #0
 800d422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	68ba      	ldr	r2, [r7, #8]
 800d428:	4413      	add	r3, r2
 800d42a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d42c:	2208      	movs	r2, #8
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	1a9b      	subs	r3, r3, r2
 800d432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f023 0307 	bic.w	r3, r3, #7
 800d43a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	4a15      	ldr	r2, [pc, #84]	; (800d494 <prvHeapInit+0xb4>)
 800d440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d442:	4b14      	ldr	r3, [pc, #80]	; (800d494 <prvHeapInit+0xb4>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2200      	movs	r2, #0
 800d448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d44a:	4b12      	ldr	r3, [pc, #72]	; (800d494 <prvHeapInit+0xb4>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2200      	movs	r2, #0
 800d450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	1ad2      	subs	r2, r2, r3
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d460:	4b0c      	ldr	r3, [pc, #48]	; (800d494 <prvHeapInit+0xb4>)
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	4a0a      	ldr	r2, [pc, #40]	; (800d498 <prvHeapInit+0xb8>)
 800d46e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	4a09      	ldr	r2, [pc, #36]	; (800d49c <prvHeapInit+0xbc>)
 800d476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d478:	4b09      	ldr	r3, [pc, #36]	; (800d4a0 <prvHeapInit+0xc0>)
 800d47a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d47e:	601a      	str	r2, [r3, #0]
}
 800d480:	bf00      	nop
 800d482:	3714      	adds	r7, #20
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	2000100c 	.word	0x2000100c
 800d490:	2000853c 	.word	0x2000853c
 800d494:	20008544 	.word	0x20008544
 800d498:	2000854c 	.word	0x2000854c
 800d49c:	20008548 	.word	0x20008548
 800d4a0:	20008550 	.word	0x20008550

0800d4a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d4ac:	4b28      	ldr	r3, [pc, #160]	; (800d550 <prvInsertBlockIntoFreeList+0xac>)
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	e002      	b.n	800d4b8 <prvInsertBlockIntoFreeList+0x14>
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	60fb      	str	r3, [r7, #12]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d8f7      	bhi.n	800d4b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d108      	bne.n	800d4e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	441a      	add	r2, r3
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	68ba      	ldr	r2, [r7, #8]
 800d4f0:	441a      	add	r2, r3
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d118      	bne.n	800d52c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	4b15      	ldr	r3, [pc, #84]	; (800d554 <prvInsertBlockIntoFreeList+0xb0>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	429a      	cmp	r2, r3
 800d504:	d00d      	beq.n	800d522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	441a      	add	r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	601a      	str	r2, [r3, #0]
 800d520:	e008      	b.n	800d534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d522:	4b0c      	ldr	r3, [pc, #48]	; (800d554 <prvInsertBlockIntoFreeList+0xb0>)
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	601a      	str	r2, [r3, #0]
 800d52a:	e003      	b.n	800d534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d002      	beq.n	800d542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d542:	bf00      	nop
 800d544:	3714      	adds	r7, #20
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	2000853c 	.word	0x2000853c
 800d554:	20008544 	.word	0x20008544

0800d558 <__errno>:
 800d558:	4b01      	ldr	r3, [pc, #4]	; (800d560 <__errno+0x8>)
 800d55a:	6818      	ldr	r0, [r3, #0]
 800d55c:	4770      	bx	lr
 800d55e:	bf00      	nop
 800d560:	20000010 	.word	0x20000010

0800d564 <__libc_init_array>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	4d0d      	ldr	r5, [pc, #52]	; (800d59c <__libc_init_array+0x38>)
 800d568:	4c0d      	ldr	r4, [pc, #52]	; (800d5a0 <__libc_init_array+0x3c>)
 800d56a:	1b64      	subs	r4, r4, r5
 800d56c:	10a4      	asrs	r4, r4, #2
 800d56e:	2600      	movs	r6, #0
 800d570:	42a6      	cmp	r6, r4
 800d572:	d109      	bne.n	800d588 <__libc_init_array+0x24>
 800d574:	4d0b      	ldr	r5, [pc, #44]	; (800d5a4 <__libc_init_array+0x40>)
 800d576:	4c0c      	ldr	r4, [pc, #48]	; (800d5a8 <__libc_init_array+0x44>)
 800d578:	f001 fbfe 	bl	800ed78 <_init>
 800d57c:	1b64      	subs	r4, r4, r5
 800d57e:	10a4      	asrs	r4, r4, #2
 800d580:	2600      	movs	r6, #0
 800d582:	42a6      	cmp	r6, r4
 800d584:	d105      	bne.n	800d592 <__libc_init_array+0x2e>
 800d586:	bd70      	pop	{r4, r5, r6, pc}
 800d588:	f855 3b04 	ldr.w	r3, [r5], #4
 800d58c:	4798      	blx	r3
 800d58e:	3601      	adds	r6, #1
 800d590:	e7ee      	b.n	800d570 <__libc_init_array+0xc>
 800d592:	f855 3b04 	ldr.w	r3, [r5], #4
 800d596:	4798      	blx	r3
 800d598:	3601      	adds	r6, #1
 800d59a:	e7f2      	b.n	800d582 <__libc_init_array+0x1e>
 800d59c:	0800ff38 	.word	0x0800ff38
 800d5a0:	0800ff38 	.word	0x0800ff38
 800d5a4:	0800ff38 	.word	0x0800ff38
 800d5a8:	0800ff3c 	.word	0x0800ff3c

0800d5ac <memcpy>:
 800d5ac:	440a      	add	r2, r1
 800d5ae:	4291      	cmp	r1, r2
 800d5b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5b4:	d100      	bne.n	800d5b8 <memcpy+0xc>
 800d5b6:	4770      	bx	lr
 800d5b8:	b510      	push	{r4, lr}
 800d5ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5c2:	4291      	cmp	r1, r2
 800d5c4:	d1f9      	bne.n	800d5ba <memcpy+0xe>
 800d5c6:	bd10      	pop	{r4, pc}

0800d5c8 <memset>:
 800d5c8:	4402      	add	r2, r0
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d100      	bne.n	800d5d2 <memset+0xa>
 800d5d0:	4770      	bx	lr
 800d5d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d5d6:	e7f9      	b.n	800d5cc <memset+0x4>

0800d5d8 <iprintf>:
 800d5d8:	b40f      	push	{r0, r1, r2, r3}
 800d5da:	4b0a      	ldr	r3, [pc, #40]	; (800d604 <iprintf+0x2c>)
 800d5dc:	b513      	push	{r0, r1, r4, lr}
 800d5de:	681c      	ldr	r4, [r3, #0]
 800d5e0:	b124      	cbz	r4, 800d5ec <iprintf+0x14>
 800d5e2:	69a3      	ldr	r3, [r4, #24]
 800d5e4:	b913      	cbnz	r3, 800d5ec <iprintf+0x14>
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f000 fcbe 	bl	800df68 <__sinit>
 800d5ec:	ab05      	add	r3, sp, #20
 800d5ee:	9a04      	ldr	r2, [sp, #16]
 800d5f0:	68a1      	ldr	r1, [r4, #8]
 800d5f2:	9301      	str	r3, [sp, #4]
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f000 ffeb 	bl	800e5d0 <_vfiprintf_r>
 800d5fa:	b002      	add	sp, #8
 800d5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d600:	b004      	add	sp, #16
 800d602:	4770      	bx	lr
 800d604:	20000010 	.word	0x20000010

0800d608 <_puts_r>:
 800d608:	b570      	push	{r4, r5, r6, lr}
 800d60a:	460e      	mov	r6, r1
 800d60c:	4605      	mov	r5, r0
 800d60e:	b118      	cbz	r0, 800d618 <_puts_r+0x10>
 800d610:	6983      	ldr	r3, [r0, #24]
 800d612:	b90b      	cbnz	r3, 800d618 <_puts_r+0x10>
 800d614:	f000 fca8 	bl	800df68 <__sinit>
 800d618:	69ab      	ldr	r3, [r5, #24]
 800d61a:	68ac      	ldr	r4, [r5, #8]
 800d61c:	b913      	cbnz	r3, 800d624 <_puts_r+0x1c>
 800d61e:	4628      	mov	r0, r5
 800d620:	f000 fca2 	bl	800df68 <__sinit>
 800d624:	4b2c      	ldr	r3, [pc, #176]	; (800d6d8 <_puts_r+0xd0>)
 800d626:	429c      	cmp	r4, r3
 800d628:	d120      	bne.n	800d66c <_puts_r+0x64>
 800d62a:	686c      	ldr	r4, [r5, #4]
 800d62c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d62e:	07db      	lsls	r3, r3, #31
 800d630:	d405      	bmi.n	800d63e <_puts_r+0x36>
 800d632:	89a3      	ldrh	r3, [r4, #12]
 800d634:	0598      	lsls	r0, r3, #22
 800d636:	d402      	bmi.n	800d63e <_puts_r+0x36>
 800d638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d63a:	f000 fd33 	bl	800e0a4 <__retarget_lock_acquire_recursive>
 800d63e:	89a3      	ldrh	r3, [r4, #12]
 800d640:	0719      	lsls	r1, r3, #28
 800d642:	d51d      	bpl.n	800d680 <_puts_r+0x78>
 800d644:	6923      	ldr	r3, [r4, #16]
 800d646:	b1db      	cbz	r3, 800d680 <_puts_r+0x78>
 800d648:	3e01      	subs	r6, #1
 800d64a:	68a3      	ldr	r3, [r4, #8]
 800d64c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d650:	3b01      	subs	r3, #1
 800d652:	60a3      	str	r3, [r4, #8]
 800d654:	bb39      	cbnz	r1, 800d6a6 <_puts_r+0x9e>
 800d656:	2b00      	cmp	r3, #0
 800d658:	da38      	bge.n	800d6cc <_puts_r+0xc4>
 800d65a:	4622      	mov	r2, r4
 800d65c:	210a      	movs	r1, #10
 800d65e:	4628      	mov	r0, r5
 800d660:	f000 faa8 	bl	800dbb4 <__swbuf_r>
 800d664:	3001      	adds	r0, #1
 800d666:	d011      	beq.n	800d68c <_puts_r+0x84>
 800d668:	250a      	movs	r5, #10
 800d66a:	e011      	b.n	800d690 <_puts_r+0x88>
 800d66c:	4b1b      	ldr	r3, [pc, #108]	; (800d6dc <_puts_r+0xd4>)
 800d66e:	429c      	cmp	r4, r3
 800d670:	d101      	bne.n	800d676 <_puts_r+0x6e>
 800d672:	68ac      	ldr	r4, [r5, #8]
 800d674:	e7da      	b.n	800d62c <_puts_r+0x24>
 800d676:	4b1a      	ldr	r3, [pc, #104]	; (800d6e0 <_puts_r+0xd8>)
 800d678:	429c      	cmp	r4, r3
 800d67a:	bf08      	it	eq
 800d67c:	68ec      	ldreq	r4, [r5, #12]
 800d67e:	e7d5      	b.n	800d62c <_puts_r+0x24>
 800d680:	4621      	mov	r1, r4
 800d682:	4628      	mov	r0, r5
 800d684:	f000 fae8 	bl	800dc58 <__swsetup_r>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d0dd      	beq.n	800d648 <_puts_r+0x40>
 800d68c:	f04f 35ff 	mov.w	r5, #4294967295
 800d690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d692:	07da      	lsls	r2, r3, #31
 800d694:	d405      	bmi.n	800d6a2 <_puts_r+0x9a>
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	059b      	lsls	r3, r3, #22
 800d69a:	d402      	bmi.n	800d6a2 <_puts_r+0x9a>
 800d69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d69e:	f000 fd02 	bl	800e0a6 <__retarget_lock_release_recursive>
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	bd70      	pop	{r4, r5, r6, pc}
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	da04      	bge.n	800d6b4 <_puts_r+0xac>
 800d6aa:	69a2      	ldr	r2, [r4, #24]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	dc06      	bgt.n	800d6be <_puts_r+0xb6>
 800d6b0:	290a      	cmp	r1, #10
 800d6b2:	d004      	beq.n	800d6be <_puts_r+0xb6>
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	1c5a      	adds	r2, r3, #1
 800d6b8:	6022      	str	r2, [r4, #0]
 800d6ba:	7019      	strb	r1, [r3, #0]
 800d6bc:	e7c5      	b.n	800d64a <_puts_r+0x42>
 800d6be:	4622      	mov	r2, r4
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f000 fa77 	bl	800dbb4 <__swbuf_r>
 800d6c6:	3001      	adds	r0, #1
 800d6c8:	d1bf      	bne.n	800d64a <_puts_r+0x42>
 800d6ca:	e7df      	b.n	800d68c <_puts_r+0x84>
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	250a      	movs	r5, #10
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	6022      	str	r2, [r4, #0]
 800d6d4:	701d      	strb	r5, [r3, #0]
 800d6d6:	e7db      	b.n	800d690 <_puts_r+0x88>
 800d6d8:	0800febc 	.word	0x0800febc
 800d6dc:	0800fedc 	.word	0x0800fedc
 800d6e0:	0800fe9c 	.word	0x0800fe9c

0800d6e4 <puts>:
 800d6e4:	4b02      	ldr	r3, [pc, #8]	; (800d6f0 <puts+0xc>)
 800d6e6:	4601      	mov	r1, r0
 800d6e8:	6818      	ldr	r0, [r3, #0]
 800d6ea:	f7ff bf8d 	b.w	800d608 <_puts_r>
 800d6ee:	bf00      	nop
 800d6f0:	20000010 	.word	0x20000010

0800d6f4 <sniprintf>:
 800d6f4:	b40c      	push	{r2, r3}
 800d6f6:	b530      	push	{r4, r5, lr}
 800d6f8:	4b17      	ldr	r3, [pc, #92]	; (800d758 <sniprintf+0x64>)
 800d6fa:	1e0c      	subs	r4, r1, #0
 800d6fc:	681d      	ldr	r5, [r3, #0]
 800d6fe:	b09d      	sub	sp, #116	; 0x74
 800d700:	da08      	bge.n	800d714 <sniprintf+0x20>
 800d702:	238b      	movs	r3, #139	; 0x8b
 800d704:	602b      	str	r3, [r5, #0]
 800d706:	f04f 30ff 	mov.w	r0, #4294967295
 800d70a:	b01d      	add	sp, #116	; 0x74
 800d70c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d710:	b002      	add	sp, #8
 800d712:	4770      	bx	lr
 800d714:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d718:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d71c:	bf14      	ite	ne
 800d71e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d722:	4623      	moveq	r3, r4
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	9307      	str	r3, [sp, #28]
 800d728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d72c:	9002      	str	r0, [sp, #8]
 800d72e:	9006      	str	r0, [sp, #24]
 800d730:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d734:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d736:	ab21      	add	r3, sp, #132	; 0x84
 800d738:	a902      	add	r1, sp, #8
 800d73a:	4628      	mov	r0, r5
 800d73c:	9301      	str	r3, [sp, #4]
 800d73e:	f000 fe1d 	bl	800e37c <_svfiprintf_r>
 800d742:	1c43      	adds	r3, r0, #1
 800d744:	bfbc      	itt	lt
 800d746:	238b      	movlt	r3, #139	; 0x8b
 800d748:	602b      	strlt	r3, [r5, #0]
 800d74a:	2c00      	cmp	r4, #0
 800d74c:	d0dd      	beq.n	800d70a <sniprintf+0x16>
 800d74e:	9b02      	ldr	r3, [sp, #8]
 800d750:	2200      	movs	r2, #0
 800d752:	701a      	strb	r2, [r3, #0]
 800d754:	e7d9      	b.n	800d70a <sniprintf+0x16>
 800d756:	bf00      	nop
 800d758:	20000010 	.word	0x20000010

0800d75c <_strerror_r>:
 800d75c:	b510      	push	{r4, lr}
 800d75e:	4604      	mov	r4, r0
 800d760:	4608      	mov	r0, r1
 800d762:	4611      	mov	r1, r2
 800d764:	288e      	cmp	r0, #142	; 0x8e
 800d766:	f200 812f 	bhi.w	800d9c8 <_strerror_r+0x26c>
 800d76a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800d76e:	0138      	.short	0x0138
 800d770:	0091008f 	.word	0x0091008f
 800d774:	00950093 	.word	0x00950093
 800d778:	00990097 	.word	0x00990097
 800d77c:	009d009b 	.word	0x009d009b
 800d780:	00a300a1 	.word	0x00a300a1
 800d784:	00a900a7 	.word	0x00a900a7
 800d788:	00ad00ab 	.word	0x00ad00ab
 800d78c:	00af012d 	.word	0x00af012d
 800d790:	00b300b1 	.word	0x00b300b1
 800d794:	00b700b5 	.word	0x00b700b5
 800d798:	00bf00bd 	.word	0x00bf00bd
 800d79c:	00c700c5 	.word	0x00c700c5
 800d7a0:	00cb00c9 	.word	0x00cb00c9
 800d7a4:	00d100cd 	.word	0x00d100cd
 800d7a8:	00d700d5 	.word	0x00d700d5
 800d7ac:	00db00d9 	.word	0x00db00d9
 800d7b0:	00df00dd 	.word	0x00df00dd
 800d7b4:	00e300e1 	.word	0x00e300e1
 800d7b8:	012d012d 	.word	0x012d012d
 800d7bc:	012d012d 	.word	0x012d012d
 800d7c0:	012d012d 	.word	0x012d012d
 800d7c4:	012d012d 	.word	0x012d012d
 800d7c8:	00eb00e7 	.word	0x00eb00e7
 800d7cc:	012d012d 	.word	0x012d012d
 800d7d0:	012d012d 	.word	0x012d012d
 800d7d4:	012d012d 	.word	0x012d012d
 800d7d8:	012d012d 	.word	0x012d012d
 800d7dc:	012d012d 	.word	0x012d012d
 800d7e0:	012d012d 	.word	0x012d012d
 800d7e4:	00ed012d 	.word	0x00ed012d
 800d7e8:	00ef0107 	.word	0x00ef0107
 800d7ec:	012d00f1 	.word	0x012d00f1
 800d7f0:	012d012d 	.word	0x012d012d
 800d7f4:	012d00f3 	.word	0x012d00f3
 800d7f8:	012d012d 	.word	0x012d012d
 800d7fc:	012d00f5 	.word	0x012d00f5
 800d800:	00f9012d 	.word	0x00f9012d
 800d804:	012d012d 	.word	0x012d012d
 800d808:	012d00fb 	.word	0x012d00fb
 800d80c:	012d012d 	.word	0x012d012d
 800d810:	012d012d 	.word	0x012d012d
 800d814:	012d012d 	.word	0x012d012d
 800d818:	012d012d 	.word	0x012d012d
 800d81c:	00fd012d 	.word	0x00fd012d
 800d820:	00ff012d 	.word	0x00ff012d
 800d824:	01030101 	.word	0x01030101
 800d828:	012d012d 	.word	0x012d012d
 800d82c:	012d0125 	.word	0x012d0125
 800d830:	012d012d 	.word	0x012d012d
 800d834:	012d012d 	.word	0x012d012d
 800d838:	012d012d 	.word	0x012d012d
 800d83c:	0113012d 	.word	0x0113012d
 800d840:	01090105 	.word	0x01090105
 800d844:	010d010b 	.word	0x010d010b
 800d848:	012d010f 	.word	0x012d010f
 800d84c:	01150111 	.word	0x01150111
 800d850:	00e90119 	.word	0x00e90119
 800d854:	012b00c1 	.word	0x012b00c1
 800d858:	00cf00b9 	.word	0x00cf00b9
 800d85c:	009f00bb 	.word	0x009f00bb
 800d860:	012900a5 	.word	0x012900a5
 800d864:	012d00f7 	.word	0x012d00f7
 800d868:	00c30117 	.word	0x00c30117
 800d86c:	011b011d 	.word	0x011b011d
 800d870:	012d012d 	.word	0x012d012d
 800d874:	012d012d 	.word	0x012d012d
 800d878:	00d3012d 	.word	0x00d3012d
 800d87c:	012d012d 	.word	0x012d012d
 800d880:	00e5012d 	.word	0x00e5012d
 800d884:	011f0127 	.word	0x011f0127
 800d888:	01230121 	.word	0x01230121
 800d88c:	4855      	ldr	r0, [pc, #340]	; (800d9e4 <_strerror_r+0x288>)
 800d88e:	bd10      	pop	{r4, pc}
 800d890:	4855      	ldr	r0, [pc, #340]	; (800d9e8 <_strerror_r+0x28c>)
 800d892:	e7fc      	b.n	800d88e <_strerror_r+0x132>
 800d894:	4855      	ldr	r0, [pc, #340]	; (800d9ec <_strerror_r+0x290>)
 800d896:	e7fa      	b.n	800d88e <_strerror_r+0x132>
 800d898:	4855      	ldr	r0, [pc, #340]	; (800d9f0 <_strerror_r+0x294>)
 800d89a:	e7f8      	b.n	800d88e <_strerror_r+0x132>
 800d89c:	4855      	ldr	r0, [pc, #340]	; (800d9f4 <_strerror_r+0x298>)
 800d89e:	e7f6      	b.n	800d88e <_strerror_r+0x132>
 800d8a0:	4855      	ldr	r0, [pc, #340]	; (800d9f8 <_strerror_r+0x29c>)
 800d8a2:	e7f4      	b.n	800d88e <_strerror_r+0x132>
 800d8a4:	4855      	ldr	r0, [pc, #340]	; (800d9fc <_strerror_r+0x2a0>)
 800d8a6:	e7f2      	b.n	800d88e <_strerror_r+0x132>
 800d8a8:	4855      	ldr	r0, [pc, #340]	; (800da00 <_strerror_r+0x2a4>)
 800d8aa:	e7f0      	b.n	800d88e <_strerror_r+0x132>
 800d8ac:	4855      	ldr	r0, [pc, #340]	; (800da04 <_strerror_r+0x2a8>)
 800d8ae:	e7ee      	b.n	800d88e <_strerror_r+0x132>
 800d8b0:	4855      	ldr	r0, [pc, #340]	; (800da08 <_strerror_r+0x2ac>)
 800d8b2:	e7ec      	b.n	800d88e <_strerror_r+0x132>
 800d8b4:	4855      	ldr	r0, [pc, #340]	; (800da0c <_strerror_r+0x2b0>)
 800d8b6:	e7ea      	b.n	800d88e <_strerror_r+0x132>
 800d8b8:	4855      	ldr	r0, [pc, #340]	; (800da10 <_strerror_r+0x2b4>)
 800d8ba:	e7e8      	b.n	800d88e <_strerror_r+0x132>
 800d8bc:	4855      	ldr	r0, [pc, #340]	; (800da14 <_strerror_r+0x2b8>)
 800d8be:	e7e6      	b.n	800d88e <_strerror_r+0x132>
 800d8c0:	4855      	ldr	r0, [pc, #340]	; (800da18 <_strerror_r+0x2bc>)
 800d8c2:	e7e4      	b.n	800d88e <_strerror_r+0x132>
 800d8c4:	4855      	ldr	r0, [pc, #340]	; (800da1c <_strerror_r+0x2c0>)
 800d8c6:	e7e2      	b.n	800d88e <_strerror_r+0x132>
 800d8c8:	4855      	ldr	r0, [pc, #340]	; (800da20 <_strerror_r+0x2c4>)
 800d8ca:	e7e0      	b.n	800d88e <_strerror_r+0x132>
 800d8cc:	4855      	ldr	r0, [pc, #340]	; (800da24 <_strerror_r+0x2c8>)
 800d8ce:	e7de      	b.n	800d88e <_strerror_r+0x132>
 800d8d0:	4855      	ldr	r0, [pc, #340]	; (800da28 <_strerror_r+0x2cc>)
 800d8d2:	e7dc      	b.n	800d88e <_strerror_r+0x132>
 800d8d4:	4855      	ldr	r0, [pc, #340]	; (800da2c <_strerror_r+0x2d0>)
 800d8d6:	e7da      	b.n	800d88e <_strerror_r+0x132>
 800d8d8:	4855      	ldr	r0, [pc, #340]	; (800da30 <_strerror_r+0x2d4>)
 800d8da:	e7d8      	b.n	800d88e <_strerror_r+0x132>
 800d8dc:	4855      	ldr	r0, [pc, #340]	; (800da34 <_strerror_r+0x2d8>)
 800d8de:	e7d6      	b.n	800d88e <_strerror_r+0x132>
 800d8e0:	4855      	ldr	r0, [pc, #340]	; (800da38 <_strerror_r+0x2dc>)
 800d8e2:	e7d4      	b.n	800d88e <_strerror_r+0x132>
 800d8e4:	4855      	ldr	r0, [pc, #340]	; (800da3c <_strerror_r+0x2e0>)
 800d8e6:	e7d2      	b.n	800d88e <_strerror_r+0x132>
 800d8e8:	4855      	ldr	r0, [pc, #340]	; (800da40 <_strerror_r+0x2e4>)
 800d8ea:	e7d0      	b.n	800d88e <_strerror_r+0x132>
 800d8ec:	4855      	ldr	r0, [pc, #340]	; (800da44 <_strerror_r+0x2e8>)
 800d8ee:	e7ce      	b.n	800d88e <_strerror_r+0x132>
 800d8f0:	4855      	ldr	r0, [pc, #340]	; (800da48 <_strerror_r+0x2ec>)
 800d8f2:	e7cc      	b.n	800d88e <_strerror_r+0x132>
 800d8f4:	4855      	ldr	r0, [pc, #340]	; (800da4c <_strerror_r+0x2f0>)
 800d8f6:	e7ca      	b.n	800d88e <_strerror_r+0x132>
 800d8f8:	4855      	ldr	r0, [pc, #340]	; (800da50 <_strerror_r+0x2f4>)
 800d8fa:	e7c8      	b.n	800d88e <_strerror_r+0x132>
 800d8fc:	4855      	ldr	r0, [pc, #340]	; (800da54 <_strerror_r+0x2f8>)
 800d8fe:	e7c6      	b.n	800d88e <_strerror_r+0x132>
 800d900:	4855      	ldr	r0, [pc, #340]	; (800da58 <_strerror_r+0x2fc>)
 800d902:	e7c4      	b.n	800d88e <_strerror_r+0x132>
 800d904:	4855      	ldr	r0, [pc, #340]	; (800da5c <_strerror_r+0x300>)
 800d906:	e7c2      	b.n	800d88e <_strerror_r+0x132>
 800d908:	4855      	ldr	r0, [pc, #340]	; (800da60 <_strerror_r+0x304>)
 800d90a:	e7c0      	b.n	800d88e <_strerror_r+0x132>
 800d90c:	4855      	ldr	r0, [pc, #340]	; (800da64 <_strerror_r+0x308>)
 800d90e:	e7be      	b.n	800d88e <_strerror_r+0x132>
 800d910:	4855      	ldr	r0, [pc, #340]	; (800da68 <_strerror_r+0x30c>)
 800d912:	e7bc      	b.n	800d88e <_strerror_r+0x132>
 800d914:	4855      	ldr	r0, [pc, #340]	; (800da6c <_strerror_r+0x310>)
 800d916:	e7ba      	b.n	800d88e <_strerror_r+0x132>
 800d918:	4855      	ldr	r0, [pc, #340]	; (800da70 <_strerror_r+0x314>)
 800d91a:	e7b8      	b.n	800d88e <_strerror_r+0x132>
 800d91c:	4855      	ldr	r0, [pc, #340]	; (800da74 <_strerror_r+0x318>)
 800d91e:	e7b6      	b.n	800d88e <_strerror_r+0x132>
 800d920:	4855      	ldr	r0, [pc, #340]	; (800da78 <_strerror_r+0x31c>)
 800d922:	e7b4      	b.n	800d88e <_strerror_r+0x132>
 800d924:	4855      	ldr	r0, [pc, #340]	; (800da7c <_strerror_r+0x320>)
 800d926:	e7b2      	b.n	800d88e <_strerror_r+0x132>
 800d928:	4855      	ldr	r0, [pc, #340]	; (800da80 <_strerror_r+0x324>)
 800d92a:	e7b0      	b.n	800d88e <_strerror_r+0x132>
 800d92c:	4855      	ldr	r0, [pc, #340]	; (800da84 <_strerror_r+0x328>)
 800d92e:	e7ae      	b.n	800d88e <_strerror_r+0x132>
 800d930:	4855      	ldr	r0, [pc, #340]	; (800da88 <_strerror_r+0x32c>)
 800d932:	e7ac      	b.n	800d88e <_strerror_r+0x132>
 800d934:	4855      	ldr	r0, [pc, #340]	; (800da8c <_strerror_r+0x330>)
 800d936:	e7aa      	b.n	800d88e <_strerror_r+0x132>
 800d938:	4855      	ldr	r0, [pc, #340]	; (800da90 <_strerror_r+0x334>)
 800d93a:	e7a8      	b.n	800d88e <_strerror_r+0x132>
 800d93c:	4855      	ldr	r0, [pc, #340]	; (800da94 <_strerror_r+0x338>)
 800d93e:	e7a6      	b.n	800d88e <_strerror_r+0x132>
 800d940:	4855      	ldr	r0, [pc, #340]	; (800da98 <_strerror_r+0x33c>)
 800d942:	e7a4      	b.n	800d88e <_strerror_r+0x132>
 800d944:	4855      	ldr	r0, [pc, #340]	; (800da9c <_strerror_r+0x340>)
 800d946:	e7a2      	b.n	800d88e <_strerror_r+0x132>
 800d948:	4855      	ldr	r0, [pc, #340]	; (800daa0 <_strerror_r+0x344>)
 800d94a:	e7a0      	b.n	800d88e <_strerror_r+0x132>
 800d94c:	4855      	ldr	r0, [pc, #340]	; (800daa4 <_strerror_r+0x348>)
 800d94e:	e79e      	b.n	800d88e <_strerror_r+0x132>
 800d950:	4855      	ldr	r0, [pc, #340]	; (800daa8 <_strerror_r+0x34c>)
 800d952:	e79c      	b.n	800d88e <_strerror_r+0x132>
 800d954:	4855      	ldr	r0, [pc, #340]	; (800daac <_strerror_r+0x350>)
 800d956:	e79a      	b.n	800d88e <_strerror_r+0x132>
 800d958:	4855      	ldr	r0, [pc, #340]	; (800dab0 <_strerror_r+0x354>)
 800d95a:	e798      	b.n	800d88e <_strerror_r+0x132>
 800d95c:	4855      	ldr	r0, [pc, #340]	; (800dab4 <_strerror_r+0x358>)
 800d95e:	e796      	b.n	800d88e <_strerror_r+0x132>
 800d960:	4855      	ldr	r0, [pc, #340]	; (800dab8 <_strerror_r+0x35c>)
 800d962:	e794      	b.n	800d88e <_strerror_r+0x132>
 800d964:	4855      	ldr	r0, [pc, #340]	; (800dabc <_strerror_r+0x360>)
 800d966:	e792      	b.n	800d88e <_strerror_r+0x132>
 800d968:	4855      	ldr	r0, [pc, #340]	; (800dac0 <_strerror_r+0x364>)
 800d96a:	e790      	b.n	800d88e <_strerror_r+0x132>
 800d96c:	4855      	ldr	r0, [pc, #340]	; (800dac4 <_strerror_r+0x368>)
 800d96e:	e78e      	b.n	800d88e <_strerror_r+0x132>
 800d970:	4855      	ldr	r0, [pc, #340]	; (800dac8 <_strerror_r+0x36c>)
 800d972:	e78c      	b.n	800d88e <_strerror_r+0x132>
 800d974:	4855      	ldr	r0, [pc, #340]	; (800dacc <_strerror_r+0x370>)
 800d976:	e78a      	b.n	800d88e <_strerror_r+0x132>
 800d978:	4855      	ldr	r0, [pc, #340]	; (800dad0 <_strerror_r+0x374>)
 800d97a:	e788      	b.n	800d88e <_strerror_r+0x132>
 800d97c:	4855      	ldr	r0, [pc, #340]	; (800dad4 <_strerror_r+0x378>)
 800d97e:	e786      	b.n	800d88e <_strerror_r+0x132>
 800d980:	4855      	ldr	r0, [pc, #340]	; (800dad8 <_strerror_r+0x37c>)
 800d982:	e784      	b.n	800d88e <_strerror_r+0x132>
 800d984:	4855      	ldr	r0, [pc, #340]	; (800dadc <_strerror_r+0x380>)
 800d986:	e782      	b.n	800d88e <_strerror_r+0x132>
 800d988:	4855      	ldr	r0, [pc, #340]	; (800dae0 <_strerror_r+0x384>)
 800d98a:	e780      	b.n	800d88e <_strerror_r+0x132>
 800d98c:	4855      	ldr	r0, [pc, #340]	; (800dae4 <_strerror_r+0x388>)
 800d98e:	e77e      	b.n	800d88e <_strerror_r+0x132>
 800d990:	4855      	ldr	r0, [pc, #340]	; (800dae8 <_strerror_r+0x38c>)
 800d992:	e77c      	b.n	800d88e <_strerror_r+0x132>
 800d994:	4855      	ldr	r0, [pc, #340]	; (800daec <_strerror_r+0x390>)
 800d996:	e77a      	b.n	800d88e <_strerror_r+0x132>
 800d998:	4855      	ldr	r0, [pc, #340]	; (800daf0 <_strerror_r+0x394>)
 800d99a:	e778      	b.n	800d88e <_strerror_r+0x132>
 800d99c:	4855      	ldr	r0, [pc, #340]	; (800daf4 <_strerror_r+0x398>)
 800d99e:	e776      	b.n	800d88e <_strerror_r+0x132>
 800d9a0:	4855      	ldr	r0, [pc, #340]	; (800daf8 <_strerror_r+0x39c>)
 800d9a2:	e774      	b.n	800d88e <_strerror_r+0x132>
 800d9a4:	4855      	ldr	r0, [pc, #340]	; (800dafc <_strerror_r+0x3a0>)
 800d9a6:	e772      	b.n	800d88e <_strerror_r+0x132>
 800d9a8:	4855      	ldr	r0, [pc, #340]	; (800db00 <_strerror_r+0x3a4>)
 800d9aa:	e770      	b.n	800d88e <_strerror_r+0x132>
 800d9ac:	4855      	ldr	r0, [pc, #340]	; (800db04 <_strerror_r+0x3a8>)
 800d9ae:	e76e      	b.n	800d88e <_strerror_r+0x132>
 800d9b0:	4855      	ldr	r0, [pc, #340]	; (800db08 <_strerror_r+0x3ac>)
 800d9b2:	e76c      	b.n	800d88e <_strerror_r+0x132>
 800d9b4:	4855      	ldr	r0, [pc, #340]	; (800db0c <_strerror_r+0x3b0>)
 800d9b6:	e76a      	b.n	800d88e <_strerror_r+0x132>
 800d9b8:	4855      	ldr	r0, [pc, #340]	; (800db10 <_strerror_r+0x3b4>)
 800d9ba:	e768      	b.n	800d88e <_strerror_r+0x132>
 800d9bc:	4855      	ldr	r0, [pc, #340]	; (800db14 <_strerror_r+0x3b8>)
 800d9be:	e766      	b.n	800d88e <_strerror_r+0x132>
 800d9c0:	4855      	ldr	r0, [pc, #340]	; (800db18 <_strerror_r+0x3bc>)
 800d9c2:	e764      	b.n	800d88e <_strerror_r+0x132>
 800d9c4:	4855      	ldr	r0, [pc, #340]	; (800db1c <_strerror_r+0x3c0>)
 800d9c6:	e762      	b.n	800d88e <_strerror_r+0x132>
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	bf14      	ite	ne
 800d9cc:	461a      	movne	r2, r3
 800d9ce:	4622      	moveq	r2, r4
 800d9d0:	f000 f8b4 	bl	800db3c <_user_strerror>
 800d9d4:	4b52      	ldr	r3, [pc, #328]	; (800db20 <_strerror_r+0x3c4>)
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	bf08      	it	eq
 800d9da:	4618      	moveq	r0, r3
 800d9dc:	e757      	b.n	800d88e <_strerror_r+0x132>
 800d9de:	4851      	ldr	r0, [pc, #324]	; (800db24 <_strerror_r+0x3c8>)
 800d9e0:	e755      	b.n	800d88e <_strerror_r+0x132>
 800d9e2:	bf00      	nop
 800d9e4:	0800f804 	.word	0x0800f804
 800d9e8:	0800f80e 	.word	0x0800f80e
 800d9ec:	0800f828 	.word	0x0800f828
 800d9f0:	0800f838 	.word	0x0800f838
 800d9f4:	0800f850 	.word	0x0800f850
 800d9f8:	0800f85a 	.word	0x0800f85a
 800d9fc:	0800f874 	.word	0x0800f874
 800da00:	0800f886 	.word	0x0800f886
 800da04:	0800f898 	.word	0x0800f898
 800da08:	0800f8b1 	.word	0x0800f8b1
 800da0c:	0800f8c1 	.word	0x0800f8c1
 800da10:	0800f8cd 	.word	0x0800f8cd
 800da14:	0800f8ea 	.word	0x0800f8ea
 800da18:	0800f8fc 	.word	0x0800f8fc
 800da1c:	0800f90d 	.word	0x0800f90d
 800da20:	0800f91f 	.word	0x0800f91f
 800da24:	0800f92b 	.word	0x0800f92b
 800da28:	0800f943 	.word	0x0800f943
 800da2c:	0800f94f 	.word	0x0800f94f
 800da30:	0800f961 	.word	0x0800f961
 800da34:	0800f970 	.word	0x0800f970
 800da38:	0800f980 	.word	0x0800f980
 800da3c:	0800f98d 	.word	0x0800f98d
 800da40:	0800f9ac 	.word	0x0800f9ac
 800da44:	0800f9bb 	.word	0x0800f9bb
 800da48:	0800f9cc 	.word	0x0800f9cc
 800da4c:	0800f9f0 	.word	0x0800f9f0
 800da50:	0800fa0e 	.word	0x0800fa0e
 800da54:	0800fa2c 	.word	0x0800fa2c
 800da58:	0800fa4c 	.word	0x0800fa4c
 800da5c:	0800fa63 	.word	0x0800fa63
 800da60:	0800fa72 	.word	0x0800fa72
 800da64:	0800fa81 	.word	0x0800fa81
 800da68:	0800fa95 	.word	0x0800fa95
 800da6c:	0800faad 	.word	0x0800faad
 800da70:	0800fabb 	.word	0x0800fabb
 800da74:	0800fac8 	.word	0x0800fac8
 800da78:	0800fade 	.word	0x0800fade
 800da7c:	0800faed 	.word	0x0800faed
 800da80:	0800faf9 	.word	0x0800faf9
 800da84:	0800fb28 	.word	0x0800fb28
 800da88:	0800fb39 	.word	0x0800fb39
 800da8c:	0800fb54 	.word	0x0800fb54
 800da90:	0800fb67 	.word	0x0800fb67
 800da94:	0800fb7d 	.word	0x0800fb7d
 800da98:	0800fb86 	.word	0x0800fb86
 800da9c:	0800fb9d 	.word	0x0800fb9d
 800daa0:	0800fba5 	.word	0x0800fba5
 800daa4:	0800fbb2 	.word	0x0800fbb2
 800daa8:	0800fbc7 	.word	0x0800fbc7
 800daac:	0800fbdb 	.word	0x0800fbdb
 800dab0:	0800fbf3 	.word	0x0800fbf3
 800dab4:	0800fc02 	.word	0x0800fc02
 800dab8:	0800fc13 	.word	0x0800fc13
 800dabc:	0800fc26 	.word	0x0800fc26
 800dac0:	0800fc32 	.word	0x0800fc32
 800dac4:	0800fc4b 	.word	0x0800fc4b
 800dac8:	0800fc5f 	.word	0x0800fc5f
 800dacc:	0800fc7a 	.word	0x0800fc7a
 800dad0:	0800fc92 	.word	0x0800fc92
 800dad4:	0800fcac 	.word	0x0800fcac
 800dad8:	0800fcb4 	.word	0x0800fcb4
 800dadc:	0800fce4 	.word	0x0800fce4
 800dae0:	0800fd03 	.word	0x0800fd03
 800dae4:	0800fd22 	.word	0x0800fd22
 800dae8:	0800fd39 	.word	0x0800fd39
 800daec:	0800fd4c 	.word	0x0800fd4c
 800daf0:	0800fd65 	.word	0x0800fd65
 800daf4:	0800fd7c 	.word	0x0800fd7c
 800daf8:	0800fd92 	.word	0x0800fd92
 800dafc:	0800fdb3 	.word	0x0800fdb3
 800db00:	0800fdcb 	.word	0x0800fdcb
 800db04:	0800fde7 	.word	0x0800fde7
 800db08:	0800fdfa 	.word	0x0800fdfa
 800db0c:	0800fe10 	.word	0x0800fe10
 800db10:	0800fe24 	.word	0x0800fe24
 800db14:	0800fe46 	.word	0x0800fe46
 800db18:	0800fe6c 	.word	0x0800fe6c
 800db1c:	0800fe7d 	.word	0x0800fe7d
 800db20:	0800ff01 	.word	0x0800ff01
 800db24:	0800fe92 	.word	0x0800fe92

0800db28 <strerror>:
 800db28:	4601      	mov	r1, r0
 800db2a:	4803      	ldr	r0, [pc, #12]	; (800db38 <strerror+0x10>)
 800db2c:	2300      	movs	r3, #0
 800db2e:	6800      	ldr	r0, [r0, #0]
 800db30:	461a      	mov	r2, r3
 800db32:	f7ff be13 	b.w	800d75c <_strerror_r>
 800db36:	bf00      	nop
 800db38:	20000010 	.word	0x20000010

0800db3c <_user_strerror>:
 800db3c:	2000      	movs	r0, #0
 800db3e:	4770      	bx	lr

0800db40 <_vsniprintf_r>:
 800db40:	b530      	push	{r4, r5, lr}
 800db42:	1e14      	subs	r4, r2, #0
 800db44:	4605      	mov	r5, r0
 800db46:	b09b      	sub	sp, #108	; 0x6c
 800db48:	4618      	mov	r0, r3
 800db4a:	da05      	bge.n	800db58 <_vsniprintf_r+0x18>
 800db4c:	238b      	movs	r3, #139	; 0x8b
 800db4e:	602b      	str	r3, [r5, #0]
 800db50:	f04f 30ff 	mov.w	r0, #4294967295
 800db54:	b01b      	add	sp, #108	; 0x6c
 800db56:	bd30      	pop	{r4, r5, pc}
 800db58:	f44f 7302 	mov.w	r3, #520	; 0x208
 800db5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800db60:	bf14      	ite	ne
 800db62:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db66:	4623      	moveq	r3, r4
 800db68:	9302      	str	r3, [sp, #8]
 800db6a:	9305      	str	r3, [sp, #20]
 800db6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db70:	9100      	str	r1, [sp, #0]
 800db72:	9104      	str	r1, [sp, #16]
 800db74:	f8ad 300e 	strh.w	r3, [sp, #14]
 800db78:	4602      	mov	r2, r0
 800db7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800db7c:	4669      	mov	r1, sp
 800db7e:	4628      	mov	r0, r5
 800db80:	f000 fbfc 	bl	800e37c <_svfiprintf_r>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	bfbc      	itt	lt
 800db88:	238b      	movlt	r3, #139	; 0x8b
 800db8a:	602b      	strlt	r3, [r5, #0]
 800db8c:	2c00      	cmp	r4, #0
 800db8e:	d0e1      	beq.n	800db54 <_vsniprintf_r+0x14>
 800db90:	9b00      	ldr	r3, [sp, #0]
 800db92:	2200      	movs	r2, #0
 800db94:	701a      	strb	r2, [r3, #0]
 800db96:	e7dd      	b.n	800db54 <_vsniprintf_r+0x14>

0800db98 <vsniprintf>:
 800db98:	b507      	push	{r0, r1, r2, lr}
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	4613      	mov	r3, r2
 800db9e:	460a      	mov	r2, r1
 800dba0:	4601      	mov	r1, r0
 800dba2:	4803      	ldr	r0, [pc, #12]	; (800dbb0 <vsniprintf+0x18>)
 800dba4:	6800      	ldr	r0, [r0, #0]
 800dba6:	f7ff ffcb 	bl	800db40 <_vsniprintf_r>
 800dbaa:	b003      	add	sp, #12
 800dbac:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbb0:	20000010 	.word	0x20000010

0800dbb4 <__swbuf_r>:
 800dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb6:	460e      	mov	r6, r1
 800dbb8:	4614      	mov	r4, r2
 800dbba:	4605      	mov	r5, r0
 800dbbc:	b118      	cbz	r0, 800dbc6 <__swbuf_r+0x12>
 800dbbe:	6983      	ldr	r3, [r0, #24]
 800dbc0:	b90b      	cbnz	r3, 800dbc6 <__swbuf_r+0x12>
 800dbc2:	f000 f9d1 	bl	800df68 <__sinit>
 800dbc6:	4b21      	ldr	r3, [pc, #132]	; (800dc4c <__swbuf_r+0x98>)
 800dbc8:	429c      	cmp	r4, r3
 800dbca:	d12b      	bne.n	800dc24 <__swbuf_r+0x70>
 800dbcc:	686c      	ldr	r4, [r5, #4]
 800dbce:	69a3      	ldr	r3, [r4, #24]
 800dbd0:	60a3      	str	r3, [r4, #8]
 800dbd2:	89a3      	ldrh	r3, [r4, #12]
 800dbd4:	071a      	lsls	r2, r3, #28
 800dbd6:	d52f      	bpl.n	800dc38 <__swbuf_r+0x84>
 800dbd8:	6923      	ldr	r3, [r4, #16]
 800dbda:	b36b      	cbz	r3, 800dc38 <__swbuf_r+0x84>
 800dbdc:	6923      	ldr	r3, [r4, #16]
 800dbde:	6820      	ldr	r0, [r4, #0]
 800dbe0:	1ac0      	subs	r0, r0, r3
 800dbe2:	6963      	ldr	r3, [r4, #20]
 800dbe4:	b2f6      	uxtb	r6, r6
 800dbe6:	4283      	cmp	r3, r0
 800dbe8:	4637      	mov	r7, r6
 800dbea:	dc04      	bgt.n	800dbf6 <__swbuf_r+0x42>
 800dbec:	4621      	mov	r1, r4
 800dbee:	4628      	mov	r0, r5
 800dbf0:	f000 f926 	bl	800de40 <_fflush_r>
 800dbf4:	bb30      	cbnz	r0, 800dc44 <__swbuf_r+0x90>
 800dbf6:	68a3      	ldr	r3, [r4, #8]
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	60a3      	str	r3, [r4, #8]
 800dbfc:	6823      	ldr	r3, [r4, #0]
 800dbfe:	1c5a      	adds	r2, r3, #1
 800dc00:	6022      	str	r2, [r4, #0]
 800dc02:	701e      	strb	r6, [r3, #0]
 800dc04:	6963      	ldr	r3, [r4, #20]
 800dc06:	3001      	adds	r0, #1
 800dc08:	4283      	cmp	r3, r0
 800dc0a:	d004      	beq.n	800dc16 <__swbuf_r+0x62>
 800dc0c:	89a3      	ldrh	r3, [r4, #12]
 800dc0e:	07db      	lsls	r3, r3, #31
 800dc10:	d506      	bpl.n	800dc20 <__swbuf_r+0x6c>
 800dc12:	2e0a      	cmp	r6, #10
 800dc14:	d104      	bne.n	800dc20 <__swbuf_r+0x6c>
 800dc16:	4621      	mov	r1, r4
 800dc18:	4628      	mov	r0, r5
 800dc1a:	f000 f911 	bl	800de40 <_fflush_r>
 800dc1e:	b988      	cbnz	r0, 800dc44 <__swbuf_r+0x90>
 800dc20:	4638      	mov	r0, r7
 800dc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc24:	4b0a      	ldr	r3, [pc, #40]	; (800dc50 <__swbuf_r+0x9c>)
 800dc26:	429c      	cmp	r4, r3
 800dc28:	d101      	bne.n	800dc2e <__swbuf_r+0x7a>
 800dc2a:	68ac      	ldr	r4, [r5, #8]
 800dc2c:	e7cf      	b.n	800dbce <__swbuf_r+0x1a>
 800dc2e:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <__swbuf_r+0xa0>)
 800dc30:	429c      	cmp	r4, r3
 800dc32:	bf08      	it	eq
 800dc34:	68ec      	ldreq	r4, [r5, #12]
 800dc36:	e7ca      	b.n	800dbce <__swbuf_r+0x1a>
 800dc38:	4621      	mov	r1, r4
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	f000 f80c 	bl	800dc58 <__swsetup_r>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d0cb      	beq.n	800dbdc <__swbuf_r+0x28>
 800dc44:	f04f 37ff 	mov.w	r7, #4294967295
 800dc48:	e7ea      	b.n	800dc20 <__swbuf_r+0x6c>
 800dc4a:	bf00      	nop
 800dc4c:	0800febc 	.word	0x0800febc
 800dc50:	0800fedc 	.word	0x0800fedc
 800dc54:	0800fe9c 	.word	0x0800fe9c

0800dc58 <__swsetup_r>:
 800dc58:	4b32      	ldr	r3, [pc, #200]	; (800dd24 <__swsetup_r+0xcc>)
 800dc5a:	b570      	push	{r4, r5, r6, lr}
 800dc5c:	681d      	ldr	r5, [r3, #0]
 800dc5e:	4606      	mov	r6, r0
 800dc60:	460c      	mov	r4, r1
 800dc62:	b125      	cbz	r5, 800dc6e <__swsetup_r+0x16>
 800dc64:	69ab      	ldr	r3, [r5, #24]
 800dc66:	b913      	cbnz	r3, 800dc6e <__swsetup_r+0x16>
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f000 f97d 	bl	800df68 <__sinit>
 800dc6e:	4b2e      	ldr	r3, [pc, #184]	; (800dd28 <__swsetup_r+0xd0>)
 800dc70:	429c      	cmp	r4, r3
 800dc72:	d10f      	bne.n	800dc94 <__swsetup_r+0x3c>
 800dc74:	686c      	ldr	r4, [r5, #4]
 800dc76:	89a3      	ldrh	r3, [r4, #12]
 800dc78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc7c:	0719      	lsls	r1, r3, #28
 800dc7e:	d42c      	bmi.n	800dcda <__swsetup_r+0x82>
 800dc80:	06dd      	lsls	r5, r3, #27
 800dc82:	d411      	bmi.n	800dca8 <__swsetup_r+0x50>
 800dc84:	2309      	movs	r3, #9
 800dc86:	6033      	str	r3, [r6, #0]
 800dc88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc8c:	81a3      	strh	r3, [r4, #12]
 800dc8e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc92:	e03e      	b.n	800dd12 <__swsetup_r+0xba>
 800dc94:	4b25      	ldr	r3, [pc, #148]	; (800dd2c <__swsetup_r+0xd4>)
 800dc96:	429c      	cmp	r4, r3
 800dc98:	d101      	bne.n	800dc9e <__swsetup_r+0x46>
 800dc9a:	68ac      	ldr	r4, [r5, #8]
 800dc9c:	e7eb      	b.n	800dc76 <__swsetup_r+0x1e>
 800dc9e:	4b24      	ldr	r3, [pc, #144]	; (800dd30 <__swsetup_r+0xd8>)
 800dca0:	429c      	cmp	r4, r3
 800dca2:	bf08      	it	eq
 800dca4:	68ec      	ldreq	r4, [r5, #12]
 800dca6:	e7e6      	b.n	800dc76 <__swsetup_r+0x1e>
 800dca8:	0758      	lsls	r0, r3, #29
 800dcaa:	d512      	bpl.n	800dcd2 <__swsetup_r+0x7a>
 800dcac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcae:	b141      	cbz	r1, 800dcc2 <__swsetup_r+0x6a>
 800dcb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcb4:	4299      	cmp	r1, r3
 800dcb6:	d002      	beq.n	800dcbe <__swsetup_r+0x66>
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f000 fa59 	bl	800e170 <_free_r>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	6363      	str	r3, [r4, #52]	; 0x34
 800dcc2:	89a3      	ldrh	r3, [r4, #12]
 800dcc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dcc8:	81a3      	strh	r3, [r4, #12]
 800dcca:	2300      	movs	r3, #0
 800dccc:	6063      	str	r3, [r4, #4]
 800dcce:	6923      	ldr	r3, [r4, #16]
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	89a3      	ldrh	r3, [r4, #12]
 800dcd4:	f043 0308 	orr.w	r3, r3, #8
 800dcd8:	81a3      	strh	r3, [r4, #12]
 800dcda:	6923      	ldr	r3, [r4, #16]
 800dcdc:	b94b      	cbnz	r3, 800dcf2 <__swsetup_r+0x9a>
 800dcde:	89a3      	ldrh	r3, [r4, #12]
 800dce0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dce8:	d003      	beq.n	800dcf2 <__swsetup_r+0x9a>
 800dcea:	4621      	mov	r1, r4
 800dcec:	4630      	mov	r0, r6
 800dcee:	f000 f9ff 	bl	800e0f0 <__smakebuf_r>
 800dcf2:	89a0      	ldrh	r0, [r4, #12]
 800dcf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcf8:	f010 0301 	ands.w	r3, r0, #1
 800dcfc:	d00a      	beq.n	800dd14 <__swsetup_r+0xbc>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	60a3      	str	r3, [r4, #8]
 800dd02:	6963      	ldr	r3, [r4, #20]
 800dd04:	425b      	negs	r3, r3
 800dd06:	61a3      	str	r3, [r4, #24]
 800dd08:	6923      	ldr	r3, [r4, #16]
 800dd0a:	b943      	cbnz	r3, 800dd1e <__swsetup_r+0xc6>
 800dd0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd10:	d1ba      	bne.n	800dc88 <__swsetup_r+0x30>
 800dd12:	bd70      	pop	{r4, r5, r6, pc}
 800dd14:	0781      	lsls	r1, r0, #30
 800dd16:	bf58      	it	pl
 800dd18:	6963      	ldrpl	r3, [r4, #20]
 800dd1a:	60a3      	str	r3, [r4, #8]
 800dd1c:	e7f4      	b.n	800dd08 <__swsetup_r+0xb0>
 800dd1e:	2000      	movs	r0, #0
 800dd20:	e7f7      	b.n	800dd12 <__swsetup_r+0xba>
 800dd22:	bf00      	nop
 800dd24:	20000010 	.word	0x20000010
 800dd28:	0800febc 	.word	0x0800febc
 800dd2c:	0800fedc 	.word	0x0800fedc
 800dd30:	0800fe9c 	.word	0x0800fe9c

0800dd34 <__sflush_r>:
 800dd34:	898a      	ldrh	r2, [r1, #12]
 800dd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	0710      	lsls	r0, r2, #28
 800dd3e:	460c      	mov	r4, r1
 800dd40:	d458      	bmi.n	800ddf4 <__sflush_r+0xc0>
 800dd42:	684b      	ldr	r3, [r1, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	dc05      	bgt.n	800dd54 <__sflush_r+0x20>
 800dd48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	dc02      	bgt.n	800dd54 <__sflush_r+0x20>
 800dd4e:	2000      	movs	r0, #0
 800dd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd56:	2e00      	cmp	r6, #0
 800dd58:	d0f9      	beq.n	800dd4e <__sflush_r+0x1a>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd60:	682f      	ldr	r7, [r5, #0]
 800dd62:	602b      	str	r3, [r5, #0]
 800dd64:	d032      	beq.n	800ddcc <__sflush_r+0x98>
 800dd66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	075a      	lsls	r2, r3, #29
 800dd6c:	d505      	bpl.n	800dd7a <__sflush_r+0x46>
 800dd6e:	6863      	ldr	r3, [r4, #4]
 800dd70:	1ac0      	subs	r0, r0, r3
 800dd72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd74:	b10b      	cbz	r3, 800dd7a <__sflush_r+0x46>
 800dd76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd78:	1ac0      	subs	r0, r0, r3
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd80:	6a21      	ldr	r1, [r4, #32]
 800dd82:	4628      	mov	r0, r5
 800dd84:	47b0      	blx	r6
 800dd86:	1c43      	adds	r3, r0, #1
 800dd88:	89a3      	ldrh	r3, [r4, #12]
 800dd8a:	d106      	bne.n	800dd9a <__sflush_r+0x66>
 800dd8c:	6829      	ldr	r1, [r5, #0]
 800dd8e:	291d      	cmp	r1, #29
 800dd90:	d82c      	bhi.n	800ddec <__sflush_r+0xb8>
 800dd92:	4a2a      	ldr	r2, [pc, #168]	; (800de3c <__sflush_r+0x108>)
 800dd94:	40ca      	lsrs	r2, r1
 800dd96:	07d6      	lsls	r6, r2, #31
 800dd98:	d528      	bpl.n	800ddec <__sflush_r+0xb8>
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	6062      	str	r2, [r4, #4]
 800dd9e:	04d9      	lsls	r1, r3, #19
 800dda0:	6922      	ldr	r2, [r4, #16]
 800dda2:	6022      	str	r2, [r4, #0]
 800dda4:	d504      	bpl.n	800ddb0 <__sflush_r+0x7c>
 800dda6:	1c42      	adds	r2, r0, #1
 800dda8:	d101      	bne.n	800ddae <__sflush_r+0x7a>
 800ddaa:	682b      	ldr	r3, [r5, #0]
 800ddac:	b903      	cbnz	r3, 800ddb0 <__sflush_r+0x7c>
 800ddae:	6560      	str	r0, [r4, #84]	; 0x54
 800ddb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddb2:	602f      	str	r7, [r5, #0]
 800ddb4:	2900      	cmp	r1, #0
 800ddb6:	d0ca      	beq.n	800dd4e <__sflush_r+0x1a>
 800ddb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddbc:	4299      	cmp	r1, r3
 800ddbe:	d002      	beq.n	800ddc6 <__sflush_r+0x92>
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	f000 f9d5 	bl	800e170 <_free_r>
 800ddc6:	2000      	movs	r0, #0
 800ddc8:	6360      	str	r0, [r4, #52]	; 0x34
 800ddca:	e7c1      	b.n	800dd50 <__sflush_r+0x1c>
 800ddcc:	6a21      	ldr	r1, [r4, #32]
 800ddce:	2301      	movs	r3, #1
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	47b0      	blx	r6
 800ddd4:	1c41      	adds	r1, r0, #1
 800ddd6:	d1c7      	bne.n	800dd68 <__sflush_r+0x34>
 800ddd8:	682b      	ldr	r3, [r5, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d0c4      	beq.n	800dd68 <__sflush_r+0x34>
 800ddde:	2b1d      	cmp	r3, #29
 800dde0:	d001      	beq.n	800dde6 <__sflush_r+0xb2>
 800dde2:	2b16      	cmp	r3, #22
 800dde4:	d101      	bne.n	800ddea <__sflush_r+0xb6>
 800dde6:	602f      	str	r7, [r5, #0]
 800dde8:	e7b1      	b.n	800dd4e <__sflush_r+0x1a>
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddf0:	81a3      	strh	r3, [r4, #12]
 800ddf2:	e7ad      	b.n	800dd50 <__sflush_r+0x1c>
 800ddf4:	690f      	ldr	r7, [r1, #16]
 800ddf6:	2f00      	cmp	r7, #0
 800ddf8:	d0a9      	beq.n	800dd4e <__sflush_r+0x1a>
 800ddfa:	0793      	lsls	r3, r2, #30
 800ddfc:	680e      	ldr	r6, [r1, #0]
 800ddfe:	bf08      	it	eq
 800de00:	694b      	ldreq	r3, [r1, #20]
 800de02:	600f      	str	r7, [r1, #0]
 800de04:	bf18      	it	ne
 800de06:	2300      	movne	r3, #0
 800de08:	eba6 0807 	sub.w	r8, r6, r7
 800de0c:	608b      	str	r3, [r1, #8]
 800de0e:	f1b8 0f00 	cmp.w	r8, #0
 800de12:	dd9c      	ble.n	800dd4e <__sflush_r+0x1a>
 800de14:	6a21      	ldr	r1, [r4, #32]
 800de16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de18:	4643      	mov	r3, r8
 800de1a:	463a      	mov	r2, r7
 800de1c:	4628      	mov	r0, r5
 800de1e:	47b0      	blx	r6
 800de20:	2800      	cmp	r0, #0
 800de22:	dc06      	bgt.n	800de32 <__sflush_r+0xfe>
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de2a:	81a3      	strh	r3, [r4, #12]
 800de2c:	f04f 30ff 	mov.w	r0, #4294967295
 800de30:	e78e      	b.n	800dd50 <__sflush_r+0x1c>
 800de32:	4407      	add	r7, r0
 800de34:	eba8 0800 	sub.w	r8, r8, r0
 800de38:	e7e9      	b.n	800de0e <__sflush_r+0xda>
 800de3a:	bf00      	nop
 800de3c:	20400001 	.word	0x20400001

0800de40 <_fflush_r>:
 800de40:	b538      	push	{r3, r4, r5, lr}
 800de42:	690b      	ldr	r3, [r1, #16]
 800de44:	4605      	mov	r5, r0
 800de46:	460c      	mov	r4, r1
 800de48:	b913      	cbnz	r3, 800de50 <_fflush_r+0x10>
 800de4a:	2500      	movs	r5, #0
 800de4c:	4628      	mov	r0, r5
 800de4e:	bd38      	pop	{r3, r4, r5, pc}
 800de50:	b118      	cbz	r0, 800de5a <_fflush_r+0x1a>
 800de52:	6983      	ldr	r3, [r0, #24]
 800de54:	b90b      	cbnz	r3, 800de5a <_fflush_r+0x1a>
 800de56:	f000 f887 	bl	800df68 <__sinit>
 800de5a:	4b14      	ldr	r3, [pc, #80]	; (800deac <_fflush_r+0x6c>)
 800de5c:	429c      	cmp	r4, r3
 800de5e:	d11b      	bne.n	800de98 <_fflush_r+0x58>
 800de60:	686c      	ldr	r4, [r5, #4]
 800de62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d0ef      	beq.n	800de4a <_fflush_r+0xa>
 800de6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de6c:	07d0      	lsls	r0, r2, #31
 800de6e:	d404      	bmi.n	800de7a <_fflush_r+0x3a>
 800de70:	0599      	lsls	r1, r3, #22
 800de72:	d402      	bmi.n	800de7a <_fflush_r+0x3a>
 800de74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de76:	f000 f915 	bl	800e0a4 <__retarget_lock_acquire_recursive>
 800de7a:	4628      	mov	r0, r5
 800de7c:	4621      	mov	r1, r4
 800de7e:	f7ff ff59 	bl	800dd34 <__sflush_r>
 800de82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de84:	07da      	lsls	r2, r3, #31
 800de86:	4605      	mov	r5, r0
 800de88:	d4e0      	bmi.n	800de4c <_fflush_r+0xc>
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	059b      	lsls	r3, r3, #22
 800de8e:	d4dd      	bmi.n	800de4c <_fflush_r+0xc>
 800de90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de92:	f000 f908 	bl	800e0a6 <__retarget_lock_release_recursive>
 800de96:	e7d9      	b.n	800de4c <_fflush_r+0xc>
 800de98:	4b05      	ldr	r3, [pc, #20]	; (800deb0 <_fflush_r+0x70>)
 800de9a:	429c      	cmp	r4, r3
 800de9c:	d101      	bne.n	800dea2 <_fflush_r+0x62>
 800de9e:	68ac      	ldr	r4, [r5, #8]
 800dea0:	e7df      	b.n	800de62 <_fflush_r+0x22>
 800dea2:	4b04      	ldr	r3, [pc, #16]	; (800deb4 <_fflush_r+0x74>)
 800dea4:	429c      	cmp	r4, r3
 800dea6:	bf08      	it	eq
 800dea8:	68ec      	ldreq	r4, [r5, #12]
 800deaa:	e7da      	b.n	800de62 <_fflush_r+0x22>
 800deac:	0800febc 	.word	0x0800febc
 800deb0:	0800fedc 	.word	0x0800fedc
 800deb4:	0800fe9c 	.word	0x0800fe9c

0800deb8 <std>:
 800deb8:	2300      	movs	r3, #0
 800deba:	b510      	push	{r4, lr}
 800debc:	4604      	mov	r4, r0
 800debe:	e9c0 3300 	strd	r3, r3, [r0]
 800dec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dec6:	6083      	str	r3, [r0, #8]
 800dec8:	8181      	strh	r1, [r0, #12]
 800deca:	6643      	str	r3, [r0, #100]	; 0x64
 800decc:	81c2      	strh	r2, [r0, #14]
 800dece:	6183      	str	r3, [r0, #24]
 800ded0:	4619      	mov	r1, r3
 800ded2:	2208      	movs	r2, #8
 800ded4:	305c      	adds	r0, #92	; 0x5c
 800ded6:	f7ff fb77 	bl	800d5c8 <memset>
 800deda:	4b05      	ldr	r3, [pc, #20]	; (800def0 <std+0x38>)
 800dedc:	6263      	str	r3, [r4, #36]	; 0x24
 800dede:	4b05      	ldr	r3, [pc, #20]	; (800def4 <std+0x3c>)
 800dee0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dee2:	4b05      	ldr	r3, [pc, #20]	; (800def8 <std+0x40>)
 800dee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dee6:	4b05      	ldr	r3, [pc, #20]	; (800defc <std+0x44>)
 800dee8:	6224      	str	r4, [r4, #32]
 800deea:	6323      	str	r3, [r4, #48]	; 0x30
 800deec:	bd10      	pop	{r4, pc}
 800deee:	bf00      	nop
 800def0:	0800eb79 	.word	0x0800eb79
 800def4:	0800eb9b 	.word	0x0800eb9b
 800def8:	0800ebd3 	.word	0x0800ebd3
 800defc:	0800ebf7 	.word	0x0800ebf7

0800df00 <_cleanup_r>:
 800df00:	4901      	ldr	r1, [pc, #4]	; (800df08 <_cleanup_r+0x8>)
 800df02:	f000 b8af 	b.w	800e064 <_fwalk_reent>
 800df06:	bf00      	nop
 800df08:	0800de41 	.word	0x0800de41

0800df0c <__sfmoreglue>:
 800df0c:	b570      	push	{r4, r5, r6, lr}
 800df0e:	1e4a      	subs	r2, r1, #1
 800df10:	2568      	movs	r5, #104	; 0x68
 800df12:	4355      	muls	r5, r2
 800df14:	460e      	mov	r6, r1
 800df16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df1a:	f000 f979 	bl	800e210 <_malloc_r>
 800df1e:	4604      	mov	r4, r0
 800df20:	b140      	cbz	r0, 800df34 <__sfmoreglue+0x28>
 800df22:	2100      	movs	r1, #0
 800df24:	e9c0 1600 	strd	r1, r6, [r0]
 800df28:	300c      	adds	r0, #12
 800df2a:	60a0      	str	r0, [r4, #8]
 800df2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df30:	f7ff fb4a 	bl	800d5c8 <memset>
 800df34:	4620      	mov	r0, r4
 800df36:	bd70      	pop	{r4, r5, r6, pc}

0800df38 <__sfp_lock_acquire>:
 800df38:	4801      	ldr	r0, [pc, #4]	; (800df40 <__sfp_lock_acquire+0x8>)
 800df3a:	f000 b8b3 	b.w	800e0a4 <__retarget_lock_acquire_recursive>
 800df3e:	bf00      	nop
 800df40:	200087b0 	.word	0x200087b0

0800df44 <__sfp_lock_release>:
 800df44:	4801      	ldr	r0, [pc, #4]	; (800df4c <__sfp_lock_release+0x8>)
 800df46:	f000 b8ae 	b.w	800e0a6 <__retarget_lock_release_recursive>
 800df4a:	bf00      	nop
 800df4c:	200087b0 	.word	0x200087b0

0800df50 <__sinit_lock_acquire>:
 800df50:	4801      	ldr	r0, [pc, #4]	; (800df58 <__sinit_lock_acquire+0x8>)
 800df52:	f000 b8a7 	b.w	800e0a4 <__retarget_lock_acquire_recursive>
 800df56:	bf00      	nop
 800df58:	200087ab 	.word	0x200087ab

0800df5c <__sinit_lock_release>:
 800df5c:	4801      	ldr	r0, [pc, #4]	; (800df64 <__sinit_lock_release+0x8>)
 800df5e:	f000 b8a2 	b.w	800e0a6 <__retarget_lock_release_recursive>
 800df62:	bf00      	nop
 800df64:	200087ab 	.word	0x200087ab

0800df68 <__sinit>:
 800df68:	b510      	push	{r4, lr}
 800df6a:	4604      	mov	r4, r0
 800df6c:	f7ff fff0 	bl	800df50 <__sinit_lock_acquire>
 800df70:	69a3      	ldr	r3, [r4, #24]
 800df72:	b11b      	cbz	r3, 800df7c <__sinit+0x14>
 800df74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df78:	f7ff bff0 	b.w	800df5c <__sinit_lock_release>
 800df7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800df80:	6523      	str	r3, [r4, #80]	; 0x50
 800df82:	4b13      	ldr	r3, [pc, #76]	; (800dfd0 <__sinit+0x68>)
 800df84:	4a13      	ldr	r2, [pc, #76]	; (800dfd4 <__sinit+0x6c>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	62a2      	str	r2, [r4, #40]	; 0x28
 800df8a:	42a3      	cmp	r3, r4
 800df8c:	bf04      	itt	eq
 800df8e:	2301      	moveq	r3, #1
 800df90:	61a3      	streq	r3, [r4, #24]
 800df92:	4620      	mov	r0, r4
 800df94:	f000 f820 	bl	800dfd8 <__sfp>
 800df98:	6060      	str	r0, [r4, #4]
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 f81c 	bl	800dfd8 <__sfp>
 800dfa0:	60a0      	str	r0, [r4, #8]
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f000 f818 	bl	800dfd8 <__sfp>
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	60e0      	str	r0, [r4, #12]
 800dfac:	2104      	movs	r1, #4
 800dfae:	6860      	ldr	r0, [r4, #4]
 800dfb0:	f7ff ff82 	bl	800deb8 <std>
 800dfb4:	68a0      	ldr	r0, [r4, #8]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	2109      	movs	r1, #9
 800dfba:	f7ff ff7d 	bl	800deb8 <std>
 800dfbe:	68e0      	ldr	r0, [r4, #12]
 800dfc0:	2202      	movs	r2, #2
 800dfc2:	2112      	movs	r1, #18
 800dfc4:	f7ff ff78 	bl	800deb8 <std>
 800dfc8:	2301      	movs	r3, #1
 800dfca:	61a3      	str	r3, [r4, #24]
 800dfcc:	e7d2      	b.n	800df74 <__sinit+0xc>
 800dfce:	bf00      	nop
 800dfd0:	0800f800 	.word	0x0800f800
 800dfd4:	0800df01 	.word	0x0800df01

0800dfd8 <__sfp>:
 800dfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfda:	4607      	mov	r7, r0
 800dfdc:	f7ff ffac 	bl	800df38 <__sfp_lock_acquire>
 800dfe0:	4b1e      	ldr	r3, [pc, #120]	; (800e05c <__sfp+0x84>)
 800dfe2:	681e      	ldr	r6, [r3, #0]
 800dfe4:	69b3      	ldr	r3, [r6, #24]
 800dfe6:	b913      	cbnz	r3, 800dfee <__sfp+0x16>
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f7ff ffbd 	bl	800df68 <__sinit>
 800dfee:	3648      	adds	r6, #72	; 0x48
 800dff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dff4:	3b01      	subs	r3, #1
 800dff6:	d503      	bpl.n	800e000 <__sfp+0x28>
 800dff8:	6833      	ldr	r3, [r6, #0]
 800dffa:	b30b      	cbz	r3, 800e040 <__sfp+0x68>
 800dffc:	6836      	ldr	r6, [r6, #0]
 800dffe:	e7f7      	b.n	800dff0 <__sfp+0x18>
 800e000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e004:	b9d5      	cbnz	r5, 800e03c <__sfp+0x64>
 800e006:	4b16      	ldr	r3, [pc, #88]	; (800e060 <__sfp+0x88>)
 800e008:	60e3      	str	r3, [r4, #12]
 800e00a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e00e:	6665      	str	r5, [r4, #100]	; 0x64
 800e010:	f000 f847 	bl	800e0a2 <__retarget_lock_init_recursive>
 800e014:	f7ff ff96 	bl	800df44 <__sfp_lock_release>
 800e018:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e01c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e020:	6025      	str	r5, [r4, #0]
 800e022:	61a5      	str	r5, [r4, #24]
 800e024:	2208      	movs	r2, #8
 800e026:	4629      	mov	r1, r5
 800e028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e02c:	f7ff facc 	bl	800d5c8 <memset>
 800e030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e038:	4620      	mov	r0, r4
 800e03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e03c:	3468      	adds	r4, #104	; 0x68
 800e03e:	e7d9      	b.n	800dff4 <__sfp+0x1c>
 800e040:	2104      	movs	r1, #4
 800e042:	4638      	mov	r0, r7
 800e044:	f7ff ff62 	bl	800df0c <__sfmoreglue>
 800e048:	4604      	mov	r4, r0
 800e04a:	6030      	str	r0, [r6, #0]
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d1d5      	bne.n	800dffc <__sfp+0x24>
 800e050:	f7ff ff78 	bl	800df44 <__sfp_lock_release>
 800e054:	230c      	movs	r3, #12
 800e056:	603b      	str	r3, [r7, #0]
 800e058:	e7ee      	b.n	800e038 <__sfp+0x60>
 800e05a:	bf00      	nop
 800e05c:	0800f800 	.word	0x0800f800
 800e060:	ffff0001 	.word	0xffff0001

0800e064 <_fwalk_reent>:
 800e064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e068:	4606      	mov	r6, r0
 800e06a:	4688      	mov	r8, r1
 800e06c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e070:	2700      	movs	r7, #0
 800e072:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e076:	f1b9 0901 	subs.w	r9, r9, #1
 800e07a:	d505      	bpl.n	800e088 <_fwalk_reent+0x24>
 800e07c:	6824      	ldr	r4, [r4, #0]
 800e07e:	2c00      	cmp	r4, #0
 800e080:	d1f7      	bne.n	800e072 <_fwalk_reent+0xe>
 800e082:	4638      	mov	r0, r7
 800e084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e088:	89ab      	ldrh	r3, [r5, #12]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d907      	bls.n	800e09e <_fwalk_reent+0x3a>
 800e08e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e092:	3301      	adds	r3, #1
 800e094:	d003      	beq.n	800e09e <_fwalk_reent+0x3a>
 800e096:	4629      	mov	r1, r5
 800e098:	4630      	mov	r0, r6
 800e09a:	47c0      	blx	r8
 800e09c:	4307      	orrs	r7, r0
 800e09e:	3568      	adds	r5, #104	; 0x68
 800e0a0:	e7e9      	b.n	800e076 <_fwalk_reent+0x12>

0800e0a2 <__retarget_lock_init_recursive>:
 800e0a2:	4770      	bx	lr

0800e0a4 <__retarget_lock_acquire_recursive>:
 800e0a4:	4770      	bx	lr

0800e0a6 <__retarget_lock_release_recursive>:
 800e0a6:	4770      	bx	lr

0800e0a8 <__swhatbuf_r>:
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	460e      	mov	r6, r1
 800e0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b0:	2900      	cmp	r1, #0
 800e0b2:	b096      	sub	sp, #88	; 0x58
 800e0b4:	4614      	mov	r4, r2
 800e0b6:	461d      	mov	r5, r3
 800e0b8:	da07      	bge.n	800e0ca <__swhatbuf_r+0x22>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	602b      	str	r3, [r5, #0]
 800e0be:	89b3      	ldrh	r3, [r6, #12]
 800e0c0:	061a      	lsls	r2, r3, #24
 800e0c2:	d410      	bmi.n	800e0e6 <__swhatbuf_r+0x3e>
 800e0c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0c8:	e00e      	b.n	800e0e8 <__swhatbuf_r+0x40>
 800e0ca:	466a      	mov	r2, sp
 800e0cc:	f000 fdba 	bl	800ec44 <_fstat_r>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	dbf2      	blt.n	800e0ba <__swhatbuf_r+0x12>
 800e0d4:	9a01      	ldr	r2, [sp, #4]
 800e0d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e0da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e0de:	425a      	negs	r2, r3
 800e0e0:	415a      	adcs	r2, r3
 800e0e2:	602a      	str	r2, [r5, #0]
 800e0e4:	e7ee      	b.n	800e0c4 <__swhatbuf_r+0x1c>
 800e0e6:	2340      	movs	r3, #64	; 0x40
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	6023      	str	r3, [r4, #0]
 800e0ec:	b016      	add	sp, #88	; 0x58
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}

0800e0f0 <__smakebuf_r>:
 800e0f0:	898b      	ldrh	r3, [r1, #12]
 800e0f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0f4:	079d      	lsls	r5, r3, #30
 800e0f6:	4606      	mov	r6, r0
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	d507      	bpl.n	800e10c <__smakebuf_r+0x1c>
 800e0fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e100:	6023      	str	r3, [r4, #0]
 800e102:	6123      	str	r3, [r4, #16]
 800e104:	2301      	movs	r3, #1
 800e106:	6163      	str	r3, [r4, #20]
 800e108:	b002      	add	sp, #8
 800e10a:	bd70      	pop	{r4, r5, r6, pc}
 800e10c:	ab01      	add	r3, sp, #4
 800e10e:	466a      	mov	r2, sp
 800e110:	f7ff ffca 	bl	800e0a8 <__swhatbuf_r>
 800e114:	9900      	ldr	r1, [sp, #0]
 800e116:	4605      	mov	r5, r0
 800e118:	4630      	mov	r0, r6
 800e11a:	f000 f879 	bl	800e210 <_malloc_r>
 800e11e:	b948      	cbnz	r0, 800e134 <__smakebuf_r+0x44>
 800e120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e124:	059a      	lsls	r2, r3, #22
 800e126:	d4ef      	bmi.n	800e108 <__smakebuf_r+0x18>
 800e128:	f023 0303 	bic.w	r3, r3, #3
 800e12c:	f043 0302 	orr.w	r3, r3, #2
 800e130:	81a3      	strh	r3, [r4, #12]
 800e132:	e7e3      	b.n	800e0fc <__smakebuf_r+0xc>
 800e134:	4b0d      	ldr	r3, [pc, #52]	; (800e16c <__smakebuf_r+0x7c>)
 800e136:	62b3      	str	r3, [r6, #40]	; 0x28
 800e138:	89a3      	ldrh	r3, [r4, #12]
 800e13a:	6020      	str	r0, [r4, #0]
 800e13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e140:	81a3      	strh	r3, [r4, #12]
 800e142:	9b00      	ldr	r3, [sp, #0]
 800e144:	6163      	str	r3, [r4, #20]
 800e146:	9b01      	ldr	r3, [sp, #4]
 800e148:	6120      	str	r0, [r4, #16]
 800e14a:	b15b      	cbz	r3, 800e164 <__smakebuf_r+0x74>
 800e14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e150:	4630      	mov	r0, r6
 800e152:	f000 fd89 	bl	800ec68 <_isatty_r>
 800e156:	b128      	cbz	r0, 800e164 <__smakebuf_r+0x74>
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	f023 0303 	bic.w	r3, r3, #3
 800e15e:	f043 0301 	orr.w	r3, r3, #1
 800e162:	81a3      	strh	r3, [r4, #12]
 800e164:	89a0      	ldrh	r0, [r4, #12]
 800e166:	4305      	orrs	r5, r0
 800e168:	81a5      	strh	r5, [r4, #12]
 800e16a:	e7cd      	b.n	800e108 <__smakebuf_r+0x18>
 800e16c:	0800df01 	.word	0x0800df01

0800e170 <_free_r>:
 800e170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e172:	2900      	cmp	r1, #0
 800e174:	d048      	beq.n	800e208 <_free_r+0x98>
 800e176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e17a:	9001      	str	r0, [sp, #4]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f1a1 0404 	sub.w	r4, r1, #4
 800e182:	bfb8      	it	lt
 800e184:	18e4      	addlt	r4, r4, r3
 800e186:	f000 fdab 	bl	800ece0 <__malloc_lock>
 800e18a:	4a20      	ldr	r2, [pc, #128]	; (800e20c <_free_r+0x9c>)
 800e18c:	9801      	ldr	r0, [sp, #4]
 800e18e:	6813      	ldr	r3, [r2, #0]
 800e190:	4615      	mov	r5, r2
 800e192:	b933      	cbnz	r3, 800e1a2 <_free_r+0x32>
 800e194:	6063      	str	r3, [r4, #4]
 800e196:	6014      	str	r4, [r2, #0]
 800e198:	b003      	add	sp, #12
 800e19a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e19e:	f000 bda5 	b.w	800ecec <__malloc_unlock>
 800e1a2:	42a3      	cmp	r3, r4
 800e1a4:	d90b      	bls.n	800e1be <_free_r+0x4e>
 800e1a6:	6821      	ldr	r1, [r4, #0]
 800e1a8:	1862      	adds	r2, r4, r1
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	bf04      	itt	eq
 800e1ae:	681a      	ldreq	r2, [r3, #0]
 800e1b0:	685b      	ldreq	r3, [r3, #4]
 800e1b2:	6063      	str	r3, [r4, #4]
 800e1b4:	bf04      	itt	eq
 800e1b6:	1852      	addeq	r2, r2, r1
 800e1b8:	6022      	streq	r2, [r4, #0]
 800e1ba:	602c      	str	r4, [r5, #0]
 800e1bc:	e7ec      	b.n	800e198 <_free_r+0x28>
 800e1be:	461a      	mov	r2, r3
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	b10b      	cbz	r3, 800e1c8 <_free_r+0x58>
 800e1c4:	42a3      	cmp	r3, r4
 800e1c6:	d9fa      	bls.n	800e1be <_free_r+0x4e>
 800e1c8:	6811      	ldr	r1, [r2, #0]
 800e1ca:	1855      	adds	r5, r2, r1
 800e1cc:	42a5      	cmp	r5, r4
 800e1ce:	d10b      	bne.n	800e1e8 <_free_r+0x78>
 800e1d0:	6824      	ldr	r4, [r4, #0]
 800e1d2:	4421      	add	r1, r4
 800e1d4:	1854      	adds	r4, r2, r1
 800e1d6:	42a3      	cmp	r3, r4
 800e1d8:	6011      	str	r1, [r2, #0]
 800e1da:	d1dd      	bne.n	800e198 <_free_r+0x28>
 800e1dc:	681c      	ldr	r4, [r3, #0]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	6053      	str	r3, [r2, #4]
 800e1e2:	4421      	add	r1, r4
 800e1e4:	6011      	str	r1, [r2, #0]
 800e1e6:	e7d7      	b.n	800e198 <_free_r+0x28>
 800e1e8:	d902      	bls.n	800e1f0 <_free_r+0x80>
 800e1ea:	230c      	movs	r3, #12
 800e1ec:	6003      	str	r3, [r0, #0]
 800e1ee:	e7d3      	b.n	800e198 <_free_r+0x28>
 800e1f0:	6825      	ldr	r5, [r4, #0]
 800e1f2:	1961      	adds	r1, r4, r5
 800e1f4:	428b      	cmp	r3, r1
 800e1f6:	bf04      	itt	eq
 800e1f8:	6819      	ldreq	r1, [r3, #0]
 800e1fa:	685b      	ldreq	r3, [r3, #4]
 800e1fc:	6063      	str	r3, [r4, #4]
 800e1fe:	bf04      	itt	eq
 800e200:	1949      	addeq	r1, r1, r5
 800e202:	6021      	streq	r1, [r4, #0]
 800e204:	6054      	str	r4, [r2, #4]
 800e206:	e7c7      	b.n	800e198 <_free_r+0x28>
 800e208:	b003      	add	sp, #12
 800e20a:	bd30      	pop	{r4, r5, pc}
 800e20c:	20008554 	.word	0x20008554

0800e210 <_malloc_r>:
 800e210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e212:	1ccd      	adds	r5, r1, #3
 800e214:	f025 0503 	bic.w	r5, r5, #3
 800e218:	3508      	adds	r5, #8
 800e21a:	2d0c      	cmp	r5, #12
 800e21c:	bf38      	it	cc
 800e21e:	250c      	movcc	r5, #12
 800e220:	2d00      	cmp	r5, #0
 800e222:	4606      	mov	r6, r0
 800e224:	db01      	blt.n	800e22a <_malloc_r+0x1a>
 800e226:	42a9      	cmp	r1, r5
 800e228:	d903      	bls.n	800e232 <_malloc_r+0x22>
 800e22a:	230c      	movs	r3, #12
 800e22c:	6033      	str	r3, [r6, #0]
 800e22e:	2000      	movs	r0, #0
 800e230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e232:	f000 fd55 	bl	800ece0 <__malloc_lock>
 800e236:	4921      	ldr	r1, [pc, #132]	; (800e2bc <_malloc_r+0xac>)
 800e238:	680a      	ldr	r2, [r1, #0]
 800e23a:	4614      	mov	r4, r2
 800e23c:	b99c      	cbnz	r4, 800e266 <_malloc_r+0x56>
 800e23e:	4f20      	ldr	r7, [pc, #128]	; (800e2c0 <_malloc_r+0xb0>)
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	b923      	cbnz	r3, 800e24e <_malloc_r+0x3e>
 800e244:	4621      	mov	r1, r4
 800e246:	4630      	mov	r0, r6
 800e248:	f000 fc86 	bl	800eb58 <_sbrk_r>
 800e24c:	6038      	str	r0, [r7, #0]
 800e24e:	4629      	mov	r1, r5
 800e250:	4630      	mov	r0, r6
 800e252:	f000 fc81 	bl	800eb58 <_sbrk_r>
 800e256:	1c43      	adds	r3, r0, #1
 800e258:	d123      	bne.n	800e2a2 <_malloc_r+0x92>
 800e25a:	230c      	movs	r3, #12
 800e25c:	6033      	str	r3, [r6, #0]
 800e25e:	4630      	mov	r0, r6
 800e260:	f000 fd44 	bl	800ecec <__malloc_unlock>
 800e264:	e7e3      	b.n	800e22e <_malloc_r+0x1e>
 800e266:	6823      	ldr	r3, [r4, #0]
 800e268:	1b5b      	subs	r3, r3, r5
 800e26a:	d417      	bmi.n	800e29c <_malloc_r+0x8c>
 800e26c:	2b0b      	cmp	r3, #11
 800e26e:	d903      	bls.n	800e278 <_malloc_r+0x68>
 800e270:	6023      	str	r3, [r4, #0]
 800e272:	441c      	add	r4, r3
 800e274:	6025      	str	r5, [r4, #0]
 800e276:	e004      	b.n	800e282 <_malloc_r+0x72>
 800e278:	6863      	ldr	r3, [r4, #4]
 800e27a:	42a2      	cmp	r2, r4
 800e27c:	bf0c      	ite	eq
 800e27e:	600b      	streq	r3, [r1, #0]
 800e280:	6053      	strne	r3, [r2, #4]
 800e282:	4630      	mov	r0, r6
 800e284:	f000 fd32 	bl	800ecec <__malloc_unlock>
 800e288:	f104 000b 	add.w	r0, r4, #11
 800e28c:	1d23      	adds	r3, r4, #4
 800e28e:	f020 0007 	bic.w	r0, r0, #7
 800e292:	1ac2      	subs	r2, r0, r3
 800e294:	d0cc      	beq.n	800e230 <_malloc_r+0x20>
 800e296:	1a1b      	subs	r3, r3, r0
 800e298:	50a3      	str	r3, [r4, r2]
 800e29a:	e7c9      	b.n	800e230 <_malloc_r+0x20>
 800e29c:	4622      	mov	r2, r4
 800e29e:	6864      	ldr	r4, [r4, #4]
 800e2a0:	e7cc      	b.n	800e23c <_malloc_r+0x2c>
 800e2a2:	1cc4      	adds	r4, r0, #3
 800e2a4:	f024 0403 	bic.w	r4, r4, #3
 800e2a8:	42a0      	cmp	r0, r4
 800e2aa:	d0e3      	beq.n	800e274 <_malloc_r+0x64>
 800e2ac:	1a21      	subs	r1, r4, r0
 800e2ae:	4630      	mov	r0, r6
 800e2b0:	f000 fc52 	bl	800eb58 <_sbrk_r>
 800e2b4:	3001      	adds	r0, #1
 800e2b6:	d1dd      	bne.n	800e274 <_malloc_r+0x64>
 800e2b8:	e7cf      	b.n	800e25a <_malloc_r+0x4a>
 800e2ba:	bf00      	nop
 800e2bc:	20008554 	.word	0x20008554
 800e2c0:	20008558 	.word	0x20008558

0800e2c4 <__ssputs_r>:
 800e2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	688e      	ldr	r6, [r1, #8]
 800e2ca:	429e      	cmp	r6, r3
 800e2cc:	4682      	mov	sl, r0
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	4690      	mov	r8, r2
 800e2d2:	461f      	mov	r7, r3
 800e2d4:	d838      	bhi.n	800e348 <__ssputs_r+0x84>
 800e2d6:	898a      	ldrh	r2, [r1, #12]
 800e2d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2dc:	d032      	beq.n	800e344 <__ssputs_r+0x80>
 800e2de:	6825      	ldr	r5, [r4, #0]
 800e2e0:	6909      	ldr	r1, [r1, #16]
 800e2e2:	eba5 0901 	sub.w	r9, r5, r1
 800e2e6:	6965      	ldr	r5, [r4, #20]
 800e2e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	444b      	add	r3, r9
 800e2f4:	106d      	asrs	r5, r5, #1
 800e2f6:	429d      	cmp	r5, r3
 800e2f8:	bf38      	it	cc
 800e2fa:	461d      	movcc	r5, r3
 800e2fc:	0553      	lsls	r3, r2, #21
 800e2fe:	d531      	bpl.n	800e364 <__ssputs_r+0xa0>
 800e300:	4629      	mov	r1, r5
 800e302:	f7ff ff85 	bl	800e210 <_malloc_r>
 800e306:	4606      	mov	r6, r0
 800e308:	b950      	cbnz	r0, 800e320 <__ssputs_r+0x5c>
 800e30a:	230c      	movs	r3, #12
 800e30c:	f8ca 3000 	str.w	r3, [sl]
 800e310:	89a3      	ldrh	r3, [r4, #12]
 800e312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e316:	81a3      	strh	r3, [r4, #12]
 800e318:	f04f 30ff 	mov.w	r0, #4294967295
 800e31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e320:	6921      	ldr	r1, [r4, #16]
 800e322:	464a      	mov	r2, r9
 800e324:	f7ff f942 	bl	800d5ac <memcpy>
 800e328:	89a3      	ldrh	r3, [r4, #12]
 800e32a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e32e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e332:	81a3      	strh	r3, [r4, #12]
 800e334:	6126      	str	r6, [r4, #16]
 800e336:	6165      	str	r5, [r4, #20]
 800e338:	444e      	add	r6, r9
 800e33a:	eba5 0509 	sub.w	r5, r5, r9
 800e33e:	6026      	str	r6, [r4, #0]
 800e340:	60a5      	str	r5, [r4, #8]
 800e342:	463e      	mov	r6, r7
 800e344:	42be      	cmp	r6, r7
 800e346:	d900      	bls.n	800e34a <__ssputs_r+0x86>
 800e348:	463e      	mov	r6, r7
 800e34a:	4632      	mov	r2, r6
 800e34c:	6820      	ldr	r0, [r4, #0]
 800e34e:	4641      	mov	r1, r8
 800e350:	f000 fcac 	bl	800ecac <memmove>
 800e354:	68a3      	ldr	r3, [r4, #8]
 800e356:	6822      	ldr	r2, [r4, #0]
 800e358:	1b9b      	subs	r3, r3, r6
 800e35a:	4432      	add	r2, r6
 800e35c:	60a3      	str	r3, [r4, #8]
 800e35e:	6022      	str	r2, [r4, #0]
 800e360:	2000      	movs	r0, #0
 800e362:	e7db      	b.n	800e31c <__ssputs_r+0x58>
 800e364:	462a      	mov	r2, r5
 800e366:	f000 fcc7 	bl	800ecf8 <_realloc_r>
 800e36a:	4606      	mov	r6, r0
 800e36c:	2800      	cmp	r0, #0
 800e36e:	d1e1      	bne.n	800e334 <__ssputs_r+0x70>
 800e370:	6921      	ldr	r1, [r4, #16]
 800e372:	4650      	mov	r0, sl
 800e374:	f7ff fefc 	bl	800e170 <_free_r>
 800e378:	e7c7      	b.n	800e30a <__ssputs_r+0x46>
	...

0800e37c <_svfiprintf_r>:
 800e37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e380:	4698      	mov	r8, r3
 800e382:	898b      	ldrh	r3, [r1, #12]
 800e384:	061b      	lsls	r3, r3, #24
 800e386:	b09d      	sub	sp, #116	; 0x74
 800e388:	4607      	mov	r7, r0
 800e38a:	460d      	mov	r5, r1
 800e38c:	4614      	mov	r4, r2
 800e38e:	d50e      	bpl.n	800e3ae <_svfiprintf_r+0x32>
 800e390:	690b      	ldr	r3, [r1, #16]
 800e392:	b963      	cbnz	r3, 800e3ae <_svfiprintf_r+0x32>
 800e394:	2140      	movs	r1, #64	; 0x40
 800e396:	f7ff ff3b 	bl	800e210 <_malloc_r>
 800e39a:	6028      	str	r0, [r5, #0]
 800e39c:	6128      	str	r0, [r5, #16]
 800e39e:	b920      	cbnz	r0, 800e3aa <_svfiprintf_r+0x2e>
 800e3a0:	230c      	movs	r3, #12
 800e3a2:	603b      	str	r3, [r7, #0]
 800e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a8:	e0d1      	b.n	800e54e <_svfiprintf_r+0x1d2>
 800e3aa:	2340      	movs	r3, #64	; 0x40
 800e3ac:	616b      	str	r3, [r5, #20]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b2:	2320      	movs	r3, #32
 800e3b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3bc:	2330      	movs	r3, #48	; 0x30
 800e3be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e568 <_svfiprintf_r+0x1ec>
 800e3c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3c6:	f04f 0901 	mov.w	r9, #1
 800e3ca:	4623      	mov	r3, r4
 800e3cc:	469a      	mov	sl, r3
 800e3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3d2:	b10a      	cbz	r2, 800e3d8 <_svfiprintf_r+0x5c>
 800e3d4:	2a25      	cmp	r2, #37	; 0x25
 800e3d6:	d1f9      	bne.n	800e3cc <_svfiprintf_r+0x50>
 800e3d8:	ebba 0b04 	subs.w	fp, sl, r4
 800e3dc:	d00b      	beq.n	800e3f6 <_svfiprintf_r+0x7a>
 800e3de:	465b      	mov	r3, fp
 800e3e0:	4622      	mov	r2, r4
 800e3e2:	4629      	mov	r1, r5
 800e3e4:	4638      	mov	r0, r7
 800e3e6:	f7ff ff6d 	bl	800e2c4 <__ssputs_r>
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	f000 80aa 	beq.w	800e544 <_svfiprintf_r+0x1c8>
 800e3f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3f2:	445a      	add	r2, fp
 800e3f4:	9209      	str	r2, [sp, #36]	; 0x24
 800e3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f000 80a2 	beq.w	800e544 <_svfiprintf_r+0x1c8>
 800e400:	2300      	movs	r3, #0
 800e402:	f04f 32ff 	mov.w	r2, #4294967295
 800e406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e40a:	f10a 0a01 	add.w	sl, sl, #1
 800e40e:	9304      	str	r3, [sp, #16]
 800e410:	9307      	str	r3, [sp, #28]
 800e412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e416:	931a      	str	r3, [sp, #104]	; 0x68
 800e418:	4654      	mov	r4, sl
 800e41a:	2205      	movs	r2, #5
 800e41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e420:	4851      	ldr	r0, [pc, #324]	; (800e568 <_svfiprintf_r+0x1ec>)
 800e422:	f7f1 feed 	bl	8000200 <memchr>
 800e426:	9a04      	ldr	r2, [sp, #16]
 800e428:	b9d8      	cbnz	r0, 800e462 <_svfiprintf_r+0xe6>
 800e42a:	06d0      	lsls	r0, r2, #27
 800e42c:	bf44      	itt	mi
 800e42e:	2320      	movmi	r3, #32
 800e430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e434:	0711      	lsls	r1, r2, #28
 800e436:	bf44      	itt	mi
 800e438:	232b      	movmi	r3, #43	; 0x2b
 800e43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e43e:	f89a 3000 	ldrb.w	r3, [sl]
 800e442:	2b2a      	cmp	r3, #42	; 0x2a
 800e444:	d015      	beq.n	800e472 <_svfiprintf_r+0xf6>
 800e446:	9a07      	ldr	r2, [sp, #28]
 800e448:	4654      	mov	r4, sl
 800e44a:	2000      	movs	r0, #0
 800e44c:	f04f 0c0a 	mov.w	ip, #10
 800e450:	4621      	mov	r1, r4
 800e452:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e456:	3b30      	subs	r3, #48	; 0x30
 800e458:	2b09      	cmp	r3, #9
 800e45a:	d94e      	bls.n	800e4fa <_svfiprintf_r+0x17e>
 800e45c:	b1b0      	cbz	r0, 800e48c <_svfiprintf_r+0x110>
 800e45e:	9207      	str	r2, [sp, #28]
 800e460:	e014      	b.n	800e48c <_svfiprintf_r+0x110>
 800e462:	eba0 0308 	sub.w	r3, r0, r8
 800e466:	fa09 f303 	lsl.w	r3, r9, r3
 800e46a:	4313      	orrs	r3, r2
 800e46c:	9304      	str	r3, [sp, #16]
 800e46e:	46a2      	mov	sl, r4
 800e470:	e7d2      	b.n	800e418 <_svfiprintf_r+0x9c>
 800e472:	9b03      	ldr	r3, [sp, #12]
 800e474:	1d19      	adds	r1, r3, #4
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	9103      	str	r1, [sp, #12]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	bfbb      	ittet	lt
 800e47e:	425b      	neglt	r3, r3
 800e480:	f042 0202 	orrlt.w	r2, r2, #2
 800e484:	9307      	strge	r3, [sp, #28]
 800e486:	9307      	strlt	r3, [sp, #28]
 800e488:	bfb8      	it	lt
 800e48a:	9204      	strlt	r2, [sp, #16]
 800e48c:	7823      	ldrb	r3, [r4, #0]
 800e48e:	2b2e      	cmp	r3, #46	; 0x2e
 800e490:	d10c      	bne.n	800e4ac <_svfiprintf_r+0x130>
 800e492:	7863      	ldrb	r3, [r4, #1]
 800e494:	2b2a      	cmp	r3, #42	; 0x2a
 800e496:	d135      	bne.n	800e504 <_svfiprintf_r+0x188>
 800e498:	9b03      	ldr	r3, [sp, #12]
 800e49a:	1d1a      	adds	r2, r3, #4
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	9203      	str	r2, [sp, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	bfb8      	it	lt
 800e4a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4a8:	3402      	adds	r4, #2
 800e4aa:	9305      	str	r3, [sp, #20]
 800e4ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e578 <_svfiprintf_r+0x1fc>
 800e4b0:	7821      	ldrb	r1, [r4, #0]
 800e4b2:	2203      	movs	r2, #3
 800e4b4:	4650      	mov	r0, sl
 800e4b6:	f7f1 fea3 	bl	8000200 <memchr>
 800e4ba:	b140      	cbz	r0, 800e4ce <_svfiprintf_r+0x152>
 800e4bc:	2340      	movs	r3, #64	; 0x40
 800e4be:	eba0 000a 	sub.w	r0, r0, sl
 800e4c2:	fa03 f000 	lsl.w	r0, r3, r0
 800e4c6:	9b04      	ldr	r3, [sp, #16]
 800e4c8:	4303      	orrs	r3, r0
 800e4ca:	3401      	adds	r4, #1
 800e4cc:	9304      	str	r3, [sp, #16]
 800e4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d2:	4826      	ldr	r0, [pc, #152]	; (800e56c <_svfiprintf_r+0x1f0>)
 800e4d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4d8:	2206      	movs	r2, #6
 800e4da:	f7f1 fe91 	bl	8000200 <memchr>
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	d038      	beq.n	800e554 <_svfiprintf_r+0x1d8>
 800e4e2:	4b23      	ldr	r3, [pc, #140]	; (800e570 <_svfiprintf_r+0x1f4>)
 800e4e4:	bb1b      	cbnz	r3, 800e52e <_svfiprintf_r+0x1b2>
 800e4e6:	9b03      	ldr	r3, [sp, #12]
 800e4e8:	3307      	adds	r3, #7
 800e4ea:	f023 0307 	bic.w	r3, r3, #7
 800e4ee:	3308      	adds	r3, #8
 800e4f0:	9303      	str	r3, [sp, #12]
 800e4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f4:	4433      	add	r3, r6
 800e4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e4f8:	e767      	b.n	800e3ca <_svfiprintf_r+0x4e>
 800e4fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4fe:	460c      	mov	r4, r1
 800e500:	2001      	movs	r0, #1
 800e502:	e7a5      	b.n	800e450 <_svfiprintf_r+0xd4>
 800e504:	2300      	movs	r3, #0
 800e506:	3401      	adds	r4, #1
 800e508:	9305      	str	r3, [sp, #20]
 800e50a:	4619      	mov	r1, r3
 800e50c:	f04f 0c0a 	mov.w	ip, #10
 800e510:	4620      	mov	r0, r4
 800e512:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e516:	3a30      	subs	r2, #48	; 0x30
 800e518:	2a09      	cmp	r2, #9
 800e51a:	d903      	bls.n	800e524 <_svfiprintf_r+0x1a8>
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d0c5      	beq.n	800e4ac <_svfiprintf_r+0x130>
 800e520:	9105      	str	r1, [sp, #20]
 800e522:	e7c3      	b.n	800e4ac <_svfiprintf_r+0x130>
 800e524:	fb0c 2101 	mla	r1, ip, r1, r2
 800e528:	4604      	mov	r4, r0
 800e52a:	2301      	movs	r3, #1
 800e52c:	e7f0      	b.n	800e510 <_svfiprintf_r+0x194>
 800e52e:	ab03      	add	r3, sp, #12
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	462a      	mov	r2, r5
 800e534:	4b0f      	ldr	r3, [pc, #60]	; (800e574 <_svfiprintf_r+0x1f8>)
 800e536:	a904      	add	r1, sp, #16
 800e538:	4638      	mov	r0, r7
 800e53a:	f3af 8000 	nop.w
 800e53e:	1c42      	adds	r2, r0, #1
 800e540:	4606      	mov	r6, r0
 800e542:	d1d6      	bne.n	800e4f2 <_svfiprintf_r+0x176>
 800e544:	89ab      	ldrh	r3, [r5, #12]
 800e546:	065b      	lsls	r3, r3, #25
 800e548:	f53f af2c 	bmi.w	800e3a4 <_svfiprintf_r+0x28>
 800e54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e54e:	b01d      	add	sp, #116	; 0x74
 800e550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e554:	ab03      	add	r3, sp, #12
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	462a      	mov	r2, r5
 800e55a:	4b06      	ldr	r3, [pc, #24]	; (800e574 <_svfiprintf_r+0x1f8>)
 800e55c:	a904      	add	r1, sp, #16
 800e55e:	4638      	mov	r0, r7
 800e560:	f000 f9d4 	bl	800e90c <_printf_i>
 800e564:	e7eb      	b.n	800e53e <_svfiprintf_r+0x1c2>
 800e566:	bf00      	nop
 800e568:	0800fefc 	.word	0x0800fefc
 800e56c:	0800ff06 	.word	0x0800ff06
 800e570:	00000000 	.word	0x00000000
 800e574:	0800e2c5 	.word	0x0800e2c5
 800e578:	0800ff02 	.word	0x0800ff02

0800e57c <__sfputc_r>:
 800e57c:	6893      	ldr	r3, [r2, #8]
 800e57e:	3b01      	subs	r3, #1
 800e580:	2b00      	cmp	r3, #0
 800e582:	b410      	push	{r4}
 800e584:	6093      	str	r3, [r2, #8]
 800e586:	da08      	bge.n	800e59a <__sfputc_r+0x1e>
 800e588:	6994      	ldr	r4, [r2, #24]
 800e58a:	42a3      	cmp	r3, r4
 800e58c:	db01      	blt.n	800e592 <__sfputc_r+0x16>
 800e58e:	290a      	cmp	r1, #10
 800e590:	d103      	bne.n	800e59a <__sfputc_r+0x1e>
 800e592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e596:	f7ff bb0d 	b.w	800dbb4 <__swbuf_r>
 800e59a:	6813      	ldr	r3, [r2, #0]
 800e59c:	1c58      	adds	r0, r3, #1
 800e59e:	6010      	str	r0, [r2, #0]
 800e5a0:	7019      	strb	r1, [r3, #0]
 800e5a2:	4608      	mov	r0, r1
 800e5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5a8:	4770      	bx	lr

0800e5aa <__sfputs_r>:
 800e5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ac:	4606      	mov	r6, r0
 800e5ae:	460f      	mov	r7, r1
 800e5b0:	4614      	mov	r4, r2
 800e5b2:	18d5      	adds	r5, r2, r3
 800e5b4:	42ac      	cmp	r4, r5
 800e5b6:	d101      	bne.n	800e5bc <__sfputs_r+0x12>
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	e007      	b.n	800e5cc <__sfputs_r+0x22>
 800e5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5c0:	463a      	mov	r2, r7
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f7ff ffda 	bl	800e57c <__sfputc_r>
 800e5c8:	1c43      	adds	r3, r0, #1
 800e5ca:	d1f3      	bne.n	800e5b4 <__sfputs_r+0xa>
 800e5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5d0 <_vfiprintf_r>:
 800e5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d4:	460d      	mov	r5, r1
 800e5d6:	b09d      	sub	sp, #116	; 0x74
 800e5d8:	4614      	mov	r4, r2
 800e5da:	4698      	mov	r8, r3
 800e5dc:	4606      	mov	r6, r0
 800e5de:	b118      	cbz	r0, 800e5e8 <_vfiprintf_r+0x18>
 800e5e0:	6983      	ldr	r3, [r0, #24]
 800e5e2:	b90b      	cbnz	r3, 800e5e8 <_vfiprintf_r+0x18>
 800e5e4:	f7ff fcc0 	bl	800df68 <__sinit>
 800e5e8:	4b89      	ldr	r3, [pc, #548]	; (800e810 <_vfiprintf_r+0x240>)
 800e5ea:	429d      	cmp	r5, r3
 800e5ec:	d11b      	bne.n	800e626 <_vfiprintf_r+0x56>
 800e5ee:	6875      	ldr	r5, [r6, #4]
 800e5f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5f2:	07d9      	lsls	r1, r3, #31
 800e5f4:	d405      	bmi.n	800e602 <_vfiprintf_r+0x32>
 800e5f6:	89ab      	ldrh	r3, [r5, #12]
 800e5f8:	059a      	lsls	r2, r3, #22
 800e5fa:	d402      	bmi.n	800e602 <_vfiprintf_r+0x32>
 800e5fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5fe:	f7ff fd51 	bl	800e0a4 <__retarget_lock_acquire_recursive>
 800e602:	89ab      	ldrh	r3, [r5, #12]
 800e604:	071b      	lsls	r3, r3, #28
 800e606:	d501      	bpl.n	800e60c <_vfiprintf_r+0x3c>
 800e608:	692b      	ldr	r3, [r5, #16]
 800e60a:	b9eb      	cbnz	r3, 800e648 <_vfiprintf_r+0x78>
 800e60c:	4629      	mov	r1, r5
 800e60e:	4630      	mov	r0, r6
 800e610:	f7ff fb22 	bl	800dc58 <__swsetup_r>
 800e614:	b1c0      	cbz	r0, 800e648 <_vfiprintf_r+0x78>
 800e616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e618:	07dc      	lsls	r4, r3, #31
 800e61a:	d50e      	bpl.n	800e63a <_vfiprintf_r+0x6a>
 800e61c:	f04f 30ff 	mov.w	r0, #4294967295
 800e620:	b01d      	add	sp, #116	; 0x74
 800e622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e626:	4b7b      	ldr	r3, [pc, #492]	; (800e814 <_vfiprintf_r+0x244>)
 800e628:	429d      	cmp	r5, r3
 800e62a:	d101      	bne.n	800e630 <_vfiprintf_r+0x60>
 800e62c:	68b5      	ldr	r5, [r6, #8]
 800e62e:	e7df      	b.n	800e5f0 <_vfiprintf_r+0x20>
 800e630:	4b79      	ldr	r3, [pc, #484]	; (800e818 <_vfiprintf_r+0x248>)
 800e632:	429d      	cmp	r5, r3
 800e634:	bf08      	it	eq
 800e636:	68f5      	ldreq	r5, [r6, #12]
 800e638:	e7da      	b.n	800e5f0 <_vfiprintf_r+0x20>
 800e63a:	89ab      	ldrh	r3, [r5, #12]
 800e63c:	0598      	lsls	r0, r3, #22
 800e63e:	d4ed      	bmi.n	800e61c <_vfiprintf_r+0x4c>
 800e640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e642:	f7ff fd30 	bl	800e0a6 <__retarget_lock_release_recursive>
 800e646:	e7e9      	b.n	800e61c <_vfiprintf_r+0x4c>
 800e648:	2300      	movs	r3, #0
 800e64a:	9309      	str	r3, [sp, #36]	; 0x24
 800e64c:	2320      	movs	r3, #32
 800e64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e652:	f8cd 800c 	str.w	r8, [sp, #12]
 800e656:	2330      	movs	r3, #48	; 0x30
 800e658:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e81c <_vfiprintf_r+0x24c>
 800e65c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e660:	f04f 0901 	mov.w	r9, #1
 800e664:	4623      	mov	r3, r4
 800e666:	469a      	mov	sl, r3
 800e668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e66c:	b10a      	cbz	r2, 800e672 <_vfiprintf_r+0xa2>
 800e66e:	2a25      	cmp	r2, #37	; 0x25
 800e670:	d1f9      	bne.n	800e666 <_vfiprintf_r+0x96>
 800e672:	ebba 0b04 	subs.w	fp, sl, r4
 800e676:	d00b      	beq.n	800e690 <_vfiprintf_r+0xc0>
 800e678:	465b      	mov	r3, fp
 800e67a:	4622      	mov	r2, r4
 800e67c:	4629      	mov	r1, r5
 800e67e:	4630      	mov	r0, r6
 800e680:	f7ff ff93 	bl	800e5aa <__sfputs_r>
 800e684:	3001      	adds	r0, #1
 800e686:	f000 80aa 	beq.w	800e7de <_vfiprintf_r+0x20e>
 800e68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e68c:	445a      	add	r2, fp
 800e68e:	9209      	str	r2, [sp, #36]	; 0x24
 800e690:	f89a 3000 	ldrb.w	r3, [sl]
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 80a2 	beq.w	800e7de <_vfiprintf_r+0x20e>
 800e69a:	2300      	movs	r3, #0
 800e69c:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6a4:	f10a 0a01 	add.w	sl, sl, #1
 800e6a8:	9304      	str	r3, [sp, #16]
 800e6aa:	9307      	str	r3, [sp, #28]
 800e6ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6b0:	931a      	str	r3, [sp, #104]	; 0x68
 800e6b2:	4654      	mov	r4, sl
 800e6b4:	2205      	movs	r2, #5
 800e6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6ba:	4858      	ldr	r0, [pc, #352]	; (800e81c <_vfiprintf_r+0x24c>)
 800e6bc:	f7f1 fda0 	bl	8000200 <memchr>
 800e6c0:	9a04      	ldr	r2, [sp, #16]
 800e6c2:	b9d8      	cbnz	r0, 800e6fc <_vfiprintf_r+0x12c>
 800e6c4:	06d1      	lsls	r1, r2, #27
 800e6c6:	bf44      	itt	mi
 800e6c8:	2320      	movmi	r3, #32
 800e6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6ce:	0713      	lsls	r3, r2, #28
 800e6d0:	bf44      	itt	mi
 800e6d2:	232b      	movmi	r3, #43	; 0x2b
 800e6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e6dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e6de:	d015      	beq.n	800e70c <_vfiprintf_r+0x13c>
 800e6e0:	9a07      	ldr	r2, [sp, #28]
 800e6e2:	4654      	mov	r4, sl
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	f04f 0c0a 	mov.w	ip, #10
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6f0:	3b30      	subs	r3, #48	; 0x30
 800e6f2:	2b09      	cmp	r3, #9
 800e6f4:	d94e      	bls.n	800e794 <_vfiprintf_r+0x1c4>
 800e6f6:	b1b0      	cbz	r0, 800e726 <_vfiprintf_r+0x156>
 800e6f8:	9207      	str	r2, [sp, #28]
 800e6fa:	e014      	b.n	800e726 <_vfiprintf_r+0x156>
 800e6fc:	eba0 0308 	sub.w	r3, r0, r8
 800e700:	fa09 f303 	lsl.w	r3, r9, r3
 800e704:	4313      	orrs	r3, r2
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	46a2      	mov	sl, r4
 800e70a:	e7d2      	b.n	800e6b2 <_vfiprintf_r+0xe2>
 800e70c:	9b03      	ldr	r3, [sp, #12]
 800e70e:	1d19      	adds	r1, r3, #4
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	9103      	str	r1, [sp, #12]
 800e714:	2b00      	cmp	r3, #0
 800e716:	bfbb      	ittet	lt
 800e718:	425b      	neglt	r3, r3
 800e71a:	f042 0202 	orrlt.w	r2, r2, #2
 800e71e:	9307      	strge	r3, [sp, #28]
 800e720:	9307      	strlt	r3, [sp, #28]
 800e722:	bfb8      	it	lt
 800e724:	9204      	strlt	r2, [sp, #16]
 800e726:	7823      	ldrb	r3, [r4, #0]
 800e728:	2b2e      	cmp	r3, #46	; 0x2e
 800e72a:	d10c      	bne.n	800e746 <_vfiprintf_r+0x176>
 800e72c:	7863      	ldrb	r3, [r4, #1]
 800e72e:	2b2a      	cmp	r3, #42	; 0x2a
 800e730:	d135      	bne.n	800e79e <_vfiprintf_r+0x1ce>
 800e732:	9b03      	ldr	r3, [sp, #12]
 800e734:	1d1a      	adds	r2, r3, #4
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	9203      	str	r2, [sp, #12]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	bfb8      	it	lt
 800e73e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e742:	3402      	adds	r4, #2
 800e744:	9305      	str	r3, [sp, #20]
 800e746:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e82c <_vfiprintf_r+0x25c>
 800e74a:	7821      	ldrb	r1, [r4, #0]
 800e74c:	2203      	movs	r2, #3
 800e74e:	4650      	mov	r0, sl
 800e750:	f7f1 fd56 	bl	8000200 <memchr>
 800e754:	b140      	cbz	r0, 800e768 <_vfiprintf_r+0x198>
 800e756:	2340      	movs	r3, #64	; 0x40
 800e758:	eba0 000a 	sub.w	r0, r0, sl
 800e75c:	fa03 f000 	lsl.w	r0, r3, r0
 800e760:	9b04      	ldr	r3, [sp, #16]
 800e762:	4303      	orrs	r3, r0
 800e764:	3401      	adds	r4, #1
 800e766:	9304      	str	r3, [sp, #16]
 800e768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e76c:	482c      	ldr	r0, [pc, #176]	; (800e820 <_vfiprintf_r+0x250>)
 800e76e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e772:	2206      	movs	r2, #6
 800e774:	f7f1 fd44 	bl	8000200 <memchr>
 800e778:	2800      	cmp	r0, #0
 800e77a:	d03f      	beq.n	800e7fc <_vfiprintf_r+0x22c>
 800e77c:	4b29      	ldr	r3, [pc, #164]	; (800e824 <_vfiprintf_r+0x254>)
 800e77e:	bb1b      	cbnz	r3, 800e7c8 <_vfiprintf_r+0x1f8>
 800e780:	9b03      	ldr	r3, [sp, #12]
 800e782:	3307      	adds	r3, #7
 800e784:	f023 0307 	bic.w	r3, r3, #7
 800e788:	3308      	adds	r3, #8
 800e78a:	9303      	str	r3, [sp, #12]
 800e78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e78e:	443b      	add	r3, r7
 800e790:	9309      	str	r3, [sp, #36]	; 0x24
 800e792:	e767      	b.n	800e664 <_vfiprintf_r+0x94>
 800e794:	fb0c 3202 	mla	r2, ip, r2, r3
 800e798:	460c      	mov	r4, r1
 800e79a:	2001      	movs	r0, #1
 800e79c:	e7a5      	b.n	800e6ea <_vfiprintf_r+0x11a>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	3401      	adds	r4, #1
 800e7a2:	9305      	str	r3, [sp, #20]
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	f04f 0c0a 	mov.w	ip, #10
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7b0:	3a30      	subs	r2, #48	; 0x30
 800e7b2:	2a09      	cmp	r2, #9
 800e7b4:	d903      	bls.n	800e7be <_vfiprintf_r+0x1ee>
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d0c5      	beq.n	800e746 <_vfiprintf_r+0x176>
 800e7ba:	9105      	str	r1, [sp, #20]
 800e7bc:	e7c3      	b.n	800e746 <_vfiprintf_r+0x176>
 800e7be:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e7f0      	b.n	800e7aa <_vfiprintf_r+0x1da>
 800e7c8:	ab03      	add	r3, sp, #12
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	462a      	mov	r2, r5
 800e7ce:	4b16      	ldr	r3, [pc, #88]	; (800e828 <_vfiprintf_r+0x258>)
 800e7d0:	a904      	add	r1, sp, #16
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	f3af 8000 	nop.w
 800e7d8:	4607      	mov	r7, r0
 800e7da:	1c78      	adds	r0, r7, #1
 800e7dc:	d1d6      	bne.n	800e78c <_vfiprintf_r+0x1bc>
 800e7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7e0:	07d9      	lsls	r1, r3, #31
 800e7e2:	d405      	bmi.n	800e7f0 <_vfiprintf_r+0x220>
 800e7e4:	89ab      	ldrh	r3, [r5, #12]
 800e7e6:	059a      	lsls	r2, r3, #22
 800e7e8:	d402      	bmi.n	800e7f0 <_vfiprintf_r+0x220>
 800e7ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7ec:	f7ff fc5b 	bl	800e0a6 <__retarget_lock_release_recursive>
 800e7f0:	89ab      	ldrh	r3, [r5, #12]
 800e7f2:	065b      	lsls	r3, r3, #25
 800e7f4:	f53f af12 	bmi.w	800e61c <_vfiprintf_r+0x4c>
 800e7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7fa:	e711      	b.n	800e620 <_vfiprintf_r+0x50>
 800e7fc:	ab03      	add	r3, sp, #12
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	462a      	mov	r2, r5
 800e802:	4b09      	ldr	r3, [pc, #36]	; (800e828 <_vfiprintf_r+0x258>)
 800e804:	a904      	add	r1, sp, #16
 800e806:	4630      	mov	r0, r6
 800e808:	f000 f880 	bl	800e90c <_printf_i>
 800e80c:	e7e4      	b.n	800e7d8 <_vfiprintf_r+0x208>
 800e80e:	bf00      	nop
 800e810:	0800febc 	.word	0x0800febc
 800e814:	0800fedc 	.word	0x0800fedc
 800e818:	0800fe9c 	.word	0x0800fe9c
 800e81c:	0800fefc 	.word	0x0800fefc
 800e820:	0800ff06 	.word	0x0800ff06
 800e824:	00000000 	.word	0x00000000
 800e828:	0800e5ab 	.word	0x0800e5ab
 800e82c:	0800ff02 	.word	0x0800ff02

0800e830 <_printf_common>:
 800e830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e834:	4616      	mov	r6, r2
 800e836:	4699      	mov	r9, r3
 800e838:	688a      	ldr	r2, [r1, #8]
 800e83a:	690b      	ldr	r3, [r1, #16]
 800e83c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e840:	4293      	cmp	r3, r2
 800e842:	bfb8      	it	lt
 800e844:	4613      	movlt	r3, r2
 800e846:	6033      	str	r3, [r6, #0]
 800e848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e84c:	4607      	mov	r7, r0
 800e84e:	460c      	mov	r4, r1
 800e850:	b10a      	cbz	r2, 800e856 <_printf_common+0x26>
 800e852:	3301      	adds	r3, #1
 800e854:	6033      	str	r3, [r6, #0]
 800e856:	6823      	ldr	r3, [r4, #0]
 800e858:	0699      	lsls	r1, r3, #26
 800e85a:	bf42      	ittt	mi
 800e85c:	6833      	ldrmi	r3, [r6, #0]
 800e85e:	3302      	addmi	r3, #2
 800e860:	6033      	strmi	r3, [r6, #0]
 800e862:	6825      	ldr	r5, [r4, #0]
 800e864:	f015 0506 	ands.w	r5, r5, #6
 800e868:	d106      	bne.n	800e878 <_printf_common+0x48>
 800e86a:	f104 0a19 	add.w	sl, r4, #25
 800e86e:	68e3      	ldr	r3, [r4, #12]
 800e870:	6832      	ldr	r2, [r6, #0]
 800e872:	1a9b      	subs	r3, r3, r2
 800e874:	42ab      	cmp	r3, r5
 800e876:	dc26      	bgt.n	800e8c6 <_printf_common+0x96>
 800e878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e87c:	1e13      	subs	r3, r2, #0
 800e87e:	6822      	ldr	r2, [r4, #0]
 800e880:	bf18      	it	ne
 800e882:	2301      	movne	r3, #1
 800e884:	0692      	lsls	r2, r2, #26
 800e886:	d42b      	bmi.n	800e8e0 <_printf_common+0xb0>
 800e888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e88c:	4649      	mov	r1, r9
 800e88e:	4638      	mov	r0, r7
 800e890:	47c0      	blx	r8
 800e892:	3001      	adds	r0, #1
 800e894:	d01e      	beq.n	800e8d4 <_printf_common+0xa4>
 800e896:	6823      	ldr	r3, [r4, #0]
 800e898:	68e5      	ldr	r5, [r4, #12]
 800e89a:	6832      	ldr	r2, [r6, #0]
 800e89c:	f003 0306 	and.w	r3, r3, #6
 800e8a0:	2b04      	cmp	r3, #4
 800e8a2:	bf08      	it	eq
 800e8a4:	1aad      	subeq	r5, r5, r2
 800e8a6:	68a3      	ldr	r3, [r4, #8]
 800e8a8:	6922      	ldr	r2, [r4, #16]
 800e8aa:	bf0c      	ite	eq
 800e8ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8b0:	2500      	movne	r5, #0
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	bfc4      	itt	gt
 800e8b6:	1a9b      	subgt	r3, r3, r2
 800e8b8:	18ed      	addgt	r5, r5, r3
 800e8ba:	2600      	movs	r6, #0
 800e8bc:	341a      	adds	r4, #26
 800e8be:	42b5      	cmp	r5, r6
 800e8c0:	d11a      	bne.n	800e8f8 <_printf_common+0xc8>
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	e008      	b.n	800e8d8 <_printf_common+0xa8>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	4652      	mov	r2, sl
 800e8ca:	4649      	mov	r1, r9
 800e8cc:	4638      	mov	r0, r7
 800e8ce:	47c0      	blx	r8
 800e8d0:	3001      	adds	r0, #1
 800e8d2:	d103      	bne.n	800e8dc <_printf_common+0xac>
 800e8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8dc:	3501      	adds	r5, #1
 800e8de:	e7c6      	b.n	800e86e <_printf_common+0x3e>
 800e8e0:	18e1      	adds	r1, r4, r3
 800e8e2:	1c5a      	adds	r2, r3, #1
 800e8e4:	2030      	movs	r0, #48	; 0x30
 800e8e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8ea:	4422      	add	r2, r4
 800e8ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8f4:	3302      	adds	r3, #2
 800e8f6:	e7c7      	b.n	800e888 <_printf_common+0x58>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	4622      	mov	r2, r4
 800e8fc:	4649      	mov	r1, r9
 800e8fe:	4638      	mov	r0, r7
 800e900:	47c0      	blx	r8
 800e902:	3001      	adds	r0, #1
 800e904:	d0e6      	beq.n	800e8d4 <_printf_common+0xa4>
 800e906:	3601      	adds	r6, #1
 800e908:	e7d9      	b.n	800e8be <_printf_common+0x8e>
	...

0800e90c <_printf_i>:
 800e90c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e910:	460c      	mov	r4, r1
 800e912:	4691      	mov	r9, r2
 800e914:	7e27      	ldrb	r7, [r4, #24]
 800e916:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e918:	2f78      	cmp	r7, #120	; 0x78
 800e91a:	4680      	mov	r8, r0
 800e91c:	469a      	mov	sl, r3
 800e91e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e922:	d807      	bhi.n	800e934 <_printf_i+0x28>
 800e924:	2f62      	cmp	r7, #98	; 0x62
 800e926:	d80a      	bhi.n	800e93e <_printf_i+0x32>
 800e928:	2f00      	cmp	r7, #0
 800e92a:	f000 80d8 	beq.w	800eade <_printf_i+0x1d2>
 800e92e:	2f58      	cmp	r7, #88	; 0x58
 800e930:	f000 80a3 	beq.w	800ea7a <_printf_i+0x16e>
 800e934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e93c:	e03a      	b.n	800e9b4 <_printf_i+0xa8>
 800e93e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e942:	2b15      	cmp	r3, #21
 800e944:	d8f6      	bhi.n	800e934 <_printf_i+0x28>
 800e946:	a001      	add	r0, pc, #4	; (adr r0, 800e94c <_printf_i+0x40>)
 800e948:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e94c:	0800e9a5 	.word	0x0800e9a5
 800e950:	0800e9b9 	.word	0x0800e9b9
 800e954:	0800e935 	.word	0x0800e935
 800e958:	0800e935 	.word	0x0800e935
 800e95c:	0800e935 	.word	0x0800e935
 800e960:	0800e935 	.word	0x0800e935
 800e964:	0800e9b9 	.word	0x0800e9b9
 800e968:	0800e935 	.word	0x0800e935
 800e96c:	0800e935 	.word	0x0800e935
 800e970:	0800e935 	.word	0x0800e935
 800e974:	0800e935 	.word	0x0800e935
 800e978:	0800eac5 	.word	0x0800eac5
 800e97c:	0800e9e9 	.word	0x0800e9e9
 800e980:	0800eaa7 	.word	0x0800eaa7
 800e984:	0800e935 	.word	0x0800e935
 800e988:	0800e935 	.word	0x0800e935
 800e98c:	0800eae7 	.word	0x0800eae7
 800e990:	0800e935 	.word	0x0800e935
 800e994:	0800e9e9 	.word	0x0800e9e9
 800e998:	0800e935 	.word	0x0800e935
 800e99c:	0800e935 	.word	0x0800e935
 800e9a0:	0800eaaf 	.word	0x0800eaaf
 800e9a4:	680b      	ldr	r3, [r1, #0]
 800e9a6:	1d1a      	adds	r2, r3, #4
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	600a      	str	r2, [r1, #0]
 800e9ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e9b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	e0a3      	b.n	800eb00 <_printf_i+0x1f4>
 800e9b8:	6825      	ldr	r5, [r4, #0]
 800e9ba:	6808      	ldr	r0, [r1, #0]
 800e9bc:	062e      	lsls	r6, r5, #24
 800e9be:	f100 0304 	add.w	r3, r0, #4
 800e9c2:	d50a      	bpl.n	800e9da <_printf_i+0xce>
 800e9c4:	6805      	ldr	r5, [r0, #0]
 800e9c6:	600b      	str	r3, [r1, #0]
 800e9c8:	2d00      	cmp	r5, #0
 800e9ca:	da03      	bge.n	800e9d4 <_printf_i+0xc8>
 800e9cc:	232d      	movs	r3, #45	; 0x2d
 800e9ce:	426d      	negs	r5, r5
 800e9d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9d4:	485e      	ldr	r0, [pc, #376]	; (800eb50 <_printf_i+0x244>)
 800e9d6:	230a      	movs	r3, #10
 800e9d8:	e019      	b.n	800ea0e <_printf_i+0x102>
 800e9da:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e9de:	6805      	ldr	r5, [r0, #0]
 800e9e0:	600b      	str	r3, [r1, #0]
 800e9e2:	bf18      	it	ne
 800e9e4:	b22d      	sxthne	r5, r5
 800e9e6:	e7ef      	b.n	800e9c8 <_printf_i+0xbc>
 800e9e8:	680b      	ldr	r3, [r1, #0]
 800e9ea:	6825      	ldr	r5, [r4, #0]
 800e9ec:	1d18      	adds	r0, r3, #4
 800e9ee:	6008      	str	r0, [r1, #0]
 800e9f0:	0628      	lsls	r0, r5, #24
 800e9f2:	d501      	bpl.n	800e9f8 <_printf_i+0xec>
 800e9f4:	681d      	ldr	r5, [r3, #0]
 800e9f6:	e002      	b.n	800e9fe <_printf_i+0xf2>
 800e9f8:	0669      	lsls	r1, r5, #25
 800e9fa:	d5fb      	bpl.n	800e9f4 <_printf_i+0xe8>
 800e9fc:	881d      	ldrh	r5, [r3, #0]
 800e9fe:	4854      	ldr	r0, [pc, #336]	; (800eb50 <_printf_i+0x244>)
 800ea00:	2f6f      	cmp	r7, #111	; 0x6f
 800ea02:	bf0c      	ite	eq
 800ea04:	2308      	moveq	r3, #8
 800ea06:	230a      	movne	r3, #10
 800ea08:	2100      	movs	r1, #0
 800ea0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea0e:	6866      	ldr	r6, [r4, #4]
 800ea10:	60a6      	str	r6, [r4, #8]
 800ea12:	2e00      	cmp	r6, #0
 800ea14:	bfa2      	ittt	ge
 800ea16:	6821      	ldrge	r1, [r4, #0]
 800ea18:	f021 0104 	bicge.w	r1, r1, #4
 800ea1c:	6021      	strge	r1, [r4, #0]
 800ea1e:	b90d      	cbnz	r5, 800ea24 <_printf_i+0x118>
 800ea20:	2e00      	cmp	r6, #0
 800ea22:	d04d      	beq.n	800eac0 <_printf_i+0x1b4>
 800ea24:	4616      	mov	r6, r2
 800ea26:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea2a:	fb03 5711 	mls	r7, r3, r1, r5
 800ea2e:	5dc7      	ldrb	r7, [r0, r7]
 800ea30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea34:	462f      	mov	r7, r5
 800ea36:	42bb      	cmp	r3, r7
 800ea38:	460d      	mov	r5, r1
 800ea3a:	d9f4      	bls.n	800ea26 <_printf_i+0x11a>
 800ea3c:	2b08      	cmp	r3, #8
 800ea3e:	d10b      	bne.n	800ea58 <_printf_i+0x14c>
 800ea40:	6823      	ldr	r3, [r4, #0]
 800ea42:	07df      	lsls	r7, r3, #31
 800ea44:	d508      	bpl.n	800ea58 <_printf_i+0x14c>
 800ea46:	6923      	ldr	r3, [r4, #16]
 800ea48:	6861      	ldr	r1, [r4, #4]
 800ea4a:	4299      	cmp	r1, r3
 800ea4c:	bfde      	ittt	le
 800ea4e:	2330      	movle	r3, #48	; 0x30
 800ea50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ea58:	1b92      	subs	r2, r2, r6
 800ea5a:	6122      	str	r2, [r4, #16]
 800ea5c:	f8cd a000 	str.w	sl, [sp]
 800ea60:	464b      	mov	r3, r9
 800ea62:	aa03      	add	r2, sp, #12
 800ea64:	4621      	mov	r1, r4
 800ea66:	4640      	mov	r0, r8
 800ea68:	f7ff fee2 	bl	800e830 <_printf_common>
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	d14c      	bne.n	800eb0a <_printf_i+0x1fe>
 800ea70:	f04f 30ff 	mov.w	r0, #4294967295
 800ea74:	b004      	add	sp, #16
 800ea76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea7a:	4835      	ldr	r0, [pc, #212]	; (800eb50 <_printf_i+0x244>)
 800ea7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ea80:	6823      	ldr	r3, [r4, #0]
 800ea82:	680e      	ldr	r6, [r1, #0]
 800ea84:	061f      	lsls	r7, r3, #24
 800ea86:	f856 5b04 	ldr.w	r5, [r6], #4
 800ea8a:	600e      	str	r6, [r1, #0]
 800ea8c:	d514      	bpl.n	800eab8 <_printf_i+0x1ac>
 800ea8e:	07d9      	lsls	r1, r3, #31
 800ea90:	bf44      	itt	mi
 800ea92:	f043 0320 	orrmi.w	r3, r3, #32
 800ea96:	6023      	strmi	r3, [r4, #0]
 800ea98:	b91d      	cbnz	r5, 800eaa2 <_printf_i+0x196>
 800ea9a:	6823      	ldr	r3, [r4, #0]
 800ea9c:	f023 0320 	bic.w	r3, r3, #32
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	2310      	movs	r3, #16
 800eaa4:	e7b0      	b.n	800ea08 <_printf_i+0xfc>
 800eaa6:	6823      	ldr	r3, [r4, #0]
 800eaa8:	f043 0320 	orr.w	r3, r3, #32
 800eaac:	6023      	str	r3, [r4, #0]
 800eaae:	2378      	movs	r3, #120	; 0x78
 800eab0:	4828      	ldr	r0, [pc, #160]	; (800eb54 <_printf_i+0x248>)
 800eab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eab6:	e7e3      	b.n	800ea80 <_printf_i+0x174>
 800eab8:	065e      	lsls	r6, r3, #25
 800eaba:	bf48      	it	mi
 800eabc:	b2ad      	uxthmi	r5, r5
 800eabe:	e7e6      	b.n	800ea8e <_printf_i+0x182>
 800eac0:	4616      	mov	r6, r2
 800eac2:	e7bb      	b.n	800ea3c <_printf_i+0x130>
 800eac4:	680b      	ldr	r3, [r1, #0]
 800eac6:	6826      	ldr	r6, [r4, #0]
 800eac8:	6960      	ldr	r0, [r4, #20]
 800eaca:	1d1d      	adds	r5, r3, #4
 800eacc:	600d      	str	r5, [r1, #0]
 800eace:	0635      	lsls	r5, r6, #24
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	d501      	bpl.n	800ead8 <_printf_i+0x1cc>
 800ead4:	6018      	str	r0, [r3, #0]
 800ead6:	e002      	b.n	800eade <_printf_i+0x1d2>
 800ead8:	0671      	lsls	r1, r6, #25
 800eada:	d5fb      	bpl.n	800ead4 <_printf_i+0x1c8>
 800eadc:	8018      	strh	r0, [r3, #0]
 800eade:	2300      	movs	r3, #0
 800eae0:	6123      	str	r3, [r4, #16]
 800eae2:	4616      	mov	r6, r2
 800eae4:	e7ba      	b.n	800ea5c <_printf_i+0x150>
 800eae6:	680b      	ldr	r3, [r1, #0]
 800eae8:	1d1a      	adds	r2, r3, #4
 800eaea:	600a      	str	r2, [r1, #0]
 800eaec:	681e      	ldr	r6, [r3, #0]
 800eaee:	6862      	ldr	r2, [r4, #4]
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f7f1 fb84 	bl	8000200 <memchr>
 800eaf8:	b108      	cbz	r0, 800eafe <_printf_i+0x1f2>
 800eafa:	1b80      	subs	r0, r0, r6
 800eafc:	6060      	str	r0, [r4, #4]
 800eafe:	6863      	ldr	r3, [r4, #4]
 800eb00:	6123      	str	r3, [r4, #16]
 800eb02:	2300      	movs	r3, #0
 800eb04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb08:	e7a8      	b.n	800ea5c <_printf_i+0x150>
 800eb0a:	6923      	ldr	r3, [r4, #16]
 800eb0c:	4632      	mov	r2, r6
 800eb0e:	4649      	mov	r1, r9
 800eb10:	4640      	mov	r0, r8
 800eb12:	47d0      	blx	sl
 800eb14:	3001      	adds	r0, #1
 800eb16:	d0ab      	beq.n	800ea70 <_printf_i+0x164>
 800eb18:	6823      	ldr	r3, [r4, #0]
 800eb1a:	079b      	lsls	r3, r3, #30
 800eb1c:	d413      	bmi.n	800eb46 <_printf_i+0x23a>
 800eb1e:	68e0      	ldr	r0, [r4, #12]
 800eb20:	9b03      	ldr	r3, [sp, #12]
 800eb22:	4298      	cmp	r0, r3
 800eb24:	bfb8      	it	lt
 800eb26:	4618      	movlt	r0, r3
 800eb28:	e7a4      	b.n	800ea74 <_printf_i+0x168>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	4632      	mov	r2, r6
 800eb2e:	4649      	mov	r1, r9
 800eb30:	4640      	mov	r0, r8
 800eb32:	47d0      	blx	sl
 800eb34:	3001      	adds	r0, #1
 800eb36:	d09b      	beq.n	800ea70 <_printf_i+0x164>
 800eb38:	3501      	adds	r5, #1
 800eb3a:	68e3      	ldr	r3, [r4, #12]
 800eb3c:	9903      	ldr	r1, [sp, #12]
 800eb3e:	1a5b      	subs	r3, r3, r1
 800eb40:	42ab      	cmp	r3, r5
 800eb42:	dcf2      	bgt.n	800eb2a <_printf_i+0x21e>
 800eb44:	e7eb      	b.n	800eb1e <_printf_i+0x212>
 800eb46:	2500      	movs	r5, #0
 800eb48:	f104 0619 	add.w	r6, r4, #25
 800eb4c:	e7f5      	b.n	800eb3a <_printf_i+0x22e>
 800eb4e:	bf00      	nop
 800eb50:	0800ff0d 	.word	0x0800ff0d
 800eb54:	0800ff1e 	.word	0x0800ff1e

0800eb58 <_sbrk_r>:
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	4d06      	ldr	r5, [pc, #24]	; (800eb74 <_sbrk_r+0x1c>)
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	4604      	mov	r4, r0
 800eb60:	4608      	mov	r0, r1
 800eb62:	602b      	str	r3, [r5, #0]
 800eb64:	f7f2 f9b0 	bl	8000ec8 <_sbrk>
 800eb68:	1c43      	adds	r3, r0, #1
 800eb6a:	d102      	bne.n	800eb72 <_sbrk_r+0x1a>
 800eb6c:	682b      	ldr	r3, [r5, #0]
 800eb6e:	b103      	cbz	r3, 800eb72 <_sbrk_r+0x1a>
 800eb70:	6023      	str	r3, [r4, #0]
 800eb72:	bd38      	pop	{r3, r4, r5, pc}
 800eb74:	200087b4 	.word	0x200087b4

0800eb78 <__sread>:
 800eb78:	b510      	push	{r4, lr}
 800eb7a:	460c      	mov	r4, r1
 800eb7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb80:	f000 f8e0 	bl	800ed44 <_read_r>
 800eb84:	2800      	cmp	r0, #0
 800eb86:	bfab      	itete	ge
 800eb88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb8a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb8c:	181b      	addge	r3, r3, r0
 800eb8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb92:	bfac      	ite	ge
 800eb94:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb96:	81a3      	strhlt	r3, [r4, #12]
 800eb98:	bd10      	pop	{r4, pc}

0800eb9a <__swrite>:
 800eb9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb9e:	461f      	mov	r7, r3
 800eba0:	898b      	ldrh	r3, [r1, #12]
 800eba2:	05db      	lsls	r3, r3, #23
 800eba4:	4605      	mov	r5, r0
 800eba6:	460c      	mov	r4, r1
 800eba8:	4616      	mov	r6, r2
 800ebaa:	d505      	bpl.n	800ebb8 <__swrite+0x1e>
 800ebac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb0:	2302      	movs	r3, #2
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	f000 f868 	bl	800ec88 <_lseek_r>
 800ebb8:	89a3      	ldrh	r3, [r4, #12]
 800ebba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebc2:	81a3      	strh	r3, [r4, #12]
 800ebc4:	4632      	mov	r2, r6
 800ebc6:	463b      	mov	r3, r7
 800ebc8:	4628      	mov	r0, r5
 800ebca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebce:	f000 b817 	b.w	800ec00 <_write_r>

0800ebd2 <__sseek>:
 800ebd2:	b510      	push	{r4, lr}
 800ebd4:	460c      	mov	r4, r1
 800ebd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebda:	f000 f855 	bl	800ec88 <_lseek_r>
 800ebde:	1c43      	adds	r3, r0, #1
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	bf15      	itete	ne
 800ebe4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebee:	81a3      	strheq	r3, [r4, #12]
 800ebf0:	bf18      	it	ne
 800ebf2:	81a3      	strhne	r3, [r4, #12]
 800ebf4:	bd10      	pop	{r4, pc}

0800ebf6 <__sclose>:
 800ebf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebfa:	f000 b813 	b.w	800ec24 <_close_r>
	...

0800ec00 <_write_r>:
 800ec00:	b538      	push	{r3, r4, r5, lr}
 800ec02:	4d07      	ldr	r5, [pc, #28]	; (800ec20 <_write_r+0x20>)
 800ec04:	4604      	mov	r4, r0
 800ec06:	4608      	mov	r0, r1
 800ec08:	4611      	mov	r1, r2
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	602a      	str	r2, [r5, #0]
 800ec0e:	461a      	mov	r2, r3
 800ec10:	f7f2 f909 	bl	8000e26 <_write>
 800ec14:	1c43      	adds	r3, r0, #1
 800ec16:	d102      	bne.n	800ec1e <_write_r+0x1e>
 800ec18:	682b      	ldr	r3, [r5, #0]
 800ec1a:	b103      	cbz	r3, 800ec1e <_write_r+0x1e>
 800ec1c:	6023      	str	r3, [r4, #0]
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}
 800ec20:	200087b4 	.word	0x200087b4

0800ec24 <_close_r>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	4d06      	ldr	r5, [pc, #24]	; (800ec40 <_close_r+0x1c>)
 800ec28:	2300      	movs	r3, #0
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	4608      	mov	r0, r1
 800ec2e:	602b      	str	r3, [r5, #0]
 800ec30:	f7f2 f915 	bl	8000e5e <_close>
 800ec34:	1c43      	adds	r3, r0, #1
 800ec36:	d102      	bne.n	800ec3e <_close_r+0x1a>
 800ec38:	682b      	ldr	r3, [r5, #0]
 800ec3a:	b103      	cbz	r3, 800ec3e <_close_r+0x1a>
 800ec3c:	6023      	str	r3, [r4, #0]
 800ec3e:	bd38      	pop	{r3, r4, r5, pc}
 800ec40:	200087b4 	.word	0x200087b4

0800ec44 <_fstat_r>:
 800ec44:	b538      	push	{r3, r4, r5, lr}
 800ec46:	4d07      	ldr	r5, [pc, #28]	; (800ec64 <_fstat_r+0x20>)
 800ec48:	2300      	movs	r3, #0
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	4608      	mov	r0, r1
 800ec4e:	4611      	mov	r1, r2
 800ec50:	602b      	str	r3, [r5, #0]
 800ec52:	f7f2 f910 	bl	8000e76 <_fstat>
 800ec56:	1c43      	adds	r3, r0, #1
 800ec58:	d102      	bne.n	800ec60 <_fstat_r+0x1c>
 800ec5a:	682b      	ldr	r3, [r5, #0]
 800ec5c:	b103      	cbz	r3, 800ec60 <_fstat_r+0x1c>
 800ec5e:	6023      	str	r3, [r4, #0]
 800ec60:	bd38      	pop	{r3, r4, r5, pc}
 800ec62:	bf00      	nop
 800ec64:	200087b4 	.word	0x200087b4

0800ec68 <_isatty_r>:
 800ec68:	b538      	push	{r3, r4, r5, lr}
 800ec6a:	4d06      	ldr	r5, [pc, #24]	; (800ec84 <_isatty_r+0x1c>)
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	4604      	mov	r4, r0
 800ec70:	4608      	mov	r0, r1
 800ec72:	602b      	str	r3, [r5, #0]
 800ec74:	f7f2 f90f 	bl	8000e96 <_isatty>
 800ec78:	1c43      	adds	r3, r0, #1
 800ec7a:	d102      	bne.n	800ec82 <_isatty_r+0x1a>
 800ec7c:	682b      	ldr	r3, [r5, #0]
 800ec7e:	b103      	cbz	r3, 800ec82 <_isatty_r+0x1a>
 800ec80:	6023      	str	r3, [r4, #0]
 800ec82:	bd38      	pop	{r3, r4, r5, pc}
 800ec84:	200087b4 	.word	0x200087b4

0800ec88 <_lseek_r>:
 800ec88:	b538      	push	{r3, r4, r5, lr}
 800ec8a:	4d07      	ldr	r5, [pc, #28]	; (800eca8 <_lseek_r+0x20>)
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	4608      	mov	r0, r1
 800ec90:	4611      	mov	r1, r2
 800ec92:	2200      	movs	r2, #0
 800ec94:	602a      	str	r2, [r5, #0]
 800ec96:	461a      	mov	r2, r3
 800ec98:	f7f2 f908 	bl	8000eac <_lseek>
 800ec9c:	1c43      	adds	r3, r0, #1
 800ec9e:	d102      	bne.n	800eca6 <_lseek_r+0x1e>
 800eca0:	682b      	ldr	r3, [r5, #0]
 800eca2:	b103      	cbz	r3, 800eca6 <_lseek_r+0x1e>
 800eca4:	6023      	str	r3, [r4, #0]
 800eca6:	bd38      	pop	{r3, r4, r5, pc}
 800eca8:	200087b4 	.word	0x200087b4

0800ecac <memmove>:
 800ecac:	4288      	cmp	r0, r1
 800ecae:	b510      	push	{r4, lr}
 800ecb0:	eb01 0402 	add.w	r4, r1, r2
 800ecb4:	d902      	bls.n	800ecbc <memmove+0x10>
 800ecb6:	4284      	cmp	r4, r0
 800ecb8:	4623      	mov	r3, r4
 800ecba:	d807      	bhi.n	800eccc <memmove+0x20>
 800ecbc:	1e43      	subs	r3, r0, #1
 800ecbe:	42a1      	cmp	r1, r4
 800ecc0:	d008      	beq.n	800ecd4 <memmove+0x28>
 800ecc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecca:	e7f8      	b.n	800ecbe <memmove+0x12>
 800eccc:	4402      	add	r2, r0
 800ecce:	4601      	mov	r1, r0
 800ecd0:	428a      	cmp	r2, r1
 800ecd2:	d100      	bne.n	800ecd6 <memmove+0x2a>
 800ecd4:	bd10      	pop	{r4, pc}
 800ecd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecde:	e7f7      	b.n	800ecd0 <memmove+0x24>

0800ece0 <__malloc_lock>:
 800ece0:	4801      	ldr	r0, [pc, #4]	; (800ece8 <__malloc_lock+0x8>)
 800ece2:	f7ff b9df 	b.w	800e0a4 <__retarget_lock_acquire_recursive>
 800ece6:	bf00      	nop
 800ece8:	200087ac 	.word	0x200087ac

0800ecec <__malloc_unlock>:
 800ecec:	4801      	ldr	r0, [pc, #4]	; (800ecf4 <__malloc_unlock+0x8>)
 800ecee:	f7ff b9da 	b.w	800e0a6 <__retarget_lock_release_recursive>
 800ecf2:	bf00      	nop
 800ecf4:	200087ac 	.word	0x200087ac

0800ecf8 <_realloc_r>:
 800ecf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecfa:	4607      	mov	r7, r0
 800ecfc:	4614      	mov	r4, r2
 800ecfe:	460e      	mov	r6, r1
 800ed00:	b921      	cbnz	r1, 800ed0c <_realloc_r+0x14>
 800ed02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed06:	4611      	mov	r1, r2
 800ed08:	f7ff ba82 	b.w	800e210 <_malloc_r>
 800ed0c:	b922      	cbnz	r2, 800ed18 <_realloc_r+0x20>
 800ed0e:	f7ff fa2f 	bl	800e170 <_free_r>
 800ed12:	4625      	mov	r5, r4
 800ed14:	4628      	mov	r0, r5
 800ed16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed18:	f000 f826 	bl	800ed68 <_malloc_usable_size_r>
 800ed1c:	42a0      	cmp	r0, r4
 800ed1e:	d20f      	bcs.n	800ed40 <_realloc_r+0x48>
 800ed20:	4621      	mov	r1, r4
 800ed22:	4638      	mov	r0, r7
 800ed24:	f7ff fa74 	bl	800e210 <_malloc_r>
 800ed28:	4605      	mov	r5, r0
 800ed2a:	2800      	cmp	r0, #0
 800ed2c:	d0f2      	beq.n	800ed14 <_realloc_r+0x1c>
 800ed2e:	4631      	mov	r1, r6
 800ed30:	4622      	mov	r2, r4
 800ed32:	f7fe fc3b 	bl	800d5ac <memcpy>
 800ed36:	4631      	mov	r1, r6
 800ed38:	4638      	mov	r0, r7
 800ed3a:	f7ff fa19 	bl	800e170 <_free_r>
 800ed3e:	e7e9      	b.n	800ed14 <_realloc_r+0x1c>
 800ed40:	4635      	mov	r5, r6
 800ed42:	e7e7      	b.n	800ed14 <_realloc_r+0x1c>

0800ed44 <_read_r>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4d07      	ldr	r5, [pc, #28]	; (800ed64 <_read_r+0x20>)
 800ed48:	4604      	mov	r4, r0
 800ed4a:	4608      	mov	r0, r1
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	2200      	movs	r2, #0
 800ed50:	602a      	str	r2, [r5, #0]
 800ed52:	461a      	mov	r2, r3
 800ed54:	f7f2 f84a 	bl	8000dec <_read>
 800ed58:	1c43      	adds	r3, r0, #1
 800ed5a:	d102      	bne.n	800ed62 <_read_r+0x1e>
 800ed5c:	682b      	ldr	r3, [r5, #0]
 800ed5e:	b103      	cbz	r3, 800ed62 <_read_r+0x1e>
 800ed60:	6023      	str	r3, [r4, #0]
 800ed62:	bd38      	pop	{r3, r4, r5, pc}
 800ed64:	200087b4 	.word	0x200087b4

0800ed68 <_malloc_usable_size_r>:
 800ed68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed6c:	1f18      	subs	r0, r3, #4
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	bfbc      	itt	lt
 800ed72:	580b      	ldrlt	r3, [r1, r0]
 800ed74:	18c0      	addlt	r0, r0, r3
 800ed76:	4770      	bx	lr

0800ed78 <_init>:
 800ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7a:	bf00      	nop
 800ed7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed7e:	bc08      	pop	{r3}
 800ed80:	469e      	mov	lr, r3
 800ed82:	4770      	bx	lr

0800ed84 <_fini>:
 800ed84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed86:	bf00      	nop
 800ed88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8a:	bc08      	pop	{r3}
 800ed8c:	469e      	mov	lr, r3
 800ed8e:	4770      	bx	lr
