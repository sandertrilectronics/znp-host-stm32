
zigbee_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d91c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fa8  0800dacc  0800dacc  0001dacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa74  0800fa74  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa74  0800fa74  0001fa74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa7c  0800fa7c  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa7c  0800fa7c  0001fa7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa80  0800fa80  0001fa80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  0800fa84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003058  20000154  0800fbd8  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200031ac  0800fbd8  000231ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a7b6  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e29  00000000  00000000  0004a93a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c70  00000000  00000000  0004f768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a40  00000000  00000000  000513d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fe01  00000000  00000000  00052e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017b75  00000000  00000000  00082c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111e67  00000000  00000000  0009a78e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ac5f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f00  00000000  00000000  001ac670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000154 	.word	0x20000154
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dab4 	.word	0x0800dab4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000158 	.word	0x20000158
 80001ec:	0800dab4 	.word	0x0800dab4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000170 	.word	0x20000170
 80005f0:	200001d0 	.word	0x200001d0

080005f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_THREADS */
#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_GPIO_Init+0x5c>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800063a:	f007 f8d1 	bl	80077e0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a07      	ldr	r2, [pc, #28]	; (8000660 <MX_GPIO_Init+0x5c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MX_GPIO_Init+0x5c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <log_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static SemaphoreHandle_t dbg_sem;

void log_print(const char *fmt, ...) {
 8000664:	b40f      	push	{r0, r1, r2, r3}
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
	// small local working buffer
	static char working_buffer[256];

	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800066c:	f00b f88e 	bl	800b78c <xTaskGetSchedulerState>
 8000670:	4603      	mov	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d025      	beq.n	80006c2 <log_print+0x5e>
		// take semaphore
		if (xSemaphoreTake(dbg_sem, 1000) == pdFALSE)
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <log_print+0x98>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800067e:	4618      	mov	r0, r3
 8000680:	f009 ffe2 	bl	800a648 <xQueueSemaphoreTake>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d030      	beq.n	80006ec <log_print+0x88>
			return;

		// append parameters
		va_list args;
		va_start(args, fmt);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	607b      	str	r3, [r7, #4]
		vsnprintf(working_buffer, 256, fmt, args);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000698:	4819      	ldr	r0, [pc, #100]	; (8000700 <log_print+0x9c>)
 800069a:	f00c f997 	bl	800c9cc <vsniprintf>
		va_end(args);

		// send data
		HAL_UART_Transmit(&huart2, (char*) working_buffer, strlen(working_buffer), 100);
 800069e:	4818      	ldr	r0, [pc, #96]	; (8000700 <log_print+0x9c>)
 80006a0:	f7ff fda6 	bl	80001f0 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	4915      	ldr	r1, [pc, #84]	; (8000700 <log_print+0x9c>)
 80006ac:	4815      	ldr	r0, [pc, #84]	; (8000704 <log_print+0xa0>)
 80006ae:	f008 fe73 	bl	8009398 <HAL_UART_Transmit>

		// Give semaphore back
		xSemaphoreGive(dbg_sem);
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <log_print+0x98>)
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	f009 fd5a 	bl	800a174 <xQueueGenericSend>
 80006c0:	e015      	b.n	80006ee <log_print+0x8a>
	}
	else {
		// append parameters
		va_list args;
		va_start(args, fmt);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	603b      	str	r3, [r7, #0]
		vsnprintf(working_buffer, 256, fmt, args);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <log_print+0x9c>)
 80006d2:	f00c f97b 	bl	800c9cc <vsniprintf>
		va_end(args);

		// send data
		HAL_UART_Transmit(&huart2, (char*) working_buffer, strlen(working_buffer), 100);
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <log_print+0x9c>)
 80006d8:	f7ff fd8a 	bl	80001f0 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	2364      	movs	r3, #100	; 0x64
 80006e2:	4907      	ldr	r1, [pc, #28]	; (8000700 <log_print+0x9c>)
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <log_print+0xa0>)
 80006e6:	f008 fe57 	bl	8009398 <HAL_UART_Transmit>
 80006ea:	e000      	b.n	80006ee <log_print+0x8a>
			return;
 80006ec:	bf00      	nop
	}
}
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006f6:	b004      	add	sp, #16
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	200003d0 	.word	0x200003d0
 8000700:	200003d4 	.word	0x200003d4
 8000704:	20003020 	.word	0x20003020

08000708 <mtSysResetIndCb>:

/********************************************************************
 * START OF SYS CALL BACK FUNCTIONS
 */
static uint8_t mtSysResetIndCb(ResetIndFormat_t *msg) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	log_print("ZNP Version: %d.%d.%d\n", msg->MajorRel, msg->MinorRel, msg->HwRev);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	78db      	ldrb	r3, [r3, #3]
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	461a      	mov	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	795b      	ldrb	r3, [r3, #5]
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <mtSysResetIndCb+0x28>)
 8000722:	f7ff ff9f 	bl	8000664 <log_print>
	return 0;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	0800dacc 	.word	0x0800dacc

08000734 <mtVersionIndCb>:

static uint8_t mtVersionIndCb(VersionSrspFormat_t *msg) {
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af02      	add	r7, sp, #8
 800073a:	6078      	str	r0, [r7, #4]
	log_print("Version: %d %d %d %d %d %d\n", msg->MaintRel, msg->MajorRel, msg->MinorRel, msg->Product, msg->TransportRev);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	4619      	mov	r1, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	789b      	ldrb	r3, [r3, #2]
 8000746:	4618      	mov	r0, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	78db      	ldrb	r3, [r3, #3]
 800074c:	461c      	mov	r4, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	785b      	ldrb	r3, [r3, #1]
 8000752:	461a      	mov	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	9200      	str	r2, [sp, #0]
 800075c:	4623      	mov	r3, r4
 800075e:	4602      	mov	r2, r0
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <mtVersionIndCb+0x3c>)
 8000762:	f7ff ff7f 	bl	8000664 <log_print>
	return 0;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	0800dae4 	.word	0x0800dae4

08000774 <mtZdoStateChangeIndCb>:
 *
 * @param  uint8 zdoState
 *
 * @return SUCCESS or FAILURE
 */
static uint8_t mtZdoStateChangeIndCb(uint8_t newDevState) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	switch (newDevState) {
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d86b      	bhi.n	800085c <mtZdoStateChangeIndCb+0xe8>
 8000784:	a201      	add	r2, pc, #4	; (adr r2, 800078c <mtZdoStateChangeIndCb+0x18>)
 8000786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078a:	bf00      	nop
 800078c:	080007b9 	.word	0x080007b9
 8000790:	080007c3 	.word	0x080007c3
 8000794:	080007cd 	.word	0x080007cd
 8000798:	080007dd 	.word	0x080007dd
 800079c:	080007ed 	.word	0x080007ed
 80007a0:	080007fd 	.word	0x080007fd
 80007a4:	0800080d 	.word	0x0800080d
 80007a8:	0800081d 	.word	0x0800081d
 80007ac:	0800082d 	.word	0x0800082d
 80007b0:	0800083d 	.word	0x0800083d
 80007b4:	0800084d 	.word	0x0800084d
		case DEV_HOLD:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Initialized - not started automatically\n");
 80007b8:	492d      	ldr	r1, [pc, #180]	; (8000870 <mtZdoStateChangeIndCb+0xfc>)
 80007ba:	2002      	movs	r0, #2
 80007bc:	f006 f888 	bl	80068d0 <dbg_print>
			break;
 80007c0:	e051      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_INIT:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Initialized - not connected to anything\n");
 80007c2:	492c      	ldr	r1, [pc, #176]	; (8000874 <mtZdoStateChangeIndCb+0x100>)
 80007c4:	2002      	movs	r0, #2
 80007c6:	f006 f883 	bl	80068d0 <dbg_print>
			break;
 80007ca:	e04c      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_DISC:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Discovering PAN's to join\n");
 80007cc:	492a      	ldr	r1, [pc, #168]	; (8000878 <mtZdoStateChangeIndCb+0x104>)
 80007ce:	2002      	movs	r0, #2
 80007d0:	f006 f87e 	bl	80068d0 <dbg_print>
			log_print("Network Discovering\n");
 80007d4:	4829      	ldr	r0, [pc, #164]	; (800087c <mtZdoStateChangeIndCb+0x108>)
 80007d6:	f7ff ff45 	bl	8000664 <log_print>
			break;
 80007da:	e044      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_JOINING:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Joining a PAN\n");
 80007dc:	4928      	ldr	r1, [pc, #160]	; (8000880 <mtZdoStateChangeIndCb+0x10c>)
 80007de:	2002      	movs	r0, #2
 80007e0:	f006 f876 	bl	80068d0 <dbg_print>
			log_print("Network Joining\n");
 80007e4:	4827      	ldr	r0, [pc, #156]	; (8000884 <mtZdoStateChangeIndCb+0x110>)
 80007e6:	f7ff ff3d 	bl	8000664 <log_print>
			break;
 80007ea:	e03c      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_REJOIN:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: ReJoining a PAN, only for end devices\n");
 80007ec:	4926      	ldr	r1, [pc, #152]	; (8000888 <mtZdoStateChangeIndCb+0x114>)
 80007ee:	2002      	movs	r0, #2
 80007f0:	f006 f86e 	bl	80068d0 <dbg_print>
			log_print("Network Rejoining\n");
 80007f4:	4825      	ldr	r0, [pc, #148]	; (800088c <mtZdoStateChangeIndCb+0x118>)
 80007f6:	f7ff ff35 	bl	8000664 <log_print>
			break;
 80007fa:	e034      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_END_DEVICE_UNAUTH:
			log_print("Network Authenticating\n");
 80007fc:	4824      	ldr	r0, [pc, #144]	; (8000890 <mtZdoStateChangeIndCb+0x11c>)
 80007fe:	f7ff ff31 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Joined but not yet authenticated by trust center\n");
 8000802:	4924      	ldr	r1, [pc, #144]	; (8000894 <mtZdoStateChangeIndCb+0x120>)
 8000804:	2002      	movs	r0, #2
 8000806:	f006 f863 	bl	80068d0 <dbg_print>
			break;
 800080a:	e02c      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_END_DEVICE:
			log_print("Network Joined\n");
 800080c:	4822      	ldr	r0, [pc, #136]	; (8000898 <mtZdoStateChangeIndCb+0x124>)
 800080e:	f7ff ff29 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Started as device after authentication\n");
 8000812:	4922      	ldr	r1, [pc, #136]	; (800089c <mtZdoStateChangeIndCb+0x128>)
 8000814:	2002      	movs	r0, #2
 8000816:	f006 f85b 	bl	80068d0 <dbg_print>
			break;
 800081a:	e024      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_ROUTER:
			log_print("Network Joined\n");
 800081c:	481e      	ldr	r0, [pc, #120]	; (8000898 <mtZdoStateChangeIndCb+0x124>)
 800081e:	f7ff ff21 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Device joined, authenticated and is a router\n");
 8000822:	491f      	ldr	r1, [pc, #124]	; (80008a0 <mtZdoStateChangeIndCb+0x12c>)
 8000824:	2002      	movs	r0, #2
 8000826:	f006 f853 	bl	80068d0 <dbg_print>
			break;
 800082a:	e01c      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_COORD_STARTING:
			log_print("Network Starting\n");
 800082c:	481d      	ldr	r0, [pc, #116]	; (80008a4 <mtZdoStateChangeIndCb+0x130>)
 800082e:	f7ff ff19 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Starting as Zigbee Coordinator...\n");
 8000832:	491d      	ldr	r1, [pc, #116]	; (80008a8 <mtZdoStateChangeIndCb+0x134>)
 8000834:	2002      	movs	r0, #2
 8000836:	f006 f84b 	bl	80068d0 <dbg_print>
			break;
 800083a:	e014      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_ZB_COORD:
			log_print("Network Started\n");
 800083c:	481b      	ldr	r0, [pc, #108]	; (80008ac <mtZdoStateChangeIndCb+0x138>)
 800083e:	f7ff ff11 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Started as Zigbee Coordinator\n");
 8000842:	491b      	ldr	r1, [pc, #108]	; (80008b0 <mtZdoStateChangeIndCb+0x13c>)
 8000844:	2002      	movs	r0, #2
 8000846:	f006 f843 	bl	80068d0 <dbg_print>
			break;
 800084a:	e00c      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		case DEV_NWK_ORPHAN:
			log_print("Network Orphaned\n");
 800084c:	4819      	ldr	r0, [pc, #100]	; (80008b4 <mtZdoStateChangeIndCb+0x140>)
 800084e:	f7ff ff09 	bl	8000664 <log_print>
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Device has lost information about its parent\n");
 8000852:	4919      	ldr	r1, [pc, #100]	; (80008b8 <mtZdoStateChangeIndCb+0x144>)
 8000854:	2002      	movs	r0, #2
 8000856:	f006 f83b 	bl	80068d0 <dbg_print>
			break;
 800085a:	e004      	b.n	8000866 <mtZdoStateChangeIndCb+0xf2>
		default:
			dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: unknown state");
 800085c:	4917      	ldr	r1, [pc, #92]	; (80008bc <mtZdoStateChangeIndCb+0x148>)
 800085e:	2002      	movs	r0, #2
 8000860:	f006 f836 	bl	80068d0 <dbg_print>
			break;
 8000864:	bf00      	nop
	}

	//devState = (devStates_t) newDevState;

	return SUCCESS;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	0800db00 	.word	0x0800db00
 8000874:	0800db40 	.word	0x0800db40
 8000878:	0800db80 	.word	0x0800db80
 800087c:	0800dbb4 	.word	0x0800dbb4
 8000880:	0800dbcc 	.word	0x0800dbcc
 8000884:	0800dbf4 	.word	0x0800dbf4
 8000888:	0800dc08 	.word	0x0800dc08
 800088c:	0800dc48 	.word	0x0800dc48
 8000890:	0800dc5c 	.word	0x0800dc5c
 8000894:	0800dc74 	.word	0x0800dc74
 8000898:	0800dcc0 	.word	0x0800dcc0
 800089c:	0800dcd0 	.word	0x0800dcd0
 80008a0:	0800dd10 	.word	0x0800dd10
 80008a4:	0800dd58 	.word	0x0800dd58
 80008a8:	0800dd6c 	.word	0x0800dd6c
 80008ac:	0800dda8 	.word	0x0800dda8
 80008b0:	0800ddbc 	.word	0x0800ddbc
 80008b4:	0800ddf4 	.word	0x0800ddf4
 80008b8:	0800de08 	.word	0x0800de08
 80008bc:	0800de50 	.word	0x0800de50

080008c0 <mtZdoSimpleDescRspCb>:

static uint8_t mtZdoSimpleDescRspCb(SimpleDescRspFormat_t *msg) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	if (msg->Status == MT_RPC_SUCCESS) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	789b      	ldrb	r3, [r3, #2]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d156      	bne.n	800097e <mtZdoSimpleDescRspCb+0xbe>
		log_print("\tEndpoint: 0x%02X\n", msg->Endpoint);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	79db      	ldrb	r3, [r3, #7]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4830      	ldr	r0, [pc, #192]	; (8000998 <mtZdoSimpleDescRspCb+0xd8>)
 80008d8:	f7ff fec4 	bl	8000664 <log_print>
		log_print("\tProfileID: 0x%04X\n", msg->ProfileID);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	891b      	ldrh	r3, [r3, #8]
 80008e0:	4619      	mov	r1, r3
 80008e2:	482e      	ldr	r0, [pc, #184]	; (800099c <mtZdoSimpleDescRspCb+0xdc>)
 80008e4:	f7ff febe 	bl	8000664 <log_print>
		log_print("\tDeviceID: 0x%04X\n", msg->DeviceID);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	895b      	ldrh	r3, [r3, #10]
 80008ec:	4619      	mov	r1, r3
 80008ee:	482c      	ldr	r0, [pc, #176]	; (80009a0 <mtZdoSimpleDescRspCb+0xe0>)
 80008f0:	f7ff feb8 	bl	8000664 <log_print>
		log_print("\tDeviceVersion: 0x%02X\n", msg->DeviceVersion);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7b1b      	ldrb	r3, [r3, #12]
 80008f8:	4619      	mov	r1, r3
 80008fa:	482a      	ldr	r0, [pc, #168]	; (80009a4 <mtZdoSimpleDescRspCb+0xe4>)
 80008fc:	f7ff feb2 	bl	8000664 <log_print>
		log_print("\tNumInClusters: %d\n", msg->NumInClusters);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7b5b      	ldrb	r3, [r3, #13]
 8000904:	4619      	mov	r1, r3
 8000906:	4828      	ldr	r0, [pc, #160]	; (80009a8 <mtZdoSimpleDescRspCb+0xe8>)
 8000908:	f7ff feac 	bl	8000664 <log_print>
		uint32_t i;
		for (i = 0; i < msg->NumInClusters; i++) {
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	e00d      	b.n	800092e <mtZdoSimpleDescRspCb+0x6e>
			log_print("\t\tInClusterList[%d]: 0x%04X\n", i, msg->InClusterList[i]);
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3304      	adds	r3, #4
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	88db      	ldrh	r3, [r3, #6]
 800091e:	461a      	mov	r2, r3
 8000920:	68f9      	ldr	r1, [r7, #12]
 8000922:	4822      	ldr	r0, [pc, #136]	; (80009ac <mtZdoSimpleDescRspCb+0xec>)
 8000924:	f7ff fe9e 	bl	8000664 <log_print>
		for (i = 0; i < msg->NumInClusters; i++) {
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	7b5b      	ldrb	r3, [r3, #13]
 8000932:	461a      	mov	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4293      	cmp	r3, r2
 8000938:	d3eb      	bcc.n	8000912 <mtZdoSimpleDescRspCb+0x52>
		}
		log_print("\tNumOutClusters: %d\n", msg->NumOutClusters);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000940:	4619      	mov	r1, r3
 8000942:	481b      	ldr	r0, [pc, #108]	; (80009b0 <mtZdoSimpleDescRspCb+0xf0>)
 8000944:	f7ff fe8e 	bl	8000664 <log_print>
		for (i = 0; i < msg->NumOutClusters; i++) {
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	e00c      	b.n	8000968 <mtZdoSimpleDescRspCb+0xa8>
			log_print("\t\tOutClusterList[%d]: 0x%04X\n", i, msg->OutClusterList[i]);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	3218      	adds	r2, #24
 8000954:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000958:	461a      	mov	r2, r3
 800095a:	68f9      	ldr	r1, [r7, #12]
 800095c:	4815      	ldr	r0, [pc, #84]	; (80009b4 <mtZdoSimpleDescRspCb+0xf4>)
 800095e:	f7ff fe81 	bl	8000664 <log_print>
		for (i = 0; i < msg->NumOutClusters; i++) {
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4293      	cmp	r3, r2
 8000974:	d3eb      	bcc.n	800094e <mtZdoSimpleDescRspCb+0x8e>
		}
		log_print("\n");
 8000976:	4810      	ldr	r0, [pc, #64]	; (80009b8 <mtZdoSimpleDescRspCb+0xf8>)
 8000978:	f7ff fe74 	bl	8000664 <log_print>
 800097c:	e005      	b.n	800098a <mtZdoSimpleDescRspCb+0xca>
	}
	else {
		log_print("SimpleDescRsp Status: FAIL 0x%02X\n", msg->Status);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	789b      	ldrb	r3, [r3, #2]
 8000982:	4619      	mov	r1, r3
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <mtZdoSimpleDescRspCb+0xfc>)
 8000986:	f7ff fe6d 	bl	8000664 <log_print>
	}

	return msg->Status;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	789b      	ldrb	r3, [r3, #2]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	0800de78 	.word	0x0800de78
 800099c:	0800de8c 	.word	0x0800de8c
 80009a0:	0800dea0 	.word	0x0800dea0
 80009a4:	0800deb4 	.word	0x0800deb4
 80009a8:	0800decc 	.word	0x0800decc
 80009ac:	0800dee0 	.word	0x0800dee0
 80009b0:	0800df00 	.word	0x0800df00
 80009b4:	0800df18 	.word	0x0800df18
 80009b8:	0800df38 	.word	0x0800df38
 80009bc:	0800df3c 	.word	0x0800df3c

080009c0 <mtZdoMgmtLqiRspCb>:

static uint8_t mtZdoMgmtLqiRspCb(MgmtLqiRspFormat_t *msg) {
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	 else {
	 log_print("MgmtLqiRsp Status: FAIL 0x%02X\n", msg->Status);
	 }

	 return msg->Status;*/
	return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <mtZdoActiveEpRspCb>:

static uint8_t mtZdoActiveEpRspCb(ActiveEpRspFormat_t *msg) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	//SimpleDescReqFormat_t simReq;
	log_print("NwkAddr: 0x%04X\n", msg->NwkAddr);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	889b      	ldrh	r3, [r3, #4]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4819      	ldr	r0, [pc, #100]	; (8000a4c <mtZdoActiveEpRspCb+0x74>)
 80009e8:	f7ff fe3c 	bl	8000664 <log_print>
	if (msg->Status == MT_RPC_SUCCESS) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	789b      	ldrb	r3, [r3, #2]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d11e      	bne.n	8000a32 <mtZdoActiveEpRspCb+0x5a>
		log_print("Number of Endpoints: %d\nActive Endpoints: ", msg->ActiveEPCount);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	799b      	ldrb	r3, [r3, #6]
 80009f8:	4619      	mov	r1, r3
 80009fa:	4815      	ldr	r0, [pc, #84]	; (8000a50 <mtZdoActiveEpRspCb+0x78>)
 80009fc:	f7ff fe32 	bl	8000664 <log_print>
		uint32_t i;
		for (i = 0; i < msg->ActiveEPCount; i++) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e00b      	b.n	8000a1e <mtZdoActiveEpRspCb+0x46>
			log_print("0x%02X\t", msg->ActiveEPList[i]);
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	3307      	adds	r3, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	4810      	ldr	r0, [pc, #64]	; (8000a54 <mtZdoActiveEpRspCb+0x7c>)
 8000a14:	f7ff fe26 	bl	8000664 <log_print>
		for (i = 0; i < msg->ActiveEPCount; i++) {
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	799b      	ldrb	r3, [r3, #6]
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d3ed      	bcc.n	8000a06 <mtZdoActiveEpRspCb+0x2e>

		}
		log_print("\n");
 8000a2a:	480b      	ldr	r0, [pc, #44]	; (8000a58 <mtZdoActiveEpRspCb+0x80>)
 8000a2c:	f7ff fe1a 	bl	8000664 <log_print>
 8000a30:	e005      	b.n	8000a3e <mtZdoActiveEpRspCb+0x66>
	}
	else {
		log_print("ActiveEpRsp Status: FAIL 0x%02X\n", msg->Status);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	789b      	ldrb	r3, [r3, #2]
 8000a36:	4619      	mov	r1, r3
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <mtZdoActiveEpRspCb+0x84>)
 8000a3a:	f7ff fe13 	bl	8000664 <log_print>
	}

	return msg->Status;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	789b      	ldrb	r3, [r3, #2]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	0800df60 	.word	0x0800df60
 8000a50:	0800df74 	.word	0x0800df74
 8000a54:	0800dfa0 	.word	0x0800dfa0
 8000a58:	0800df38 	.word	0x0800df38
 8000a5c:	0800dfa8 	.word	0x0800dfa8

08000a60 <mtZdoEndDeviceAnnceIndCb>:

static uint8_t mtZdoEndDeviceAnnceIndCb(EndDeviceAnnceIndFormat_t *msg) {
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	// new device
	log_print("New device joined network:\n");
 8000a68:	481b      	ldr	r0, [pc, #108]	; (8000ad8 <mtZdoEndDeviceAnnceIndCb+0x78>)
 8000a6a:	f7ff fdfb 	bl	8000664 <log_print>
	log_print("SrcAddr: %04x\n", msg->SrcAddr);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4819      	ldr	r0, [pc, #100]	; (8000adc <mtZdoEndDeviceAnnceIndCb+0x7c>)
 8000a76:	f7ff fdf5 	bl	8000664 <log_print>
	log_print("NwkAddr: %04x\n", msg->NwkAddr);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	885b      	ldrh	r3, [r3, #2]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4817      	ldr	r0, [pc, #92]	; (8000ae0 <mtZdoEndDeviceAnnceIndCb+0x80>)
 8000a82:	f7ff fdef 	bl	8000664 <log_print>
	uint32_t top = msg->IEEEAddr >> 32;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	f04f 0400 	mov.w	r4, #0
 8000a94:	0013      	movs	r3, r2
 8000a96:	2400      	movs	r4, #0
 8000a98:	617b      	str	r3, [r7, #20]
	uint32_t bot = msg->IEEEAddr & 0xffffffff;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000aa0:	613b      	str	r3, [r7, #16]
	log_print("IEEEAddr: %08x%08x\r\n", top, bot);
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	6979      	ldr	r1, [r7, #20]
 8000aa6:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <mtZdoEndDeviceAnnceIndCb+0x84>)
 8000aa8:	f7ff fddc 	bl	8000664 <log_print>
	log_print("Capabilities: %02x\n", msg->Capabilities);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7c1b      	ldrb	r3, [r3, #16]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <mtZdoEndDeviceAnnceIndCb+0x88>)
 8000ab4:	f7ff fdd6 	bl	8000664 <log_print>

	// check if the endpoint is active
	ActiveEpReqFormat_t actReq;
	actReq.DstAddr = msg->NwkAddr;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	885b      	ldrh	r3, [r3, #2]
 8000abc:	81bb      	strh	r3, [r7, #12]
	actReq.NwkAddrOfInterest = msg->NwkAddr;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	885b      	ldrh	r3, [r3, #2]
 8000ac2:	81fb      	strh	r3, [r7, #14]
	zdoActiveEpReq(&actReq);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 f813 	bl	8003af4 <zdoActiveEpReq>

	//
	return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	0800dfcc 	.word	0x0800dfcc
 8000adc:	0800dfe8 	.word	0x0800dfe8
 8000ae0:	0800dff8 	.word	0x0800dff8
 8000ae4:	0800e008 	.word	0x0800e008
 8000ae8:	0800e020 	.word	0x0800e020

08000aec <mtAfDataConfirmCb>:
				};
/********************************************************************
 * AF CALL BACK FUNCTIONS
 */

static uint8_t mtAfDataConfirmCb(DataConfirmFormat_t *msg) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	if (msg->Status == MT_RPC_SUCCESS) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d103      	bne.n	8000b04 <mtAfDataConfirmCb+0x18>
		log_print("Message transmited Succesfully!\n");
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <mtAfDataConfirmCb+0x2c>)
 8000afe:	f7ff fdb1 	bl	8000664 <log_print>
 8000b02:	e002      	b.n	8000b0a <mtAfDataConfirmCb+0x1e>
	}
	else {
		log_print("Message failed to transmit\n");
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <mtAfDataConfirmCb+0x30>)
 8000b06:	f7ff fdad 	bl	8000664 <log_print>
	}
	return msg->Status;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	0800e034 	.word	0x0800e034
 8000b1c:	0800e058 	.word	0x0800e058

08000b20 <mtAfIncomingMsgCb>:

static uint8_t mtAfIncomingMsgCb(IncomingMsgFormat_t *msg) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	log_print("\nIncoming Message from Endpoint 0x%02X and Address 0x%04X:\n", msg->SrcEndpoint, msg->SrcAddr);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	799b      	ldrb	r3, [r3, #6]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	889b      	ldrh	r3, [r3, #4]
 8000b32:	461a      	mov	r2, r3
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <mtAfIncomingMsgCb+0x4c>)
 8000b36:	f7ff fd95 	bl	8000664 <log_print>
	for (uint8_t i = 0; i < msg->Len; i++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e00a      	b.n	8000b56 <mtAfIncomingMsgCb+0x36>
		log_print("%02x ", msg->Data[i]);;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	7c9b      	ldrb	r3, [r3, #18]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4809      	ldr	r0, [pc, #36]	; (8000b70 <mtAfIncomingMsgCb+0x50>)
 8000b4c:	f7ff fd8a 	bl	8000664 <log_print>
	for (uint8_t i = 0; i < msg->Len; i++)
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	3301      	adds	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7c5b      	ldrb	r3, [r3, #17]
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3ef      	bcc.n	8000b40 <mtAfIncomingMsgCb+0x20>

	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	0800e074 	.word	0x0800e074
 8000b70:	0800e0b0 	.word	0x0800e0b0

08000b74 <mtAppCfgCommissioningNotifyCb>:
				NULL,			    // MT_AF_REFLECT_ERROR
		};

////////////////////////////////////////////////////

uint8_t mtAppCfgCommissioningNotifyCb(appCfgCommissioningNotifyFormat_t *msg) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	log_print("Commissioning notify\r\n");
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <mtAppCfgCommissioningNotifyCb+0x3c>)
 8000b7e:	f7ff fd71 	bl	8000664 <log_print>
	log_print("Status: %02x\r\n", msg->status);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <mtAppCfgCommissioningNotifyCb+0x40>)
 8000b8a:	f7ff fd6b 	bl	8000664 <log_print>
	log_print("Mode: %02x\r\n", msg->commissioningMode1);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <mtAppCfgCommissioningNotifyCb+0x44>)
 8000b96:	f7ff fd65 	bl	8000664 <log_print>
	log_print("Mode: %02x\r\n", msg->commissioningMode2);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	789b      	ldrb	r3, [r3, #2]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <mtAppCfgCommissioningNotifyCb+0x44>)
 8000ba2:	f7ff fd5f 	bl	8000664 <log_print>
	return 0;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	0800e0b8 	.word	0x0800e0b8
 8000bb4:	0800e0d0 	.word	0x0800e0d0
 8000bb8:	0800e0e0 	.word	0x0800e0e0

08000bbc <mtAppCfgSetChannelCb>:

uint8_t mtAppCfgSetChannelCb(appCfgSetChannelFormat_t *msg) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	log_print("Set channel response: %02x (%s)\r\n", msg->success, (msg->success) ? "ERROR" : "SUCCESS");
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <mtAppCfgSetChannelCb+0x1a>
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <mtAppCfgSetChannelCb+0x30>)
 8000bd4:	e000      	b.n	8000bd8 <mtAppCfgSetChannelCb+0x1c>
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <mtAppCfgSetChannelCb+0x34>)
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <mtAppCfgSetChannelCb+0x38>)
 8000bdc:	f7ff fd42 	bl	8000664 <log_print>
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800e0f0 	.word	0x0800e0f0
 8000bf0:	0800e0f8 	.word	0x0800e0f8
 8000bf4:	0800e100 	.word	0x0800e100

08000bf8 <mtAppCfgCommissioningStartCb>:

uint8_t mtAppCfgCommissioningStartCb(appCfgStartCommissioningStart_t *msg) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	log_print("Commissioning start response: %02x (%s)\r\n", msg->success, (msg->success) ? "ERROR" : "SUCCESS");
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <mtAppCfgCommissioningStartCb+0x1a>
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <mtAppCfgCommissioningStartCb+0x30>)
 8000c10:	e000      	b.n	8000c14 <mtAppCfgCommissioningStartCb+0x1c>
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <mtAppCfgCommissioningStartCb+0x34>)
 8000c14:	461a      	mov	r2, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <mtAppCfgCommissioningStartCb+0x38>)
 8000c18:	f7ff fd24 	bl	8000664 <log_print>
	return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	0800e0f0 	.word	0x0800e0f0
 8000c2c:	0800e0f8 	.word	0x0800e0f8
 8000c30:	0800e124 	.word	0x0800e124

08000c34 <mtUtilGetDeviceInfoCb>:
		};

/********************************************************************
 * START OF UTIL CALL BACK FUNCTIONS
 */
static uint8_t mtUtilGetDeviceInfoCb(utilGetDeviceInfoFormat_t *msg) {
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	log_print("Get Info Response\r\n");
 8000c3c:	4827      	ldr	r0, [pc, #156]	; (8000cdc <mtUtilGetDeviceInfoCb+0xa8>)
 8000c3e:	f7ff fd11 	bl	8000664 <log_print>
	log_print("Success: %02x\r\n", msg->success);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	4619      	mov	r1, r3
 8000c48:	4825      	ldr	r0, [pc, #148]	; (8000ce0 <mtUtilGetDeviceInfoCb+0xac>)
 8000c4a:	f7ff fd0b 	bl	8000664 <log_print>
	uint32_t top = msg->ieee_addr >> 32;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	f04f 0400 	mov.w	r4, #0
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	2400      	movs	r4, #0
 8000c60:	613b      	str	r3, [r7, #16]
	uint32_t bot = msg->ieee_addr & 0xffffffff;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000c68:	60fb      	str	r3, [r7, #12]
	log_print("IEEE Addr: %08x%08x\r\n", top, bot);
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	6939      	ldr	r1, [r7, #16]
 8000c6e:	481d      	ldr	r0, [pc, #116]	; (8000ce4 <mtUtilGetDeviceInfoCb+0xb0>)
 8000c70:	f7ff fcf8 	bl	8000664 <log_print>
	log_print("Short Addr: %04x\r\n", msg->short_addr);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	8a1b      	ldrh	r3, [r3, #16]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <mtUtilGetDeviceInfoCb+0xb4>)
 8000c7c:	f7ff fcf2 	bl	8000664 <log_print>
	log_print("Device Type: %02x\r\n", msg->device_type);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7c9b      	ldrb	r3, [r3, #18]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4819      	ldr	r0, [pc, #100]	; (8000cec <mtUtilGetDeviceInfoCb+0xb8>)
 8000c88:	f7ff fcec 	bl	8000664 <log_print>
	log_print("Device state: %02x\r\n", msg->device_state);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7cdb      	ldrb	r3, [r3, #19]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <mtUtilGetDeviceInfoCb+0xbc>)
 8000c94:	f7ff fce6 	bl	8000664 <log_print>
	log_print("Ass Dev Cnt: %02x\r\n", msg->ass_device_cnt);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7d1b      	ldrb	r3, [r3, #20]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <mtUtilGetDeviceInfoCb+0xc0>)
 8000ca0:	f7ff fce0 	bl	8000664 <log_print>
	for (uint8_t i = 0; i < msg->ass_device_cnt; i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	75fb      	strb	r3, [r7, #23]
 8000ca8:	e00d      	b.n	8000cc6 <mtUtilGetDeviceInfoCb+0x92>
		log_print("Ass Dev %d: %04x\r\n", i, msg->ass_device_list[i]);
 8000caa:	7df9      	ldrb	r1, [r7, #23]
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	3308      	adds	r3, #8
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	88db      	ldrh	r3, [r3, #6]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <mtUtilGetDeviceInfoCb+0xc4>)
 8000cbc:	f7ff fcd2 	bl	8000664 <log_print>
	for (uint8_t i = 0; i < msg->ass_device_cnt; i++)
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	75fb      	strb	r3, [r7, #23]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7d1b      	ldrb	r3, [r3, #20]
 8000cca:	7dfa      	ldrb	r2, [r7, #23]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d3ec      	bcc.n	8000caa <mtUtilGetDeviceInfoCb+0x76>
	return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	371c      	adds	r7, #28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd90      	pop	{r4, r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	0800e150 	.word	0x0800e150
 8000ce0:	0800e164 	.word	0x0800e164
 8000ce4:	0800e174 	.word	0x0800e174
 8000ce8:	0800e18c 	.word	0x0800e18c
 8000cec:	0800e1a0 	.word	0x0800e1a0
 8000cf0:	0800e1b4 	.word	0x0800e1b4
 8000cf4:	0800e1cc 	.word	0x0800e1cc
 8000cf8:	0800e1e0 	.word	0x0800e1e0

08000cfc <rcpWaitPeriod>:
		mtUtilGetDeviceInfoCb //
		};

/////////////////////////////////////////////////

void rcpWaitPeriod(uint32_t period) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	uint32_t waittime = period;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	617b      	str	r3, [r7, #20]
	uint32_t start = xTaskGetTickCount();
 8000d08:	f00a fa28 	bl	800b15c <xTaskGetTickCount>
 8000d0c:	6138      	str	r0, [r7, #16]
	while (rpcWaitMqClientMsg(waittime) == 0) {
 8000d0e:	e00c      	b.n	8000d2a <rcpWaitPeriod+0x2e>
		uint32_t passed_time = start - xTaskGetTickCount();
 8000d10:	f00a fa24 	bl	800b15c <xTaskGetTickCount>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
		waittime -= passed_time;
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
		start = xTaskGetTickCount();
 8000d24:	f00a fa1a 	bl	800b15c <xTaskGetTickCount>
 8000d28:	6138      	str	r0, [r7, #16]
	while (rpcWaitMqClientMsg(waittime) == 0) {
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f005 fef8 	bl	8006b20 <rpcWaitMqClientMsg>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0ec      	beq.n	8000d10 <rcpWaitPeriod+0x14>
	}
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <znp_init_coordinator>:

// init coordinator
// taken from https://sunmaysky.blogspot.com/2017/02/use-ztool-z-stack-30-znp-to-set-up.html
int znp_init_coordinator(uint8_t enable_commissioning) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0c6      	sub	sp, #280	; 0x118
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4602      	mov	r2, r0
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	701a      	strb	r2, [r3, #0]
	 req.Offset = 0x00;
	 req.Len = 0x01;
	 req.Value[0] = 0x03;
	 sysOsalNvWrite(&req);*/

	rcpWaitPeriod(1000);
 8000d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d50:	f7ff ffd4 	bl	8000cfc <rcpWaitPeriod>
	log_print("----------------------\r\n");
 8000d54:	484d      	ldr	r0, [pc, #308]	; (8000e8c <znp_init_coordinator+0x14c>)
 8000d56:	f7ff fc85 	bl	8000664 <log_print>

	// hard reset
	rst.Type = 0x00;
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
	sysResetReq(&rst);
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 fff6 	bl	8002d58 <sysResetReq>

	rcpWaitPeriod(4000);
 8000d6c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000d70:	f7ff ffc4 	bl	8000cfc <rcpWaitPeriod>
	log_print("----------------------\r\n");
 8000d74:	4845      	ldr	r0, [pc, #276]	; (8000e8c <znp_init_coordinator+0x14c>)
 8000d76:	f7ff fc75 	bl	8000664 <log_print>

	// Write ZCD_NV_LOGICAL_TYPE to 0 which means coordinator
	req.Id = 0x0087;
 8000d7a:	2387      	movs	r3, #135	; 0x87
 8000d7c:	83bb      	strh	r3, [r7, #28]
	req.Offset = 0x00;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	77bb      	strb	r3, [r7, #30]
	req.Len = 0x01;
 8000d82:	2301      	movs	r3, #1
 8000d84:	77fb      	strb	r3, [r7, #31]
	req.Value[0] = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3020 	strb.w	r3, [r7, #32]
	sysOsalNvWrite(&req);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 f93f 	bl	8003014 <sysOsalNvWrite>

	rcpWaitPeriod(1000);
 8000d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9a:	f7ff ffaf 	bl	8000cfc <rcpWaitPeriod>
	log_print("----------------------\r\n");
 8000d9e:	483b      	ldr	r0, [pc, #236]	; (8000e8c <znp_init_coordinator+0x14c>)
 8000da0:	f7ff fc60 	bl	8000664 <log_print>

	// set primary channel to 13
	chn.primaryChannel = 1;
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
	chn.channel = CFG_CHANNEL_0x00002000;
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db4:	605a      	str	r2, [r3, #4]
	appCfgSetChannel(&chn);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fb7e 	bl	80024bc <appCfgSetChannel>

	rcpWaitPeriod(1000);
 8000dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc4:	f7ff ff9a 	bl	8000cfc <rcpWaitPeriod>
	log_print("----------------------\r\n");
 8000dc8:	4830      	ldr	r0, [pc, #192]	; (8000e8c <znp_init_coordinator+0x14c>)
 8000dca:	f7ff fc4b 	bl	8000664 <log_print>

	// disable secondary channel
	chn.primaryChannel = 0;
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
	chn.channel = CFG_CHANNEL_NONE;
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
	appCfgSetChannel(&chn);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fb6a 	bl	80024bc <appCfgSetChannel>

	rcpWaitPeriod(1000);
 8000de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dec:	f7ff ff86 	bl	8000cfc <rcpWaitPeriod>
	log_print("----------------------\r\n");
 8000df0:	4826      	ldr	r0, [pc, #152]	; (8000e8c <znp_init_coordinator+0x14c>)
 8000df2:	f7ff fc37 	bl	8000664 <log_print>

	if (enable_commissioning) {
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d02e      	beq.n	8000e5c <znp_init_coordinator+0x11c>
		// start commissioning using network formation
		strt.commissioningMode = CFG_COMM_MODE_NWK_FORMATION;
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	2204      	movs	r2, #4
 8000e04:	701a      	strb	r2, [r3, #0]
		appCfgStartCommissioning(&strt);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fb89 	bl	8002522 <appCfgStartCommissioning>

		rcpWaitPeriod(10000);
 8000e10:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e14:	f7ff ff72 	bl	8000cfc <rcpWaitPeriod>

		log_print("----------------------\r\n");
 8000e18:	481c      	ldr	r0, [pc, #112]	; (8000e8c <znp_init_coordinator+0x14c>)
 8000e1a:	f7ff fc23 	bl	8000664 <log_print>

		// get device info
		utilGetDeviceInfo();
 8000e1e:	f002 fdc5 	bl	80039ac <utilGetDeviceInfo>

		rcpWaitPeriod(1000);
 8000e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e26:	f7ff ff69 	bl	8000cfc <rcpWaitPeriod>
		log_print("----------------------\r\n");
 8000e2a:	4818      	ldr	r0, [pc, #96]	; (8000e8c <znp_init_coordinator+0x14c>)
 8000e2c:	f7ff fc1a 	bl	8000664 <log_print>

		// Write ZCD_NV_LOGICAL_TYPE to 0 which means coordinator
		req.Id = 0x008F;
 8000e30:	238f      	movs	r3, #143	; 0x8f
 8000e32:	83bb      	strh	r3, [r7, #28]
		req.Offset = 0x00;
 8000e34:	2300      	movs	r3, #0
 8000e36:	77bb      	strb	r3, [r7, #30]
		req.Len = 0x01;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	77fb      	strb	r3, [r7, #31]
		req.Value[0] = 0x01;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f887 3020 	strb.w	r3, [r7, #32]
		sysOsalNvWrite(&req);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 f8e4 	bl	8003014 <sysOsalNvWrite>

		rcpWaitPeriod(1000);
 8000e4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e50:	f7ff ff54 	bl	8000cfc <rcpWaitPeriod>
		log_print("----------------------\r\n");
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <znp_init_coordinator+0x14c>)
 8000e56:	f7ff fc05 	bl	8000664 <log_print>
 8000e5a:	e008      	b.n	8000e6e <znp_init_coordinator+0x12e>
	}
	else {
		// get device info
		utilGetDeviceInfo();
 8000e5c:	f002 fda6 	bl	80039ac <utilGetDeviceInfo>

		rcpWaitPeriod(1000);
 8000e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e64:	f7ff ff4a 	bl	8000cfc <rcpWaitPeriod>
		log_print("----------------------\r\n");
 8000e68:	4808      	ldr	r0, [pc, #32]	; (8000e8c <znp_init_coordinator+0x14c>)
 8000e6a:	f7ff fbfb 	bl	8000664 <log_print>
	}

	// start commissioning using network steering
	strt.commissioningMode = CFG_COMM_MODE_NWK_STEERING;
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	2202      	movs	r2, #2
 8000e74:	701a      	strb	r2, [r3, #0]
	appCfgStartCommissioning(&strt);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fb51 	bl	8002522 <appCfgStartCommissioning>

	//
	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	0800e1f4 	.word	0x0800e1f4

08000e90 <register_clusters>:
#define ZCL_READ_ATTR			0x00
#define ZCL_READ_ATTR_RSP		0x01
#define ZCL_WRITE_ATTR			0x02
#define ZCL_WRITE_ATTR_RSP		0x04

void register_clusters(uint16_t addr) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0bc      	sub	sp, #240	; 0xf0
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
	SimpleDescReqFormat_t desc_req;
	ActiveEpReqFormat_t act_req;
	RegisterFormat_t reg_req;
	DataRequestFormat_t data_req;

	rcpWaitPeriod(10000);
 8000e9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e9e:	f7ff ff2d 	bl	8000cfc <rcpWaitPeriod>
	log_print("1 ----------------------\r\n");
 8000ea2:	484c      	ldr	r0, [pc, #304]	; (8000fd4 <register_clusters+0x144>)
 8000ea4:	f7ff fbde 	bl	8000664 <log_print>

	// check if the endpoint is active
	act_req.DstAddr = addr;
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	act_req.NwkAddrOfInterest = addr;
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	zdoActiveEpReq(&act_req);
 8000eb4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fe1b 	bl	8003af4 <zdoActiveEpReq>

	rcpWaitPeriod(10000);
 8000ebe:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ec2:	f7ff ff1b 	bl	8000cfc <rcpWaitPeriod>
	log_print("2 ----------------------\r\n");
 8000ec6:	4844      	ldr	r0, [pc, #272]	; (8000fd8 <register_clusters+0x148>)
 8000ec8:	f7ff fbcc 	bl	8000664 <log_print>

	// request descriptors
	desc_req.DstAddr = addr;
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
	desc_req.NwkAddrOfInterest = addr;
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
	desc_req.Endpoint = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
	zdoSimpleDescReq(&desc_req);
 8000ede:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 fd90 	bl	8003a08 <zdoSimpleDescReq>

	rcpWaitPeriod(10000);
 8000ee8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000eec:	f7ff ff06 	bl	8000cfc <rcpWaitPeriod>
	log_print("3 ----------------------\r\n");
 8000ef0:	483a      	ldr	r0, [pc, #232]	; (8000fdc <register_clusters+0x14c>)
 8000ef2:	f7ff fbb7 	bl	8000664 <log_print>

	// register device
	reg_req.EndPoint = 0x01;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	reg_req.AppProfId = 0x0104;
 8000efc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f00:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	reg_req.AppDeviceId = 0x0301;
 8000f04:	f240 3301 	movw	r3, #769	; 0x301
 8000f08:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	reg_req.AppDevVer = 0x01;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	reg_req.LatencyReq = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	reg_req.AppNumInClusters = 8;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
	reg_req.AppInClusterList[0] = 0x0000;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	reg_req.AppInClusterList[1] = 0x0001;
 8000f24:	2301      	movs	r3, #1
 8000f26:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	reg_req.AppInClusterList[2] = 0x0003;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	reg_req.AppInClusterList[3] = 0x000a;
 8000f30:	230a      	movs	r3, #10
 8000f32:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
	reg_req.AppInClusterList[4] = 0x0020;
 8000f36:	2320      	movs	r3, #32
 8000f38:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	reg_req.AppInClusterList[5] = 0x0201;
 8000f3c:	f240 2301 	movw	r3, #513	; 0x201
 8000f40:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
	reg_req.AppInClusterList[6] = 0x0204;
 8000f44:	f44f 7301 	mov.w	r3, #516	; 0x204
 8000f48:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	reg_req.AppInClusterList[7] = 0x0b05;
 8000f4c:	f640 3305 	movw	r3, #2821	; 0xb05
 8000f50:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	reg_req.AppNumOutClusters = 2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	reg_req.AppOutClusterList[0] = 0x0000;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	reg_req.AppOutClusterList[1] = 0x0019;
 8000f60:	2319      	movs	r3, #25
 8000f62:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	afRegister(&reg_req);
 8000f66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fc1d 	bl	80017aa <afRegister>

	rcpWaitPeriod(10000);
 8000f70:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f74:	f7ff fec2 	bl	8000cfc <rcpWaitPeriod>
	log_print("4 ----------------------\r\n");
 8000f78:	4819      	ldr	r0, [pc, #100]	; (8000fe0 <register_clusters+0x150>)
 8000f7a:	f7ff fb73 	bl	8000664 <log_print>

	// read a cluster
	data_req.DstAddr = addr;
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	81bb      	strh	r3, [r7, #12]
	data_req.DstEndpoint = 0x01;
 8000f82:	2301      	movs	r3, #1
 8000f84:	73bb      	strb	r3, [r7, #14]
	data_req.SrcEndpoint = 0x01;
 8000f86:	2301      	movs	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
	data_req.ClusterID = 0x0201;
 8000f8a:	f240 2301 	movw	r3, #513	; 0x201
 8000f8e:	823b      	strh	r3, [r7, #16]
	data_req.TransID = 0x05;
 8000f90:	2305      	movs	r3, #5
 8000f92:	74bb      	strb	r3, [r7, #18]
	data_req.Options = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	74fb      	strb	r3, [r7, #19]
	data_req.Radius = 0x07;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	753b      	strb	r3, [r7, #20]
	data_req.Len = 5;
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	757b      	strb	r3, [r7, #21]
	data_req.Data[0] = 0x00; // frame control
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	75bb      	strb	r3, [r7, #22]
	data_req.Data[1] = 0x02; // transaction sequence num
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	75fb      	strb	r3, [r7, #23]
	data_req.Data[2] = ZCL_READ_ATTR; // Command ID
 8000fa8:	2300      	movs	r3, #0
 8000faa:	763b      	strb	r3, [r7, #24]
	data_req.Data[3] = 0x00; // Cluster 16bit low
 8000fac:	2300      	movs	r3, #0
 8000fae:	767b      	strb	r3, [r7, #25]
	data_req.Data[4] = 0x00; // Cluster 16bit high
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	76bb      	strb	r3, [r7, #26]
	afDataRequest(&data_req);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fce2 	bl	8001982 <afDataRequest>

	rcpWaitPeriod(10000);
 8000fbe:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fc2:	f7ff fe9b 	bl	8000cfc <rcpWaitPeriod>
	log_print("5 ----------------------\r\n");
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <register_clusters+0x154>)
 8000fc8:	f7ff fb4c 	bl	8000664 <log_print>
}
 8000fcc:	bf00      	nop
 8000fce:	37f0      	adds	r7, #240	; 0xf0
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	0800e210 	.word	0x0800e210
 8000fd8:	0800e22c 	.word	0x0800e22c
 8000fdc:	0800e248 	.word	0x0800e248
 8000fe0:	0800e264 	.word	0x0800e264
 8000fe4:	0800e280 	.word	0x0800e280

08000fe8 <vAppTask>:

/////////////////////////////////////////////////
void vAppTask(void *pvParameters) {
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	b0a1      	sub	sp, #132	; 0x84
 8000fec:	af1e      	add	r7, sp, #120	; 0x78
 8000fee:	6078      	str	r0, [r7, #4]
	log_print("System started\r\n");
 8000ff0:	4821      	ldr	r0, [pc, #132]	; (8001078 <vAppTask+0x90>)
 8000ff2:	f7ff fb37 	bl	8000664 <log_print>

	//Register callbacks
	sysRegisterCallbacks(mtSysCb);
 8000ff6:	4e21      	ldr	r6, [pc, #132]	; (800107c <vAppTask+0x94>)
 8000ff8:	466d      	mov	r5, sp
 8000ffa:	f106 0410 	add.w	r4, r6, #16
 8000ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800100a:	e885 0003 	stmia.w	r5, {r0, r1}
 800100e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001012:	f002 fa2d 	bl	8003470 <sysRegisterCallbacks>
	zdoRegisterCallbacks(mtZdoCb);
 8001016:	4c1a      	ldr	r4, [pc, #104]	; (8001080 <vAppTask+0x98>)
 8001018:	4668      	mov	r0, sp
 800101a:	f104 0310 	add.w	r3, r4, #16
 800101e:	2274      	movs	r2, #116	; 0x74
 8001020:	4619      	mov	r1, r3
 8001022:	f00b fa25 	bl	800c470 <memcpy>
 8001026:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800102a:	f005 fbd5 	bl	80067d8 <zdoRegisterCallbacks>
	afRegisterCallbacks(mtAfCb);
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <vAppTask+0x9c>)
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	9200      	str	r2, [sp, #0]
 8001034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001036:	f001 f877 	bl	8002128 <afRegisterCallbacks>
	appCfgRegisterCallbacks(mtAppCfgCb);
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <vAppTask+0xa0>)
 800103c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001040:	f001 f92a 	bl	8002298 <appCfgRegisterCallbacks>
	utilRegisterCallbacks(mtUtilCb);
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <vAppTask+0xa4>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f002 fb60 	bl	800370c <utilRegisterCallbacks>

	// startup delay
	vTaskDelay(1000);
 800104c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001050:	f009 ff46 	bl	800aee0 <vTaskDelay>

	// ping ok?
	if (sysVersion() == 0) {
 8001054:	f001 ff1a 	bl	8002e8c <sysVersion>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <vAppTask+0x84>
		// initialize coordinator
		znp_init_coordinator(0);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fe6e 	bl	8000d40 <znp_init_coordinator>

		// register cluster
		register_clusters(0x4db8);
 8001064:	f644 50b8 	movw	r0, #19896	; 0x4db8
 8001068:	f7ff ff12 	bl	8000e90 <register_clusters>
	}

	// endless loop, handle CC2530 packets
	while (1) {
		rpcWaitMqClientMsg(portMAX_DELAY);
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f005 fd56 	bl	8006b20 <rpcWaitMqClientMsg>
 8001074:	e7fa      	b.n	800106c <vAppTask+0x84>
 8001076:	bf00      	nop
 8001078:	0800e29c 	.word	0x0800e29c
 800107c:	20000000 	.word	0x20000000
 8001080:	20000038 	.word	0x20000038
 8001084:	200000bc 	.word	0x200000bc
 8001088:	200000d0 	.word	0x200000d0
 800108c:	200000dc 	.word	0x200000dc

08001090 <vComTask>:
	}
}

void vComTask(void *pvParameters) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	// init queues
	rpcInitMq();
 8001098:	f005 fd38 	bl	8006b0c <rpcInitMq>

	// initialize serial port
	rpcOpen();
 800109c:	f005 fd16 	bl	8006acc <rpcOpen>

	// loop
	while (1) {
		// keep procesing packets
		rpcProcess();
 80010a0:	f005 fd86 	bl	8006bb0 <rpcProcess>

		// always a little loop delay
		vTaskDelay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f009 ff1b 	bl	800aee0 <vTaskDelay>
		rpcProcess();
 80010aa:	e7f9      	b.n	80010a0 <vComTask+0x10>

080010ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010b2:	f006 f887 	bl	80071c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010b6:	f000 f83b 	bl	8001130 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010ba:	f7ff faa3 	bl	8000604 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 80010be:	f000 fa41 	bl	8001544 <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 80010c2:	f000 fa73 	bl	80015ac <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	dbg_sem = xSemaphoreCreateBinary();
 80010c6:	2203      	movs	r2, #3
 80010c8:	2100      	movs	r1, #0
 80010ca:	2001      	movs	r0, #1
 80010cc:	f008 fff0 	bl	800a0b0 <xQueueGenericCreate>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <main+0x70>)
 80010d4:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(dbg_sem);
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <main+0x70>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	2300      	movs	r3, #0
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	f009 f848 	bl	800a174 <xQueueGenericSend>

	xTaskCreate(vAppTask, "APP", 512, NULL, 6, NULL);
 80010e4:	2300      	movs	r3, #0
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	2306      	movs	r3, #6
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f2:	490b      	ldr	r1, [pc, #44]	; (8001120 <main+0x74>)
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <main+0x78>)
 80010f6:	f009 fdae 	bl	800ac56 <xTaskCreate>
	xTaskCreate(vComTask, "COM", 256, NULL, 5, NULL);
 80010fa:	2300      	movs	r3, #0
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2305      	movs	r3, #5
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <main+0x7c>)
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <main+0x80>)
 800110c:	f009 fda3 	bl	800ac56 <xTaskCreate>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001110:	f7ff fa70 	bl	80005f4 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8001114:	f008 fea8 	bl	8009e68 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001118:	e7fe      	b.n	8001118 <main+0x6c>
 800111a:	bf00      	nop
 800111c:	200003d0 	.word	0x200003d0
 8001120:	0800e2b0 	.word	0x0800e2b0
 8001124:	08000fe9 	.word	0x08000fe9
 8001128:	0800e2b4 	.word	0x0800e2b4
 800112c:	08001091 	.word	0x08001091

08001130 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ba      	sub	sp, #232	; 0xe8
 8001134:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001136:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800113a:	2244      	movs	r2, #68	; 0x44
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00b f9a1 	bl	800c486 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001144:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	228c      	movs	r2, #140	; 0x8c
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f00b f993 	bl	800c486 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001180:	2301      	movs	r3, #1
 8001182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLN = 20;
 8001186:	2314      	movs	r3, #20
 8001188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001198:	2304      	movs	r3, #4
 800119a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800119e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f006 fb2c 	bl	8007800 <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x82>
		Error_Handler();
 80011ae:	f000 f849 	bl	8001244 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011b2:	230f      	movs	r3, #15
 80011b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2303      	movs	r3, #3
 80011ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80011d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011d4:	2104      	movs	r1, #4
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 ff38 	bl	800804c <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xb6>
		Error_Handler();
 80011e2:	f000 f82f 	bl	8001244 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1;
 80011e6:	2322      	movs	r3, #34	; 0x22
 80011e8:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4618      	mov	r0, r3
 80011f6:	f007 f95f 	bl	80084b8 <HAL_RCCEx_PeriphCLKConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0xd4>
		Error_Handler();
 8001200:	f000 f820 	bl	8001244 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8001204:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001208:	f006 fa94 	bl	8007734 <HAL_PWREx_ControlVoltageScaling>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xe6>
		Error_Handler();
 8001212:	f000 f817 	bl	8001244 <Error_Handler>
	}
}
 8001216:	bf00      	nop
 8001218:	37e8      	adds	r7, #232	; 0xe8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d101      	bne.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001232:	f005 ffdf 	bl	80071f4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40012c00 	.word	0x40012c00

08001244 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_MspInit+0x4c>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6613      	str	r3, [r2, #96]	; 0x60
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_MspInit+0x4c>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_MspInit+0x4c>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_MspInit+0x4c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	210f      	movs	r1, #15
 800128e:	f06f 0001 	mvn.w	r0, #1
 8001292:	f006 f885 	bl	80073a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	2019      	movs	r0, #25
 80012ba:	f006 f871 	bl	80073a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80012be:	2019      	movs	r0, #25
 80012c0:	f006 f88a 	bl	80073d8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_InitTick+0x9c>)
 80012c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c8:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <HAL_InitTick+0x9c>)
 80012ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012ce:	6613      	str	r3, [r2, #96]	; 0x60
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_InitTick+0x9c>)
 80012d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012dc:	f107 0210 	add.w	r2, r7, #16
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f007 f854 	bl	8008394 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012ec:	f007 f83c 	bl	8008368 <HAL_RCC_GetPCLK2Freq>
 80012f0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <HAL_InitTick+0xa0>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0c9b      	lsrs	r3, r3, #18
 80012fc:	3b01      	subs	r3, #1
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_InitTick+0xa4>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_InitTick+0xa8>)
 8001304:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_InitTick+0xa4>)
 8001308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800130c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_InitTick+0xa4>)
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_InitTick+0xa4>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_InitTick+0xa4>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <HAL_InitTick+0xa4>)
 8001322:	f007 fd8b 	bl	8008e3c <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <HAL_InitTick+0xa4>)
 800132e:	f007 fdbb 	bl	8008ea8 <HAL_TIM_Base_Start_IT>
 8001332:	4603      	mov	r3, r0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	431bde83 	.word	0x431bde83
 8001348:	20002f60 	.word	0x20002f60
 800134c:	40012c00 	.word	0x40012c00

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800138a:	f007 fdb7 	bl	8008efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20002f60 	.word	0x20002f60

08001398 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */
#endif
  rpcTransportISR();
 800139c:	f005 faea 	bl	8006974 <rpcTransportISR>
  /* USER CODE END LPUART1_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e00a      	b.n	80013cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b6:	f3af 8000 	nop.w
 80013ba:	4601      	mov	r1, r0
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	b2ca      	uxtb	r2, r1
 80013c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf0      	blt.n	80013b6 <_read+0x12>
	}

return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e009      	b.n	8001404 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	dbf1      	blt.n	80013f0 <_write+0x12>
	}
	return len;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_close>:

int _close(int file)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
	return -1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143e:	605a      	str	r2, [r3, #4]
	return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_isatty>:

int _isatty(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return 1;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <_sbrk+0x50>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x16>
		heap_end = &end;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <_sbrk+0x50>)
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <_sbrk+0x54>)
 8001494:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <_sbrk+0x50>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <_sbrk+0x50>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	466a      	mov	r2, sp
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d907      	bls.n	80014ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014aa:	f00a ffb7 	bl	800c41c <__errno>
 80014ae:	4602      	mov	r2, r0
 80014b0:	230c      	movs	r3, #12
 80014b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	e006      	b.n	80014c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <_sbrk+0x50>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <_sbrk+0x50>)
 80014c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200004d4 	.word	0x200004d4
 80014d4:	200031b0 	.word	0x200031b0

080014d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <SystemInit+0x64>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a16      	ldr	r2, [pc, #88]	; (800153c <SystemInit+0x64>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <SystemInit+0x68>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a13      	ldr	r2, [pc, #76]	; (8001540 <SystemInit+0x68>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <SystemInit+0x68>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <SystemInit+0x68>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <SystemInit+0x68>)
 8001504:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001508:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800150c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <SystemInit+0x68>)
 8001510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001514:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <SystemInit+0x68>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <SystemInit+0x68>)
 800151c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001520:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <SystemInit+0x68>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <SystemInit+0x64>)
 800152a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152e:	609a      	str	r2, [r3, #8]
#endif
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00
 8001540:	40021000 	.word	0x40021000

08001544 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 800154a:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <MX_LPUART1_UART_Init+0x64>)
 800154c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 800157c:	2230      	movs	r2, #48	; 0x30
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 8001582:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001586:	639a      	str	r2, [r3, #56]	; 0x38
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 800158a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_LPUART1_UART_Init+0x60>)
 8001592:	f007 feb3 	bl	80092fc <HAL_UART_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800159c:	f7ff fe52 	bl	8001244 <Error_Handler>
  }

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20002fa0 	.word	0x20002fa0
 80015a8:	40008000 	.word	0x40008000

080015ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <MX_USART2_UART_Init+0x6c>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015ea:	2230      	movs	r2, #48	; 0x30
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f4:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <MX_USART2_UART_Init+0x68>)
 80015f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_USART2_UART_Init+0x68>)
 8001600:	f007 fe7c 	bl	80092fc <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 800160a:	f7ff fe1b 	bl	8001244 <Error_Handler>
  }

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20003020 	.word	0x20003020
 8001618:	40004400 	.word	0x40004400

0800161c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a42      	ldr	r2, [pc, #264]	; (8001744 <HAL_UART_MspInit+0x128>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d133      	bne.n	80016a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800163e:	4b42      	ldr	r3, [pc, #264]	; (8001748 <HAL_UART_MspInit+0x12c>)
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	4a41      	ldr	r2, [pc, #260]	; (8001748 <HAL_UART_MspInit+0x12c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	65d3      	str	r3, [r2, #92]	; 0x5c
 800164a:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <HAL_UART_MspInit+0x12c>)
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001656:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <HAL_UART_MspInit+0x12c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a3b      	ldr	r2, [pc, #236]	; (8001748 <HAL_UART_MspInit+0x12c>)
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <HAL_UART_MspInit+0x12c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800166e:	f006 f8b7 	bl	80077e0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001672:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001684:	2308      	movs	r3, #8
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4619      	mov	r1, r3
 800168e:	482f      	ldr	r0, [pc, #188]	; (800174c <HAL_UART_MspInit+0x130>)
 8001690:	f005 feb0 	bl	80073f4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2105      	movs	r1, #5
 8001698:	2046      	movs	r0, #70	; 0x46
 800169a:	f005 fe81 	bl	80073a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800169e:	2046      	movs	r0, #70	; 0x46
 80016a0:	f005 fe9a 	bl	80073d8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016a4:	e049      	b.n	800173a <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a29      	ldr	r2, [pc, #164]	; (8001750 <HAL_UART_MspInit+0x134>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d144      	bne.n	800173a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_UART_MspInit+0x12c>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	4a24      	ldr	r2, [pc, #144]	; (8001748 <HAL_UART_MspInit+0x12c>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ba:	6593      	str	r3, [r2, #88]	; 0x58
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_UART_MspInit+0x12c>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_UART_MspInit+0x12c>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_UART_MspInit+0x12c>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_UART_MspInit+0x12c>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_UART_MspInit+0x12c>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_UART_MspInit+0x12c>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_UART_MspInit+0x12c>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016f8:	2340      	movs	r3, #64	; 0x40
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001708:	2307      	movs	r3, #7
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	4810      	ldr	r0, [pc, #64]	; (8001754 <HAL_UART_MspInit+0x138>)
 8001714:	f005 fe6e 	bl	80073f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001718:	2304      	movs	r3, #4
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001728:	2307      	movs	r3, #7
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001736:	f005 fe5d 	bl	80073f4 <HAL_GPIO_Init>
}
 800173a:	bf00      	nop
 800173c:	3730      	adds	r7, #48	; 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40008000 	.word	0x40008000
 8001748:	40021000 	.word	0x40021000
 800174c:	48001800 	.word	0x48001800
 8001750:	40004400 	.word	0x40004400
 8001754:	48000c00 	.word	0x48000c00

08001758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800175c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800175e:	e003      	b.n	8001768 <LoopCopyDataInit>

08001760 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001762:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001764:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001766:	3104      	adds	r1, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <LoopForever+0xa>)
	ldr	r3, =_edata
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <LoopForever+0xe>)
	adds	r2, r0, r1
 800176c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800176e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001770:	d3f6      	bcc.n	8001760 <CopyDataInit>
	ldr	r2, =_sbss
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001774:	e002      	b.n	800177c <LoopFillZerobss>

08001776 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001776:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001778:	f842 3b04 	str.w	r3, [r2], #4

0800177c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <LoopForever+0x16>)
	cmp	r2, r3
 800177e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001780:	d3f9      	bcc.n	8001776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001782:	f7ff fea9 	bl	80014d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001786:	f00a fe4f 	bl	800c428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178a:	f7ff fc8f 	bl	80010ac <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001790:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8001794:	0800fa84 	.word	0x0800fa84
	ldr	r0, =_sdata
 8001798:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800179c:	20000154 	.word	0x20000154
	ldr	r2, =_sbss
 80017a0:	20000154 	.word	0x20000154
	ldr	r3, = _ebss
 80017a4:	200031ac 	.word	0x200031ac

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>

080017aa <afRegister>:
/*********************************************************************
 * LOCAL FUNCTIONS
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen);

uint8_t afRegister(RegisterFormat_t *req) {
 80017aa:	b5b0      	push	{r4, r5, r7, lr}
 80017ac:	b088      	sub	sp, #32
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	466b      	mov	r3, sp
 80017b4:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	76fb      	strb	r3, [r7, #27]
	uint32_t cmdLen = 9 + (req->AppNumInClusters * 2) + (req->AppNumOutClusters * 2);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7a1b      	ldrb	r3, [r3, #8]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	f103 0209 	add.w	r2, r3, #9
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
	uint8_t cmd[cmdLen];
 80017d0:	6978      	ldr	r0, [r7, #20]
 80017d2:	4603      	mov	r3, r0
 80017d4:	3b01      	subs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	4601      	mov	r1, r0
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	f04f 0400 	mov.w	r4, #0
 80017e6:	00d4      	lsls	r4, r2, #3
 80017e8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80017ec:	00cb      	lsls	r3, r1, #3
 80017ee:	4601      	mov	r1, r0
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	f04f 0400 	mov.w	r4, #0
 80017fc:	00d4      	lsls	r4, r2, #3
 80017fe:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001802:	00cb      	lsls	r3, r1, #3
 8001804:	1dc3      	adds	r3, r0, #7
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	ebad 0d03 	sub.w	sp, sp, r3
 800180e:	466b      	mov	r3, sp
 8001810:	3300      	adds	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]

	int idx;

	cmd[cmInd++] = req->EndPoint;
 8001814:	7efb      	ldrb	r3, [r7, #27]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	76fa      	strb	r2, [r7, #27]
 800181a:	461a      	mov	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7819      	ldrb	r1, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->AppProfId & 0xFF);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	8859      	ldrh	r1, [r3, #2]
 8001828:	7efb      	ldrb	r3, [r7, #27]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	76fa      	strb	r2, [r7, #27]
 800182e:	461a      	mov	r2, r3
 8001830:	b2c9      	uxtb	r1, r1
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->AppProfId >> 8) & 0xFF);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	885b      	ldrh	r3, [r3, #2]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	b299      	uxth	r1, r3
 800183e:	7efb      	ldrb	r3, [r7, #27]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	76fa      	strb	r2, [r7, #27]
 8001844:	461a      	mov	r2, r3
 8001846:	b2c9      	uxtb	r1, r1
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->AppDeviceId & 0xFF);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	8899      	ldrh	r1, [r3, #4]
 8001850:	7efb      	ldrb	r3, [r7, #27]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	76fa      	strb	r2, [r7, #27]
 8001856:	461a      	mov	r2, r3
 8001858:	b2c9      	uxtb	r1, r1
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->AppDeviceId >> 8) & 0xFF);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	889b      	ldrh	r3, [r3, #4]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	b299      	uxth	r1, r3
 8001866:	7efb      	ldrb	r3, [r7, #27]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	76fa      	strb	r2, [r7, #27]
 800186c:	461a      	mov	r2, r3
 800186e:	b2c9      	uxtb	r1, r1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->AppDevVer;
 8001874:	7efb      	ldrb	r3, [r7, #27]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	76fa      	strb	r2, [r7, #27]
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7999      	ldrb	r1, [r3, #6]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->LatencyReq;
 8001884:	7efb      	ldrb	r3, [r7, #27]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	76fa      	strb	r2, [r7, #27]
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	79d9      	ldrb	r1, [r3, #7]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->AppNumInClusters;
 8001894:	7efb      	ldrb	r3, [r7, #27]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	76fa      	strb	r2, [r7, #27]
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7a19      	ldrb	r1, [r3, #8]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumInClusters; idx++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e01e      	b.n	80018e8 <afRegister+0x13e>
		cmd[cmInd++] = (uint8_t) (req->AppInClusterList[idx] & 0xFF);
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3304      	adds	r3, #4
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	8859      	ldrh	r1, [r3, #2]
 80018b6:	7efb      	ldrb	r3, [r7, #27]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	76fa      	strb	r2, [r7, #27]
 80018bc:	461a      	mov	r2, r3
 80018be:	b2c9      	uxtb	r1, r1
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = (uint8_t) ((req->AppInClusterList[idx] >> 8) & 0xFF);
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	885b      	ldrh	r3, [r3, #2]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	b299      	uxth	r1, r3
 80018d4:	7efb      	ldrb	r3, [r7, #27]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	76fa      	strb	r2, [r7, #27]
 80018da:	461a      	mov	r2, r3
 80018dc:	b2c9      	uxtb	r1, r1
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumInClusters; idx++) {
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7a1b      	ldrb	r3, [r3, #8]
 80018ec:	461a      	mov	r2, r3
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	dbda      	blt.n	80018aa <afRegister+0x100>
	}
	cmd[cmInd++] = req->AppNumOutClusters;
 80018f4:	7efb      	ldrb	r3, [r7, #27]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	76fa      	strb	r2, [r7, #27]
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumOutClusters; idx++) {
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e01e      	b.n	800194a <afRegister+0x1a0>
		cmd[cmInd++] = (uint8_t) (req->AppOutClusterList[idx] & 0xFF);
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3314      	adds	r3, #20
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	8899      	ldrh	r1, [r3, #4]
 8001918:	7efb      	ldrb	r3, [r7, #27]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	76fa      	strb	r2, [r7, #27]
 800191e:	461a      	mov	r2, r3
 8001920:	b2c9      	uxtb	r1, r1
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = (uint8_t) ((req->AppOutClusterList[idx] >> 8) & 0xFF);
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	3314      	adds	r3, #20
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	889b      	ldrh	r3, [r3, #4]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	b299      	uxth	r1, r3
 8001936:	7efb      	ldrb	r3, [r7, #27]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	76fa      	strb	r2, [r7, #27]
 800193c:	461a      	mov	r2, r3
 800193e:	b2c9      	uxtb	r1, r1
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumOutClusters; idx++) {
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	3301      	adds	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001950:	461a      	mov	r2, r3
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4293      	cmp	r3, r2
 8001956:	dbd9      	blt.n	800190c <afRegister+0x162>
	}
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_AF),
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2100      	movs	r1, #0
 8001960:	2024      	movs	r0, #36	; 0x24
 8001962:	f005 fa59 	bl	8006e18 <rpcSendFrame>
 8001966:	4603      	mov	r3, r0
 8001968:	72fb      	strb	r3, [r7, #11]
	MT_AF_REGISTER, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <afRegister+0x1cc>
		rpcWaitMqClientMsg(50);
 8001970:	2032      	movs	r0, #50	; 0x32
 8001972:	f005 f8d5 	bl	8006b20 <rpcWaitMqClientMsg>
	}

	return status;
 8001976:	7afb      	ldrb	r3, [r7, #11]
 8001978:	46ad      	mov	sp, r5
}
 800197a:	4618      	mov	r0, r3
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bdb0      	pop	{r4, r5, r7, pc}

08001982 <afDataRequest>:

uint8_t afDataRequest(DataRequestFormat_t *req) {
 8001982:	b5b0      	push	{r4, r5, r7, lr}
 8001984:	b088      	sub	sp, #32
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	466b      	mov	r3, sp
 800198c:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	76fb      	strb	r3, [r7, #27]
	uint32_t cmdLen = 10 + req->Len;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7a5b      	ldrb	r3, [r3, #9]
 8001996:	330a      	adds	r3, #10
 8001998:	617b      	str	r3, [r7, #20]
	uint8_t cmd[cmdLen];
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	4603      	mov	r3, r0
 800199e:	3b01      	subs	r3, #1
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4601      	mov	r1, r0
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	f04f 0400 	mov.w	r4, #0
 80019b0:	00d4      	lsls	r4, r2, #3
 80019b2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80019b6:	00cb      	lsls	r3, r1, #3
 80019b8:	4601      	mov	r1, r0
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	f04f 0400 	mov.w	r4, #0
 80019c6:	00d4      	lsls	r4, r2, #3
 80019c8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80019cc:	00cb      	lsls	r3, r1, #3
 80019ce:	1dc3      	adds	r3, r0, #7
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	ebad 0d03 	sub.w	sp, sp, r3
 80019d8:	466b      	mov	r3, sp
 80019da:	3300      	adds	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]

	int idx;

	cmd[cmInd++] = (uint8_t) (req->DstAddr & 0xFF);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	8819      	ldrh	r1, [r3, #0]
 80019e2:	7efb      	ldrb	r3, [r7, #27]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	76fa      	strb	r2, [r7, #27]
 80019e8:	461a      	mov	r2, r3
 80019ea:	b2c9      	uxtb	r1, r1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->DstAddr >> 8) & 0xFF);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	b299      	uxth	r1, r3
 80019f8:	7efb      	ldrb	r3, [r7, #27]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	76fa      	strb	r2, [r7, #27]
 80019fe:	461a      	mov	r2, r3
 8001a00:	b2c9      	uxtb	r1, r1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->DstEndpoint;
 8001a06:	7efb      	ldrb	r3, [r7, #27]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	76fa      	strb	r2, [r7, #27]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7899      	ldrb	r1, [r3, #2]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->SrcEndpoint;
 8001a16:	7efb      	ldrb	r3, [r7, #27]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	76fa      	strb	r2, [r7, #27]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	78d9      	ldrb	r1, [r3, #3]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->ClusterID & 0xFF);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	8899      	ldrh	r1, [r3, #4]
 8001a2a:	7efb      	ldrb	r3, [r7, #27]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	76fa      	strb	r2, [r7, #27]
 8001a30:	461a      	mov	r2, r3
 8001a32:	b2c9      	uxtb	r1, r1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->ClusterID >> 8) & 0xFF);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	889b      	ldrh	r3, [r3, #4]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	b299      	uxth	r1, r3
 8001a40:	7efb      	ldrb	r3, [r7, #27]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	76fa      	strb	r2, [r7, #27]
 8001a46:	461a      	mov	r2, r3
 8001a48:	b2c9      	uxtb	r1, r1
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->TransID;
 8001a4e:	7efb      	ldrb	r3, [r7, #27]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	76fa      	strb	r2, [r7, #27]
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7999      	ldrb	r1, [r3, #6]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Options;
 8001a5e:	7efb      	ldrb	r3, [r7, #27]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	76fa      	strb	r2, [r7, #27]
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	79d9      	ldrb	r1, [r3, #7]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Radius;
 8001a6e:	7efb      	ldrb	r3, [r7, #27]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	76fa      	strb	r2, [r7, #27]
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7a19      	ldrb	r1, [r3, #8]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Len;
 8001a7e:	7efb      	ldrb	r3, [r7, #27]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	76fa      	strb	r2, [r7, #27]
 8001a84:	461a      	mov	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7a59      	ldrb	r1, [r3, #9]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->Len; idx++) {
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e00d      	b.n	8001ab0 <afDataRequest+0x12e>
		cmd[cmInd++] = req->Data[idx];
 8001a94:	7efb      	ldrb	r3, [r7, #27]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	76fa      	strb	r2, [r7, #27]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	330a      	adds	r3, #10
 8001aa4:	781a      	ldrb	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	545a      	strb	r2, [r3, r1]
	for (idx = 0; idx < req->Len; idx++) {
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7a5b      	ldrb	r3, [r3, #9]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	dbeb      	blt.n	8001a94 <afDataRequest+0x112>

	}

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_AF),
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2024      	movs	r0, #36	; 0x24
 8001ac6:	f005 f9a7 	bl	8006e18 <rpcSendFrame>
 8001aca:	4603      	mov	r3, r0
 8001acc:	72fb      	strb	r3, [r7, #11]
	MT_AF_DATA_REQUEST, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <afDataRequest+0x158>
		rpcWaitMqClientMsg(50);
 8001ad4:	2032      	movs	r0, #50	; 0x32
 8001ad6:	f005 f823 	bl	8006b20 <rpcWaitMqClientMsg>
	}

	return status;
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	46ad      	mov	sp, r5
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ae8 <processDataConfirm>:
	}

	return status;
}

static void processDataConfirm(uint8_t *rpcBuff, uint8_t rpcLen) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfDataConfirm) {
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <processDataConfirm+0x68>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d025      	beq.n	8001b48 <processDataConfirm+0x60>
		uint8_t msgIdx = 2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	73fb      	strb	r3, [r7, #15]
		DataConfirmFormat_t rsp;
		if (rpcLen < 3) {
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d802      	bhi.n	8001b0c <processDataConfirm+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8001b06:	4813      	ldr	r0, [pc, #76]	; (8001b54 <processDataConfirm+0x6c>)
 8001b08:	f00a fd3a 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	73fa      	strb	r2, [r7, #15]
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	733b      	strb	r3, [r7, #12]
		rsp.Endpoint = rpcBuff[msgIdx++];
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	73fa      	strb	r2, [r7, #15]
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	737b      	strb	r3, [r7, #13]
		rsp.TransId = rpcBuff[msgIdx++];
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	73fa      	strb	r2, [r7, #15]
 8001b32:	461a      	mov	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	73bb      	strb	r3, [r7, #14]

		mtAfCbs.pfnAfDataConfirm(&rsp);
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <processDataConfirm+0x68>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f107 020c 	add.w	r2, r7, #12
 8001b44:	4610      	mov	r0, r2
 8001b46:	4798      	blx	r3
	}
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200004d8 	.word	0x200004d8
 8001b54:	0800e2b8 	.word	0x0800e2b8

08001b58 <processIncomingMsg>:

static void processIncomingMsg(uint8_t *rpcBuff, uint8_t rpcLen) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0a2      	sub	sp, #136	; 0x88
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfIncomingMsg) {
 8001b64:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <processIncomingMsg+0x1d8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80dc 	beq.w	8001d26 <processIncomingMsg+0x1ce>
		uint8_t msgIdx = 2;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		IncomingMsgFormat_t rsp;
		if (rpcLen < 17) {
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d802      	bhi.n	8001b80 <processIncomingMsg+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 8001b7a:	486e      	ldr	r0, [pc, #440]	; (8001d34 <processIncomingMsg+0x1dc>)
 8001b7c:	f00a fd00 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.GroupId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001b80:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001b90:	3301      	adds	r3, #1
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	440b      	add	r3, r1
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8001ba4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.ClusterId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001bae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	440b      	add	r3, r1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8001bd2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001bdc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bec:	3301      	adds	r3, #1
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	440b      	add	r3, r1
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8001c00:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c04:	3302      	adds	r3, #2
 8001c06:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.SrcEndpoint = rpcBuff[msgIdx++];
 8001c0a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001c14:	461a      	mov	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	73bb      	strb	r3, [r7, #14]
		rsp.DstEndpoint = rpcBuff[msgIdx++];
 8001c1e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	73fb      	strb	r3, [r7, #15]
		rsp.WasVroadcast = rpcBuff[msgIdx++];
 8001c32:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	743b      	strb	r3, [r7, #16]
		rsp.LinkQuality = rpcBuff[msgIdx++];
 8001c46:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001c50:	461a      	mov	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	747b      	strb	r3, [r7, #17]
		rsp.SecurityUse = rpcBuff[msgIdx++];
 8001c5a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	74bb      	strb	r3, [r7, #18]
		rsp.TimeStamp = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
		uint8_t i;
		for (i = 0; i < 4; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8001c78:	e015      	b.n	8001ca6 <processIncomingMsg+0x14e>
			rsp.TimeStamp |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 8001c7a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	409a      	lsls	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 4; i++)
 8001c9c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8001ca6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d9e5      	bls.n	8001c7a <processIncomingMsg+0x122>
		rsp.TransSeqNum = rpcBuff[msgIdx++];
 8001cae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	763b      	strb	r3, [r7, #24]
		rsp.Len = rpcBuff[msgIdx++];
 8001cc2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001ccc:	461a      	mov	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	767b      	strb	r3, [r7, #25]
		if (rpcLen > 17) {
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	2b11      	cmp	r3, #17
 8001cda:	d91e      	bls.n	8001d1a <processIncomingMsg+0x1c2>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ce2:	e014      	b.n	8001d0e <processIncomingMsg+0x1b6>
				rsp.Data[i] = rpcBuff[msgIdx++];
 8001ce4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	7819      	ldrb	r1, [r3, #0]
 8001cf6:	f107 021a 	add.w	r2, r7, #26
 8001cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cfe:	4413      	add	r3, r2
 8001d00:	460a      	mov	r2, r1
 8001d02:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8001d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d0e:	7e7b      	ldrb	r3, [r7, #25]
 8001d10:	461a      	mov	r2, r3
 8001d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d3e4      	bcc.n	8001ce4 <processIncomingMsg+0x18c>
			}
		}
		mtAfCbs.pfnAfIncomingMsg(&rsp);
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <processIncomingMsg+0x1d8>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f107 0208 	add.w	r2, r7, #8
 8001d22:	4610      	mov	r0, r2
 8001d24:	4798      	blx	r3
	}
}
 8001d26:	bf00      	nop
 8001d28:	3788      	adds	r7, #136	; 0x88
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200004d8 	.word	0x200004d8
 8001d34:	0800e2b8 	.word	0x0800e2b8

08001d38 <processIncomingMsgExt>:

static void processIncomingMsgExt(uint8_t *rpcBuff, uint8_t rpcLen) {
 8001d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d3c:	b0a7      	sub	sp, #156	; 0x9c
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfIncomingMsgExt) {
 8001d46:	4b99      	ldr	r3, [pc, #612]	; (8001fac <processIncomingMsgExt+0x274>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8129 	beq.w	8001fa2 <processIncomingMsgExt+0x26a>
		uint8_t msgIdx = 2;
 8001d50:	2302      	movs	r3, #2
 8001d52:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		IncomingMsgExtFormat_t rsp;
		if (rpcLen < 27) {
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	2b1a      	cmp	r3, #26
 8001d5a:	d802      	bhi.n	8001d62 <processIncomingMsgExt+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 8001d5c:	4894      	ldr	r0, [pc, #592]	; (8001fb0 <processIncomingMsgExt+0x278>)
 8001d5e:	f00a fc0f 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.GroupId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001d62:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d72:	3301      	adds	r3, #1
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	440b      	add	r3, r1
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8001d86:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.ClusterId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001d90:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001da0:	3301      	adds	r3, #1
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	440b      	add	r3, r1
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8001db4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001db8:	3302      	adds	r3, #2
 8001dba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.SrcAddrMode = rpcBuff[msgIdx++];
 8001dbe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001dc8:	461a      	mov	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	733b      	strb	r3, [r7, #12]
		rsp.SrcAddr = 0;
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001de4:	e034      	b.n	8001e50 <processIncomingMsgExt+0x118>
			if ((rsp.SrcAddrMode == 2 && i < 2) || rsp.SrcAddrMode == 3) {
 8001de6:	7b3b      	ldrb	r3, [r7, #12]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d103      	bne.n	8001df4 <processIncomingMsgExt+0xbc>
 8001dec:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d902      	bls.n	8001dfa <processIncomingMsgExt+0xc2>
 8001df4:	7b3b      	ldrb	r3, [r7, #12]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d120      	bne.n	8001e3c <processIncomingMsgExt+0x104>
				rsp.SrcAddr |= ((uint64_t) rpcBuff[msgIdx]) << (i * 8);
 8001dfa:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001dfe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	f897 1096 	ldrb.w	r1, [r7, #150]	; 0x96
 8001e12:	00c9      	lsls	r1, r1, #3
 8001e14:	f1a1 0620 	sub.w	r6, r1, #32
 8001e18:	f1c1 0020 	rsb	r0, r1, #32
 8001e1c:	fa03 f501 	lsl.w	r5, r3, r1
 8001e20:	fa02 f606 	lsl.w	r6, r2, r6
 8001e24:	4335      	orrs	r5, r6
 8001e26:	fa22 f000 	lsr.w	r0, r2, r0
 8001e2a:	4305      	orrs	r5, r0
 8001e2c:	fa02 f401 	lsl.w	r4, r2, r1
 8001e30:	ea48 0204 	orr.w	r2, r8, r4
 8001e34:	ea49 0305 	orr.w	r3, r9, r5
 8001e38:	e9c7 2304 	strd	r2, r3, [r7, #16]
			}
			msgIdx++;
 8001e3c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e40:	3301      	adds	r3, #1
 8001e42:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		for (i = 0; i < 8; i++) {
 8001e46:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001e50:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001e54:	2b07      	cmp	r3, #7
 8001e56:	d9c6      	bls.n	8001de6 <processIncomingMsgExt+0xae>
		}

		rsp.SrcEndpoint = rpcBuff[msgIdx++];
 8001e58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	763b      	strb	r3, [r7, #24]
		rsp.SrcPanId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8001e6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	440b      	add	r3, r1
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	837b      	strh	r3, [r7, #26]
		msgIdx += 2;
 8001e90:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e94:	3302      	adds	r3, #2
 8001e96:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.DstEndpoint = rpcBuff[msgIdx++];
 8001e9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	773b      	strb	r3, [r7, #28]
		rsp.WasVroadcast = rpcBuff[msgIdx++];
 8001eae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	777b      	strb	r3, [r7, #29]
		rsp.LinkQuality = rpcBuff[msgIdx++];
 8001ec2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001ecc:	461a      	mov	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	77bb      	strb	r3, [r7, #30]
		rsp.SecurityUse = rpcBuff[msgIdx++];
 8001ed6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	77fb      	strb	r3, [r7, #31]
		rsp.TimeStamp = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
		for (i = 0; i < 4; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001ef4:	e015      	b.n	8001f22 <processIncomingMsgExt+0x1ea>
			rsp.TimeStamp |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 8001ef6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001f00:	461a      	mov	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	409a      	lsls	r2, r3
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	623b      	str	r3, [r7, #32]
		for (i = 0; i < 4; i++)
 8001f18:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001f22:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d9e5      	bls.n	8001ef6 <processIncomingMsgExt+0x1be>
		rsp.TransSeqNum = rpcBuff[msgIdx++];
 8001f2a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rsp.Len = rpcBuff[msgIdx++];
 8001f40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint32_t ind;
		for (ind = 0; ind < rsp.Len; ind++) {
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f5c:	e014      	b.n	8001f88 <processIncomingMsgExt+0x250>
			rsp.Data[ind] = rpcBuff[msgIdx++];
 8001f5e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8001f68:	461a      	mov	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	7819      	ldrb	r1, [r3, #0]
 8001f70:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8001f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f78:	4413      	add	r3, r2
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	701a      	strb	r2, [r3, #0]
		for (ind = 0; ind < rsp.Len; ind++) {
 8001f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f82:	3301      	adds	r3, #1
 8001f84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d3e3      	bcc.n	8001f5e <processIncomingMsgExt+0x226>
		}

		mtAfCbs.pfnAfIncomingMsgExt(&rsp);
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <processIncomingMsgExt+0x274>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f107 0208 	add.w	r2, r7, #8
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4798      	blx	r3
	}
}
 8001fa2:	bf00      	nop
 8001fa4:	379c      	adds	r7, #156	; 0x9c
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fac:	200004d8 	.word	0x200004d8
 8001fb0:	0800e2b8 	.word	0x0800e2b8

08001fb4 <processDataRetrieveSrsp>:
	}

	return status;
}

static void processDataRetrieveSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b0c4      	sub	sp, #272	; 0x110
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	6018      	str	r0, [r3, #0]
 8001fbe:	460a      	mov	r2, r1
 8001fc0:	1cfb      	adds	r3, r7, #3
 8001fc2:	701a      	strb	r2, [r3, #0]
	if (mtAfCbs.pfnAfDataRetrieveSrsp) {
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <processDataRetrieveSrsp+0xc4>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d050      	beq.n	800206e <processDataRetrieveSrsp+0xba>
		uint8_t msgIdx = 2;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		DataRetrieveSrspFormat_t rsp;
		if (rpcLen < 2) {
 8001fd2:	1cfb      	adds	r3, r7, #3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d802      	bhi.n	8001fe0 <processDataRetrieveSrsp+0x2c>
			printf("MT_RPC_ERR_LENGTH\n");
 8001fda:	4828      	ldr	r0, [pc, #160]	; (800207c <processDataRetrieveSrsp+0xc8>)
 8001fdc:	f00a fad0 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8001fe0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8001fea:	461a      	mov	r2, r3
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	701a      	strb	r2, [r3, #0]
		rsp.Length = rpcBuff[msgIdx++];
 8001ffa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8002004:	461a      	mov	r2, r3
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	705a      	strb	r2, [r3, #1]
		if (rpcLen > 2) {
 8002014:	1cfb      	adds	r3, r7, #3
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d922      	bls.n	8002062 <processDataRetrieveSrsp+0xae>
			uint32_t i;
			for (i = 0; i < rsp.Length; i++) {
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002022:	e016      	b.n	8002052 <processDataRetrieveSrsp+0x9e>
				rsp.Data[i] = rpcBuff[msgIdx++];
 8002024:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 800202e:	461a      	mov	r2, r3
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4413      	add	r3, r2
 8002036:	7819      	ldrb	r1, [r3, #0]
 8002038:	f107 020c 	add.w	r2, r7, #12
 800203c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002040:	4413      	add	r3, r2
 8002042:	3302      	adds	r3, #2
 8002044:	460a      	mov	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Length; i++) {
 8002048:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800204c:	3301      	adds	r3, #1
 800204e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	461a      	mov	r2, r3
 800205a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800205e:	4293      	cmp	r3, r2
 8002060:	d3e0      	bcc.n	8002024 <processDataRetrieveSrsp+0x70>
			}
		}
		mtAfCbs.pfnAfDataRetrieveSrsp(&rsp);
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <processDataRetrieveSrsp+0xc4>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f107 020c 	add.w	r2, r7, #12
 800206a:	4610      	mov	r0, r2
 800206c:	4798      	blx	r3
	}
}
 800206e:	bf00      	nop
 8002070:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200004d8 	.word	0x200004d8
 800207c:	0800e2b8 	.word	0x0800e2b8

08002080 <processReflectError>:
	}

	return status;
}

static void processReflectError(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfReflectError) {
 800208c:	4b24      	ldr	r3, [pc, #144]	; (8002120 <processReflectError+0xa0>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d040      	beq.n	8002116 <processReflectError+0x96>
		uint8_t msgIdx = 2;
 8002094:	2302      	movs	r3, #2
 8002096:	73fb      	strb	r3, [r7, #15]
		ReflectErrorFormat_t rsp;
		if (rpcLen < 6) {
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	2b05      	cmp	r3, #5
 800209c:	d802      	bhi.n	80020a4 <processReflectError+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800209e:	4821      	ldr	r0, [pc, #132]	; (8002124 <processReflectError+0xa4>)
 80020a0:	f00a fa6e 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	73fa      	strb	r2, [r7, #15]
 80020aa:	461a      	mov	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	723b      	strb	r3, [r7, #8]
		rsp.Endpoint = rpcBuff[msgIdx++];
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	73fa      	strb	r2, [r7, #15]
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	727b      	strb	r3, [r7, #9]
		rsp.TransId = rpcBuff[msgIdx++];
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	73fa      	strb	r2, [r7, #15]
 80020ca:	461a      	mov	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	72bb      	strb	r3, [r7, #10]
		rsp.DstAddrMode = rpcBuff[msgIdx++];
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	73fa      	strb	r2, [r7, #15]
 80020da:	461a      	mov	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	72fb      	strb	r3, [r7, #11]
		rsp.DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	3301      	adds	r3, #1
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	440b      	add	r3, r1
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4413      	add	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	3302      	adds	r3, #2
 8002108:	73fb      	strb	r3, [r7, #15]

		mtAfCbs.pfnAfReflectError(&rsp);
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <processReflectError+0xa0>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f107 0208 	add.w	r2, r7, #8
 8002112:	4610      	mov	r0, r2
 8002114:	4798      	blx	r3
	}
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200004d8 	.word	0x200004d8
 8002124:	0800e2b8 	.word	0x0800e2b8

08002128 <afRegisterCallbacks>:
 *
 * @param
 *
 * @return
 */
void afRegisterCallbacks(mtAfCb_t cbs) {
 8002128:	b084      	sub	sp, #16
 800212a:	b4b0      	push	{r4, r5, r7}
 800212c:	af00      	add	r7, sp, #0
 800212e:	f107 040c 	add.w	r4, r7, #12
 8002132:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&mtAfCbs, &cbs, sizeof(mtAfCb_t));
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <afRegisterCallbacks+0x28>)
 8002138:	461c      	mov	r4, r3
 800213a:	f107 050c 	add.w	r5, r7, #12
 800213e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002142:	682b      	ldr	r3, [r5, #0]
 8002144:	6023      	str	r3, [r4, #0]
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	bcb0      	pop	{r4, r5, r7}
 800214c:	b004      	add	sp, #16
 800214e:	4770      	bx	lr
 8002150:	200004d8 	.word	0x200004d8

08002154 <afProcess>:
 *
 * @param   rpcLen has the size of the frame: cmd0 + cmd1 + payload + FCS
 *
 * @return
 *************************************************************************************************/
void afProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3301      	adds	r3, #1
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	492c      	ldr	r1, [pc, #176]	; (8002220 <afProcess+0xcc>)
 800216e:	2004      	movs	r0, #4
 8002170:	f004 fbae 	bl	80068d0 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800217c:	2b60      	cmp	r3, #96	; 0x60
 800217e:	d105      	bne.n	800218c <afProcess+0x38>
		processSrsp(rpcBuff, rpcLen);
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f857 	bl	8002238 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 800218a:	e044      	b.n	8002216 <afProcess+0xc2>
		switch (rpcBuff[1]) {
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3301      	adds	r3, #1
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	3b80      	subs	r3, #128	; 0x80
 8002194:	2b03      	cmp	r3, #3
 8002196:	d833      	bhi.n	8002200 <afProcess+0xac>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <afProcess+0x4c>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021c5 	.word	0x080021c5
 80021a8:	080021d9 	.word	0x080021d9
 80021ac:	080021ed 	.word	0x080021ed
				dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_DATA_CONFIRM\n");
 80021b0:	491c      	ldr	r1, [pc, #112]	; (8002224 <afProcess+0xd0>)
 80021b2:	2004      	movs	r0, #4
 80021b4:	f004 fb8c 	bl	80068d0 <dbg_print>
				processDataConfirm(rpcBuff, rpcLen);
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	4619      	mov	r1, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fc93 	bl	8001ae8 <processDataConfirm>
				break;
 80021c2:	e028      	b.n	8002216 <afProcess+0xc2>
				dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_INCOMING_MSG\n");
 80021c4:	4918      	ldr	r1, [pc, #96]	; (8002228 <afProcess+0xd4>)
 80021c6:	2004      	movs	r0, #4
 80021c8:	f004 fb82 	bl	80068d0 <dbg_print>
				processIncomingMsg(rpcBuff, rpcLen);
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	4619      	mov	r1, r3
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fcc1 	bl	8001b58 <processIncomingMsg>
				break;
 80021d6:	e01e      	b.n	8002216 <afProcess+0xc2>
				dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_INCOMING_MSG_EXT\n");
 80021d8:	4914      	ldr	r1, [pc, #80]	; (800222c <afProcess+0xd8>)
 80021da:	2004      	movs	r0, #4
 80021dc:	f004 fb78 	bl	80068d0 <dbg_print>
				processIncomingMsgExt(rpcBuff, rpcLen);
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff fda7 	bl	8001d38 <processIncomingMsgExt>
				break;
 80021ea:	e014      	b.n	8002216 <afProcess+0xc2>
				dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_REFLECT_ERROR\n");
 80021ec:	4910      	ldr	r1, [pc, #64]	; (8002230 <afProcess+0xdc>)
 80021ee:	2004      	movs	r0, #4
 80021f0:	f004 fb6e 	bl	80068d0 <dbg_print>
				processReflectError(rpcBuff, rpcLen);
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff41 	bl	8002080 <processReflectError>
				break;
 80021fe:	e00a      	b.n	8002216 <afProcess+0xc2>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3301      	adds	r3, #1
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4909      	ldr	r1, [pc, #36]	; (8002234 <afProcess+0xe0>)
 800220e:	2001      	movs	r0, #1
 8002210:	f004 fb5e 	bl	80068d0 <dbg_print>
				break;
 8002214:	bf00      	nop
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	0800e2cc 	.word	0x0800e2cc
 8002224:	0800e2f4 	.word	0x0800e2f4
 8002228:	0800e314 	.word	0x0800e314
 800222c:	0800e334 	.word	0x0800e334
 8002230:	0800e358 	.word	0x0800e358
 8002234:	0800e378 	.word	0x0800e378

08002238 <processSrsp>:
 *
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	461a      	mov	r2, r3
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4810      	ldr	r0, [pc, #64]	; (800228c <processSrsp+0x54>)
 800224c:	f00a f910 	bl	800c470 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3301      	adds	r3, #1
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b12      	cmp	r3, #18
 8002258:	d109      	bne.n	800226e <processSrsp+0x36>
		case MT_AF_DATA_RETRIEVE:
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_DATA_RETRIEVE\n");
 800225a:	490d      	ldr	r1, [pc, #52]	; (8002290 <processSrsp+0x58>)
 800225c:	2004      	movs	r0, #4
 800225e:	f004 fb37 	bl	80068d0 <dbg_print>
			processDataRetrieveSrsp(rpcBuff, rpcLen);
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fea4 	bl	8001fb4 <processDataRetrieveSrsp>
			break;
 800226c:	e00a      	b.n	8002284 <processSrsp+0x4c>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3301      	adds	r3, #1
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	4906      	ldr	r1, [pc, #24]	; (8002294 <processSrsp+0x5c>)
 800227c:	2002      	movs	r0, #2
 800227e:	f004 fb27 	bl	80068d0 <dbg_print>
			break;
 8002282:	bf00      	nop
	}

}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200030a4 	.word	0x200030a4
 8002290:	0800e3a8 	.word	0x0800e3a8
 8002294:	0800e3c8 	.word	0x0800e3c8

08002298 <appCfgRegisterCallbacks>:
#include <string.h>
#include <stdio.h>

static mtAppCfgCb_t mtAppCfgCbs;

void appCfgRegisterCallbacks(mtAppCfgCb_t cbs) {
 8002298:	b490      	push	{r4, r7}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	memcpy(&mtAppCfgCbs, &cbs, sizeof(mtAppCfgCb_t));
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <appCfgRegisterCallbacks+0x24>)
 80022a6:	461c      	mov	r4, r3
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc90      	pop	{r4, r7}
 80022ba:	4770      	bx	lr
 80022bc:	200004ec 	.word	0x200004ec

080022c0 <processCommissioningNotify>:

static void processCommissioningNotify(uint8_t *rpcBuff, uint8_t rpcLen) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgCommissioningNotifyCb_t) {
 80022cc:	4b16      	ldr	r3, [pc, #88]	; (8002328 <processCommissioningNotify+0x68>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d025      	beq.n	8002320 <processCommissioningNotify+0x60>
		uint8_t msgIdx = 2;
 80022d4:	2302      	movs	r3, #2
 80022d6:	73fb      	strb	r3, [r7, #15]
		appCfgCommissioningNotifyFormat_t rsp;

		// size error?
		if (rpcLen < 3) {
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d802      	bhi.n	80022e4 <processCommissioningNotify+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80022de:	4813      	ldr	r0, [pc, #76]	; (800232c <processCommissioningNotify+0x6c>)
 80022e0:	f00a f94e 	bl	800c580 <puts>
		}

		// copy command
		rsp.status = rpcBuff[msgIdx++];
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	73fa      	strb	r2, [r7, #15]
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	733b      	strb	r3, [r7, #12]
		rsp.commissioningMode1 = rpcBuff[msgIdx++];
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	73fa      	strb	r2, [r7, #15]
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	737b      	strb	r3, [r7, #13]
		rsp.commissioningMode2 = rpcBuff[msgIdx++];
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	73fa      	strb	r2, [r7, #15]
 800230a:	461a      	mov	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	73bb      	strb	r3, [r7, #14]

		// callback function
		mtAppCfgCbs.pfnAppCfgCommissioningNotifyCb_t(&rsp);
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <processCommissioningNotify+0x68>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f107 020c 	add.w	r2, r7, #12
 800231c:	4610      	mov	r0, r2
 800231e:	4798      	blx	r3
	}
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200004ec 	.word	0x200004ec
 800232c:	0800e3f4 	.word	0x0800e3f4

08002330 <processSetChannel>:

static void processSetChannel(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgSetChannelCb_t) {
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <processSetChannel+0x48>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d015      	beq.n	8002370 <processSetChannel+0x40>
		uint8_t msgIdx = 2;
 8002344:	2302      	movs	r3, #2
 8002346:	73fb      	strb	r3, [r7, #15]
		appCfgSetChannelFormat_t rsp;

		// size error?
		if (rpcLen < 1) {
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <processSetChannel+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800234e:	480b      	ldr	r0, [pc, #44]	; (800237c <processSetChannel+0x4c>)
 8002350:	f00a f916 	bl	800c580 <puts>
		}

		// copy command
		rsp.success = rpcBuff[msgIdx++];
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	73fa      	strb	r2, [r7, #15]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	733b      	strb	r3, [r7, #12]

		// callback function
		mtAppCfgCbs.pfnAppCfgSetChannelCb_t(&rsp);
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <processSetChannel+0x48>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f107 020c 	add.w	r2, r7, #12
 800236c:	4610      	mov	r0, r2
 800236e:	4798      	blx	r3
	}
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200004ec 	.word	0x200004ec
 800237c:	0800e3f4 	.word	0x0800e3f4

08002380 <processStartCommissioning>:

static void processStartCommissioning(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgCommissioningStartCb_t) {
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <processStartCommissioning+0x48>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <processStartCommissioning+0x40>
		uint8_t msgIdx = 2;
 8002394:	2302      	movs	r3, #2
 8002396:	73fb      	strb	r3, [r7, #15]
		appCfgStartCommissioningStart_t rsp;

		// size error?
		if (rpcLen < 1) {
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <processStartCommissioning+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800239e:	480b      	ldr	r0, [pc, #44]	; (80023cc <processStartCommissioning+0x4c>)
 80023a0:	f00a f8ee 	bl	800c580 <puts>
		}

		// copy command
		rsp.success = rpcBuff[msgIdx++];
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	73fa      	strb	r2, [r7, #15]
 80023aa:	461a      	mov	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	733b      	strb	r3, [r7, #12]

		// callback function
		mtAppCfgCbs.pfnAppCfgCommissioningStartCb_t(&rsp);
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <processStartCommissioning+0x48>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f107 020c 	add.w	r2, r7, #12
 80023bc:	4610      	mov	r0, r2
 80023be:	4798      	blx	r3
	}
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200004ec 	.word	0x200004ec
 80023cc:	0800e3f4 	.word	0x0800e3f4

080023d0 <processSrsp>:

static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3301      	adds	r3, #1
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d00b      	beq.n	80023fe <processSrsp+0x2e>
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d113      	bne.n	8002412 <processSrsp+0x42>
		case MT_APP_CFG_SRSP_SET_CHANNEL:
			dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: SET_CHANNEL_SRSP\n");
 80023ea:	4911      	ldr	r1, [pc, #68]	; (8002430 <processSrsp+0x60>)
 80023ec:	2004      	movs	r0, #4
 80023ee:	f004 fa6f 	bl	80068d0 <dbg_print>
			processSetChannel(rpcBuff, rpcLen);
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ff9a 	bl	8002330 <processSetChannel>
			break;
 80023fc:	e014      	b.n	8002428 <processSrsp+0x58>
		case MT_APP_CFG_SRSP_START_COMMISSIONING:
			dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: START_COMMISSIONING_SRSP\n");
 80023fe:	490d      	ldr	r1, [pc, #52]	; (8002434 <processSrsp+0x64>)
 8002400:	2004      	movs	r0, #4
 8002402:	f004 fa65 	bl	80068d0 <dbg_print>
			processStartCommissioning(rpcBuff, rpcLen);
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	4619      	mov	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffb8 	bl	8002380 <processStartCommissioning>
			break;
 8002410:	e00a      	b.n	8002428 <processSrsp+0x58>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3301      	adds	r3, #1
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4906      	ldr	r1, [pc, #24]	; (8002438 <processSrsp+0x68>)
 8002420:	2002      	movs	r0, #2
 8002422:	f004 fa55 	bl	80068d0 <dbg_print>
			break;
 8002426:	bf00      	nop
	}
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	0800e408 	.word	0x0800e408
 8002434:	0800e42c 	.word	0x0800e42c
 8002438:	0800e458 	.word	0x0800e458

0800243c <appCfgProcess>:

void appCfgProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3301      	adds	r3, #1
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4916      	ldr	r1, [pc, #88]	; (80024b0 <appCfgProcess+0x74>)
 8002456:	2004      	movs	r0, #4
 8002458:	f004 fa3a 	bl	80068d0 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002464:	2b60      	cmp	r3, #96	; 0x60
 8002466:	d105      	bne.n	8002474 <appCfgProcess+0x38>
		processSrsp(rpcBuff, rpcLen);
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ffaf 	bl	80023d0 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8002472:	e019      	b.n	80024a8 <appCfgProcess+0x6c>
		switch (rpcBuff[1]) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3301      	adds	r3, #1
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d109      	bne.n	8002492 <appCfgProcess+0x56>
				dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: MT_AP_CFG_COMMISSIONING_NOTIFY\n");
 800247e:	490d      	ldr	r1, [pc, #52]	; (80024b4 <appCfgProcess+0x78>)
 8002480:	2004      	movs	r0, #4
 8002482:	f004 fa25 	bl	80068d0 <dbg_print>
				processCommissioningNotify(rpcBuff, rpcLen);
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff18 	bl	80022c0 <processCommissioningNotify>
				break;
 8002490:	e00a      	b.n	80024a8 <appCfgProcess+0x6c>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3301      	adds	r3, #1
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4906      	ldr	r1, [pc, #24]	; (80024b8 <appCfgProcess+0x7c>)
 80024a0:	2001      	movs	r0, #1
 80024a2:	f004 fa15 	bl	80068d0 <dbg_print>
				break;
 80024a6:	bf00      	nop
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	0800e484 	.word	0x0800e484
 80024b4:	0800e4b0 	.word	0x0800e4b0
 80024b8:	0800e4e0 	.word	0x0800e4e0

080024bc <appCfgSetChannel>:

uint8_t appCfgSetChannel(setChannelFormat_t *req) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t payload[5];

	// build command
	payload[0] = (req->primaryChannel) ? 1 : 0;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	723b      	strb	r3, [r7, #8]
	payload[1] = req->channel & 0xFF;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	727b      	strb	r3, [r7, #9]
	payload[2] = (req->channel >> 8) & 0xFF;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	72bb      	strb	r3, [r7, #10]
	payload[3] = (req->channel >> 16) & 0xFF;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	72fb      	strb	r3, [r7, #11]
	payload[4] = (req->channel >> 24) & 0xFF;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	0e1b      	lsrs	r3, r3, #24
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	733b      	strb	r3, [r7, #12]

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_APP_CFG), 0x08, payload, 5);
 80024fa:	f107 0208 	add.w	r2, r7, #8
 80024fe:	2305      	movs	r3, #5
 8002500:	2108      	movs	r1, #8
 8002502:	202f      	movs	r0, #47	; 0x2f
 8002504:	f004 fc88 	bl	8006e18 <rpcSendFrame>
 8002508:	4603      	mov	r3, r0
 800250a:	73fb      	strb	r3, [r7, #15]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <appCfgSetChannel+0x5c>
		rpcWaitMqClientMsg(50);
 8002512:	2032      	movs	r0, #50	; 0x32
 8002514:	f004 fb04 	bl	8006b20 <rpcWaitMqClientMsg>
	}

	// return
	return status;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <appCfgStartCommissioning>:

uint8_t appCfgStartCommissioning(startCommissioningFormat_t *req) {
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t payload[1];

	// build command
	payload[0] = req->commissioningMode;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	733b      	strb	r3, [r7, #12]

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_APP_CFG), 0x05, payload, 1);
 8002530:	f107 020c 	add.w	r2, r7, #12
 8002534:	2301      	movs	r3, #1
 8002536:	2105      	movs	r1, #5
 8002538:	202f      	movs	r0, #47	; 0x2f
 800253a:	f004 fc6d 	bl	8006e18 <rpcSendFrame>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <appCfgStartCommissioning+0x2c>
		rpcWaitMqClientMsg(50);
 8002548:	2032      	movs	r0, #50	; 0x32
 800254a:	f004 fae9 	bl	8006b20 <rpcWaitMqClientMsg>
	}

	// return
	return status;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <processReadConfigurationSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processReadConfigurationSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b0a6      	sub	sp, #152	; 0x98
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiReadConfigurationSrsp) {
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <processReadConfigurationSrsp+0xbc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d04e      	beq.n	800260a <processReadConfigurationSrsp+0xb2>
		uint8_t msgIdx = 2;
 800256c:	2302      	movs	r3, #2
 800256e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReadConfigurationSrspFormat_t rsp;
		if (rpcLen < 3) {
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d802      	bhi.n	800257e <processReadConfigurationSrsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8002578:	4827      	ldr	r0, [pc, #156]	; (8002618 <processReadConfigurationSrsp+0xc0>)
 800257a:	f00a f801 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 800257e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	733b      	strb	r3, [r7, #12]
		rsp.ConfigId = rpcBuff[msgIdx++];
 8002592:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800259c:	461a      	mov	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	737b      	strb	r3, [r7, #13]
		rsp.Len = rpcBuff[msgIdx++];
 80025a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80025b0:	461a      	mov	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	73bb      	strb	r3, [r7, #14]
		if (rpcLen > 3) {
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d91e      	bls.n	80025fe <processReadConfigurationSrsp+0xa6>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025c6:	e014      	b.n	80025f2 <processReadConfigurationSrsp+0x9a>
				rsp.Value[i] = rpcBuff[msgIdx++];
 80025c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80025d2:	461a      	mov	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	7819      	ldrb	r1, [r3, #0]
 80025da:	f107 020f 	add.w	r2, r7, #15
 80025de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025e2:	4413      	add	r3, r2
 80025e4:	460a      	mov	r2, r1
 80025e6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 80025e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ec:	3301      	adds	r3, #1
 80025ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025f2:	7bbb      	ldrb	r3, [r7, #14]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d3e4      	bcc.n	80025c8 <processReadConfigurationSrsp+0x70>
			}
		}
		mtSapiCbs.pfnSapiReadConfigurationSrsp(&rsp);
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <processReadConfigurationSrsp+0xbc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f107 020c 	add.w	r2, r7, #12
 8002606:	4610      	mov	r0, r2
 8002608:	4798      	blx	r3
	}
}
 800260a:	bf00      	nop
 800260c:	3798      	adds	r7, #152	; 0x98
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200004f8 	.word	0x200004f8
 8002618:	0800e510 	.word	0x0800e510

0800261c <processGetDeviceInfoSrsp>:
 * @param   rpcBuff - Incoming buffer
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processGetDeviceInfoSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiGetDeviceInfoSrsp) {
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <processGetDeviceInfoSrsp+0x74>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d02b      	beq.n	8002688 <processGetDeviceInfoSrsp+0x6c>
		uint8_t msgIdx = 2;
 8002630:	2302      	movs	r3, #2
 8002632:	75fb      	strb	r3, [r7, #23]
		GetDeviceInfoSrspFormat_t rsp;
		if (rpcLen < 9) {
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	2b08      	cmp	r3, #8
 8002638:	d802      	bhi.n	8002640 <processGetDeviceInfoSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800263a:	4816      	ldr	r0, [pc, #88]	; (8002694 <processGetDeviceInfoSrsp+0x78>)
 800263c:	f009 ffa0 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Param = rpcBuff[msgIdx++];
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	75fa      	strb	r2, [r7, #23]
 8002646:	461a      	mov	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	733b      	strb	r3, [r7, #12]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 8002650:	2300      	movs	r3, #0
 8002652:	75bb      	strb	r3, [r7, #22]
 8002654:	e00f      	b.n	8002676 <processGetDeviceInfoSrsp+0x5a>
			rsp.Value[i] = rpcBuff[msgIdx++];
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	75fa      	strb	r2, [r7, #23]
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	441a      	add	r2, r3
 8002662:	7dbb      	ldrb	r3, [r7, #22]
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	f107 0118 	add.w	r1, r7, #24
 800266a:	440b      	add	r3, r1
 800266c:	f803 2c0b 	strb.w	r2, [r3, #-11]
		for (i = 0; i < 8; i++) {
 8002670:	7dbb      	ldrb	r3, [r7, #22]
 8002672:	3301      	adds	r3, #1
 8002674:	75bb      	strb	r3, [r7, #22]
 8002676:	7dbb      	ldrb	r3, [r7, #22]
 8002678:	2b07      	cmp	r3, #7
 800267a:	d9ec      	bls.n	8002656 <processGetDeviceInfoSrsp+0x3a>
		}

		mtSapiCbs.pfnSapiGetDeviceInfoSrsp(&rsp);
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <processGetDeviceInfoSrsp+0x74>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f107 020c 	add.w	r2, r7, #12
 8002684:	4610      	mov	r0, r2
 8002686:	4798      	blx	r3
	}
}
 8002688:	bf00      	nop
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200004f8 	.word	0x200004f8
 8002694:	0800e510 	.word	0x0800e510

08002698 <processFindDeviceCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processFindDeviceCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiFindDeviceCnf) {
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <processFindDeviceCnf+0xc0>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d051      	beq.n	8002750 <processFindDeviceCnf+0xb8>
		uint8_t msgIdx = 2;
 80026ac:	2302      	movs	r3, #2
 80026ae:	77fb      	strb	r3, [r7, #31]
		FindDeviceCnfFormat_t rsp;
		if (rpcLen < 11) {
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	2b0a      	cmp	r3, #10
 80026b4:	d802      	bhi.n	80026bc <processFindDeviceCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80026b6:	4829      	ldr	r0, [pc, #164]	; (800275c <processFindDeviceCnf+0xc4>)
 80026b8:	f009 ff62 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SearchKey = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80026bc:	7ffb      	ldrb	r3, [r7, #31]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	7ffb      	ldrb	r3, [r7, #31]
 80026c8:	3301      	adds	r3, #1
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	440b      	add	r3, r1
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80026dc:	7ffb      	ldrb	r3, [r7, #31]
 80026de:	3302      	adds	r3, #2
 80026e0:	77fb      	strb	r3, [r7, #31]
		rsp.Result = 0;
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	77bb      	strb	r3, [r7, #30]
 80026f2:	e024      	b.n	800273e <processFindDeviceCnf+0xa6>
			rsp.Result |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80026f4:	7ffb      	ldrb	r3, [r7, #31]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	77fa      	strb	r2, [r7, #31]
 80026fa:	461a      	mov	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	7fb9      	ldrb	r1, [r7, #30]
 800270a:	00c9      	lsls	r1, r1, #3
 800270c:	f1a1 0620 	sub.w	r6, r1, #32
 8002710:	f1c1 0020 	rsb	r0, r1, #32
 8002714:	fa03 f501 	lsl.w	r5, r3, r1
 8002718:	fa02 f606 	lsl.w	r6, r2, r6
 800271c:	4335      	orrs	r5, r6
 800271e:	fa22 f000 	lsr.w	r0, r2, r0
 8002722:	4305      	orrs	r5, r0
 8002724:	fa02 f401 	lsl.w	r4, r2, r1
 8002728:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800272c:	ea40 0204 	orr.w	r2, r0, r4
 8002730:	ea41 0305 	orr.w	r3, r1, r5
 8002734:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8002738:	7fbb      	ldrb	r3, [r7, #30]
 800273a:	3301      	adds	r3, #1
 800273c:	77bb      	strb	r3, [r7, #30]
 800273e:	7fbb      	ldrb	r3, [r7, #30]
 8002740:	2b07      	cmp	r3, #7
 8002742:	d9d7      	bls.n	80026f4 <processFindDeviceCnf+0x5c>

		mtSapiCbs.pfnSapiFindDeviceCnf(&rsp);
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <processFindDeviceCnf+0xc0>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f107 0208 	add.w	r2, r7, #8
 800274c:	4610      	mov	r0, r2
 800274e:	4798      	blx	r3
	}
}
 8002750:	bf00      	nop
 8002752:	3724      	adds	r7, #36	; 0x24
 8002754:	46bd      	mov	sp, r7
 8002756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002758:	200004f8 	.word	0x200004f8
 800275c:	0800e510 	.word	0x0800e510

08002760 <processSendDataCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processSendDataCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiSendDataCnf) {
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <processSendDataCnf+0x58>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01d      	beq.n	80027b0 <processSendDataCnf+0x50>
		uint8_t msgIdx = 2;
 8002774:	2302      	movs	r3, #2
 8002776:	73fb      	strb	r3, [r7, #15]
		SendDataCnfFormat_t rsp;
		if (rpcLen < 2) {
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d802      	bhi.n	8002784 <processSendDataCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800277e:	480f      	ldr	r0, [pc, #60]	; (80027bc <processSendDataCnf+0x5c>)
 8002780:	f009 fefe 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Handle = rpcBuff[msgIdx++];
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	73fa      	strb	r2, [r7, #15]
 800278a:	461a      	mov	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	733b      	strb	r3, [r7, #12]
		rsp.Status = rpcBuff[msgIdx++];
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	73fa      	strb	r2, [r7, #15]
 800279a:	461a      	mov	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	737b      	strb	r3, [r7, #13]

		mtSapiCbs.pfnSapiSendDataCnf(&rsp);
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <processSendDataCnf+0x58>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f107 020c 	add.w	r2, r7, #12
 80027ac:	4610      	mov	r0, r2
 80027ae:	4798      	blx	r3
	}
}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200004f8 	.word	0x200004f8
 80027bc:	0800e510 	.word	0x0800e510

080027c0 <processReceiveDataInd>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processReceiveDataInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b09c      	sub	sp, #112	; 0x70
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiReceiveDataInd) {
 80027cc:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <processReceiveDataInd+0x100>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d070      	beq.n	80028b6 <processReceiveDataInd+0xf6>
		uint8_t msgIdx = 2;
 80027d4:	2302      	movs	r3, #2
 80027d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		ReceiveDataIndFormat_t rsp;
		if (rpcLen < 6) {
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d802      	bhi.n	80027e6 <processReceiveDataInd+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 80027e0:	4838      	ldr	r0, [pc, #224]	; (80028c4 <processReceiveDataInd+0x104>)
 80027e2:	f009 fecd 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Source = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80027e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027f6:	3301      	adds	r3, #1
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	440b      	add	r3, r1
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	b29b      	uxth	r3, r3
 8002804:	4413      	add	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800280a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800280e:	3302      	adds	r3, #2
 8002810:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		rsp.Command = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002814:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	4413      	add	r3, r2
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b29a      	uxth	r2, r3
 8002820:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002824:	3301      	adds	r3, #1
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	440b      	add	r3, r1
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	b29b      	uxth	r3, r3
 8002832:	4413      	add	r3, r2
 8002834:	b29b      	uxth	r3, r3
 8002836:	81fb      	strh	r3, [r7, #14]
		msgIdx += 2;
 8002838:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800283c:	3302      	adds	r3, #2
 800283e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		rsp.Len = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002842:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b29a      	uxth	r2, r3
 800284e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002852:	3301      	adds	r3, #1
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	440b      	add	r3, r1
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	b29b      	uxth	r3, r3
 8002860:	4413      	add	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8002866:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800286a:	3302      	adds	r3, #2
 800286c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (rpcLen > 6) {
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	2b06      	cmp	r3, #6
 8002874:	d919      	bls.n	80028aa <processReceiveDataInd+0xea>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8002876:	2300      	movs	r3, #0
 8002878:	66bb      	str	r3, [r7, #104]	; 0x68
 800287a:	e011      	b.n	80028a0 <processReceiveDataInd+0xe0>
				rsp.Data[i] = rpcBuff[msgIdx++];
 800287c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8002886:	461a      	mov	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	7819      	ldrb	r1, [r3, #0]
 800288e:	f107 0212 	add.w	r2, r7, #18
 8002892:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002894:	4413      	add	r3, r2
 8002896:	460a      	mov	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 800289a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800289c:	3301      	adds	r3, #1
 800289e:	66bb      	str	r3, [r7, #104]	; 0x68
 80028a0:	8a3b      	ldrh	r3, [r7, #16]
 80028a2:	461a      	mov	r2, r3
 80028a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d3e8      	bcc.n	800287c <processReceiveDataInd+0xbc>
			}
		}
		mtSapiCbs.pfnSapiReceiveDataInd(&rsp);
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <processReceiveDataInd+0x100>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f107 020c 	add.w	r2, r7, #12
 80028b2:	4610      	mov	r0, r2
 80028b4:	4798      	blx	r3
	}
}
 80028b6:	bf00      	nop
 80028b8:	3770      	adds	r7, #112	; 0x70
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200004f8 	.word	0x200004f8
 80028c4:	0800e510 	.word	0x0800e510

080028c8 <processAllowBindCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processAllowBindCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiAllowBindCnf) {
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <processAllowBindCnf+0x60>)
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <processAllowBindCnf+0x56>
		uint8_t msgIdx = 2;
 80028dc:	2302      	movs	r3, #2
 80028de:	73fb      	strb	r3, [r7, #15]
		AllowBindCnfFormat_t rsp;
		if (rpcLen < 2) {
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d802      	bhi.n	80028ec <processAllowBindCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80028e6:	4811      	ldr	r0, [pc, #68]	; (800292c <processAllowBindCnf+0x64>)
 80028e8:	f009 fe4a 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Source = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	3301      	adds	r3, #1
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	440b      	add	r3, r1
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	b29b      	uxth	r3, r3
 8002906:	4413      	add	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	3302      	adds	r3, #2
 8002910:	73fb      	strb	r3, [r7, #15]

		mtSapiCbs.pfnSapiAllowBindCnf(&rsp);
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <processAllowBindCnf+0x60>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f107 020c 	add.w	r2, r7, #12
 800291a:	4610      	mov	r0, r2
 800291c:	4798      	blx	r3
	}
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200004f8 	.word	0x200004f8
 800292c:	0800e510 	.word	0x0800e510

08002930 <processBindCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processBindCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiBindCnf) {
 800293c:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <processBindCnf+0x70>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d028      	beq.n	8002996 <processBindCnf+0x66>
		uint8_t msgIdx = 2;
 8002944:	2302      	movs	r3, #2
 8002946:	73fb      	strb	r3, [r7, #15]
		BindCnfFormat_t rsp;
		if (rpcLen < 3) {
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d802      	bhi.n	8002954 <processBindCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800294e:	4815      	ldr	r0, [pc, #84]	; (80029a4 <processBindCnf+0x74>)
 8002950:	f009 fe16 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.CommandId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b29a      	uxth	r2, r3
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	3301      	adds	r3, #1
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	440b      	add	r3, r1
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	b29b      	uxth	r3, r3
 800296e:	4413      	add	r3, r2
 8002970:	b29b      	uxth	r3, r3
 8002972:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	3302      	adds	r3, #2
 8002978:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	73fa      	strb	r2, [r7, #15]
 8002980:	461a      	mov	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	72bb      	strb	r3, [r7, #10]

		mtSapiCbs.pfnSapiBindCnf(&rsp);
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <processBindCnf+0x70>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f107 0208 	add.w	r2, r7, #8
 8002992:	4610      	mov	r0, r2
 8002994:	4798      	blx	r3
	}
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200004f8 	.word	0x200004f8
 80029a4:	0800e510 	.word	0x0800e510

080029a8 <processStartCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processStartCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiStartCnf) {
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <processStartCnf+0x48>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d015      	beq.n	80029e8 <processStartCnf+0x40>
		uint8_t msgIdx = 2;
 80029bc:	2302      	movs	r3, #2
 80029be:	73fb      	strb	r3, [r7, #15]
		StartCnfFormat_t rsp;
		if (rpcLen < 1) {
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <processStartCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80029c6:	480b      	ldr	r0, [pc, #44]	; (80029f4 <processStartCnf+0x4c>)
 80029c8:	f009 fdda 	bl	800c580 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	73fa      	strb	r2, [r7, #15]
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	733b      	strb	r3, [r7, #12]

		mtSapiCbs.pfnSapiStartCnf(&rsp);
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <processStartCnf+0x48>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f107 020c 	add.w	r2, r7, #12
 80029e4:	4610      	mov	r0, r2
 80029e6:	4798      	blx	r3
	}
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	200004f8 	.word	0x200004f8
 80029f4:	0800e510 	.word	0x0800e510

080029f8 <processSrsp>:
 *
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	461a      	mov	r2, r3
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4817      	ldr	r0, [pc, #92]	; (8002a68 <processSrsp+0x70>)
 8002a0c:	f009 fd30 	bl	800c470 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3301      	adds	r3, #1
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d002      	beq.n	8002a20 <processSrsp+0x28>
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d00a      	beq.n	8002a34 <processSrsp+0x3c>
 8002a1e:	e013      	b.n	8002a48 <processSrsp+0x50>
		case MT_SAPI_READ_CONFIGURATION:
			dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_READ_CONFIGURATION\n");
 8002a20:	4912      	ldr	r1, [pc, #72]	; (8002a6c <processSrsp+0x74>)
 8002a22:	2004      	movs	r0, #4
 8002a24:	f003 ff54 	bl	80068d0 <dbg_print>
			processReadConfigurationSrsp(rpcBuff, rpcLen);
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fd93 	bl	8002558 <processReadConfigurationSrsp>
			break;
 8002a32:	e014      	b.n	8002a5e <processSrsp+0x66>
		case MT_SAPI_GET_DEVICE_INFO:
			dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_GET_DEVICE_INFO\n");
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <processSrsp+0x78>)
 8002a36:	2004      	movs	r0, #4
 8002a38:	f003 ff4a 	bl	80068d0 <dbg_print>
			processGetDeviceInfoSrsp(rpcBuff, rpcLen);
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fdeb 	bl	800261c <processGetDeviceInfoSrsp>
			break;
 8002a46:	e00a      	b.n	8002a5e <processSrsp+0x66>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message  [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3301      	adds	r3, #1
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	4907      	ldr	r1, [pc, #28]	; (8002a74 <processSrsp+0x7c>)
 8002a56:	2002      	movs	r0, #2
 8002a58:	f003 ff3a 	bl	80068d0 <dbg_print>
			break;
 8002a5c:	bf00      	nop
	}

}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200030a4 	.word	0x200030a4
 8002a6c:	0800e524 	.word	0x0800e524
 8002a70:	0800e550 	.word	0x0800e550
 8002a74:	0800e578 	.word	0x0800e578

08002a78 <sapiProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 ***********************************************************************************************/
void sapiProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	493a      	ldr	r1, [pc, #232]	; (8002b7c <sapiProcess+0x104>)
 8002a92:	2004      	movs	r0, #4
 8002a94:	f003 ff1c 	bl	80068d0 <dbg_print>

//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002aa0:	2b60      	cmp	r3, #96	; 0x60
 8002aa2:	d105      	bne.n	8002ab0 <sapiProcess+0x38>
		processSrsp(rpcBuff, rpcLen);
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ffa5 	bl	80029f8 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_INFO, "sapiProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8002aae:	e060      	b.n	8002b72 <sapiProcess+0xfa>
		switch (rpcBuff[1]) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	3b80      	subs	r3, #128	; 0x80
 8002ab8:	2b07      	cmp	r3, #7
 8002aba:	d84f      	bhi.n	8002b5c <sapiProcess+0xe4>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <sapiProcess+0x4c>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002b49 	.word	0x08002b49
 8002ac8:	08002b35 	.word	0x08002b35
 8002acc:	08002b21 	.word	0x08002b21
 8002ad0:	08002af9 	.word	0x08002af9
 8002ad4:	08002b5d 	.word	0x08002b5d
 8002ad8:	08002ae5 	.word	0x08002ae5
 8002adc:	08002b5d 	.word	0x08002b5d
 8002ae0:	08002b0d 	.word	0x08002b0d
				dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_FIND_DEVICE_CNF\n");
 8002ae4:	4926      	ldr	r1, [pc, #152]	; (8002b80 <sapiProcess+0x108>)
 8002ae6:	2004      	movs	r0, #4
 8002ae8:	f003 fef2 	bl	80068d0 <dbg_print>
				processFindDeviceCnf(rpcBuff, rpcLen);
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff fdd1 	bl	8002698 <processFindDeviceCnf>
				break;
 8002af6:	e03c      	b.n	8002b72 <sapiProcess+0xfa>
				dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_SEND_DATA_CNF\n");
 8002af8:	4922      	ldr	r1, [pc, #136]	; (8002b84 <sapiProcess+0x10c>)
 8002afa:	2004      	movs	r0, #4
 8002afc:	f003 fee8 	bl	80068d0 <dbg_print>
				processSendDataCnf(rpcBuff, rpcLen);
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fe2b 	bl	8002760 <processSendDataCnf>
				break;
 8002b0a:	e032      	b.n	8002b72 <sapiProcess+0xfa>
				dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_RECEIVE_DATA_IND\n");
 8002b0c:	491e      	ldr	r1, [pc, #120]	; (8002b88 <sapiProcess+0x110>)
 8002b0e:	2004      	movs	r0, #4
 8002b10:	f003 fede 	bl	80068d0 <dbg_print>
				processReceiveDataInd(rpcBuff, rpcLen);
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	4619      	mov	r1, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fe51 	bl	80027c0 <processReceiveDataInd>
				break;
 8002b1e:	e028      	b.n	8002b72 <sapiProcess+0xfa>
				dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_ALLOW_BIND_CNF\n");
 8002b20:	491a      	ldr	r1, [pc, #104]	; (8002b8c <sapiProcess+0x114>)
 8002b22:	2004      	movs	r0, #4
 8002b24:	f003 fed4 	bl	80068d0 <dbg_print>
				processAllowBindCnf(rpcBuff, rpcLen);
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff fecb 	bl	80028c8 <processAllowBindCnf>
				break;
 8002b32:	e01e      	b.n	8002b72 <sapiProcess+0xfa>
				dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_BIND_CNF\n");
 8002b34:	4916      	ldr	r1, [pc, #88]	; (8002b90 <sapiProcess+0x118>)
 8002b36:	2004      	movs	r0, #4
 8002b38:	f003 feca 	bl	80068d0 <dbg_print>
				processBindCnf(rpcBuff, rpcLen);
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fef5 	bl	8002930 <processBindCnf>
				break;
 8002b46:	e014      	b.n	8002b72 <sapiProcess+0xfa>
				dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_START_CNF\n");
 8002b48:	4912      	ldr	r1, [pc, #72]	; (8002b94 <sapiProcess+0x11c>)
 8002b4a:	2004      	movs	r0, #4
 8002b4c:	f003 fec0 	bl	80068d0 <dbg_print>
				processStartCnf(rpcBuff, rpcLen);
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff27 	bl	80029a8 <processStartCnf>
				break;
 8002b5a:	e00a      	b.n	8002b72 <sapiProcess+0xfa>
				dbg_print(PRINT_LEVEL_INFO, "sapiProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3301      	adds	r3, #1
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	490b      	ldr	r1, [pc, #44]	; (8002b98 <sapiProcess+0x120>)
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f003 feb0 	bl	80068d0 <dbg_print>
				break;
 8002b70:	bf00      	nop
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	0800e5a4 	.word	0x0800e5a4
 8002b80:	0800e5d0 	.word	0x0800e5d0
 8002b84:	0800e5f8 	.word	0x0800e5f8
 8002b88:	0800e61c 	.word	0x0800e61c
 8002b8c:	0800e644 	.word	0x0800e644
 8002b90:	0800e66c 	.word	0x0800e66c
 8002b94:	0800e68c 	.word	0x0800e68c
 8002b98:	0800e6ac 	.word	0x0800e6ac

08002b9c <processPingSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 */
static void processPingSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysPingSrsp) {
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <processPingSrsp+0x60>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <processPingSrsp+0x56>
		uint8_t msgIdx = 2;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	73fb      	strb	r3, [r7, #15]
		PingSrspFormat_t rsp;
		if (rpcLen < 2) {
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d802      	bhi.n	8002bc0 <processPingSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8002bba:	4811      	ldr	r0, [pc, #68]	; (8002c00 <processPingSrsp+0x64>)
 8002bbc:	f009 fce0 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Capabilities = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	440b      	add	r3, r1
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	3302      	adds	r3, #2
 8002be4:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysPingSrsp(&rsp);
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <processPingSrsp+0x60>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f107 020c 	add.w	r2, r7, #12
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4798      	blx	r3
	}
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000518 	.word	0x20000518
 8002c00:	0800e6d8 	.word	0x0800e6d8

08002c04 <processGetExtAddrSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGetExtAddrSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGetExtAddrSrsp) {
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <processGetExtAddrSrsp+0x9c>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d03e      	beq.n	8002c96 <processGetExtAddrSrsp+0x92>
		uint8_t msgIdx = 2;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	75fb      	strb	r3, [r7, #23]
		GetExtAddrSrspFormat_t rsp;
		if (rpcLen < 8) {
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	2b07      	cmp	r3, #7
 8002c20:	d802      	bhi.n	8002c28 <processGetExtAddrSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8002c22:	4820      	ldr	r0, [pc, #128]	; (8002ca4 <processGetExtAddrSrsp+0xa0>)
 8002c24:	f009 fcac 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.ExtAddr = 0;
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	e9c7 2302 	strd	r2, r3, [r7, #8]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	75bb      	strb	r3, [r7, #22]
 8002c38:	e024      	b.n	8002c84 <processGetExtAddrSrsp+0x80>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	75fa      	strb	r2, [r7, #23]
 8002c40:	461a      	mov	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	7db9      	ldrb	r1, [r7, #22]
 8002c50:	00c9      	lsls	r1, r1, #3
 8002c52:	f1a1 0620 	sub.w	r6, r1, #32
 8002c56:	f1c1 0020 	rsb	r0, r1, #32
 8002c5a:	fa03 f501 	lsl.w	r5, r3, r1
 8002c5e:	fa02 f606 	lsl.w	r6, r2, r6
 8002c62:	4335      	orrs	r5, r6
 8002c64:	fa22 f000 	lsr.w	r0, r2, r0
 8002c68:	4305      	orrs	r5, r0
 8002c6a:	fa02 f401 	lsl.w	r4, r2, r1
 8002c6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c72:	ea40 0204 	orr.w	r2, r0, r4
 8002c76:	ea41 0305 	orr.w	r3, r1, r5
 8002c7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		for (i = 0; i < 8; i++)
 8002c7e:	7dbb      	ldrb	r3, [r7, #22]
 8002c80:	3301      	adds	r3, #1
 8002c82:	75bb      	strb	r3, [r7, #22]
 8002c84:	7dbb      	ldrb	r3, [r7, #22]
 8002c86:	2b07      	cmp	r3, #7
 8002c88:	d9d7      	bls.n	8002c3a <processGetExtAddrSrsp+0x36>

		mtSysCbs.pfnSysGetExtAddrSrsp(&rsp);
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <processGetExtAddrSrsp+0x9c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f107 0208 	add.w	r2, r7, #8
 8002c92:	4610      	mov	r0, r2
 8002c94:	4798      	blx	r3
	}
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000518 	.word	0x20000518
 8002ca4:	0800e6d8 	.word	0x0800e6d8

08002ca8 <processRamReadSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processRamReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b0a6      	sub	sp, #152	; 0x98
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysRamReadSrsp) {
 8002cb4:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <processRamReadSrsp+0xa8>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d044      	beq.n	8002d46 <processRamReadSrsp+0x9e>
		uint8_t msgIdx = 2;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		RamReadSrspFormat_t rsp;
		if (rpcLen < 2) {
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d802      	bhi.n	8002cce <processRamReadSrsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8002cc8:	4822      	ldr	r0, [pc, #136]	; (8002d54 <processRamReadSrsp+0xac>)
 8002cca:	f009 fc59 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8002cce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	733b      	strb	r3, [r7, #12]
		rsp.Len = rpcBuff[msgIdx++];
 8002ce2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	737b      	strb	r3, [r7, #13]
		if (rpcLen > 2) {
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d91e      	bls.n	8002d3a <processRamReadSrsp+0x92>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d02:	e014      	b.n	8002d2e <processRamReadSrsp+0x86>
				rsp.Value[i] = rpcBuff[msgIdx++];
 8002d04:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8002d0e:	461a      	mov	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	7819      	ldrb	r1, [r3, #0]
 8002d16:	f107 020e 	add.w	r2, r7, #14
 8002d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d1e:	4413      	add	r3, r2
 8002d20:	460a      	mov	r2, r1
 8002d22:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8002d24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d2e:	7b7b      	ldrb	r3, [r7, #13]
 8002d30:	461a      	mov	r2, r3
 8002d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d3e4      	bcc.n	8002d04 <processRamReadSrsp+0x5c>
			}
		}
		mtSysCbs.pfnSysRamReadSrsp(&rsp);
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <processRamReadSrsp+0xa8>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f107 020c 	add.w	r2, r7, #12
 8002d42:	4610      	mov	r0, r2
 8002d44:	4798      	blx	r3
	}
}
 8002d46:	bf00      	nop
 8002d48:	3798      	adds	r7, #152	; 0x98
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000518 	.word	0x20000518
 8002d54:	0800e6d8 	.word	0x0800e6d8

08002d58 <sysResetReq>:
 *
 * @param   req - Pointer to command specific structure.
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysResetReq(ResetReqFormat_t *req) {
 8002d58:	b5b0      	push	{r4, r5, r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	466b      	mov	r3, sp
 8002d62:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	77fb      	strb	r3, [r7, #31]
	uint32_t cmdLen = 1;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	61bb      	str	r3, [r7, #24]
	uint8_t cmd[cmdLen];
 8002d6c:	69b8      	ldr	r0, [r7, #24]
 8002d6e:	4603      	mov	r3, r0
 8002d70:	3b01      	subs	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	4601      	mov	r1, r0
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	f04f 0400 	mov.w	r4, #0
 8002d82:	00d4      	lsls	r4, r2, #3
 8002d84:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002d88:	00cb      	lsls	r3, r1, #3
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	f04f 0400 	mov.w	r4, #0
 8002d98:	00d4      	lsls	r4, r2, #3
 8002d9a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002d9e:	00cb      	lsls	r3, r1, #3
 8002da0:	1dc3      	adds	r3, r0, #7
 8002da2:	08db      	lsrs	r3, r3, #3
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	ebad 0d03 	sub.w	sp, sp, r3
 8002daa:	466b      	mov	r3, sp
 8002dac:	3300      	adds	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]

	if (cmd) {

		cmd[cmInd++] = req->Type;
 8002db0:	7ffb      	ldrb	r3, [r7, #31]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	77fa      	strb	r2, [r7, #31]
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	7819      	ldrb	r1, [r3, #0]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	5499      	strb	r1, [r3, r2]

		status = rpcSendFrame((MT_RPC_CMD_AREQ | MT_RPC_SYS_SYS),
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2041      	movs	r0, #65	; 0x41
 8002dca:	f004 f825 	bl	8006e18 <rpcSendFrame>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]
		MT_SYS_RESET_REQ, cmd, cmdLen);

		if (status == MT_RPC_SUCCESS) {
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <sysResetReq+0x86>
			rpcWaitMqClientMsg(50);
 8002dd8:	2032      	movs	r0, #50	; 0x32
 8002dda:	f003 fea1 	bl	8006b20 <rpcWaitMqClientMsg>
		}
		return status;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	46ad      	mov	sp, r5
	}
	else {
		dbg_print(PRINT_LEVEL_WARNING, "Memory for cmd was not allocated\n");
		return 1;
	}
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002dec <processResetInd>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processResetInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysResetInd) {
 8002df8:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <processResetInd+0x98>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d03d      	beq.n	8002e7c <processResetInd+0x90>
		uint8_t msgIdx = 2;
 8002e00:	2302      	movs	r3, #2
 8002e02:	73fb      	strb	r3, [r7, #15]
		ResetIndFormat_t rsp;
		if (rpcLen < 6) {
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d802      	bhi.n	8002e10 <processResetInd+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8002e0a:	481f      	ldr	r0, [pc, #124]	; (8002e88 <processResetInd+0x9c>)
 8002e0c:	f009 fbb8 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Reason = rpcBuff[msgIdx++];
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	73fa      	strb	r2, [r7, #15]
 8002e16:	461a      	mov	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	723b      	strb	r3, [r7, #8]
		rsp.TransportRev = rpcBuff[msgIdx++];
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	73fa      	strb	r2, [r7, #15]
 8002e26:	461a      	mov	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	727b      	strb	r3, [r7, #9]
		rsp.ProductId = rpcBuff[msgIdx++];
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	73fa      	strb	r2, [r7, #15]
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	72bb      	strb	r3, [r7, #10]
		rsp.MajorRel = rpcBuff[msgIdx++];
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	73fa      	strb	r2, [r7, #15]
 8002e46:	461a      	mov	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	72fb      	strb	r3, [r7, #11]
		rsp.MinorRel = rpcBuff[msgIdx++];
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	73fa      	strb	r2, [r7, #15]
 8002e56:	461a      	mov	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	733b      	strb	r3, [r7, #12]
		rsp.HwRev = rpcBuff[msgIdx++];
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	73fa      	strb	r2, [r7, #15]
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	737b      	strb	r3, [r7, #13]

		mtSysCbs.pfnSysResetInd(&rsp);
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <processResetInd+0x98>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f107 0208 	add.w	r2, r7, #8
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4798      	blx	r3
	}
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000518 	.word	0x20000518
 8002e88:	0800e6d8 	.word	0x0800e6d8

08002e8c <sysVersion>:
 *
 * @param    -
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysVersion() {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
	uint8_t status;

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_SYS),
 8002e92:	2300      	movs	r3, #0
 8002e94:	2200      	movs	r2, #0
 8002e96:	2102      	movs	r1, #2
 8002e98:	2021      	movs	r0, #33	; 0x21
 8002e9a:	f003 ffbd 	bl	8006e18 <rpcSendFrame>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
	MT_SYS_VERSION, NULL, 0);

	if (status == MT_RPC_SUCCESS) {
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <sysVersion+0x22>
		rpcWaitMqClientMsg(50);
 8002ea8:	2032      	movs	r0, #50	; 0x32
 8002eaa:	f003 fe39 	bl	8006b20 <rpcWaitMqClientMsg>
	}

	return status;
 8002eae:	79fb      	ldrb	r3, [r7, #7]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <processVersionSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processVersionSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysVersionSrsp) {
 8002ec4:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <processVersionSrsp+0x88>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d035      	beq.n	8002f38 <processVersionSrsp+0x80>
		uint8_t msgIdx = 2;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	73fb      	strb	r3, [r7, #15]
		VersionSrspFormat_t rsp;
		if (rpcLen < 5) {
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d802      	bhi.n	8002edc <processVersionSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8002ed6:	481b      	ldr	r0, [pc, #108]	; (8002f44 <processVersionSrsp+0x8c>)
 8002ed8:	f009 fb52 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.TransportRev = rpcBuff[msgIdx++];
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	73fa      	strb	r2, [r7, #15]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	723b      	strb	r3, [r7, #8]
		rsp.Product = rpcBuff[msgIdx++];
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	73fa      	strb	r2, [r7, #15]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	727b      	strb	r3, [r7, #9]
		rsp.MajorRel = rpcBuff[msgIdx++];
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	73fa      	strb	r2, [r7, #15]
 8002f02:	461a      	mov	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	72bb      	strb	r3, [r7, #10]
		rsp.MinorRel = rpcBuff[msgIdx++];
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	73fa      	strb	r2, [r7, #15]
 8002f12:	461a      	mov	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	72fb      	strb	r3, [r7, #11]
		rsp.MaintRel = rpcBuff[msgIdx++];
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	73fa      	strb	r2, [r7, #15]
 8002f22:	461a      	mov	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysVersionSrsp(&rsp);
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <processVersionSrsp+0x88>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f107 0208 	add.w	r2, r7, #8
 8002f34:	4610      	mov	r0, r2
 8002f36:	4798      	blx	r3
	}
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000518 	.word	0x20000518
 8002f44:	0800e6d8 	.word	0x0800e6d8

08002f48 <processOsalNvReadSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalNvReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0c4      	sub	sp, #272	; 0x110
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	6018      	str	r0, [r3, #0]
 8002f52:	460a      	mov	r2, r1
 8002f54:	1cfb      	adds	r3, r7, #3
 8002f56:	701a      	strb	r2, [r3, #0]
	if (mtSysCbs.pfnSysOsalNvReadSrsp) {
 8002f58:	4b2c      	ldr	r3, [pc, #176]	; (800300c <processOsalNvReadSrsp+0xc4>)
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d050      	beq.n	8003002 <processOsalNvReadSrsp+0xba>
		uint8_t msgIdx = 2;
 8002f60:	2302      	movs	r3, #2
 8002f62:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		OsalNvReadSrspFormat_t rsp;
		if (rpcLen < 2) {
 8002f66:	1cfb      	adds	r3, r7, #3
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d802      	bhi.n	8002f74 <processOsalNvReadSrsp+0x2c>
			printf("MT_RPC_ERR_LENGTH\n");
 8002f6e:	4828      	ldr	r0, [pc, #160]	; (8003010 <processOsalNvReadSrsp+0xc8>)
 8002f70:	f009 fb06 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8002f74:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8002f7e:	461a      	mov	r2, r3
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4413      	add	r3, r2
 8002f86:	781a      	ldrb	r2, [r3, #0]
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	701a      	strb	r2, [r3, #0]
		rsp.Len = rpcBuff[msgIdx++];
 8002f8e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8002f98:	461a      	mov	r2, r3
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	705a      	strb	r2, [r3, #1]
		if (rpcLen > 2) {
 8002fa8:	1cfb      	adds	r3, r7, #3
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d922      	bls.n	8002ff6 <processOsalNvReadSrsp+0xae>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002fb6:	e016      	b.n	8002fe6 <processOsalNvReadSrsp+0x9e>
				rsp.Value[i] = rpcBuff[msgIdx++];
 8002fb8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	7819      	ldrb	r1, [r3, #0]
 8002fcc:	f107 020c 	add.w	r2, r7, #12
 8002fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	460a      	mov	r2, r1
 8002fda:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8002fdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	785b      	ldrb	r3, [r3, #1]
 8002fec:	461a      	mov	r2, r3
 8002fee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d3e0      	bcc.n	8002fb8 <processOsalNvReadSrsp+0x70>
			}
		}
		mtSysCbs.pfnSysOsalNvReadSrsp(&rsp);
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <processOsalNvReadSrsp+0xc4>)
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f107 020c 	add.w	r2, r7, #12
 8002ffe:	4610      	mov	r0, r2
 8003000:	4798      	blx	r3
	}
}
 8003002:	bf00      	nop
 8003004:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000518 	.word	0x20000518
 8003010:	0800e6d8 	.word	0x0800e6d8

08003014 <sysOsalNvWrite>:
 *
 * @param   req - Pointer to command specific structure.
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysOsalNvWrite(OsalNvWriteFormat_t *req) {
 8003014:	b5b0      	push	{r4, r5, r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	466b      	mov	r3, sp
 800301e:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	76fb      	strb	r3, [r7, #27]
	uint32_t cmdLen = 4 + req->Len;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	78db      	ldrb	r3, [r3, #3]
 8003028:	3304      	adds	r3, #4
 800302a:	617b      	str	r3, [r7, #20]
	uint8_t cmd[cmdLen];
 800302c:	6978      	ldr	r0, [r7, #20]
 800302e:	4603      	mov	r3, r0
 8003030:	3b01      	subs	r3, #1
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	4601      	mov	r1, r0
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	f04f 0400 	mov.w	r4, #0
 8003042:	00d4      	lsls	r4, r2, #3
 8003044:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003048:	00cb      	lsls	r3, r1, #3
 800304a:	4601      	mov	r1, r0
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	f04f 0400 	mov.w	r4, #0
 8003058:	00d4      	lsls	r4, r2, #3
 800305a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800305e:	00cb      	lsls	r3, r1, #3
 8003060:	1dc3      	adds	r3, r0, #7
 8003062:	08db      	lsrs	r3, r3, #3
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	ebad 0d03 	sub.w	sp, sp, r3
 800306a:	466b      	mov	r3, sp
 800306c:	3300      	adds	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]

	if (cmd) {

		int idx;

		cmd[cmInd++] = (uint8_t) (req->Id & 0xFF);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8819      	ldrh	r1, [r3, #0]
 8003074:	7efb      	ldrb	r3, [r7, #27]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	76fa      	strb	r2, [r7, #27]
 800307a:	461a      	mov	r2, r3
 800307c:	b2c9      	uxtb	r1, r1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = (uint8_t) ((req->Id >> 8) & 0xFF);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	b299      	uxth	r1, r3
 800308a:	7efb      	ldrb	r3, [r7, #27]
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	76fa      	strb	r2, [r7, #27]
 8003090:	461a      	mov	r2, r3
 8003092:	b2c9      	uxtb	r1, r1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = req->Offset;
 8003098:	7efb      	ldrb	r3, [r7, #27]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	76fa      	strb	r2, [r7, #27]
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7899      	ldrb	r1, [r3, #2]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = req->Len;
 80030a8:	7efb      	ldrb	r3, [r7, #27]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	76fa      	strb	r2, [r7, #27]
 80030ae:	461a      	mov	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	78d9      	ldrb	r1, [r3, #3]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	5499      	strb	r1, [r3, r2]
		for (idx = 0; idx < req->Len; idx++) {
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	e00d      	b.n	80030da <sysOsalNvWrite+0xc6>
			cmd[cmInd++] = req->Value[idx];
 80030be:	7efb      	ldrb	r3, [r7, #27]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	76fa      	strb	r2, [r7, #27]
 80030c4:	4619      	mov	r1, r3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	545a      	strb	r2, [r3, r1]
		for (idx = 0; idx < req->Len; idx++) {
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	3301      	adds	r3, #1
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	78db      	ldrb	r3, [r3, #3]
 80030de:	461a      	mov	r2, r3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	4293      	cmp	r3, r2
 80030e4:	dbeb      	blt.n	80030be <sysOsalNvWrite+0xaa>
		}

		status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_SYS),
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2109      	movs	r1, #9
 80030ee:	2021      	movs	r0, #33	; 0x21
 80030f0:	f003 fe92 	bl	8006e18 <rpcSendFrame>
 80030f4:	4603      	mov	r3, r0
 80030f6:	72fb      	strb	r3, [r7, #11]
		MT_SYS_OSAL_NV_WRITE, cmd, cmdLen);

		if (status == MT_RPC_SUCCESS) {
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <sysOsalNvWrite+0xf0>
			rpcWaitMqClientMsg(50);
 80030fe:	2032      	movs	r0, #50	; 0x32
 8003100:	f003 fd0e 	bl	8006b20 <rpcWaitMqClientMsg>
		}

		return status;
 8003104:	7afb      	ldrb	r3, [r7, #11]
 8003106:	46ad      	mov	sp, r5
	}
	else {
		dbg_print(PRINT_LEVEL_WARNING, "Memory for cmd was not allocated\n");
		return 1;
	}
}
 8003108:	4618      	mov	r0, r3
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bdb0      	pop	{r4, r5, r7, pc}

08003110 <processOsalNvLengthSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalNvLengthSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysOsalNvLengthSrsp) {
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <processOsalNvLengthSrsp+0x60>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <processOsalNvLengthSrsp+0x56>
		uint8_t msgIdx = 2;
 8003124:	2302      	movs	r3, #2
 8003126:	73fb      	strb	r3, [r7, #15]
		OsalNvLengthSrspFormat_t rsp;
		if (rpcLen < 2) {
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d802      	bhi.n	8003134 <processOsalNvLengthSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800312e:	4811      	ldr	r0, [pc, #68]	; (8003174 <processOsalNvLengthSrsp+0x64>)
 8003130:	f009 fa26 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.ItemLen = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b29a      	uxth	r2, r3
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	3301      	adds	r3, #1
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	440b      	add	r3, r1
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	b29b      	uxth	r3, r3
 800314e:	4413      	add	r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	3302      	adds	r3, #2
 8003158:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysOsalNvLengthSrsp(&rsp);
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <processOsalNvLengthSrsp+0x60>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f107 020c 	add.w	r2, r7, #12
 8003162:	4610      	mov	r0, r2
 8003164:	4798      	blx	r3
	}
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000518 	.word	0x20000518
 8003174:	0800e6d8 	.word	0x0800e6d8

08003178 <processOsalTimerExpired>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalTimerExpired(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysOsalTimerExpired) {
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <processOsalTimerExpired+0x48>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d015      	beq.n	80031b8 <processOsalTimerExpired+0x40>
		uint8_t msgIdx = 2;
 800318c:	2302      	movs	r3, #2
 800318e:	73fb      	strb	r3, [r7, #15]
		OsalTimerExpiredFormat_t rsp;
		if (rpcLen < 1) {
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <processOsalTimerExpired+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003196:	480b      	ldr	r0, [pc, #44]	; (80031c4 <processOsalTimerExpired+0x4c>)
 8003198:	f009 f9f2 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Id = rpcBuff[msgIdx++];
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	73fa      	strb	r2, [r7, #15]
 80031a2:	461a      	mov	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4413      	add	r3, r2
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysOsalTimerExpired(&rsp);
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <processOsalTimerExpired+0x48>)
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	f107 020c 	add.w	r2, r7, #12
 80031b4:	4610      	mov	r0, r2
 80031b6:	4798      	blx	r3
	}
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000518 	.word	0x20000518
 80031c4:	0800e6d8 	.word	0x0800e6d8

080031c8 <processStackTuneSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processStackTuneSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysStackTuneSrsp) {
 80031d4:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <processStackTuneSrsp+0x48>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <processStackTuneSrsp+0x40>
		uint8_t msgIdx = 2;
 80031dc:	2302      	movs	r3, #2
 80031de:	73fb      	strb	r3, [r7, #15]
		StackTuneSrspFormat_t rsp;
		if (rpcLen < 1) {
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <processStackTuneSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80031e6:	480b      	ldr	r0, [pc, #44]	; (8003214 <processStackTuneSrsp+0x4c>)
 80031e8:	f009 f9ca 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = rpcBuff[msgIdx++];
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	73fa      	strb	r2, [r7, #15]
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysStackTuneSrsp(&rsp);
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <processStackTuneSrsp+0x48>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f107 020c 	add.w	r2, r7, #12
 8003204:	4610      	mov	r0, r2
 8003206:	4798      	blx	r3
	}
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000518 	.word	0x20000518
 8003214:	0800e6d8 	.word	0x0800e6d8

08003218 <processAdcReadSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processAdcReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysAdcReadSrsp) {
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <processAdcReadSrsp+0x60>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <processAdcReadSrsp+0x56>
		uint8_t msgIdx = 2;
 800322c:	2302      	movs	r3, #2
 800322e:	73fb      	strb	r3, [r7, #15]
		AdcReadSrspFormat_t rsp;
		if (rpcLen < 2) {
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d802      	bhi.n	800323c <processAdcReadSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003236:	4811      	ldr	r0, [pc, #68]	; (800327c <processAdcReadSrsp+0x64>)
 8003238:	f009 f9a2 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b29a      	uxth	r2, r3
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	3301      	adds	r3, #1
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	440b      	add	r3, r1
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	b29b      	uxth	r3, r3
 8003256:	4413      	add	r3, r2
 8003258:	b29b      	uxth	r3, r3
 800325a:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	3302      	adds	r3, #2
 8003260:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysAdcReadSrsp(&rsp);
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <processAdcReadSrsp+0x60>)
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	f107 020c 	add.w	r2, r7, #12
 800326a:	4610      	mov	r0, r2
 800326c:	4798      	blx	r3
	}
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000518 	.word	0x20000518
 800327c:	0800e6d8 	.word	0x0800e6d8

08003280 <processGpioSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGpioSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGpioSrsp) {
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <processGpioSrsp+0x48>)
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d015      	beq.n	80032c0 <processGpioSrsp+0x40>
		uint8_t msgIdx = 2;
 8003294:	2302      	movs	r3, #2
 8003296:	73fb      	strb	r3, [r7, #15]
		GpioSrspFormat_t rsp;
		if (rpcLen < 1) {
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <processGpioSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800329e:	480b      	ldr	r0, [pc, #44]	; (80032cc <processGpioSrsp+0x4c>)
 80032a0:	f009 f96e 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = rpcBuff[msgIdx++];
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	73fa      	strb	r2, [r7, #15]
 80032aa:	461a      	mov	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysGpioSrsp(&rsp);
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <processGpioSrsp+0x48>)
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	f107 020c 	add.w	r2, r7, #12
 80032bc:	4610      	mov	r0, r2
 80032be:	4798      	blx	r3
	}
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000518 	.word	0x20000518
 80032cc:	0800e6d8 	.word	0x0800e6d8

080032d0 <processRandomSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processRandomSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysRandomSrsp) {
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <processRandomSrsp+0x60>)
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <processRandomSrsp+0x56>
		uint8_t msgIdx = 2;
 80032e4:	2302      	movs	r3, #2
 80032e6:	73fb      	strb	r3, [r7, #15]
		RandomSrspFormat_t rsp;
		if (rpcLen < 2) {
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d802      	bhi.n	80032f4 <processRandomSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80032ee:	4811      	ldr	r0, [pc, #68]	; (8003334 <processRandomSrsp+0x64>)
 80032f0:	f009 f946 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3301      	adds	r3, #1
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	440b      	add	r3, r1
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	b29b      	uxth	r3, r3
 800330e:	4413      	add	r3, r2
 8003310:	b29b      	uxth	r3, r3
 8003312:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	3302      	adds	r3, #2
 8003318:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysRandomSrsp(&rsp);
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <processRandomSrsp+0x60>)
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	f107 020c 	add.w	r2, r7, #12
 8003322:	4610      	mov	r0, r2
 8003324:	4798      	blx	r3
	}
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000518 	.word	0x20000518
 8003334:	0800e6d8 	.word	0x0800e6d8

08003338 <processGetTimeSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGetTimeSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGetTimeSrsp) {
 8003344:	4b34      	ldr	r3, [pc, #208]	; (8003418 <processGetTimeSrsp+0xe0>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	2b00      	cmp	r3, #0
 800334a:	d061      	beq.n	8003410 <processGetTimeSrsp+0xd8>
		uint8_t msgIdx = 2;
 800334c:	2302      	movs	r3, #2
 800334e:	75fb      	strb	r3, [r7, #23]
		GetTimeSrspFormat_t rsp;
		if (rpcLen < 11) {
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	2b0a      	cmp	r3, #10
 8003354:	d802      	bhi.n	800335c <processGetTimeSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003356:	4831      	ldr	r0, [pc, #196]	; (800341c <processGetTimeSrsp+0xe4>)
 8003358:	f009 f912 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.UTCTime = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	60bb      	str	r3, [r7, #8]
		uint8_t i;
		for (i = 0; i < 4; i++)
 8003360:	2300      	movs	r3, #0
 8003362:	75bb      	strb	r3, [r7, #22]
 8003364:	e010      	b.n	8003388 <processGetTimeSrsp+0x50>
			rsp.UTCTime |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	75fa      	strb	r2, [r7, #23]
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	7dbb      	ldrb	r3, [r7, #22]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	409a      	lsls	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
 8003380:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < 4; i++)
 8003382:	7dbb      	ldrb	r3, [r7, #22]
 8003384:	3301      	adds	r3, #1
 8003386:	75bb      	strb	r3, [r7, #22]
 8003388:	7dbb      	ldrb	r3, [r7, #22]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d9eb      	bls.n	8003366 <processGetTimeSrsp+0x2e>
		rsp.Hour = rpcBuff[msgIdx++];
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	75fa      	strb	r2, [r7, #23]
 8003394:	461a      	mov	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	733b      	strb	r3, [r7, #12]
		rsp.Minute = rpcBuff[msgIdx++];
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	75fa      	strb	r2, [r7, #23]
 80033a4:	461a      	mov	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	737b      	strb	r3, [r7, #13]
		rsp.Second = rpcBuff[msgIdx++];
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	75fa      	strb	r2, [r7, #23]
 80033b4:	461a      	mov	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	73bb      	strb	r3, [r7, #14]
		rsp.Month = rpcBuff[msgIdx++];
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	75fa      	strb	r2, [r7, #23]
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	73fb      	strb	r3, [r7, #15]
		rsp.Day = rpcBuff[msgIdx++];
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	75fa      	strb	r2, [r7, #23]
 80033d4:	461a      	mov	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	743b      	strb	r3, [r7, #16]
		rsp.Year = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	3301      	adds	r3, #1
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	440b      	add	r3, r1
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	827b      	strh	r3, [r7, #18]
		msgIdx += 2;
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
 8003400:	3302      	adds	r3, #2
 8003402:	75fb      	strb	r3, [r7, #23]

		mtSysCbs.pfnSysGetTimeSrsp(&rsp);
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <processGetTimeSrsp+0xe0>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f107 0208 	add.w	r2, r7, #8
 800340c:	4610      	mov	r0, r2
 800340e:	4798      	blx	r3
	}
}
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000518 	.word	0x20000518
 800341c:	0800e6d8 	.word	0x0800e6d8

08003420 <processSetTxPowerSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processSetTxPowerSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysSetTxPowerSrsp) {
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <processSetTxPowerSrsp+0x48>)
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d015      	beq.n	8003460 <processSetTxPowerSrsp+0x40>
		uint8_t msgIdx = 2;
 8003434:	2302      	movs	r3, #2
 8003436:	73fb      	strb	r3, [r7, #15]
		SetTxPowerSrspFormat_t rsp;
		if (rpcLen < 1) {
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <processSetTxPowerSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800343e:	480b      	ldr	r0, [pc, #44]	; (800346c <processSetTxPowerSrsp+0x4c>)
 8003440:	f009 f89e 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.TxPower = rpcBuff[msgIdx++];
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	73fa      	strb	r2, [r7, #15]
 800344a:	461a      	mov	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysSetTxPowerSrsp(&rsp);
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <processSetTxPowerSrsp+0x48>)
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	f107 020c 	add.w	r2, r7, #12
 800345c:	4610      	mov	r0, r2
 800345e:	4798      	blx	r3
	}
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000518 	.word	0x20000518
 800346c:	0800e6d8 	.word	0x0800e6d8

08003470 <sysRegisterCallbacks>:
 * @brief
 *
 * @param
 *
 */
void sysRegisterCallbacks(mtSysCb_t cbs) {
 8003470:	b084      	sub	sp, #16
 8003472:	b4b0      	push	{r4, r5, r7}
 8003474:	af00      	add	r7, sp, #0
 8003476:	f107 040c 	add.w	r4, r7, #12
 800347a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&mtSysCbs, &cbs, sizeof(mtSysCb_t));
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <sysRegisterCallbacks+0x34>)
 8003480:	461c      	mov	r4, r3
 8003482:	f107 050c 	add.w	r5, r7, #12
 8003486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800348a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800348c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800348e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003492:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003496:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	bcb0      	pop	{r4, r5, r7}
 80034a0:	b004      	add	sp, #16
 80034a2:	4770      	bx	lr
 80034a4:	20000518 	.word	0x20000518

080034a8 <processSrsp>:
 *
 * @param
 *

 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	461a      	mov	r2, r3
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	485d      	ldr	r0, [pc, #372]	; (8003630 <processSrsp+0x188>)
 80034bc:	f008 ffd8 	bl	800c470 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3301      	adds	r3, #1
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	2b13      	cmp	r3, #19
 80034ca:	f200 80a8 	bhi.w	800361e <processSrsp+0x176>
 80034ce:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <processSrsp+0x2c>)
 80034d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d4:	08003525 	.word	0x08003525
 80034d8:	08003561 	.word	0x08003561
 80034dc:	0800361f 	.word	0x0800361f
 80034e0:	08003539 	.word	0x08003539
 80034e4:	0800354d 	.word	0x0800354d
 80034e8:	0800361f 	.word	0x0800361f
 80034ec:	0800361f 	.word	0x0800361f
 80034f0:	08003575 	.word	0x08003575
 80034f4:	08003589 	.word	0x08003589
 80034f8:	0800361f 	.word	0x0800361f
 80034fc:	0800361f 	.word	0x0800361f
 8003500:	080035e3 	.word	0x080035e3
 8003504:	080035bb 	.word	0x080035bb
 8003508:	080035cf 	.word	0x080035cf
 800350c:	080035a7 	.word	0x080035a7
 8003510:	0800361f 	.word	0x0800361f
 8003514:	080035f7 	.word	0x080035f7
 8003518:	0800361f 	.word	0x0800361f
 800351c:	08003593 	.word	0x08003593
 8003520:	0800360b 	.word	0x0800360b
		case MT_SYS_PING:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_PING\n");
 8003524:	4943      	ldr	r1, [pc, #268]	; (8003634 <processSrsp+0x18c>)
 8003526:	2004      	movs	r0, #4
 8003528:	f003 f9d2 	bl	80068d0 <dbg_print>
			processPingSrsp(rpcBuff, rpcLen);
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff fb33 	bl	8002b9c <processPingSrsp>
			break;
 8003536:	e077      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_GET_EXTADDR:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GET_EXTADDR\n");
 8003538:	493f      	ldr	r1, [pc, #252]	; (8003638 <processSrsp+0x190>)
 800353a:	2004      	movs	r0, #4
 800353c:	f003 f9c8 	bl	80068d0 <dbg_print>
			processGetExtAddrSrsp(rpcBuff, rpcLen);
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	4619      	mov	r1, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff fb5d 	bl	8002c04 <processGetExtAddrSrsp>
			break;
 800354a:	e06d      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_RAM_READ:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RAM_READ\n");
 800354c:	493b      	ldr	r1, [pc, #236]	; (800363c <processSrsp+0x194>)
 800354e:	2004      	movs	r0, #4
 8003550:	f003 f9be 	bl	80068d0 <dbg_print>
			processRamReadSrsp(rpcBuff, rpcLen);
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fba5 	bl	8002ca8 <processRamReadSrsp>
			break;
 800355e:	e063      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_VERSION:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_VERSION\n");
 8003560:	4937      	ldr	r1, [pc, #220]	; (8003640 <processSrsp+0x198>)
 8003562:	2004      	movs	r0, #4
 8003564:	f003 f9b4 	bl	80068d0 <dbg_print>
			processVersionSrsp(rpcBuff, rpcLen);
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	4619      	mov	r1, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fca3 	bl	8002eb8 <processVersionSrsp>
			break;
 8003572:	e059      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_OSAL_NV_READ:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_READ\n");
 8003574:	4933      	ldr	r1, [pc, #204]	; (8003644 <processSrsp+0x19c>)
 8003576:	2004      	movs	r0, #4
 8003578:	f003 f9aa 	bl	80068d0 <dbg_print>
			processOsalNvReadSrsp(rpcBuff, rpcLen);
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	4619      	mov	r1, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff fce1 	bl	8002f48 <processOsalNvReadSrsp>
			break;
 8003586:	e04f      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_OSAL_NV_WRITE:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_WRITE\n");
 8003588:	492f      	ldr	r1, [pc, #188]	; (8003648 <processSrsp+0x1a0>)
 800358a:	2004      	movs	r0, #4
 800358c:	f003 f9a0 	bl	80068d0 <dbg_print>
			break;
 8003590:	e04a      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_OSAL_NV_LENGTH:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_LENGTH\n");
 8003592:	492e      	ldr	r1, [pc, #184]	; (800364c <processSrsp+0x1a4>)
 8003594:	2004      	movs	r0, #4
 8003596:	f003 f99b 	bl	80068d0 <dbg_print>
			processOsalNvLengthSrsp(rpcBuff, rpcLen);
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	4619      	mov	r1, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff fdb6 	bl	8003110 <processOsalNvLengthSrsp>
			break;
 80035a4:	e040      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_STACK_TUNE:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_STACK_TUNE\n");
 80035a6:	492a      	ldr	r1, [pc, #168]	; (8003650 <processSrsp+0x1a8>)
 80035a8:	2004      	movs	r0, #4
 80035aa:	f003 f991 	bl	80068d0 <dbg_print>
			processStackTuneSrsp(rpcBuff, rpcLen);
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	4619      	mov	r1, r3
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fe08 	bl	80031c8 <processStackTuneSrsp>
			break;
 80035b8:	e036      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_ADC_READ:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_ADC_READ\n");
 80035ba:	4926      	ldr	r1, [pc, #152]	; (8003654 <processSrsp+0x1ac>)
 80035bc:	2004      	movs	r0, #4
 80035be:	f003 f987 	bl	80068d0 <dbg_print>
			processAdcReadSrsp(rpcBuff, rpcLen);
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	4619      	mov	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fe26 	bl	8003218 <processAdcReadSrsp>
			break;
 80035cc:	e02c      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_GPIO:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GPIO\n");
 80035ce:	4922      	ldr	r1, [pc, #136]	; (8003658 <processSrsp+0x1b0>)
 80035d0:	2004      	movs	r0, #4
 80035d2:	f003 f97d 	bl	80068d0 <dbg_print>
			processGpioSrsp(rpcBuff, rpcLen);
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fe50 	bl	8003280 <processGpioSrsp>
			break;
 80035e0:	e022      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_RANDOM:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RANDOM\n");
 80035e2:	491e      	ldr	r1, [pc, #120]	; (800365c <processSrsp+0x1b4>)
 80035e4:	2004      	movs	r0, #4
 80035e6:	f003 f973 	bl	80068d0 <dbg_print>
			processRandomSrsp(rpcBuff, rpcLen);
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff fe6e 	bl	80032d0 <processRandomSrsp>
			break;
 80035f4:	e018      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_GET_TIME:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GET_TIME\n");
 80035f6:	491a      	ldr	r1, [pc, #104]	; (8003660 <processSrsp+0x1b8>)
 80035f8:	2004      	movs	r0, #4
 80035fa:	f003 f969 	bl	80068d0 <dbg_print>
			processGetTimeSrsp(rpcBuff, rpcLen);
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fe98 	bl	8003338 <processGetTimeSrsp>
			break;
 8003608:	e00e      	b.n	8003628 <processSrsp+0x180>
		case MT_SYS_SET_TX_POWER:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_SET_TX_POWER\n");
 800360a:	4916      	ldr	r1, [pc, #88]	; (8003664 <processSrsp+0x1bc>)
 800360c:	2004      	movs	r0, #4
 800360e:	f003 f95f 	bl	80068d0 <dbg_print>
			processSetTxPowerSrsp(rpcBuff, rpcLen);
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ff02 	bl	8003420 <processSetTxPowerSrsp>
			break;
 800361c:	e004      	b.n	8003628 <processSrsp+0x180>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message\n");
 800361e:	4912      	ldr	r1, [pc, #72]	; (8003668 <processSrsp+0x1c0>)
 8003620:	2002      	movs	r0, #2
 8003622:	f003 f955 	bl	80068d0 <dbg_print>
			break;
 8003626:	bf00      	nop
	}

}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	200030a4 	.word	0x200030a4
 8003634:	0800e6ec 	.word	0x0800e6ec
 8003638:	0800e708 	.word	0x0800e708
 800363c:	0800e728 	.word	0x0800e728
 8003640:	0800e748 	.word	0x0800e748
 8003644:	0800e764 	.word	0x0800e764
 8003648:	0800e788 	.word	0x0800e788
 800364c:	0800e7ac 	.word	0x0800e7ac
 8003650:	0800e7d0 	.word	0x0800e7d0
 8003654:	0800e7f0 	.word	0x0800e7f0
 8003658:	0800e810 	.word	0x0800e810
 800365c:	0800e82c 	.word	0x0800e82c
 8003660:	0800e848 	.word	0x0800e848
 8003664:	0800e868 	.word	0x0800e868
 8003668:	0800e88c 	.word	0x0800e88c

0800366c <sysProcess>:
 *
 * @param   rpcLen has the size of the frame: cmd0 + cmd1 + payload + FCS
 *

 *************************************************************************************************/
void sysProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3301      	adds	r3, #1
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	491d      	ldr	r1, [pc, #116]	; (80036fc <sysProcess+0x90>)
 8003686:	2004      	movs	r0, #4
 8003688:	f003 f922 	bl	80068d0 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003694:	2b60      	cmp	r3, #96	; 0x60
 8003696:	d105      	bne.n	80036a4 <sysProcess+0x38>
		processSrsp(rpcBuff, rpcLen);
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff03 	bl	80034a8 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcSys: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 80036a2:	e026      	b.n	80036f2 <sysProcess+0x86>
		switch (rpcBuff[1]) {
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3301      	adds	r3, #1
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d002      	beq.n	80036b4 <sysProcess+0x48>
 80036ae:	2b81      	cmp	r3, #129	; 0x81
 80036b0:	d00a      	beq.n	80036c8 <sysProcess+0x5c>
 80036b2:	e013      	b.n	80036dc <sysProcess+0x70>
				dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RESET_IND\n");
 80036b4:	4912      	ldr	r1, [pc, #72]	; (8003700 <sysProcess+0x94>)
 80036b6:	2004      	movs	r0, #4
 80036b8:	f003 f90a 	bl	80068d0 <dbg_print>
				processResetInd(rpcBuff, rpcLen);
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	4619      	mov	r1, r3
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fb93 	bl	8002dec <processResetInd>
				break;
 80036c6:	e014      	b.n	80036f2 <sysProcess+0x86>
				dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_TIMER_EXPIRED\n");
 80036c8:	490e      	ldr	r1, [pc, #56]	; (8003704 <sysProcess+0x98>)
 80036ca:	2004      	movs	r0, #4
 80036cc:	f003 f900 	bl	80068d0 <dbg_print>
				processOsalTimerExpired(rpcBuff, rpcLen);
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	4619      	mov	r1, r3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff fd4f 	bl	8003178 <processOsalTimerExpired>
				break;
 80036da:	e00a      	b.n	80036f2 <sysProcess+0x86>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcSys: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3301      	adds	r3, #1
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4907      	ldr	r1, [pc, #28]	; (8003708 <sysProcess+0x9c>)
 80036ea:	2001      	movs	r0, #1
 80036ec:	f003 f8f0 	bl	80068d0 <dbg_print>
				break;
 80036f0:	bf00      	nop
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	0800e8b0 	.word	0x0800e8b0
 8003700:	0800e8dc 	.word	0x0800e8dc
 8003704:	0800e8fc 	.word	0x0800e8fc
 8003708:	0800e924 	.word	0x0800e924

0800370c <utilRegisterCallbacks>:
#include <stddef.h>
#include <string.h>

static mtUtilCb_t mtUtilCbs;

void utilRegisterCallbacks(mtUtilCb_t cbs) {
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	memcpy(&mtUtilCbs, &cbs, sizeof(mtUtilCb_t));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a04      	ldr	r2, [pc, #16]	; (8003728 <utilRegisterCallbacks+0x1c>)
 8003718:	6013      	str	r3, [r2, #0]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000550 	.word	0x20000550

0800372c <processGetDeviceInfo>:

static void processGetDeviceInfo(uint8_t *rpcBuff, uint8_t rpcLen) {
 800372c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372e:	b09b      	sub	sp, #108	; 0x6c
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtUtilCbs.pfnUtilGetDeviceInfoCb_t) {
 8003738:	4b6e      	ldr	r3, [pc, #440]	; (80038f4 <processGetDeviceInfo+0x1c8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80d5 	beq.w	80038ec <processGetDeviceInfo+0x1c0>
		uint8_t msgIdx = 2;
 8003742:	2302      	movs	r3, #2
 8003744:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		utilGetDeviceInfoFormat_t rsp;

		// size error?
		if (rpcLen < 1) {
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <processGetDeviceInfo+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 800374e:	486a      	ldr	r0, [pc, #424]	; (80038f8 <processGetDeviceInfo+0x1cc>)
 8003750:	f008 ff16 	bl	800c580 <puts>
		}

		// copy command data
		rsp.success = rpcBuff[msgIdx++];
 8003754:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 800375e:	461a      	mov	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	723b      	strb	r3, [r7, #8]
		rsp.ieee_addr = 0;
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (uint8_t i = 0; i < 8; i++)
 8003774:	2300      	movs	r3, #0
 8003776:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800377a:	e029      	b.n	80037d0 <processGetDeviceInfo+0xa4>
			rsp.ieee_addr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 800377c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003786:	461a      	mov	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 8003798:	00c9      	lsls	r1, r1, #3
 800379a:	f1a1 0620 	sub.w	r6, r1, #32
 800379e:	f1c1 0020 	rsb	r0, r1, #32
 80037a2:	fa03 f501 	lsl.w	r5, r3, r1
 80037a6:	fa02 f606 	lsl.w	r6, r2, r6
 80037aa:	4335      	orrs	r5, r6
 80037ac:	fa22 f000 	lsr.w	r0, r2, r0
 80037b0:	4305      	orrs	r5, r0
 80037b2:	fa02 f401 	lsl.w	r4, r2, r1
 80037b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037ba:	ea40 0204 	orr.w	r2, r0, r4
 80037be:	ea41 0305 	orr.w	r3, r1, r5
 80037c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (uint8_t i = 0; i < 8; i++)
 80037c6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80037ca:	3301      	adds	r3, #1
 80037cc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80037d0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80037d4:	2b07      	cmp	r3, #7
 80037d6:	d9d1      	bls.n	800377c <processGetDeviceInfo+0x50>
		rsp.short_addr = rpcBuff[msgIdx++];
 80037d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80037e2:	461a      	mov	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	833b      	strh	r3, [r7, #24]
		rsp.short_addr |= (rpcBuff[msgIdx++] << 8);
 80037ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80037f8:	461a      	mov	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	8b3a      	ldrh	r2, [r7, #24]
 8003804:	b212      	sxth	r2, r2
 8003806:	b21b      	sxth	r3, r3
 8003808:	4313      	orrs	r3, r2
 800380a:	b21b      	sxth	r3, r3
 800380c:	b29b      	uxth	r3, r3
 800380e:	833b      	strh	r3, [r7, #24]
		rsp.device_type = rpcBuff[msgIdx++];
 8003810:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4413      	add	r3, r2
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	76bb      	strb	r3, [r7, #26]
		rsp.device_state = rpcBuff[msgIdx++];
 8003824:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 800382e:	461a      	mov	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	76fb      	strb	r3, [r7, #27]
#warning possible loss of data
		rsp.ass_device_cnt = MIN(rpcBuff[msgIdx], ASS_DEVICE_LIST_MAX);
 8003838:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b20      	cmp	r3, #32
 8003844:	bf28      	it	cs
 8003846:	2320      	movcs	r3, #32
 8003848:	b2db      	uxtb	r3, r3
 800384a:	773b      	strb	r3, [r7, #28]
		msgIdx++;
 800384c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003850:	3301      	adds	r3, #1
 8003852:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (rsp.ass_device_cnt) {
 8003856:	7f3b      	ldrb	r3, [r7, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d041      	beq.n	80038e0 <processGetDeviceInfo+0x1b4>
			for (uint8_t i = 0; i < rsp.ass_device_cnt; i++) {
 800385c:	2300      	movs	r3, #0
 800385e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8003862:	e038      	b.n	80038d6 <processGetDeviceInfo+0x1aa>
				rsp.ass_device_list[i] = rpcBuff[msgIdx++];
 8003864:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 800386e:	461a      	mov	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4413      	add	r3, r2
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800387a:	b292      	uxth	r2, r2
 800387c:	3308      	adds	r3, #8
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003884:	440b      	add	r3, r1
 8003886:	f823 2c5a 	strh.w	r2, [r3, #-90]
				rsp.ass_device_list[i] |= (rpcBuff[msgIdx++] << 8);
 800388a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8003894:	461a      	mov	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	0219      	lsls	r1, r3, #8
 800389e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80038a2:	3308      	adds	r3, #8
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80038aa:	4413      	add	r3, r2
 80038ac:	f833 3c5a 	ldrh.w	r3, [r3, #-90]
 80038b0:	b21a      	sxth	r2, r3
 80038b2:	b20b      	sxth	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	b21a      	sxth	r2, r3
 80038b8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80038bc:	b292      	uxth	r2, r2
 80038be:	3308      	adds	r3, #8
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80038c6:	440b      	add	r3, r1
 80038c8:	f823 2c5a 	strh.w	r2, [r3, #-90]
			for (uint8_t i = 0; i < rsp.ass_device_cnt; i++) {
 80038cc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80038d0:	3301      	adds	r3, #1
 80038d2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80038d6:	7f3b      	ldrb	r3, [r7, #28]
 80038d8:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80038dc:	429a      	cmp	r2, r3
 80038de:	d3c1      	bcc.n	8003864 <processGetDeviceInfo+0x138>
			}
		}

		// callback function
		mtUtilCbs.pfnUtilGetDeviceInfoCb_t(&rsp);
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <processGetDeviceInfo+0x1c8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f107 0208 	add.w	r2, r7, #8
 80038e8:	4610      	mov	r0, r2
 80038ea:	4798      	blx	r3
	}
}
 80038ec:	bf00      	nop
 80038ee:	376c      	adds	r7, #108	; 0x6c
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f4:	20000550 	.word	0x20000550
 80038f8:	0800e954 	.word	0x0800e954

080038fc <processSrsp>:

static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3301      	adds	r3, #1
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <processSrsp+0x2a>
		case MT_UTIL_SRSP_GET_DEVICE_INFO:
			dbg_print(PRINT_LEVEL_VERBOSE, "utilProcess: SET_CHANNEL_SRSP\n");
 8003912:	490c      	ldr	r1, [pc, #48]	; (8003944 <processSrsp+0x48>)
 8003914:	2004      	movs	r0, #4
 8003916:	f002 ffdb 	bl	80068d0 <dbg_print>
			processGetDeviceInfo(rpcBuff, rpcLen);
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ff04 	bl	800372c <processGetDeviceInfo>
			break;
 8003924:	e00a      	b.n	800393c <processSrsp+0x40>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3301      	adds	r3, #1
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	4905      	ldr	r1, [pc, #20]	; (8003948 <processSrsp+0x4c>)
 8003934:	2002      	movs	r0, #2
 8003936:	f002 ffcb 	bl	80068d0 <dbg_print>
			break;
 800393a:	bf00      	nop
	}
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	0800e968 	.word	0x0800e968
 8003948:	0800e988 	.word	0x0800e988

0800394c <utilProcess>:

void utilProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "utilProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3301      	adds	r3, #1
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	490f      	ldr	r1, [pc, #60]	; (80039a4 <utilProcess+0x58>)
 8003966:	2004      	movs	r0, #4
 8003968:	f002 ffb2 	bl	80068d0 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003974:	2b60      	cmp	r3, #96	; 0x60
 8003976:	d105      	bne.n	8003984 <utilProcess+0x38>
		processSrsp(rpcBuff, rpcLen);
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	4619      	mov	r1, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ffbd 	bl	80038fc <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8003982:	e00a      	b.n	800399a <utilProcess+0x4e>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3301      	adds	r3, #1
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	4905      	ldr	r1, [pc, #20]	; (80039a8 <utilProcess+0x5c>)
 8003992:	2001      	movs	r0, #1
 8003994:	f002 ff9c 	bl	80068d0 <dbg_print>
				break;
 8003998:	bf00      	nop
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	0800e9b4 	.word	0x0800e9b4
 80039a8:	0800e9e0 	.word	0x0800e9e0

080039ac <utilGetDeviceInfo>:

uint8_t utilGetDeviceInfo(void) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
	uint8_t status;

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_UTIL), 0x00, NULL, 0);
 80039b2:	2300      	movs	r3, #0
 80039b4:	2200      	movs	r2, #0
 80039b6:	2100      	movs	r1, #0
 80039b8:	2027      	movs	r0, #39	; 0x27
 80039ba:	f003 fa2d 	bl	8006e18 <rpcSendFrame>
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <utilGetDeviceInfo+0x22>
		rpcWaitMqClientMsg(50);
 80039c8:	2032      	movs	r0, #50	; 0x32
 80039ca:	f003 f8a9 	bl	8006b20 <rpcWaitMqClientMsg>
	}

	// return
	return status;
 80039ce:	79fb      	ldrb	r3, [r7, #7]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <processStateChange>:
 *
 * @param   uint8_t *rpcBuff
 *
 * @return  none
 */
static void processStateChange(uint8_t *rpcBuff, uint8_t rpcLen) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]

	uint8_t zdoState = rpcBuff[2];
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	789b      	ldrb	r3, [r3, #2]
 80039e8:	73fb      	strb	r3, [r7, #15]
	//passes the state to the callback function
	if (mtZdoCbs.pfnmtZdoStateChangeInd) {
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <processStateChange+0x2c>)
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <processStateChange+0x24>
		mtZdoCbs.pfnmtZdoStateChangeInd(zdoState);
 80039f2:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <processStateChange+0x2c>)
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	4610      	mov	r0, r2
 80039fa:	4798      	blx	r3
	}
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000554 	.word	0x20000554

08003a08 <zdoSimpleDescReq>:
 *
 * @param    req - Pointer to outgoing command structure
 *
 * @return   status
 */
uint8_t zdoSimpleDescReq(SimpleDescReqFormat_t *req) {
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	466b      	mov	r3, sp
 8003a12:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	75bb      	strb	r3, [r7, #22]
	uint32_t cmdLen = 5;
 8003a18:	2305      	movs	r3, #5
 8003a1a:	613b      	str	r3, [r7, #16]
	uint8_t cmd[cmdLen];
 8003a1c:	6938      	ldr	r0, [r7, #16]
 8003a1e:	4603      	mov	r3, r0
 8003a20:	3b01      	subs	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	4601      	mov	r1, r0
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	f04f 0400 	mov.w	r4, #0
 8003a32:	00d4      	lsls	r4, r2, #3
 8003a34:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003a38:	00cb      	lsls	r3, r1, #3
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	00d4      	lsls	r4, r2, #3
 8003a4a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003a4e:	00cb      	lsls	r3, r1, #3
 8003a50:	1dc3      	adds	r3, r0, #7
 8003a52:	08db      	lsrs	r3, r3, #3
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	ebad 0d03 	sub.w	sp, sp, r3
 8003a5a:	466b      	mov	r3, sp
 8003a5c:	3300      	adds	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]

	cmd[cmInd++] = (uint8_t) (req->DstAddr & 0xFF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8819      	ldrh	r1, [r3, #0]
 8003a64:	7dbb      	ldrb	r3, [r7, #22]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	75ba      	strb	r2, [r7, #22]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	b2c9      	uxtb	r1, r1
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->DstAddr >> 8) & 0xFF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	b299      	uxth	r1, r3
 8003a7a:	7dbb      	ldrb	r3, [r7, #22]
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	75ba      	strb	r2, [r7, #22]
 8003a80:	461a      	mov	r2, r3
 8003a82:	b2c9      	uxtb	r1, r1
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->NwkAddrOfInterest & 0xFF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8859      	ldrh	r1, [r3, #2]
 8003a8c:	7dbb      	ldrb	r3, [r7, #22]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	75ba      	strb	r2, [r7, #22]
 8003a92:	461a      	mov	r2, r3
 8003a94:	b2c9      	uxtb	r1, r1
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->NwkAddrOfInterest >> 8) & 0xFF);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	885b      	ldrh	r3, [r3, #2]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	b299      	uxth	r1, r3
 8003aa2:	7dbb      	ldrb	r3, [r7, #22]
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	75ba      	strb	r2, [r7, #22]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	b2c9      	uxtb	r1, r1
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Endpoint;
 8003ab0:	7dbb      	ldrb	r3, [r7, #22]
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	75ba      	strb	r2, [r7, #22]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	7919      	ldrb	r1, [r3, #4]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	5499      	strb	r1, [r3, r2]

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_ZDO),
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2104      	movs	r1, #4
 8003ac8:	2025      	movs	r0, #37	; 0x25
 8003aca:	f003 f9a5 	bl	8006e18 <rpcSendFrame>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	75fb      	strb	r3, [r7, #23]
	MT_ZDO_SIMPLE_DESC_REQ, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d105      	bne.n	8003ae4 <zdoSimpleDescReq+0xdc>
		rpcWaitMqClientMsg(50);
 8003ad8:	2032      	movs	r0, #50	; 0x32
 8003ada:	f003 f821 	bl	8006b20 <rpcWaitMqClientMsg>
		status = srspRpcBuff[2];
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <zdoSimpleDescReq+0xe8>)
 8003ae0:	789b      	ldrb	r3, [r3, #2]
 8003ae2:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	46ad      	mov	sp, r5
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bdb0      	pop	{r4, r5, r7, pc}
 8003af0:	200030a4 	.word	0x200030a4

08003af4 <zdoActiveEpReq>:
 *
 * @param    req - Pointer to outgoing command structure
 *
 * @return   status
 */
uint8_t zdoActiveEpReq(ActiveEpReqFormat_t *req) {
 8003af4:	b5b0      	push	{r4, r5, r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	466b      	mov	r3, sp
 8003afe:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	75bb      	strb	r3, [r7, #22]
	uint32_t cmdLen = 4;
 8003b04:	2304      	movs	r3, #4
 8003b06:	613b      	str	r3, [r7, #16]
	uint8_t cmd[cmdLen];
 8003b08:	6938      	ldr	r0, [r7, #16]
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	4601      	mov	r1, r0
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	f04f 0400 	mov.w	r4, #0
 8003b1e:	00d4      	lsls	r4, r2, #3
 8003b20:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003b24:	00cb      	lsls	r3, r1, #3
 8003b26:	4601      	mov	r1, r0
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	f04f 0400 	mov.w	r4, #0
 8003b34:	00d4      	lsls	r4, r2, #3
 8003b36:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003b3a:	00cb      	lsls	r3, r1, #3
 8003b3c:	1dc3      	adds	r3, r0, #7
 8003b3e:	08db      	lsrs	r3, r3, #3
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	ebad 0d03 	sub.w	sp, sp, r3
 8003b46:	466b      	mov	r3, sp
 8003b48:	3300      	adds	r3, #0
 8003b4a:	60bb      	str	r3, [r7, #8]

	cmd[cmInd++] = (uint8_t) (req->DstAddr & 0xFF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8819      	ldrh	r1, [r3, #0]
 8003b50:	7dbb      	ldrb	r3, [r7, #22]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	75ba      	strb	r2, [r7, #22]
 8003b56:	461a      	mov	r2, r3
 8003b58:	b2c9      	uxtb	r1, r1
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->DstAddr >> 8) & 0xFF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	b299      	uxth	r1, r3
 8003b66:	7dbb      	ldrb	r3, [r7, #22]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	75ba      	strb	r2, [r7, #22]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	b2c9      	uxtb	r1, r1
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->NwkAddrOfInterest & 0xFF);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8859      	ldrh	r1, [r3, #2]
 8003b78:	7dbb      	ldrb	r3, [r7, #22]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	75ba      	strb	r2, [r7, #22]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	b2c9      	uxtb	r1, r1
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->NwkAddrOfInterest >> 8) & 0xFF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	885b      	ldrh	r3, [r3, #2]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	b299      	uxth	r1, r3
 8003b8e:	7dbb      	ldrb	r3, [r7, #22]
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	75ba      	strb	r2, [r7, #22]
 8003b94:	461a      	mov	r2, r3
 8003b96:	b2c9      	uxtb	r1, r1
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	5499      	strb	r1, [r3, r2]

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_ZDO), MT_ZDO_ACTIVE_EP_REQ, cmd, cmdLen);
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2105      	movs	r1, #5
 8003ba4:	2025      	movs	r0, #37	; 0x25
 8003ba6:	f003 f937 	bl	8006e18 <rpcSendFrame>
 8003baa:	4603      	mov	r3, r0
 8003bac:	75fb      	strb	r3, [r7, #23]

	if (status == MT_RPC_SUCCESS) {
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <zdoActiveEpReq+0xcc>
		rpcWaitMqClientMsg(50);
 8003bb4:	2032      	movs	r0, #50	; 0x32
 8003bb6:	f002 ffb3 	bl	8006b20 <rpcWaitMqClientMsg>
		status = srspRpcBuff[2];
 8003bba:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <zdoActiveEpReq+0xd8>)
 8003bbc:	789b      	ldrb	r3, [r3, #2]
 8003bbe:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
 8003bc2:	46ad      	mov	sp, r5
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bdb0      	pop	{r4, r5, r7, pc}
 8003bcc:	200030a4 	.word	0x200030a4

08003bd0 <processGetLinkKey>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processGetLinkKey(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd2:	b08d      	sub	sp, #52	; 0x34
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoGetLinkKey) {
 8003bdc:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <processGetLinkKey+0xe4>)
 8003bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d061      	beq.n	8003caa <processGetLinkKey+0xda>
		uint8_t msgIdx = 2;
 8003be6:	2302      	movs	r3, #2
 8003be8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		GetLinkKeySrspFormat_t rsp;
		if (rpcLen < 25) {
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	2b18      	cmp	r3, #24
 8003bf0:	d802      	bhi.n	8003bf8 <processGetLinkKey+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 8003bf2:	4831      	ldr	r0, [pc, #196]	; (8003cb8 <processGetLinkKey+0xe8>)
 8003bf4:	f008 fcc4 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8003c02:	461a      	mov	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003c1e:	e029      	b.n	8003c74 <processGetLinkKey+0xa4>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8003c20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003c3c:	00c9      	lsls	r1, r1, #3
 8003c3e:	f1a1 0620 	sub.w	r6, r1, #32
 8003c42:	f1c1 0020 	rsb	r0, r1, #32
 8003c46:	fa03 f501 	lsl.w	r5, r3, r1
 8003c4a:	fa02 f606 	lsl.w	r6, r2, r6
 8003c4e:	4335      	orrs	r5, r6
 8003c50:	fa22 f000 	lsr.w	r0, r2, r0
 8003c54:	4305      	orrs	r5, r0
 8003c56:	fa02 f401 	lsl.w	r4, r2, r1
 8003c5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c5e:	ea40 0204 	orr.w	r2, r0, r4
 8003c62:	ea41 0305 	orr.w	r3, r1, r5
 8003c66:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8003c6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003c74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c78:	2b07      	cmp	r3, #7
 8003c7a:	d9d1      	bls.n	8003c20 <processGetLinkKey+0x50>
		memcpy(rsp.LinkKeyData, &rpcBuff[msgIdx], 16);
 8003c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	f107 0418 	add.w	r4, r7, #24
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		msgIdx += 16;
 8003c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c96:	3310      	adds	r3, #16
 8003c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		mtZdoCbs.pfnZdoGetLinkKey(&rsp);
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <processGetLinkKey+0xe4>)
 8003c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca2:	f107 0208 	add.w	r2, r7, #8
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4798      	blx	r3
	}
}
 8003caa:	bf00      	nop
 8003cac:	3734      	adds	r7, #52	; 0x34
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000554 	.word	0x20000554
 8003cb8:	0800ea10 	.word	0x0800ea10

08003cbc <processNwkAddrRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNwkAddrRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cbe:	b0ad      	sub	sp, #180	; 0xb4
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNwkAddrRsp) {
 8003cc8:	4b5a      	ldr	r3, [pc, #360]	; (8003e34 <processNwkAddrRsp+0x178>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80ad 	beq.w	8003e2c <processNwkAddrRsp+0x170>
		uint8_t msgIdx = 2;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		NwkAddrRspFormat_t rsp;
		if (rpcLen < 13) {
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	2b0c      	cmp	r3, #12
 8003cdc:	d802      	bhi.n	8003ce4 <processNwkAddrRsp+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 8003cde:	4856      	ldr	r0, [pc, #344]	; (8003e38 <processNwkAddrRsp+0x17c>)
 8003ce0:	f008 fc4e 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003ce4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003cee:	461a      	mov	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8003d0a:	e029      	b.n	8003d60 <processNwkAddrRsp+0xa4>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8003d0c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003d16:	461a      	mov	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	f897 10ae 	ldrb.w	r1, [r7, #174]	; 0xae
 8003d28:	00c9      	lsls	r1, r1, #3
 8003d2a:	f1a1 0620 	sub.w	r6, r1, #32
 8003d2e:	f1c1 0020 	rsb	r0, r1, #32
 8003d32:	fa03 f501 	lsl.w	r5, r3, r1
 8003d36:	fa02 f606 	lsl.w	r6, r2, r6
 8003d3a:	4335      	orrs	r5, r6
 8003d3c:	fa22 f000 	lsr.w	r0, r2, r0
 8003d40:	4305      	orrs	r5, r0
 8003d42:	fa02 f401 	lsl.w	r4, r2, r1
 8003d46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d4a:	ea40 0204 	orr.w	r2, r0, r4
 8003d4e:	ea41 0305 	orr.w	r3, r1, r5
 8003d52:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8003d56:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8003d60:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003d64:	2b07      	cmp	r3, #7
 8003d66:	d9d1      	bls.n	8003d0c <processNwkAddrRsp+0x50>
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003d68:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4413      	add	r3, r2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003d78:	3301      	adds	r3, #1
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	440b      	add	r3, r1
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 8003d8c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003d90:	3302      	adds	r3, #2
 8003d92:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		rsp.StartIndex = rpcBuff[msgIdx++];
 8003d96:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003da0:	461a      	mov	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	76bb      	strb	r3, [r7, #26]
		rsp.NumAssocDev = rpcBuff[msgIdx++];
 8003daa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003db4:	461a      	mov	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	76fb      	strb	r3, [r7, #27]
		if (rpcLen > 13) {
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	2b0d      	cmp	r3, #13
 8003dc2:	d92d      	bls.n	8003e20 <processNwkAddrRsp+0x164>
			uint32_t i;
			for (i = 0; i < rsp.NumAssocDev; i++) {
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dca:	e023      	b.n	8003e14 <processNwkAddrRsp+0x158>
				rsp.AssocDevList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003dcc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003ddc:	3301      	adds	r3, #1
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	440b      	add	r3, r1
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003df2:	3308      	adds	r3, #8
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f823 2ca4 	strh.w	r2, [r3, #-164]
				msgIdx += 2;
 8003e00:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003e04:	3302      	adds	r3, #2
 8003e06:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			for (i = 0; i < rsp.NumAssocDev; i++) {
 8003e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e14:	7efb      	ldrb	r3, [r7, #27]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d3d5      	bcc.n	8003dcc <processNwkAddrRsp+0x110>
			}
		}
		mtZdoCbs.pfnZdoNwkAddrRsp(&rsp);
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <processNwkAddrRsp+0x178>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f107 0208 	add.w	r2, r7, #8
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4798      	blx	r3
	}
}
 8003e2c:	bf00      	nop
 8003e2e:	37b4      	adds	r7, #180	; 0xb4
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e34:	20000554 	.word	0x20000554
 8003e38:	0800ea10 	.word	0x0800ea10

08003e3c <processIeeeAddrRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processIeeeAddrRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	b0ad      	sub	sp, #180	; 0xb4
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoIeeeAddrRsp) {
 8003e48:	4b5e      	ldr	r3, [pc, #376]	; (8003fc4 <processIeeeAddrRsp+0x188>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80b4 	beq.w	8003fba <processIeeeAddrRsp+0x17e>
		uint8_t msgIdx = 2;
 8003e52:	2302      	movs	r3, #2
 8003e54:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		IeeeAddrRspFormat_t rsp;
		if (rpcLen < 13) {
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d802      	bhi.n	8003e64 <processIeeeAddrRsp+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 8003e5e:	485a      	ldr	r0, [pc, #360]	; (8003fc8 <processIeeeAddrRsp+0x18c>)
 8003e60:	f008 fb8e 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003e64:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8003e8a:	e029      	b.n	8003ee0 <processIeeeAddrRsp+0xa4>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8003e8c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	f897 10ae 	ldrb.w	r1, [r7, #174]	; 0xae
 8003ea8:	00c9      	lsls	r1, r1, #3
 8003eaa:	f1a1 0620 	sub.w	r6, r1, #32
 8003eae:	f1c1 0020 	rsb	r0, r1, #32
 8003eb2:	fa03 f501 	lsl.w	r5, r3, r1
 8003eb6:	fa02 f606 	lsl.w	r6, r2, r6
 8003eba:	4335      	orrs	r5, r6
 8003ebc:	fa22 f000 	lsr.w	r0, r2, r0
 8003ec0:	4305      	orrs	r5, r0
 8003ec2:	fa02 f401 	lsl.w	r4, r2, r1
 8003ec6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003eca:	ea40 0204 	orr.w	r2, r0, r4
 8003ece:	ea41 0305 	orr.w	r3, r1, r5
 8003ed2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 8003ed6:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003eda:	3301      	adds	r3, #1
 8003edc:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8003ee0:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003ee4:	2b07      	cmp	r3, #7
 8003ee6:	d9d1      	bls.n	8003e8c <processIeeeAddrRsp+0x50>
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003ee8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003ef8:	3301      	adds	r3, #1
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	440b      	add	r3, r1
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 8003f0c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003f10:	3302      	adds	r3, #2
 8003f12:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		rsp.StartIndex = rpcBuff[msgIdx++];
 8003f16:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003f20:	461a      	mov	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	76bb      	strb	r3, [r7, #26]
		rsp.NumAssocDev = rpcBuff[msgIdx++];
 8003f2a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8003f34:	461a      	mov	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	76fb      	strb	r3, [r7, #27]
		rsp.StartIndex = (rsp.NumAssocDev == 0 ? 0 : rsp.StartIndex);
 8003f3e:	7efb      	ldrb	r3, [r7, #27]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <processIeeeAddrRsp+0x10c>
 8003f44:	7ebb      	ldrb	r3, [r7, #26]
 8003f46:	e000      	b.n	8003f4a <processIeeeAddrRsp+0x10e>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	76bb      	strb	r3, [r7, #26]
		if (rpcLen > 13) {
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	2b0d      	cmp	r3, #13
 8003f50:	d92d      	bls.n	8003fae <processIeeeAddrRsp+0x172>
			uint32_t i;
			for (i = 0; i < rsp.NumAssocDev; i++) {
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f58:	e023      	b.n	8003fa2 <processIeeeAddrRsp+0x166>
				rsp.AssocDevList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003f5a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	440b      	add	r3, r1
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f80:	3308      	adds	r3, #8
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003f88:	440b      	add	r3, r1
 8003f8a:	f823 2ca4 	strh.w	r2, [r3, #-164]
				msgIdx += 2;
 8003f8e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003f92:	3302      	adds	r3, #2
 8003f94:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			for (i = 0; i < rsp.NumAssocDev; i++) {
 8003f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fa2:	7efb      	ldrb	r3, [r7, #27]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d3d5      	bcc.n	8003f5a <processIeeeAddrRsp+0x11e>
			}
		}
		mtZdoCbs.pfnZdoIeeeAddrRsp(&rsp);
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <processIeeeAddrRsp+0x188>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f107 0208 	add.w	r2, r7, #8
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4798      	blx	r3
	}
}
 8003fba:	bf00      	nop
 8003fbc:	37b4      	adds	r7, #180	; 0xb4
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000554 	.word	0x20000554
 8003fc8:	0800ea10 	.word	0x0800ea10

08003fcc <processNodeDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNodeDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNodeDescRsp) {
 8003fd8:	4b5c      	ldr	r3, [pc, #368]	; (800414c <processNodeDescRsp+0x180>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80b0 	beq.w	8004142 <processNodeDescRsp+0x176>
		uint8_t msgIdx = 2;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	77fb      	strb	r3, [r7, #31]
		NodeDescRspFormat_t rsp;
		if (rpcLen < 18) {
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	2b11      	cmp	r3, #17
 8003fea:	d802      	bhi.n	8003ff2 <processNodeDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8003fec:	4858      	ldr	r0, [pc, #352]	; (8004150 <processNodeDescRsp+0x184>)
 8003fee:	f008 fac7 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003ff2:	7ffb      	ldrb	r3, [r7, #31]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	7ffb      	ldrb	r3, [r7, #31]
 8003ffe:	3301      	adds	r3, #1
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	440b      	add	r3, r1
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	b29b      	uxth	r3, r3
 800400c:	4413      	add	r3, r2
 800400e:	b29b      	uxth	r3, r3
 8004010:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004012:	7ffb      	ldrb	r3, [r7, #31]
 8004014:	3302      	adds	r3, #2
 8004016:	77fb      	strb	r3, [r7, #31]
		rsp.Status = rpcBuff[msgIdx++];
 8004018:	7ffb      	ldrb	r3, [r7, #31]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	77fa      	strb	r2, [r7, #31]
 800401e:	461a      	mov	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004028:	7ffb      	ldrb	r3, [r7, #31]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	b29a      	uxth	r2, r3
 8004032:	7ffb      	ldrb	r3, [r7, #31]
 8004034:	3301      	adds	r3, #1
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	440b      	add	r3, r1
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	b29b      	uxth	r3, r3
 8004042:	4413      	add	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8004048:	7ffb      	ldrb	r3, [r7, #31]
 800404a:	3302      	adds	r3, #2
 800404c:	77fb      	strb	r3, [r7, #31]
		rsp.LoTy_ComDescAv_UsrDesAv = rpcBuff[msgIdx++];
 800404e:	7ffb      	ldrb	r3, [r7, #31]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	77fa      	strb	r2, [r7, #31]
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	73bb      	strb	r3, [r7, #14]
		rsp.APSFlg_FrqBnd = rpcBuff[msgIdx++];
 800405e:	7ffb      	ldrb	r3, [r7, #31]
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	77fa      	strb	r2, [r7, #31]
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	73fb      	strb	r3, [r7, #15]
		rsp.MACCapFlg = rpcBuff[msgIdx++];
 800406e:	7ffb      	ldrb	r3, [r7, #31]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	77fa      	strb	r2, [r7, #31]
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	743b      	strb	r3, [r7, #16]
		rsp.ManufacturerCode = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800407e:	7ffb      	ldrb	r3, [r7, #31]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	4413      	add	r3, r2
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	b29a      	uxth	r2, r3
 8004088:	7ffb      	ldrb	r3, [r7, #31]
 800408a:	3301      	adds	r3, #1
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	440b      	add	r3, r1
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	b29b      	uxth	r3, r3
 8004098:	4413      	add	r3, r2
 800409a:	b29b      	uxth	r3, r3
 800409c:	827b      	strh	r3, [r7, #18]
		msgIdx += 2;
 800409e:	7ffb      	ldrb	r3, [r7, #31]
 80040a0:	3302      	adds	r3, #2
 80040a2:	77fb      	strb	r3, [r7, #31]
		rsp.MaxBufferSize = rpcBuff[msgIdx++];
 80040a4:	7ffb      	ldrb	r3, [r7, #31]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	77fa      	strb	r2, [r7, #31]
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	753b      	strb	r3, [r7, #20]
		rsp.MaxTransferSize = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80040b4:	7ffb      	ldrb	r3, [r7, #31]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	7ffb      	ldrb	r3, [r7, #31]
 80040c0:	3301      	adds	r3, #1
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	440b      	add	r3, r1
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	82fb      	strh	r3, [r7, #22]
		msgIdx += 2;
 80040d4:	7ffb      	ldrb	r3, [r7, #31]
 80040d6:	3302      	adds	r3, #2
 80040d8:	77fb      	strb	r3, [r7, #31]
		rsp.ServerMask = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80040da:	7ffb      	ldrb	r3, [r7, #31]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	7ffb      	ldrb	r3, [r7, #31]
 80040e6:	3301      	adds	r3, #1
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	440b      	add	r3, r1
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 80040fa:	7ffb      	ldrb	r3, [r7, #31]
 80040fc:	3302      	adds	r3, #2
 80040fe:	77fb      	strb	r3, [r7, #31]
		rsp.MaxOutTransferSize = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004100:	7ffb      	ldrb	r3, [r7, #31]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	b29a      	uxth	r2, r3
 800410a:	7ffb      	ldrb	r3, [r7, #31]
 800410c:	3301      	adds	r3, #1
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	440b      	add	r3, r1
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	b29b      	uxth	r3, r3
 800411a:	4413      	add	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	837b      	strh	r3, [r7, #26]
		msgIdx += 2;
 8004120:	7ffb      	ldrb	r3, [r7, #31]
 8004122:	3302      	adds	r3, #2
 8004124:	77fb      	strb	r3, [r7, #31]
		rsp.DescriptorCapabilities = rpcBuff[msgIdx++];
 8004126:	7ffb      	ldrb	r3, [r7, #31]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	77fa      	strb	r2, [r7, #31]
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4413      	add	r3, r2
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	773b      	strb	r3, [r7, #28]

		mtZdoCbs.pfnZdoNodeDescRsp(&rsp);
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <processNodeDescRsp+0x180>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f107 0208 	add.w	r2, r7, #8
 800413e:	4610      	mov	r0, r2
 8004140:	4798      	blx	r3
	}
}
 8004142:	bf00      	nop
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000554 	.word	0x20000554
 8004150:	0800ea10 	.word	0x0800ea10

08004154 <processPowerDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processPowerDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoPowerDescRsp) {
 8004160:	4b29      	ldr	r3, [pc, #164]	; (8004208 <processPowerDescRsp+0xb4>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d04b      	beq.n	8004200 <processPowerDescRsp+0xac>
		uint8_t msgIdx = 2;
 8004168:	2302      	movs	r3, #2
 800416a:	75fb      	strb	r3, [r7, #23]
		PowerDescRspFormat_t rsp;
		if (rpcLen < 7) {
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	2b06      	cmp	r3, #6
 8004170:	d802      	bhi.n	8004178 <processPowerDescRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004172:	4826      	ldr	r0, [pc, #152]	; (800420c <processPowerDescRsp+0xb8>)
 8004174:	f008 fa04 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b29a      	uxth	r2, r3
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	3301      	adds	r3, #1
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	440b      	add	r3, r1
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	b29b      	uxth	r3, r3
 8004192:	4413      	add	r3, r2
 8004194:	b29b      	uxth	r3, r3
 8004196:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8004198:	7dfb      	ldrb	r3, [r7, #23]
 800419a:	3302      	adds	r3, #2
 800419c:	75fb      	strb	r3, [r7, #23]
		rsp.Status = rpcBuff[msgIdx++];
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	75fa      	strb	r2, [r7, #23]
 80041a4:	461a      	mov	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	3301      	adds	r3, #1
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	440b      	add	r3, r1
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	4413      	add	r3, r2
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	3302      	adds	r3, #2
 80041d2:	75fb      	strb	r3, [r7, #23]
		rsp.CurrntPwrMode_AvalPwrSrcs = rpcBuff[msgIdx++];
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	75fa      	strb	r2, [r7, #23]
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4413      	add	r3, r2
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	74bb      	strb	r3, [r7, #18]
		rsp.CurrntPwrSrc_CurrntPwrSrcLvl = rpcBuff[msgIdx++];
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	75fa      	strb	r2, [r7, #23]
 80041ea:	461a      	mov	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	74fb      	strb	r3, [r7, #19]

		mtZdoCbs.pfnZdoPowerDescRsp(&rsp);
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <processPowerDescRsp+0xb4>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f107 020c 	add.w	r2, r7, #12
 80041fc:	4610      	mov	r0, r2
 80041fe:	4798      	blx	r3
	}
}
 8004200:	bf00      	nop
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000554 	.word	0x20000554
 800420c:	0800ea10 	.word	0x0800ea10

08004210 <processSimpleDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processSimpleDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b098      	sub	sp, #96	; 0x60
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoSimpleDescRsp) {
 800421c:	4b83      	ldr	r3, [pc, #524]	; (800442c <processSimpleDescRsp+0x21c>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80ff 	beq.w	8004424 <processSimpleDescRsp+0x214>
		uint8_t msgIdx = 2;
 8004226:	2302      	movs	r3, #2
 8004228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		SimpleDescRspFormat_t rsp;
		if (rpcLen < 6) {
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	2b05      	cmp	r3, #5
 8004230:	d802      	bhi.n	8004238 <processSimpleDescRsp+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 8004232:	487f      	ldr	r0, [pc, #508]	; (8004430 <processSimpleDescRsp+0x220>)
 8004234:	f008 f9a4 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	b29a      	uxth	r2, r3
 8004244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004248:	3301      	adds	r3, #1
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	440b      	add	r3, r1
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	4413      	add	r3, r2
 8004258:	b29b      	uxth	r3, r3
 800425a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 800425c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004260:	3302      	adds	r3, #2
 8004262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		rsp.Status = rpcBuff[msgIdx++];
 8004266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8004270:	461a      	mov	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800427a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b29a      	uxth	r2, r3
 8004286:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800428a:	3301      	adds	r3, #1
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	440b      	add	r3, r1
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	b29b      	uxth	r3, r3
 8004298:	4413      	add	r3, r2
 800429a:	b29b      	uxth	r3, r3
 800429c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800429e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80042a2:	3302      	adds	r3, #2
 80042a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		rsp.Len = rpcBuff[msgIdx++];
 80042a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4413      	add	r3, r2
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	73bb      	strb	r3, [r7, #14]
		if (rpcLen > 6) {
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	2b06      	cmp	r3, #6
 80042c0:	f240 80aa 	bls.w	8004418 <processSimpleDescRsp+0x208>
			rsp.Endpoint = rpcBuff[msgIdx++];
 80042c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80042ce:	461a      	mov	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4413      	add	r3, r2
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	73fb      	strb	r3, [r7, #15]
			rsp.ProfileID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80042d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4413      	add	r3, r2
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80042e8:	3301      	adds	r3, #1
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	440b      	add	r3, r1
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	823b      	strh	r3, [r7, #16]
			msgIdx += 2;
 80042fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004300:	3302      	adds	r3, #2
 8004302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			rsp.DeviceID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b29a      	uxth	r2, r3
 8004312:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004316:	3301      	adds	r3, #1
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	440b      	add	r3, r1
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	b29b      	uxth	r3, r3
 8004324:	4413      	add	r3, r2
 8004326:	b29b      	uxth	r3, r3
 8004328:	827b      	strh	r3, [r7, #18]
			msgIdx += 2;
 800432a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800432e:	3302      	adds	r3, #2
 8004330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			rsp.DeviceVersion = rpcBuff[msgIdx++];
 8004334:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	753b      	strb	r3, [r7, #20]
			rsp.NumInClusters = rpcBuff[msgIdx++];
 8004348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	757b      	strb	r3, [r7, #21]
			uint32_t i;
			for (i = 0; i < rsp.NumInClusters; i++) {
 800435c:	2300      	movs	r3, #0
 800435e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004360:	e020      	b.n	80043a4 <processSimpleDescRsp+0x194>
				rsp.InClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	b29a      	uxth	r2, r3
 800436e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004372:	3301      	adds	r3, #1
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	440b      	add	r3, r1
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	b29b      	uxth	r3, r3
 8004380:	4413      	add	r3, r2
 8004382:	b29a      	uxth	r2, r3
 8004384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004386:	3304      	adds	r3, #4
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800438e:	440b      	add	r3, r1
 8004390:	f823 2c52 	strh.w	r2, [r3, #-82]
				msgIdx += 2;
 8004394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004398:	3302      	adds	r3, #2
 800439a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			for (i = 0; i < rsp.NumInClusters; i++) {
 800439e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a0:	3301      	adds	r3, #1
 80043a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80043a4:	7d7b      	ldrb	r3, [r7, #21]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d3d9      	bcc.n	8004362 <processSimpleDescRsp+0x152>
			}
			rsp.NumOutClusters = rpcBuff[msgIdx++];
 80043ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80043b8:	461a      	mov	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4413      	add	r3, r2
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			for (i = 0; i < rsp.NumOutClusters; i++) {
 80043c4:	2300      	movs	r3, #0
 80043c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80043c8:	e020      	b.n	800440c <processSimpleDescRsp+0x1fc>
				rsp.OutClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80043ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043da:	3301      	adds	r3, #1
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	440b      	add	r3, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ee:	3318      	adds	r3, #24
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80043f6:	440b      	add	r3, r1
 80043f8:	f823 2c58 	strh.w	r2, [r3, #-88]
				msgIdx += 2;
 80043fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004400:	3302      	adds	r3, #2
 8004402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			for (i = 0; i < rsp.NumOutClusters; i++) {
 8004406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004408:	3301      	adds	r3, #1
 800440a:	65bb      	str	r3, [r7, #88]	; 0x58
 800440c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004410:	461a      	mov	r2, r3
 8004412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004414:	4293      	cmp	r3, r2
 8004416:	d3d8      	bcc.n	80043ca <processSimpleDescRsp+0x1ba>
			}
		}
		mtZdoCbs.pfnZdoSimpleDescRsp(&rsp);
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <processSimpleDescRsp+0x21c>)
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f107 0208 	add.w	r2, r7, #8
 8004420:	4610      	mov	r0, r2
 8004422:	4798      	blx	r3
	}
}
 8004424:	bf00      	nop
 8004426:	3760      	adds	r7, #96	; 0x60
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000554 	.word	0x20000554
 8004430:	0800ea10 	.word	0x0800ea10

08004434 <processActiveEpRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processActiveEpRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004434:	b580      	push	{r7, lr}
 8004436:	b09a      	sub	sp, #104	; 0x68
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoActiveEpRsp) {
 8004440:	4b3a      	ldr	r3, [pc, #232]	; (800452c <processActiveEpRsp+0xf8>)
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d06d      	beq.n	8004524 <processActiveEpRsp+0xf0>
		uint8_t msgIdx = 2;
 8004448:	2302      	movs	r3, #2
 800444a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		ActiveEpRspFormat_t rsp;
		if (rpcLen < 6) {
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	2b05      	cmp	r3, #5
 8004452:	d802      	bhi.n	800445a <processActiveEpRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8004454:	4836      	ldr	r0, [pc, #216]	; (8004530 <processActiveEpRsp+0xfc>)
 8004456:	f008 f893 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800445a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	b29a      	uxth	r2, r3
 8004466:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800446a:	3301      	adds	r3, #1
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	440b      	add	r3, r1
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	b29b      	uxth	r3, r3
 8004478:	4413      	add	r3, r2
 800447a:	b29b      	uxth	r3, r3
 800447c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800447e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004482:	3302      	adds	r3, #2
 8004484:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8004488:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800449c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4413      	add	r3, r2
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044ac:	3301      	adds	r3, #1
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	440b      	add	r3, r1
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	b29b      	uxth	r3, r3
 80044be:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 80044c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044c4:	3302      	adds	r3, #2
 80044c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.ActiveEPCount = rpcBuff[msgIdx++];
 80044ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80044d4:	461a      	mov	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4413      	add	r3, r2
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d919      	bls.n	8004518 <processActiveEpRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.ActiveEPCount; i++) {
 80044e4:	2300      	movs	r3, #0
 80044e6:	663b      	str	r3, [r7, #96]	; 0x60
 80044e8:	e011      	b.n	800450e <processActiveEpRsp+0xda>
				rsp.ActiveEPList[i] = rpcBuff[msgIdx++];
 80044ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80044f4:	461a      	mov	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	7819      	ldrb	r1, [r3, #0]
 80044fc:	f107 0213 	add.w	r2, r7, #19
 8004500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004502:	4413      	add	r3, r2
 8004504:	460a      	mov	r2, r1
 8004506:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.ActiveEPCount; i++) {
 8004508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800450a:	3301      	adds	r3, #1
 800450c:	663b      	str	r3, [r7, #96]	; 0x60
 800450e:	7cbb      	ldrb	r3, [r7, #18]
 8004510:	461a      	mov	r2, r3
 8004512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004514:	4293      	cmp	r3, r2
 8004516:	d3e8      	bcc.n	80044ea <processActiveEpRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoActiveEpRsp(&rsp);
 8004518:	4b04      	ldr	r3, [pc, #16]	; (800452c <processActiveEpRsp+0xf8>)
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f107 020c 	add.w	r2, r7, #12
 8004520:	4610      	mov	r0, r2
 8004522:	4798      	blx	r3
	}
}
 8004524:	bf00      	nop
 8004526:	3768      	adds	r7, #104	; 0x68
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000554 	.word	0x20000554
 8004530:	0800ea10 	.word	0x0800ea10

08004534 <processMatchDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMatchDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b09a      	sub	sp, #104	; 0x68
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMatchDescRsp) {
 8004540:	4b3a      	ldr	r3, [pc, #232]	; (800462c <processMatchDescRsp+0xf8>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d06d      	beq.n	8004624 <processMatchDescRsp+0xf0>
		uint8_t msgIdx = 2;
 8004548:	2302      	movs	r3, #2
 800454a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		MatchDescRspFormat_t rsp;
		if (rpcLen < 6) {
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	2b05      	cmp	r3, #5
 8004552:	d802      	bhi.n	800455a <processMatchDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8004554:	4836      	ldr	r0, [pc, #216]	; (8004630 <processMatchDescRsp+0xfc>)
 8004556:	f008 f813 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800455a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b29a      	uxth	r2, r3
 8004566:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800456a:	3301      	adds	r3, #1
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	440b      	add	r3, r1
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	b29b      	uxth	r3, r3
 8004578:	4413      	add	r3, r2
 800457a:	b29b      	uxth	r3, r3
 800457c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800457e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004582:	3302      	adds	r3, #2
 8004584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8004588:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800459c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	4413      	add	r3, r2
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80045ac:	3301      	adds	r3, #1
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	440b      	add	r3, r1
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	b29b      	uxth	r3, r3
 80045be:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 80045c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80045c4:	3302      	adds	r3, #2
 80045c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.MatchLength = rpcBuff[msgIdx++];
 80045ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80045d4:	461a      	mov	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4413      	add	r3, r2
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	2b06      	cmp	r3, #6
 80045e2:	d919      	bls.n	8004618 <processMatchDescRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.MatchLength; i++) {
 80045e4:	2300      	movs	r3, #0
 80045e6:	663b      	str	r3, [r7, #96]	; 0x60
 80045e8:	e011      	b.n	800460e <processMatchDescRsp+0xda>
				rsp.MatchList[i] = rpcBuff[msgIdx++];
 80045ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	7819      	ldrb	r1, [r3, #0]
 80045fc:	f107 0213 	add.w	r2, r7, #19
 8004600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004602:	4413      	add	r3, r2
 8004604:	460a      	mov	r2, r1
 8004606:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.MatchLength; i++) {
 8004608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800460a:	3301      	adds	r3, #1
 800460c:	663b      	str	r3, [r7, #96]	; 0x60
 800460e:	7cbb      	ldrb	r3, [r7, #18]
 8004610:	461a      	mov	r2, r3
 8004612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004614:	4293      	cmp	r3, r2
 8004616:	d3e8      	bcc.n	80045ea <processMatchDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoMatchDescRsp(&rsp);
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <processMatchDescRsp+0xf8>)
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f107 020c 	add.w	r2, r7, #12
 8004620:	4610      	mov	r0, r2
 8004622:	4798      	blx	r3
	}
}
 8004624:	bf00      	nop
 8004626:	3768      	adds	r7, #104	; 0x68
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000554 	.word	0x20000554
 8004630:	0800ea10 	.word	0x0800ea10

08004634 <processComplexDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processComplexDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b09a      	sub	sp, #104	; 0x68
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoComplexDescRsp) {
 8004640:	4b3a      	ldr	r3, [pc, #232]	; (800472c <processComplexDescRsp+0xf8>)
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d06d      	beq.n	8004724 <processComplexDescRsp+0xf0>
		uint8_t msgIdx = 2;
 8004648:	2302      	movs	r3, #2
 800464a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		ComplexDescRspFormat_t rsp;
		if (rpcLen < 6) {
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	2b05      	cmp	r3, #5
 8004652:	d802      	bhi.n	800465a <processComplexDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8004654:	4836      	ldr	r0, [pc, #216]	; (8004730 <processComplexDescRsp+0xfc>)
 8004656:	f007 ff93 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800465a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b29a      	uxth	r2, r3
 8004666:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800466a:	3301      	adds	r3, #1
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	440b      	add	r3, r1
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	b29b      	uxth	r3, r3
 8004678:	4413      	add	r3, r2
 800467a:	b29b      	uxth	r3, r3
 800467c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800467e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004682:	3302      	adds	r3, #2
 8004684:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8004688:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8004692:	461a      	mov	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4413      	add	r3, r2
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800469c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	4413      	add	r3, r2
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046ac:	3301      	adds	r3, #1
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	440b      	add	r3, r1
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	b29b      	uxth	r3, r3
 80046be:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 80046c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046c4:	3302      	adds	r3, #2
 80046c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.ComplexLength = rpcBuff[msgIdx++];
 80046ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	2b06      	cmp	r3, #6
 80046e2:	d919      	bls.n	8004718 <processComplexDescRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.ComplexLength; i++) {
 80046e4:	2300      	movs	r3, #0
 80046e6:	663b      	str	r3, [r7, #96]	; 0x60
 80046e8:	e011      	b.n	800470e <processComplexDescRsp+0xda>
				rsp.ComplexList[i] = rpcBuff[msgIdx++];
 80046ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	7819      	ldrb	r1, [r3, #0]
 80046fc:	f107 0213 	add.w	r2, r7, #19
 8004700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004702:	4413      	add	r3, r2
 8004704:	460a      	mov	r2, r1
 8004706:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.ComplexLength; i++) {
 8004708:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800470a:	3301      	adds	r3, #1
 800470c:	663b      	str	r3, [r7, #96]	; 0x60
 800470e:	7cbb      	ldrb	r3, [r7, #18]
 8004710:	461a      	mov	r2, r3
 8004712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004714:	4293      	cmp	r3, r2
 8004716:	d3e8      	bcc.n	80046ea <processComplexDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoComplexDescRsp(&rsp);
 8004718:	4b04      	ldr	r3, [pc, #16]	; (800472c <processComplexDescRsp+0xf8>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f107 020c 	add.w	r2, r7, #12
 8004720:	4610      	mov	r0, r2
 8004722:	4798      	blx	r3
	}
}
 8004724:	bf00      	nop
 8004726:	3768      	adds	r7, #104	; 0x68
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000554 	.word	0x20000554
 8004730:	0800ea10 	.word	0x0800ea10

08004734 <processUserDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUserDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b09a      	sub	sp, #104	; 0x68
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUserDescRsp) {
 8004740:	4b3a      	ldr	r3, [pc, #232]	; (800482c <processUserDescRsp+0xf8>)
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d06d      	beq.n	8004824 <processUserDescRsp+0xf0>
		uint8_t msgIdx = 2;
 8004748:	2302      	movs	r3, #2
 800474a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		UserDescRspFormat_t rsp;
		if (rpcLen < 6) {
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2b05      	cmp	r3, #5
 8004752:	d802      	bhi.n	800475a <processUserDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8004754:	4836      	ldr	r0, [pc, #216]	; (8004830 <processUserDescRsp+0xfc>)
 8004756:	f007 ff13 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800475a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b29a      	uxth	r2, r3
 8004766:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800476a:	3301      	adds	r3, #1
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	440b      	add	r3, r1
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	b29b      	uxth	r3, r3
 8004778:	4413      	add	r3, r2
 800477a:	b29b      	uxth	r3, r3
 800477c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800477e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004782:	3302      	adds	r3, #2
 8004784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8004788:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8004792:	461a      	mov	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800479c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047ac:	3301      	adds	r3, #1
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	440b      	add	r3, r1
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	b29b      	uxth	r3, r3
 80047be:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 80047c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047c4:	3302      	adds	r3, #2
 80047c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Len = rpcBuff[msgIdx++];
 80047ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80047d4:	461a      	mov	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4413      	add	r3, r2
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d919      	bls.n	8004818 <processUserDescRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 80047e4:	2300      	movs	r3, #0
 80047e6:	663b      	str	r3, [r7, #96]	; 0x60
 80047e8:	e011      	b.n	800480e <processUserDescRsp+0xda>
				rsp.CUserDescriptor[i] = rpcBuff[msgIdx++];
 80047ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80047f4:	461a      	mov	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4413      	add	r3, r2
 80047fa:	7819      	ldrb	r1, [r3, #0]
 80047fc:	f107 0213 	add.w	r2, r7, #19
 8004800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004802:	4413      	add	r3, r2
 8004804:	460a      	mov	r2, r1
 8004806:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8004808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800480a:	3301      	adds	r3, #1
 800480c:	663b      	str	r3, [r7, #96]	; 0x60
 800480e:	7cbb      	ldrb	r3, [r7, #18]
 8004810:	461a      	mov	r2, r3
 8004812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004814:	4293      	cmp	r3, r2
 8004816:	d3e8      	bcc.n	80047ea <processUserDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoUserDescRsp(&rsp);
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <processUserDescRsp+0xf8>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f107 020c 	add.w	r2, r7, #12
 8004820:	4610      	mov	r0, r2
 8004822:	4798      	blx	r3
	}
}
 8004824:	bf00      	nop
 8004826:	3768      	adds	r7, #104	; 0x68
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000554 	.word	0x20000554
 8004830:	0800ea10 	.word	0x0800ea10

08004834 <processUserDescConf>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUserDescConf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUserDescConf) {
 8004840:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <processUserDescConf+0x94>)
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d03b      	beq.n	80048c0 <processUserDescConf+0x8c>
		uint8_t msgIdx = 2;
 8004848:	2302      	movs	r3, #2
 800484a:	73fb      	strb	r3, [r7, #15]
		UserDescConfFormat_t rsp;
		if (rpcLen < 5) {
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	2b04      	cmp	r3, #4
 8004850:	d802      	bhi.n	8004858 <processUserDescConf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004852:	481e      	ldr	r0, [pc, #120]	; (80048cc <processUserDescConf+0x98>)
 8004854:	f007 fe94 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b29a      	uxth	r2, r3
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	3301      	adds	r3, #1
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	440b      	add	r3, r1
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	b29b      	uxth	r3, r3
 8004872:	4413      	add	r3, r2
 8004874:	b29b      	uxth	r3, r3
 8004876:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	3302      	adds	r3, #2
 800487c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	73fa      	strb	r2, [r7, #15]
 8004884:	461a      	mov	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4413      	add	r3, r2
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	b29a      	uxth	r2, r3
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	3301      	adds	r3, #1
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	440b      	add	r3, r1
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	3302      	adds	r3, #2
 80048b2:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoUserDescConf(&rsp);
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <processUserDescConf+0x94>)
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	f107 0208 	add.w	r2, r7, #8
 80048bc:	4610      	mov	r0, r2
 80048be:	4798      	blx	r3
	}
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000554 	.word	0x20000554
 80048cc:	0800ea10 	.word	0x0800ea10

080048d0 <processServerDiscRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processServerDiscRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoServerDiscRsp) {
 80048dc:	4b21      	ldr	r3, [pc, #132]	; (8004964 <processServerDiscRsp+0x94>)
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d03b      	beq.n	800495c <processServerDiscRsp+0x8c>
		uint8_t msgIdx = 2;
 80048e4:	2302      	movs	r3, #2
 80048e6:	73fb      	strb	r3, [r7, #15]
		ServerDiscRspFormat_t rsp;
		if (rpcLen < 5) {
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d802      	bhi.n	80048f4 <processServerDiscRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80048ee:	481e      	ldr	r0, [pc, #120]	; (8004968 <processServerDiscRsp+0x98>)
 80048f0:	f007 fe46 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	3301      	adds	r3, #1
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	440b      	add	r3, r1
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	b29b      	uxth	r3, r3
 800490e:	4413      	add	r3, r2
 8004910:	b29b      	uxth	r3, r3
 8004912:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	3302      	adds	r3, #2
 8004918:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	73fa      	strb	r2, [r7, #15]
 8004920:	461a      	mov	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	72bb      	strb	r3, [r7, #10]
		rsp.ServerMask = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	4413      	add	r3, r2
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	b29a      	uxth	r2, r3
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	3301      	adds	r3, #1
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	440b      	add	r3, r1
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	b29b      	uxth	r3, r3
 8004944:	4413      	add	r3, r2
 8004946:	b29b      	uxth	r3, r3
 8004948:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	3302      	adds	r3, #2
 800494e:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoServerDiscRsp(&rsp);
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <processServerDiscRsp+0x94>)
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	f107 0208 	add.w	r2, r7, #8
 8004958:	4610      	mov	r0, r2
 800495a:	4798      	blx	r3
	}
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000554 	.word	0x20000554
 8004968:	0800ea10 	.word	0x0800ea10

0800496c <processEndDeviceBindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processEndDeviceBindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoEndDeviceBindRsp) {
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <processEndDeviceBindRsp+0x70>)
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d028      	beq.n	80049d2 <processEndDeviceBindRsp+0x66>
		uint8_t msgIdx = 2;
 8004980:	2302      	movs	r3, #2
 8004982:	73fb      	strb	r3, [r7, #15]
		EndDeviceBindRspFormat_t rsp;
		if (rpcLen < 3) {
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d802      	bhi.n	8004990 <processEndDeviceBindRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800498a:	4815      	ldr	r0, [pc, #84]	; (80049e0 <processEndDeviceBindRsp+0x74>)
 800498c:	f007 fdf8 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b29a      	uxth	r2, r3
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	3301      	adds	r3, #1
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	440b      	add	r3, r1
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	3302      	adds	r3, #2
 80049b4:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	73fa      	strb	r2, [r7, #15]
 80049bc:	461a      	mov	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoEndDeviceBindRsp(&rsp);
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <processEndDeviceBindRsp+0x70>)
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	f107 0208 	add.w	r2, r7, #8
 80049ce:	4610      	mov	r0, r2
 80049d0:	4798      	blx	r3
	}
}
 80049d2:	bf00      	nop
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000554 	.word	0x20000554
 80049e0:	0800ea10 	.word	0x0800ea10

080049e4 <processBindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processBindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoBindRsp) {
 80049f0:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <processBindRsp+0x70>)
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d028      	beq.n	8004a4a <processBindRsp+0x66>
		uint8_t msgIdx = 2;
 80049f8:	2302      	movs	r3, #2
 80049fa:	73fb      	strb	r3, [r7, #15]
		BindRspFormat_t rsp;
		if (rpcLen < 3) {
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d802      	bhi.n	8004a08 <processBindRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004a02:	4815      	ldr	r0, [pc, #84]	; (8004a58 <processBindRsp+0x74>)
 8004a04:	f007 fdbc 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	3301      	adds	r3, #1
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	440b      	add	r3, r1
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	73fa      	strb	r2, [r7, #15]
 8004a34:	461a      	mov	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoBindRsp(&rsp);
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <processBindRsp+0x70>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	f107 0208 	add.w	r2, r7, #8
 8004a46:	4610      	mov	r0, r2
 8004a48:	4798      	blx	r3
	}
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000554 	.word	0x20000554
 8004a58:	0800ea10 	.word	0x0800ea10

08004a5c <processUnbindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUnbindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUnbindRsp) {
 8004a68:	4b18      	ldr	r3, [pc, #96]	; (8004acc <processUnbindRsp+0x70>)
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d028      	beq.n	8004ac2 <processUnbindRsp+0x66>
		uint8_t msgIdx = 2;
 8004a70:	2302      	movs	r3, #2
 8004a72:	73fb      	strb	r3, [r7, #15]
		UnbindRspFormat_t rsp;
		if (rpcLen < 3) {
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d802      	bhi.n	8004a80 <processUnbindRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004a7a:	4815      	ldr	r0, [pc, #84]	; (8004ad0 <processUnbindRsp+0x74>)
 8004a7c:	f007 fd80 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	440b      	add	r3, r1
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	3302      	adds	r3, #2
 8004aa4:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	73fa      	strb	r2, [r7, #15]
 8004aac:	461a      	mov	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoUnbindRsp(&rsp);
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <processUnbindRsp+0x70>)
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	f107 0208 	add.w	r2, r7, #8
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4798      	blx	r3
	}
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000554 	.word	0x20000554
 8004ad0:	0800ea10 	.word	0x0800ea10

08004ad4 <processMgmtNwkDiscRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtNwkDiscRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad6:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	6018      	str	r0, [r3, #0]
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	1cfb      	adds	r3, r7, #3
 8004ae4:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtNwkDiscRsp) {
 8004ae6:	4b8f      	ldr	r3, [pc, #572]	; (8004d24 <processMgmtNwkDiscRsp+0x250>)
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 8114 	beq.w	8004d18 <processMgmtNwkDiscRsp+0x244>
		uint8_t msgIdx = 2;
 8004af0:	2302      	movs	r3, #2
 8004af2:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		MgmtNwkDiscRspFormat_t rsp;
		if (rpcLen < 6) {
 8004af6:	1cfb      	adds	r3, r7, #3
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b05      	cmp	r3, #5
 8004afc:	d802      	bhi.n	8004b04 <processMgmtNwkDiscRsp+0x30>
			printf("MT_RPC_ERR_LENGTH\n");
 8004afe:	488a      	ldr	r0, [pc, #552]	; (8004d28 <processMgmtNwkDiscRsp+0x254>)
 8004b00:	f007 fd3e 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004b04:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004b08:	1d3a      	adds	r2, r7, #4
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004b16:	3301      	adds	r3, #1
 8004b18:	1d39      	adds	r1, r7, #4
 8004b1a:	6809      	ldr	r1, [r1, #0]
 8004b1c:	440b      	add	r3, r1
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	f107 0308 	add.w	r3, r7, #8
 8004b2e:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8004b30:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004b34:	3302      	adds	r3, #2
 8004b36:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		rsp.Status = rpcBuff[msgIdx++];
 8004b3a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004b44:	461a      	mov	r2, r3
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	781a      	ldrb	r2, [r3, #0]
 8004b4e:	f107 0308 	add.w	r3, r7, #8
 8004b52:	709a      	strb	r2, [r3, #2]
		rsp.NetworkCount = rpcBuff[msgIdx++];
 8004b54:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004b5e:	461a      	mov	r2, r3
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4413      	add	r3, r2
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	f107 0308 	add.w	r3, r7, #8
 8004b6c:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8004b6e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004b78:	461a      	mov	r2, r3
 8004b7a:	1d3b      	adds	r3, r7, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4413      	add	r3, r2
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	f107 0308 	add.w	r3, r7, #8
 8004b86:	711a      	strb	r2, [r3, #4]
		rsp.NetworkListCount = rpcBuff[msgIdx++];
 8004b88:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004b92:	461a      	mov	r2, r3
 8004b94:	1d3b      	adds	r3, r7, #4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4413      	add	r3, r2
 8004b9a:	781a      	ldrb	r2, [r3, #0]
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 8004ba2:	1cfb      	adds	r3, r7, #3
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	f240 80b0 	bls.w	8004d0c <processMgmtNwkDiscRsp+0x238>
			uint32_t i;
			for (i = 0; i < rsp.NetworkListCount; i++) {
 8004bac:	2300      	movs	r3, #0
 8004bae:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8004bb2:	e0a2      	b.n	8004cfa <processMgmtNwkDiscRsp+0x226>
				rsp.NetworkList[i].PanID = 0;
 8004bb4:	f107 0208 	add.w	r2, r7, #8
 8004bb8:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f103 0108 	add.w	r1, r3, #8
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8004bd6:	e038      	b.n	8004c4a <processMgmtNwkDiscRsp+0x176>
					rsp.NetworkList[i].PanID |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8004bd8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004be2:	461a      	mov	r2, r3
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4413      	add	r3, r2
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	f897 1497 	ldrb.w	r1, [r7, #1175]	; 0x497
 8004bf6:	00c9      	lsls	r1, r1, #3
 8004bf8:	f1a1 0620 	sub.w	r6, r1, #32
 8004bfc:	f1c1 0020 	rsb	r0, r1, #32
 8004c00:	fa03 f501 	lsl.w	r5, r3, r1
 8004c04:	fa02 f606 	lsl.w	r6, r2, r6
 8004c08:	4335      	orrs	r5, r6
 8004c0a:	fa22 f000 	lsr.w	r0, r2, r0
 8004c0e:	4305      	orrs	r5, r0
 8004c10:	fa02 f401 	lsl.w	r4, r2, r1
 8004c14:	f107 0208 	add.w	r2, r7, #8
 8004c18:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	4413      	add	r3, r2
 8004c20:	3308      	adds	r3, #8
 8004c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c26:	ea40 0204 	orr.w	r2, r0, r4
 8004c2a:	ea41 0305 	orr.w	r3, r1, r5
 8004c2e:	f107 0008 	add.w	r0, r7, #8
 8004c32:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8004c36:	0109      	lsls	r1, r1, #4
 8004c38:	4401      	add	r1, r0
 8004c3a:	3108      	adds	r1, #8
 8004c3c:	e9c1 2300 	strd	r2, r3, [r1]
				for (ind = 0; ind < 8; ind++)
 8004c40:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8004c44:	3301      	adds	r3, #1
 8004c46:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8004c4a:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8004c4e:	2b07      	cmp	r3, #7
 8004c50:	d9c2      	bls.n	8004bd8 <processMgmtNwkDiscRsp+0x104>
				rsp.NetworkList[i].LogicalChannel = rpcBuff[msgIdx++];
 8004c52:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4413      	add	r3, r2
 8004c64:	7819      	ldrb	r1, [r3, #0]
 8004c66:	f107 0208 	add.w	r2, r7, #8
 8004c6a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004c6e:	3301      	adds	r3, #1
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	4413      	add	r3, r2
 8004c74:	460a      	mov	r2, r1
 8004c76:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].StackProf_ZigVer = rpcBuff[msgIdx++];
 8004c78:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004c82:	461a      	mov	r2, r3
 8004c84:	1d3b      	adds	r3, r7, #4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4413      	add	r3, r2
 8004c8a:	7819      	ldrb	r1, [r3, #0]
 8004c8c:	f107 0208 	add.w	r2, r7, #8
 8004c90:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004c94:	3301      	adds	r3, #1
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	4413      	add	r3, r2
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	460a      	mov	r2, r1
 8004c9e:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].BeacOrd_SupFramOrd = rpcBuff[msgIdx++];
 8004ca0:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004caa:	461a      	mov	r2, r3
 8004cac:	1d3b      	adds	r3, r7, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	7819      	ldrb	r1, [r3, #0]
 8004cb4:	f107 0208 	add.w	r2, r7, #8
 8004cb8:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	4413      	add	r3, r2
 8004cc2:	3302      	adds	r3, #2
 8004cc4:	460a      	mov	r2, r1
 8004cc6:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].PermitJoin = rpcBuff[msgIdx++];
 8004cc8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	1d3b      	adds	r3, r7, #4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4413      	add	r3, r2
 8004cda:	7819      	ldrb	r1, [r3, #0]
 8004cdc:	f107 0208 	add.w	r2, r7, #8
 8004ce0:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	4413      	add	r3, r2
 8004cea:	3303      	adds	r3, #3
 8004cec:	460a      	mov	r2, r1
 8004cee:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.NetworkListCount; i++) {
 8004cf0:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8004cfa:	f107 0308 	add.w	r3, r7, #8
 8004cfe:	795b      	ldrb	r3, [r3, #5]
 8004d00:	461a      	mov	r2, r3
 8004d02:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8004d06:	4293      	cmp	r3, r2
 8004d08:	f4ff af54 	bcc.w	8004bb4 <processMgmtNwkDiscRsp+0xe0>
			}
		}
		mtZdoCbs.pfnZdoMgmtNwkDiscRsp(&rsp);
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <processMgmtNwkDiscRsp+0x250>)
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	f107 0208 	add.w	r2, r7, #8
 8004d14:	4610      	mov	r0, r2
 8004d16:	4798      	blx	r3
	}
}
 8004d18:	bf00      	nop
 8004d1a:	f207 47a4 	addw	r7, r7, #1188	; 0x4a4
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000554 	.word	0x20000554
 8004d28:	0800ea10 	.word	0x0800ea10

08004d2c <processMgmtLqiRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtLqiRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d30:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	6018      	str	r0, [r3, #0]
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	1cfb      	adds	r3, r7, #3
 8004d3e:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtLqiRsp) {
 8004d40:	4b6b      	ldr	r3, [pc, #428]	; (8004ef0 <processMgmtLqiRsp+0x1c4>)
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 81b3 	beq.w	80050b0 <processMgmtLqiRsp+0x384>
		uint8_t msgIdx = 2;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
		MgmtLqiRspFormat_t rsp;
		if (rpcLen < 6) {
 8004d50:	1cfb      	adds	r3, r7, #3
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d802      	bhi.n	8004d5e <processMgmtLqiRsp+0x32>
			printf("MT_RPC_ERR_LENGTH\n");
 8004d58:	4866      	ldr	r0, [pc, #408]	; (8004ef4 <processMgmtLqiRsp+0x1c8>)
 8004d5a:	f007 fc11 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004d5e:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004d62:	1d3a      	adds	r2, r7, #4
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	4413      	add	r3, r2
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004d70:	3301      	adds	r3, #1
 8004d72:	1d39      	adds	r1, r7, #4
 8004d74:	6809      	ldr	r1, [r1, #0]
 8004d76:	440b      	add	r3, r1
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	4413      	add	r3, r2
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	f107 0308 	add.w	r3, r7, #8
 8004d88:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8004d8a:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004d8e:	3302      	adds	r3, #2
 8004d90:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
		rsp.Status = rpcBuff[msgIdx++];
 8004d94:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004d9e:	461a      	mov	r2, r3
 8004da0:	1d3b      	adds	r3, r7, #4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4413      	add	r3, r2
 8004da6:	781a      	ldrb	r2, [r3, #0]
 8004da8:	f107 0308 	add.w	r3, r7, #8
 8004dac:	709a      	strb	r2, [r3, #2]
		rsp.NeighborTableEntries = rpcBuff[msgIdx++];
 8004dae:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004db8:	461a      	mov	r2, r3
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	781a      	ldrb	r2, [r3, #0]
 8004dc2:	f107 0308 	add.w	r3, r7, #8
 8004dc6:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8004dc8:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4413      	add	r3, r2
 8004dda:	781a      	ldrb	r2, [r3, #0]
 8004ddc:	f107 0308 	add.w	r3, r7, #8
 8004de0:	711a      	strb	r2, [r3, #4]
		rsp.NeighborLqiListCount = rpcBuff[msgIdx++];
 8004de2:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004dec:	461a      	mov	r2, r3
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4413      	add	r3, r2
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 8004dfc:	1cfb      	adds	r3, r7, #3
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b06      	cmp	r3, #6
 8004e02:	f240 814c 	bls.w	800509e <processMgmtLqiRsp+0x372>
			uint32_t i;
			for (i = 0; i < rsp.NeighborLqiListCount; i++) {
 8004e06:	2300      	movs	r3, #0
 8004e08:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8004e0c:	e13e      	b.n	800508c <processMgmtLqiRsp+0x360>

				rsp.NeighborLqiList[i].ExtendedPanID = 0;
 8004e0e:	f107 0108 	add.w	r1, r7, #8
 8004e12:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8004e16:	4613      	mov	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4413      	add	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	440b      	add	r3, r1
 8004e20:	f103 0108 	add.w	r1, r3, #8
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 8004e36:	e042      	b.n	8004ebe <processMgmtLqiRsp+0x192>
					rsp.NeighborLqiList[i].ExtendedPanID |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8004e38:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004e42:	461a      	mov	r2, r3
 8004e44:	1d3b      	adds	r3, r7, #4
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4413      	add	r3, r2
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	f897 1647 	ldrb.w	r1, [r7, #1607]	; 0x647
 8004e56:	00c9      	lsls	r1, r1, #3
 8004e58:	f1a1 0620 	sub.w	r6, r1, #32
 8004e5c:	f1c1 0020 	rsb	r0, r1, #32
 8004e60:	fa03 f901 	lsl.w	r9, r3, r1
 8004e64:	fa02 f606 	lsl.w	r6, r2, r6
 8004e68:	ea49 0906 	orr.w	r9, r9, r6
 8004e6c:	fa22 f000 	lsr.w	r0, r2, r0
 8004e70:	ea49 0900 	orr.w	r9, r9, r0
 8004e74:	fa02 f801 	lsl.w	r8, r2, r1
 8004e78:	f107 0108 	add.w	r1, r7, #8
 8004e7c:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8004e80:	4613      	mov	r3, r2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4413      	add	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	440b      	add	r3, r1
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	ea48 0002 	orr.w	r0, r8, r2
 8004e94:	ea49 0103 	orr.w	r1, r9, r3
 8004e98:	460a      	mov	r2, r1
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	f107 0608 	add.w	r6, r7, #8
 8004ea0:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	4403      	add	r3, r0
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4433      	add	r3, r6
 8004eae:	3308      	adds	r3, #8
 8004eb0:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 8004eb4:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 8004ebe:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8004ec2:	2b07      	cmp	r3, #7
 8004ec4:	d9b8      	bls.n	8004e38 <processMgmtLqiRsp+0x10c>
				rsp.NeighborLqiList[i].ExtendedAddress = 0;
 8004ec6:	f107 0108 	add.w	r1, r7, #8
 8004eca:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8004ece:	4613      	mov	r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	f103 0110 	add.w	r1, r3, #16
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9c1 2300 	strd	r2, r3, [r1]
				for (ind = 0; ind < 8; ind++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 8004eee:	e044      	b.n	8004f7a <processMgmtLqiRsp+0x24e>
 8004ef0:	20000554 	.word	0x20000554
 8004ef4:	0800ea10 	.word	0x0800ea10
					rsp.NeighborLqiList[i].ExtendedAddress |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8004ef8:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004f02:	461a      	mov	r2, r3
 8004f04:	1d3b      	adds	r3, r7, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4413      	add	r3, r2
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	f897 1647 	ldrb.w	r1, [r7, #1607]	; 0x647
 8004f16:	00c9      	lsls	r1, r1, #3
 8004f18:	f1a1 0620 	sub.w	r6, r1, #32
 8004f1c:	f1c1 0020 	rsb	r0, r1, #32
 8004f20:	fa03 f501 	lsl.w	r5, r3, r1
 8004f24:	fa02 f606 	lsl.w	r6, r2, r6
 8004f28:	4335      	orrs	r5, r6
 8004f2a:	fa22 f000 	lsr.w	r0, r2, r0
 8004f2e:	4305      	orrs	r5, r0
 8004f30:	fa02 f401 	lsl.w	r4, r2, r1
 8004f34:	f107 0108 	add.w	r1, r7, #8
 8004f38:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	3310      	adds	r3, #16
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	ea44 0002 	orr.w	r0, r4, r2
 8004f50:	ea45 0103 	orr.w	r1, r5, r3
 8004f54:	460a      	mov	r2, r1
 8004f56:	4601      	mov	r1, r0
 8004f58:	f107 0608 	add.w	r6, r7, #8
 8004f5c:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 8004f60:	4603      	mov	r3, r0
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	4403      	add	r3, r0
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4433      	add	r3, r6
 8004f6a:	3310      	adds	r3, #16
 8004f6c:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 8004f70:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8004f74:	3301      	adds	r3, #1
 8004f76:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
 8004f7a:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8004f7e:	2b07      	cmp	r3, #7
 8004f80:	d9ba      	bls.n	8004ef8 <processMgmtLqiRsp+0x1cc>
				rsp.NeighborLqiList[i].NetworkAddress = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004f82:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004f86:	1d3a      	adds	r2, r7, #4
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004f94:	3301      	adds	r3, #1
 8004f96:	1d39      	adds	r1, r7, #4
 8004f98:	6809      	ldr	r1, [r1, #0]
 8004f9a:	440b      	add	r3, r1
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	b298      	uxth	r0, r3
 8004fa8:	f107 0108 	add.w	r1, r7, #8
 8004fac:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	440b      	add	r3, r1
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 8004fc0:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004fc4:	3302      	adds	r3, #2
 8004fc6:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
				rsp.NeighborLqiList[i].DevTyp_RxOnWhenIdle_Relat = rpcBuff[msgIdx++];
 8004fca:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4413      	add	r3, r2
 8004fdc:	7818      	ldrb	r0, [r3, #0]
 8004fde:	f107 0108 	add.w	r1, r7, #8
 8004fe2:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].PermitJoining = rpcBuff[msgIdx++];
 8004ff8:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8005002:	461a      	mov	r2, r3
 8005004:	1d3b      	adds	r3, r7, #4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4413      	add	r3, r2
 800500a:	7818      	ldrb	r0, [r3, #0]
 800500c:	f107 0108 	add.w	r1, r7, #8
 8005010:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	4613      	mov	r3, r2
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	4413      	add	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	440b      	add	r3, r1
 8005020:	3303      	adds	r3, #3
 8005022:	4602      	mov	r2, r0
 8005024:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].Depth = rpcBuff[msgIdx++];
 8005026:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 8005030:	461a      	mov	r2, r3
 8005032:	1d3b      	adds	r3, r7, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4413      	add	r3, r2
 8005038:	7818      	ldrb	r0, [r3, #0]
 800503a:	f107 0108 	add.w	r1, r7, #8
 800503e:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	4613      	mov	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	440b      	add	r3, r1
 800504e:	3304      	adds	r3, #4
 8005050:	4602      	mov	r2, r0
 8005052:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].LQI = rpcBuff[msgIdx++];
 8005054:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	f887 264f 	strb.w	r2, [r7, #1615]	; 0x64f
 800505e:	461a      	mov	r2, r3
 8005060:	1d3b      	adds	r3, r7, #4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4413      	add	r3, r2
 8005066:	7818      	ldrb	r0, [r3, #0]
 8005068:	f107 0108 	add.w	r1, r7, #8
 800506c:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	4613      	mov	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4413      	add	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	440b      	add	r3, r1
 800507c:	3305      	adds	r3, #5
 800507e:	4602      	mov	r2, r0
 8005080:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.NeighborLqiListCount; i++) {
 8005082:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8005086:	3301      	adds	r3, #1
 8005088:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 800508c:	f107 0308 	add.w	r3, r7, #8
 8005090:	795b      	ldrb	r3, [r3, #5]
 8005092:	461a      	mov	r2, r3
 8005094:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8005098:	4293      	cmp	r3, r2
 800509a:	f4ff aeb8 	bcc.w	8004e0e <processMgmtLqiRsp+0xe2>

			}
		}
		MgmtLqiRspFormat_t *copyy = &rsp;
 800509e:	f107 0308 	add.w	r3, r7, #8
 80050a2:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
		mtZdoCbs.pfnZdoMgmtLqiRsp(copyy);
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <processMgmtLqiRsp+0x390>)
 80050a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050aa:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
 80050ae:	4798      	blx	r3
	}
}
 80050b0:	bf00      	nop
 80050b2:	f207 6754 	addw	r7, r7, #1620	; 0x654
 80050b6:	46bd      	mov	sp, r7
 80050b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050bc:	20000554 	.word	0x20000554

080050c0 <processMgmtRtgRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtRtgRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b0f6      	sub	sp, #472	; 0x1d8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	6018      	str	r0, [r3, #0]
 80050ca:	460a      	mov	r2, r1
 80050cc:	1cfb      	adds	r3, r7, #3
 80050ce:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtRtgRsp) {
 80050d0:	4b6d      	ldr	r3, [pc, #436]	; (8005288 <processMgmtRtgRsp+0x1c8>)
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80d2 	beq.w	800527e <processMgmtRtgRsp+0x1be>
		uint8_t msgIdx = 2;
 80050da:	2302      	movs	r3, #2
 80050dc:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		MgmtRtgRspFormat_t rsp;
		if (rpcLen < 6) {
 80050e0:	1cfb      	adds	r3, r7, #3
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b05      	cmp	r3, #5
 80050e6:	d802      	bhi.n	80050ee <processMgmtRtgRsp+0x2e>
			printf("MT_RPC_ERR_LENGTH\n");
 80050e8:	4868      	ldr	r0, [pc, #416]	; (800528c <processMgmtRtgRsp+0x1cc>)
 80050ea:	f007 fa49 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80050ee:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80050f2:	1d3a      	adds	r2, r7, #4
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	4413      	add	r3, r2
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8005100:	3301      	adds	r3, #1
 8005102:	1d39      	adds	r1, r7, #4
 8005104:	6809      	ldr	r1, [r1, #0]
 8005106:	440b      	add	r3, r1
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	b29b      	uxth	r3, r3
 8005110:	4413      	add	r3, r2
 8005112:	b29a      	uxth	r2, r3
 8005114:	f107 0308 	add.w	r3, r7, #8
 8005118:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 800511a:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800511e:	3302      	adds	r3, #2
 8005120:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		rsp.Status = rpcBuff[msgIdx++];
 8005124:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 800512e:	461a      	mov	r2, r3
 8005130:	1d3b      	adds	r3, r7, #4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4413      	add	r3, r2
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	f107 0308 	add.w	r3, r7, #8
 800513c:	709a      	strb	r2, [r3, #2]
		rsp.RoutingTableEntries = rpcBuff[msgIdx++];
 800513e:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8005148:	461a      	mov	r2, r3
 800514a:	1d3b      	adds	r3, r7, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4413      	add	r3, r2
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8005158:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8005162:	461a      	mov	r2, r3
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4413      	add	r3, r2
 800516a:	781a      	ldrb	r2, [r3, #0]
 800516c:	f107 0308 	add.w	r3, r7, #8
 8005170:	711a      	strb	r2, [r3, #4]
		rsp.RoutingTableListCount = rpcBuff[msgIdx++];
 8005172:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 800517c:	461a      	mov	r2, r3
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4413      	add	r3, r2
 8005184:	781a      	ldrb	r2, [r3, #0]
 8005186:	f107 0308 	add.w	r3, r7, #8
 800518a:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 800518c:	1cfb      	adds	r3, r7, #3
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b06      	cmp	r3, #6
 8005192:	d96e      	bls.n	8005272 <processMgmtRtgRsp+0x1b2>
			uint32_t i;
			for (i = 0; i < rsp.RoutingTableListCount; i++) {
 8005194:	2300      	movs	r3, #0
 8005196:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800519a:	e062      	b.n	8005262 <processMgmtRtgRsp+0x1a2>
				rsp.RoutingTableList[i].DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800519c:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80051a0:	1d3a      	adds	r2, r7, #4
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80051ae:	3301      	adds	r3, #1
 80051b0:	1d39      	adds	r1, r7, #4
 80051b2:	6809      	ldr	r1, [r1, #0]
 80051b4:	440b      	add	r3, r1
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	b29b      	uxth	r3, r3
 80051be:	4413      	add	r3, r2
 80051c0:	b298      	uxth	r0, r3
 80051c2:	f107 0108 	add.w	r1, r7, #8
 80051c6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	440b      	add	r3, r1
 80051d4:	3306      	adds	r3, #6
 80051d6:	4602      	mov	r2, r0
 80051d8:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 80051da:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80051de:	3302      	adds	r3, #2
 80051e0:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
				rsp.RoutingTableList[i].Status = rpcBuff[msgIdx++];
 80051e4:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 80051ee:	461a      	mov	r2, r3
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4413      	add	r3, r2
 80051f6:	7818      	ldrb	r0, [r3, #0]
 80051f8:	f107 0108 	add.w	r1, r7, #8
 80051fc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8005200:	4613      	mov	r3, r2
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4413      	add	r3, r2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	440b      	add	r3, r1
 800520a:	3308      	adds	r3, #8
 800520c:	4602      	mov	r2, r0
 800520e:	701a      	strb	r2, [r3, #0]
				rsp.RoutingTableList[i].NextHop = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005210:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8005214:	1d3a      	adds	r2, r7, #4
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	4413      	add	r3, r2
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	b29a      	uxth	r2, r3
 800521e:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8005222:	3301      	adds	r3, #1
 8005224:	1d39      	adds	r1, r7, #4
 8005226:	6809      	ldr	r1, [r1, #0]
 8005228:	440b      	add	r3, r1
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	b29b      	uxth	r3, r3
 8005232:	4413      	add	r3, r2
 8005234:	b298      	uxth	r0, r3
 8005236:	f107 0108 	add.w	r1, r7, #8
 800523a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	440b      	add	r3, r1
 8005248:	330a      	adds	r3, #10
 800524a:	4602      	mov	r2, r0
 800524c:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 800524e:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8005252:	3302      	adds	r3, #2
 8005254:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
			for (i = 0; i < rsp.RoutingTableListCount; i++) {
 8005258:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800525c:	3301      	adds	r3, #1
 800525e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005262:	f107 0308 	add.w	r3, r7, #8
 8005266:	795b      	ldrb	r3, [r3, #5]
 8005268:	461a      	mov	r2, r3
 800526a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800526e:	4293      	cmp	r3, r2
 8005270:	d394      	bcc.n	800519c <processMgmtRtgRsp+0xdc>
			}
		}
		mtZdoCbs.pfnZdoMgmtRtgRsp(&rsp);
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <processMgmtRtgRsp+0x1c8>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f107 0208 	add.w	r2, r7, #8
 800527a:	4610      	mov	r0, r2
 800527c:	4798      	blx	r3
	}
}
 800527e:	bf00      	nop
 8005280:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20000554 	.word	0x20000554
 800528c:	0800ea10 	.word	0x0800ea10

08005290 <processMgmtBindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtBindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005290:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8005294:	f5ad 6d18 	sub.w	sp, sp, #2432	; 0x980
 8005298:	af00      	add	r7, sp, #0
 800529a:	1d3b      	adds	r3, r7, #4
 800529c:	6018      	str	r0, [r3, #0]
 800529e:	460a      	mov	r2, r1
 80052a0:	1cfb      	adds	r3, r7, #3
 80052a2:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtBindRsp) {
 80052a4:	4bb6      	ldr	r3, [pc, #728]	; (8005580 <processMgmtBindRsp+0x2f0>)
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8162 	beq.w	8005572 <processMgmtBindRsp+0x2e2>
		uint8_t msgIdx = 2;
 80052ae:	2302      	movs	r3, #2
 80052b0:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
		MgmtBindRspFormat_t rsp;
		if (rpcLen < 6) {
 80052b4:	1cfb      	adds	r3, r7, #3
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b05      	cmp	r3, #5
 80052ba:	d802      	bhi.n	80052c2 <processMgmtBindRsp+0x32>
			printf("MT_RPC_ERR_LENGTH\n");
 80052bc:	48b1      	ldr	r0, [pc, #708]	; (8005584 <processMgmtBindRsp+0x2f4>)
 80052be:	f007 f95f 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80052c2:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80052c6:	1d3a      	adds	r2, r7, #4
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	4413      	add	r3, r2
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80052d4:	3301      	adds	r3, #1
 80052d6:	1d39      	adds	r1, r7, #4
 80052d8:	6809      	ldr	r1, [r1, #0]
 80052da:	440b      	add	r3, r1
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	4413      	add	r3, r2
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	f107 0308 	add.w	r3, r7, #8
 80052ec:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 80052ee:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80052f2:	3302      	adds	r3, #2
 80052f4:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
		rsp.Status = rpcBuff[msgIdx++];
 80052f8:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8005302:	461a      	mov	r2, r3
 8005304:	1d3b      	adds	r3, r7, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4413      	add	r3, r2
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	f107 0308 	add.w	r3, r7, #8
 8005310:	709a      	strb	r2, [r3, #2]
		rsp.BindingTableEntries = rpcBuff[msgIdx++];
 8005312:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 800531c:	461a      	mov	r2, r3
 800531e:	1d3b      	adds	r3, r7, #4
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4413      	add	r3, r2
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	f107 0308 	add.w	r3, r7, #8
 800532a:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 800532c:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8005336:	461a      	mov	r2, r3
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4413      	add	r3, r2
 800533e:	781a      	ldrb	r2, [r3, #0]
 8005340:	f107 0308 	add.w	r3, r7, #8
 8005344:	711a      	strb	r2, [r3, #4]
		rsp.BindingTableListCount = rpcBuff[msgIdx++];
 8005346:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8005350:	461a      	mov	r2, r3
 8005352:	1d3b      	adds	r3, r7, #4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4413      	add	r3, r2
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	f107 0308 	add.w	r3, r7, #8
 800535e:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 8005360:	1cfb      	adds	r3, r7, #3
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b06      	cmp	r3, #6
 8005366:	f240 80fe 	bls.w	8005566 <processMgmtBindRsp+0x2d6>
			uint32_t i;
			for (i = 0; i < rsp.BindingTableListCount; i++) {
 800536a:	2300      	movs	r3, #0
 800536c:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
 8005370:	e0f0      	b.n	8005554 <processMgmtBindRsp+0x2c4>
				rsp.BindingTableList[i].SrcIEEEAddr = 0;
 8005372:	f107 0208 	add.w	r2, r7, #8
 8005376:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 800537a:	015b      	lsls	r3, r3, #5
 800537c:	4413      	add	r3, r2
 800537e:	f103 0108 	add.w	r1, r3, #8
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t i;
				for (i = 0; i < 8; i++)
 800538e:	2300      	movs	r3, #0
 8005390:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 8005394:	e03a      	b.n	800540c <processMgmtBindRsp+0x17c>
					rsp.BindingTableList[i].SrcIEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8005396:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80053a0:	461a      	mov	r2, r3
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4413      	add	r3, r2
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 80053b4:	00c9      	lsls	r1, r1, #3
 80053b6:	f1a1 0620 	sub.w	r6, r1, #32
 80053ba:	f1c1 0020 	rsb	r0, r1, #32
 80053be:	fa03 f901 	lsl.w	r9, r3, r1
 80053c2:	fa02 f606 	lsl.w	r6, r2, r6
 80053c6:	ea49 0906 	orr.w	r9, r9, r6
 80053ca:	fa22 f000 	lsr.w	r0, r2, r0
 80053ce:	ea49 0900 	orr.w	r9, r9, r0
 80053d2:	fa02 f801 	lsl.w	r8, r2, r1
 80053d6:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 80053da:	f107 0208 	add.w	r2, r7, #8
 80053de:	015b      	lsls	r3, r3, #5
 80053e0:	4413      	add	r3, r2
 80053e2:	3308      	adds	r3, #8
 80053e4:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80053e8:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 80053ec:	ea4b 0208 	orr.w	r2, fp, r8
 80053f0:	ea4c 0309 	orr.w	r3, ip, r9
 80053f4:	f107 0008 	add.w	r0, r7, #8
 80053f8:	0149      	lsls	r1, r1, #5
 80053fa:	4401      	add	r1, r0
 80053fc:	3108      	adds	r1, #8
 80053fe:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 8005402:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8005406:	3301      	adds	r3, #1
 8005408:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 800540c:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8005410:	2b07      	cmp	r3, #7
 8005412:	d9c0      	bls.n	8005396 <processMgmtBindRsp+0x106>
				rsp.BindingTableList[i].SrcEndpoint = rpcBuff[msgIdx++];
 8005414:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 800541e:	461a      	mov	r2, r3
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	441a      	add	r2, r3
 8005426:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 800542a:	7811      	ldrb	r1, [r2, #0]
 800542c:	f107 0208 	add.w	r2, r7, #8
 8005430:	015b      	lsls	r3, r3, #5
 8005432:	4413      	add	r3, r2
 8005434:	3310      	adds	r3, #16
 8005436:	460a      	mov	r2, r1
 8005438:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].ClusterID = rpcBuff[msgIdx++];
 800543a:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 8005444:	461a      	mov	r2, r3
 8005446:	1d3b      	adds	r3, r7, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	441a      	add	r2, r3
 800544c:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8005450:	7811      	ldrb	r1, [r2, #0]
 8005452:	f107 0208 	add.w	r2, r7, #8
 8005456:	015b      	lsls	r3, r3, #5
 8005458:	4413      	add	r3, r2
 800545a:	3311      	adds	r3, #17
 800545c:	460a      	mov	r2, r1
 800545e:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].DstAddrMode = rpcBuff[msgIdx++];
 8005460:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 800546a:	461a      	mov	r2, r3
 800546c:	1d3b      	adds	r3, r7, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	441a      	add	r2, r3
 8005472:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8005476:	7811      	ldrb	r1, [r2, #0]
 8005478:	f107 0208 	add.w	r2, r7, #8
 800547c:	015b      	lsls	r3, r3, #5
 800547e:	4413      	add	r3, r2
 8005480:	3312      	adds	r3, #18
 8005482:	460a      	mov	r2, r1
 8005484:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].DstIEEEAddr = 0;
 8005486:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 800548a:	f107 0208 	add.w	r2, r7, #8
 800548e:	015b      	lsls	r3, r3, #5
 8005490:	4413      	add	r3, r2
 8005492:	f103 0118 	add.w	r1, r3, #24
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 80054a8:	e038      	b.n	800551c <processMgmtBindRsp+0x28c>
					rsp.BindingTableList[i].DstIEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80054aa:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 80054b4:	461a      	mov	r2, r3
 80054b6:	1d3b      	adds	r3, r7, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4413      	add	r3, r2
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 80054c8:	00c9      	lsls	r1, r1, #3
 80054ca:	f1a1 0620 	sub.w	r6, r1, #32
 80054ce:	f1c1 0020 	rsb	r0, r1, #32
 80054d2:	fa03 f501 	lsl.w	r5, r3, r1
 80054d6:	fa02 f606 	lsl.w	r6, r2, r6
 80054da:	4335      	orrs	r5, r6
 80054dc:	fa22 f000 	lsr.w	r0, r2, r0
 80054e0:	4305      	orrs	r5, r0
 80054e2:	fa02 f401 	lsl.w	r4, r2, r1
 80054e6:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 80054ea:	f107 0208 	add.w	r2, r7, #8
 80054ee:	015b      	lsls	r3, r3, #5
 80054f0:	4413      	add	r3, r2
 80054f2:	3318      	adds	r3, #24
 80054f4:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80054f8:	f897 1977 	ldrb.w	r1, [r7, #2423]	; 0x977
 80054fc:	ea4b 0204 	orr.w	r2, fp, r4
 8005500:	ea4c 0305 	orr.w	r3, ip, r5
 8005504:	f107 0008 	add.w	r0, r7, #8
 8005508:	0149      	lsls	r1, r1, #5
 800550a:	4401      	add	r1, r0
 800550c:	3118      	adds	r1, #24
 800550e:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 8005512:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8005516:	3301      	adds	r3, #1
 8005518:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
 800551c:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 8005520:	2b07      	cmp	r3, #7
 8005522:	d9c2      	bls.n	80054aa <processMgmtBindRsp+0x21a>
				rsp.BindingTableList[i].DstEndpoint = rpcBuff[msgIdx++];
 8005524:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	f887 297f 	strb.w	r2, [r7, #2431]	; 0x97f
 800552e:	461a      	mov	r2, r3
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	441a      	add	r2, r3
 8005536:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 800553a:	7811      	ldrb	r1, [r2, #0]
 800553c:	f107 0208 	add.w	r2, r7, #8
 8005540:	3301      	adds	r3, #1
 8005542:	015b      	lsls	r3, r3, #5
 8005544:	4413      	add	r3, r2
 8005546:	460a      	mov	r2, r1
 8005548:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.BindingTableListCount; i++) {
 800554a:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 800554e:	3301      	adds	r3, #1
 8005550:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
 8005554:	f107 0308 	add.w	r3, r7, #8
 8005558:	795b      	ldrb	r3, [r3, #5]
 800555a:	461a      	mov	r2, r3
 800555c:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8005560:	4293      	cmp	r3, r2
 8005562:	f4ff af06 	bcc.w	8005372 <processMgmtBindRsp+0xe2>
			}
		}
		mtZdoCbs.pfnZdoMgmtBindRsp(&rsp);
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <processMgmtBindRsp+0x2f0>)
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	f107 0208 	add.w	r2, r7, #8
 800556e:	4610      	mov	r0, r2
 8005570:	4798      	blx	r3
	}
}
 8005572:	bf00      	nop
 8005574:	f507 6718 	add.w	r7, r7, #2432	; 0x980
 8005578:	46bd      	mov	sp, r7
 800557a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800557e:	bf00      	nop
 8005580:	20000554 	.word	0x20000554
 8005584:	0800ea10 	.word	0x0800ea10

08005588 <processMgmtLeaveRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtLeaveRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtLeaveRsp) {
 8005594:	4b18      	ldr	r3, [pc, #96]	; (80055f8 <processMgmtLeaveRsp+0x70>)
 8005596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005598:	2b00      	cmp	r3, #0
 800559a:	d028      	beq.n	80055ee <processMgmtLeaveRsp+0x66>
		uint8_t msgIdx = 2;
 800559c:	2302      	movs	r3, #2
 800559e:	73fb      	strb	r3, [r7, #15]
		MgmtLeaveRspFormat_t rsp;
		if (rpcLen < 3) {
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d802      	bhi.n	80055ac <processMgmtLeaveRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80055a6:	4815      	ldr	r0, [pc, #84]	; (80055fc <processMgmtLeaveRsp+0x74>)
 80055a8:	f006 ffea 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	4413      	add	r3, r2
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
 80055b8:	3301      	adds	r3, #1
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	440b      	add	r3, r1
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	4413      	add	r3, r2
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	3302      	adds	r3, #2
 80055d0:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	73fa      	strb	r2, [r7, #15]
 80055d8:	461a      	mov	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4413      	add	r3, r2
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtLeaveRsp(&rsp);
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <processMgmtLeaveRsp+0x70>)
 80055e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e6:	f107 0208 	add.w	r2, r7, #8
 80055ea:	4610      	mov	r0, r2
 80055ec:	4798      	blx	r3
	}
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000554 	.word	0x20000554
 80055fc:	0800ea10 	.word	0x0800ea10

08005600 <processMgmtDirectJoinRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtDirectJoinRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtDirectJoinRsp) {
 800560c:	4b18      	ldr	r3, [pc, #96]	; (8005670 <processMgmtDirectJoinRsp+0x70>)
 800560e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d028      	beq.n	8005666 <processMgmtDirectJoinRsp+0x66>
		uint8_t msgIdx = 2;
 8005614:	2302      	movs	r3, #2
 8005616:	73fb      	strb	r3, [r7, #15]
		MgmtDirectJoinRspFormat_t rsp;
		if (rpcLen < 3) {
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d802      	bhi.n	8005624 <processMgmtDirectJoinRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800561e:	4815      	ldr	r0, [pc, #84]	; (8005674 <processMgmtDirectJoinRsp+0x74>)
 8005620:	f006 ffae 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4413      	add	r3, r2
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	b29a      	uxth	r2, r3
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	3301      	adds	r3, #1
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	440b      	add	r3, r1
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	b29b      	uxth	r3, r3
 800563e:	4413      	add	r3, r2
 8005640:	b29b      	uxth	r3, r3
 8005642:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	3302      	adds	r3, #2
 8005648:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	73fa      	strb	r2, [r7, #15]
 8005650:	461a      	mov	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4413      	add	r3, r2
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtDirectJoinRsp(&rsp);
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <processMgmtDirectJoinRsp+0x70>)
 800565c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565e:	f107 0208 	add.w	r2, r7, #8
 8005662:	4610      	mov	r0, r2
 8005664:	4798      	blx	r3
	}
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000554 	.word	0x20000554
 8005674:	0800ea10 	.word	0x0800ea10

08005678 <processMgmtPermitJoinRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtPermitJoinRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtPermitJoinRsp) {
 8005684:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <processMgmtPermitJoinRsp+0x70>)
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	2b00      	cmp	r3, #0
 800568a:	d028      	beq.n	80056de <processMgmtPermitJoinRsp+0x66>
		uint8_t msgIdx = 2;
 800568c:	2302      	movs	r3, #2
 800568e:	73fb      	strb	r3, [r7, #15]
		MgmtPermitJoinRspFormat_t rsp;
		if (rpcLen < 3) {
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d802      	bhi.n	800569c <processMgmtPermitJoinRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8005696:	4815      	ldr	r0, [pc, #84]	; (80056ec <processMgmtPermitJoinRsp+0x74>)
 8005698:	f006 ff72 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	3301      	adds	r3, #1
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	440b      	add	r3, r1
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	4413      	add	r3, r2
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	3302      	adds	r3, #2
 80056c0:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	73fa      	strb	r2, [r7, #15]
 80056c8:	461a      	mov	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtPermitJoinRsp(&rsp);
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <processMgmtPermitJoinRsp+0x70>)
 80056d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d6:	f107 0208 	add.w	r2, r7, #8
 80056da:	4610      	mov	r0, r2
 80056dc:	4798      	blx	r3
	}
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000554 	.word	0x20000554
 80056ec:	0800ea10 	.word	0x0800ea10

080056f0 <processEndDeviceAnnceInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processEndDeviceAnnceInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 80056f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056f2:	b08b      	sub	sp, #44	; 0x2c
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoEndDeviceAnnceInd) {
 80056fc:	4b43      	ldr	r3, [pc, #268]	; (800580c <processEndDeviceAnnceInd+0x11c>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005700:	2b00      	cmp	r3, #0
 8005702:	d07e      	beq.n	8005802 <processEndDeviceAnnceInd+0x112>
		uint8_t msgIdx = 2;
 8005704:	2302      	movs	r3, #2
 8005706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		EndDeviceAnnceIndFormat_t rsp;
		if (rpcLen < 13) {
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	2b0c      	cmp	r3, #12
 800570e:	d802      	bhi.n	8005716 <processEndDeviceAnnceInd+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8005710:	483f      	ldr	r0, [pc, #252]	; (8005810 <processEndDeviceAnnceInd+0x120>)
 8005712:	f006 ff35 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b29a      	uxth	r2, r3
 8005722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005726:	3301      	adds	r3, #1
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	440b      	add	r3, r1
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	b29b      	uxth	r3, r3
 8005734:	4413      	add	r3, r2
 8005736:	b29b      	uxth	r3, r3
 8005738:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 800573a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800573e:	3302      	adds	r3, #2
 8005740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	b29a      	uxth	r2, r3
 8005750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005754:	3301      	adds	r3, #1
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	440b      	add	r3, r1
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	b29b      	uxth	r3, r3
 8005762:	4413      	add	r3, r2
 8005764:	b29b      	uxth	r3, r3
 8005766:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8005768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800576c:	3302      	adds	r3, #2
 800576e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rsp.IEEEAddr = 0;
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 800577e:	2300      	movs	r3, #0
 8005780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005784:	e029      	b.n	80057da <processEndDeviceAnnceInd+0xea>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8005786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8005790:	461a      	mov	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4413      	add	r3, r2
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80057a2:	00c9      	lsls	r1, r1, #3
 80057a4:	f1a1 0620 	sub.w	r6, r1, #32
 80057a8:	f1c1 0020 	rsb	r0, r1, #32
 80057ac:	fa03 f501 	lsl.w	r5, r3, r1
 80057b0:	fa02 f606 	lsl.w	r6, r2, r6
 80057b4:	4335      	orrs	r5, r6
 80057b6:	fa22 f000 	lsr.w	r0, r2, r0
 80057ba:	4305      	orrs	r5, r0
 80057bc:	fa02 f401 	lsl.w	r4, r2, r1
 80057c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80057c4:	ea40 0204 	orr.w	r2, r0, r4
 80057c8:	ea41 0305 	orr.w	r3, r1, r5
 80057cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++)
 80057d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057d4:	3301      	adds	r3, #1
 80057d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80057da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057de:	2b07      	cmp	r3, #7
 80057e0:	d9d1      	bls.n	8005786 <processEndDeviceAnnceInd+0x96>
		rsp.Capabilities = rpcBuff[msgIdx++];
 80057e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80057ec:	461a      	mov	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4413      	add	r3, r2
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	763b      	strb	r3, [r7, #24]

		mtZdoCbs.pfnZdoEndDeviceAnnceInd(&rsp);
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <processEndDeviceAnnceInd+0x11c>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	f107 0208 	add.w	r2, r7, #8
 80057fe:	4610      	mov	r0, r2
 8005800:	4798      	blx	r3
	}
}
 8005802:	bf00      	nop
 8005804:	372c      	adds	r7, #44	; 0x2c
 8005806:	46bd      	mov	sp, r7
 8005808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800580a:	bf00      	nop
 800580c:	20000554 	.word	0x20000554
 8005810:	0800ea10 	.word	0x0800ea10

08005814 <processMatchDescRspSent>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMatchDescRspSent(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005814:	b580      	push	{r7, lr}
 8005816:	b096      	sub	sp, #88	; 0x58
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMatchDescRspSent) {
 8005820:	4b4a      	ldr	r3, [pc, #296]	; (800594c <processMatchDescRspSent+0x138>)
 8005822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 808d 	beq.w	8005944 <processMatchDescRspSent+0x130>
		uint8_t msgIdx = 2;
 800582a:	2302      	movs	r3, #2
 800582c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		MatchDescRspSentFormat_t rsp;
		if (rpcLen < 4) {
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d802      	bhi.n	800583c <processMatchDescRspSent+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 8005836:	4846      	ldr	r0, [pc, #280]	; (8005950 <processMatchDescRspSent+0x13c>)
 8005838:	f006 fea2 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800583c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4413      	add	r3, r2
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	b29a      	uxth	r2, r3
 8005848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800584c:	3301      	adds	r3, #1
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	440b      	add	r3, r1
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	b29b      	uxth	r3, r3
 800585a:	4413      	add	r3, r2
 800585c:	b29b      	uxth	r3, r3
 800585e:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005864:	3302      	adds	r3, #2
 8005866:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		rsp.NumInClusters = rpcBuff[msgIdx++];
 800586a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 8005874:	461a      	mov	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4413      	add	r3, r2
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	72bb      	strb	r3, [r7, #10]
		uint32_t i;
		for (i = 0; i < rsp.NumInClusters; i++) {
 800587e:	2300      	movs	r3, #0
 8005880:	653b      	str	r3, [r7, #80]	; 0x50
 8005882:	e01f      	b.n	80058c4 <processMatchDescRspSent+0xb0>
			rsp.InClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	4413      	add	r3, r2
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	b29a      	uxth	r2, r3
 8005890:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005894:	3301      	adds	r3, #1
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	440b      	add	r3, r1
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	4413      	add	r3, r2
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80058ae:	440b      	add	r3, r1
 80058b0:	f823 2c4c 	strh.w	r2, [r3, #-76]
			msgIdx += 2;
 80058b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058b8:	3302      	adds	r3, #2
 80058ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for (i = 0; i < rsp.NumInClusters; i++) {
 80058be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c0:	3301      	adds	r3, #1
 80058c2:	653b      	str	r3, [r7, #80]	; 0x50
 80058c4:	7abb      	ldrb	r3, [r7, #10]
 80058c6:	461a      	mov	r2, r3
 80058c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d3da      	bcc.n	8005884 <processMatchDescRspSent+0x70>
		}
		rsp.NumOutClusters = rpcBuff[msgIdx++];
 80058ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 80058d8:	461a      	mov	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4413      	add	r3, r2
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		for (i = 0; i < rsp.NumOutClusters; i++) {
 80058e4:	2300      	movs	r3, #0
 80058e6:	653b      	str	r3, [r7, #80]	; 0x50
 80058e8:	e020      	b.n	800592c <processMatchDescRspSent+0x118>
			rsp.OutClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80058ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058fa:	3301      	adds	r3, #1
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	440b      	add	r3, r1
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	b29b      	uxth	r3, r3
 8005908:	4413      	add	r3, r2
 800590a:	b29a      	uxth	r2, r3
 800590c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590e:	3310      	adds	r3, #16
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005916:	440b      	add	r3, r1
 8005918:	f823 2c4a 	strh.w	r2, [r3, #-74]
			msgIdx += 2;
 800591c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005920:	3302      	adds	r3, #2
 8005922:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for (i = 0; i < rsp.NumOutClusters; i++) {
 8005926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005928:	3301      	adds	r3, #1
 800592a:	653b      	str	r3, [r7, #80]	; 0x50
 800592c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005930:	461a      	mov	r2, r3
 8005932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005934:	4293      	cmp	r3, r2
 8005936:	d3d8      	bcc.n	80058ea <processMatchDescRspSent+0xd6>
		}

		mtZdoCbs.pfnZdoMatchDescRspSent(&rsp);
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <processMatchDescRspSent+0x138>)
 800593a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593c:	f107 0208 	add.w	r2, r7, #8
 8005940:	4610      	mov	r0, r2
 8005942:	4798      	blx	r3
	}
}
 8005944:	bf00      	nop
 8005946:	3758      	adds	r7, #88	; 0x58
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000554 	.word	0x20000554
 8005950:	0800ea10 	.word	0x0800ea10

08005954 <processStatusErrorRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processStatusErrorRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoStatusErrorRsp) {
 8005960:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <processStatusErrorRsp+0x70>)
 8005962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005964:	2b00      	cmp	r3, #0
 8005966:	d028      	beq.n	80059ba <processStatusErrorRsp+0x66>
		uint8_t msgIdx = 2;
 8005968:	2302      	movs	r3, #2
 800596a:	73fb      	strb	r3, [r7, #15]
		StatusErrorRspFormat_t rsp;
		if (rpcLen < 3) {
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d802      	bhi.n	8005978 <processStatusErrorRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8005972:	4815      	ldr	r0, [pc, #84]	; (80059c8 <processStatusErrorRsp+0x74>)
 8005974:	f006 fe04 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b29a      	uxth	r2, r3
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	3301      	adds	r3, #1
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	440b      	add	r3, r1
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	b29b      	uxth	r3, r3
 8005992:	4413      	add	r3, r2
 8005994:	b29b      	uxth	r3, r3
 8005996:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	3302      	adds	r3, #2
 800599c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	73fa      	strb	r2, [r7, #15]
 80059a4:	461a      	mov	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoStatusErrorRsp(&rsp);
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <processStatusErrorRsp+0x70>)
 80059b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b2:	f107 0208 	add.w	r2, r7, #8
 80059b6:	4610      	mov	r0, r2
 80059b8:	4798      	blx	r3
	}
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000554 	.word	0x20000554
 80059c8:	0800ea10 	.word	0x0800ea10

080059cc <processSrcRtgInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processSrcRtgInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	1d3b      	adds	r3, r7, #4
 80059d6:	6018      	str	r0, [r3, #0]
 80059d8:	460a      	mov	r2, r1
 80059da:	1cfb      	adds	r3, r7, #3
 80059dc:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoSrcRtgInd) {
 80059de:	4b39      	ldr	r3, [pc, #228]	; (8005ac4 <processSrcRtgInd+0xf8>)
 80059e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d068      	beq.n	8005ab8 <processSrcRtgInd+0xec>
		uint8_t msgIdx = 2;
 80059e6:	2302      	movs	r3, #2
 80059e8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		SrcRtgIndFormat_t rsp;
		if (rpcLen < 4) {
 80059ec:	1cfb      	adds	r3, r7, #3
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d802      	bhi.n	80059fa <processSrcRtgInd+0x2e>
			printf("MT_RPC_ERR_LENGTH\n");
 80059f4:	4834      	ldr	r0, [pc, #208]	; (8005ac8 <processSrcRtgInd+0xfc>)
 80059f6:	f006 fdc3 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80059fa:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80059fe:	1d3a      	adds	r2, r7, #4
 8005a00:	6812      	ldr	r2, [r2, #0]
 8005a02:	4413      	add	r3, r2
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	1d39      	adds	r1, r7, #4
 8005a10:	6809      	ldr	r1, [r1, #0]
 8005a12:	440b      	add	r3, r1
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f107 030c 	add.w	r3, r7, #12
 8005a24:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8005a26:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005a2a:	3302      	adds	r3, #2
 8005a2c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		rsp.RelayCount = rpcBuff[msgIdx++];
 8005a30:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	1d3b      	adds	r3, r7, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4413      	add	r3, r2
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	f107 030c 	add.w	r3, r7, #12
 8005a48:	709a      	strb	r2, [r3, #2]
		uint32_t i;
		for (i = 0; i < rsp.RelayCount; i++) {
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005a50:	e024      	b.n	8005a9c <processSrcRtgInd+0xd0>
			rsp.RelayList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005a52:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005a56:	1d3a      	adds	r2, r7, #4
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005a64:	3301      	adds	r3, #1
 8005a66:	1d39      	adds	r1, r7, #4
 8005a68:	6809      	ldr	r1, [r1, #0]
 8005a6a:	440b      	add	r3, r1
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	4413      	add	r3, r2
 8005a76:	b299      	uxth	r1, r3
 8005a78:	f107 020c 	add.w	r2, r7, #12
 8005a7c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	4413      	add	r3, r2
 8005a84:	460a      	mov	r2, r1
 8005a86:	809a      	strh	r2, [r3, #4]
			msgIdx += 2;
 8005a88:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		for (i = 0; i < rsp.RelayCount; i++) {
 8005a92:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005a96:	3301      	adds	r3, #1
 8005a98:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005a9c:	f107 030c 	add.w	r3, r7, #12
 8005aa0:	789b      	ldrb	r3, [r3, #2]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d3d2      	bcc.n	8005a52 <processSrcRtgInd+0x86>
		}

		mtZdoCbs.pfnZdoSrcRtgInd(&rsp);
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <processSrcRtgInd+0xf8>)
 8005aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab0:	f107 020c 	add.w	r2, r7, #12
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
	}
}
 8005ab8:	bf00      	nop
 8005aba:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000554 	.word	0x20000554
 8005ac8:	0800ea10 	.word	0x0800ea10

08005acc <processBeaconNotifyInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processBeaconNotifyInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ace:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	6018      	str	r0, [r3, #0]
 8005ad8:	460a      	mov	r2, r1
 8005ada:	1cfb      	adds	r3, r7, #3
 8005adc:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoBeaconNotifyInd) {
 8005ade:	4bd5      	ldr	r3, [pc, #852]	; (8005e34 <processBeaconNotifyInd+0x368>)
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 81a1 	beq.w	8005e2a <processBeaconNotifyInd+0x35e>
		uint8_t msgIdx = 2;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		BeaconNotifyIndFormat_t rsp;
		if (rpcLen < 1) {
 8005aee:	1cfb      	adds	r3, r7, #3
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d102      	bne.n	8005afc <processBeaconNotifyInd+0x30>
			printf("MT_RPC_ERR_LENGTH\n");
 8005af6:	48d0      	ldr	r0, [pc, #832]	; (8005e38 <processBeaconNotifyInd+0x36c>)
 8005af8:	f006 fd42 	bl	800c580 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 8005afc:	1cfb      	adds	r3, r7, #3
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	4619      	mov	r1, r3
 8005b02:	48ce      	ldr	r0, [pc, #824]	; (8005e3c <processBeaconNotifyInd+0x370>)
 8005b04:	f006 fcc8 	bl	800c498 <iprintf>

		rsp.BeaconCount = rpcBuff[msgIdx++];
 8005b08:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005b12:	461a      	mov	r2, r3
 8005b14:	1d3b      	adds	r3, r7, #4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4413      	add	r3, r2
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	f107 0308 	add.w	r3, r7, #8
 8005b20:	701a      	strb	r2, [r3, #0]
		if (rpcLen > 1) {
 8005b22:	1cfb      	adds	r3, r7, #3
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	f240 8179 	bls.w	8005e1e <processBeaconNotifyInd+0x352>
			uint32_t i;
			for (i = 0; i < rsp.BeaconCount; i++) {
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005b32:	e16b      	b.n	8005e0c <processBeaconNotifyInd+0x340>
				rsp.BeaconList[i].SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005b34:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005b38:	1d3a      	adds	r2, r7, #4
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005b46:	3301      	adds	r3, #1
 8005b48:	1d39      	adds	r1, r7, #4
 8005b4a:	6809      	ldr	r1, [r1, #0]
 8005b4c:	440b      	add	r3, r1
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	b298      	uxth	r0, r3
 8005b5a:	f107 0108 	add.w	r1, r7, #8
 8005b5e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005b62:	4613      	mov	r3, r2
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4413      	add	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	4602      	mov	r2, r0
 8005b70:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 8005b72:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005b76:	3302      	adds	r3, #2
 8005b78:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				rsp.BeaconList[i].PanId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005b7c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005b80:	1d3a      	adds	r2, r7, #4
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	4413      	add	r3, r2
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005b8e:	3301      	adds	r3, #1
 8005b90:	1d39      	adds	r1, r7, #4
 8005b92:	6809      	ldr	r1, [r1, #0]
 8005b94:	440b      	add	r3, r1
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	b298      	uxth	r0, r3
 8005ba2:	f107 0108 	add.w	r1, r7, #8
 8005ba6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005baa:	4613      	mov	r3, r2
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4413      	add	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	440b      	add	r3, r1
 8005bb4:	330a      	adds	r3, #10
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 8005bba:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005bbe:	3302      	adds	r3, #2
 8005bc0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				rsp.BeaconList[i].LogicalChannel = rpcBuff[msgIdx++];
 8005bc4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005bce:	461a      	mov	r2, r3
 8005bd0:	1d3b      	adds	r3, r7, #4
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	7818      	ldrb	r0, [r3, #0]
 8005bd8:	f107 0108 	add.w	r1, r7, #8
 8005bdc:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005be0:	4613      	mov	r3, r2
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	4413      	add	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	440b      	add	r3, r1
 8005bea:	330c      	adds	r3, #12
 8005bec:	4602      	mov	r2, r0
 8005bee:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].PermitJoining = rpcBuff[msgIdx++];
 8005bf0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	1d3b      	adds	r3, r7, #4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4413      	add	r3, r2
 8005c02:	7818      	ldrb	r0, [r3, #0]
 8005c04:	f107 0108 	add.w	r1, r7, #8
 8005c08:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	440b      	add	r3, r1
 8005c16:	330d      	adds	r3, #13
 8005c18:	4602      	mov	r2, r0
 8005c1a:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].RouterCap = rpcBuff[msgIdx++];
 8005c1c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005c26:	461a      	mov	r2, r3
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	7818      	ldrb	r0, [r3, #0]
 8005c30:	f107 0108 	add.w	r1, r7, #8
 8005c34:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005c38:	4613      	mov	r3, r2
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	4413      	add	r3, r2
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	440b      	add	r3, r1
 8005c42:	330e      	adds	r3, #14
 8005c44:	4602      	mov	r2, r0
 8005c46:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].DevCap = rpcBuff[msgIdx++];
 8005c48:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005c52:	461a      	mov	r2, r3
 8005c54:	1d3b      	adds	r3, r7, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	7818      	ldrb	r0, [r3, #0]
 8005c5c:	f107 0108 	add.w	r1, r7, #8
 8005c60:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005c64:	4613      	mov	r3, r2
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	4413      	add	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	440b      	add	r3, r1
 8005c6e:	330f      	adds	r3, #15
 8005c70:	4602      	mov	r2, r0
 8005c72:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].ProtocolVer = rpcBuff[msgIdx++];
 8005c74:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005c7e:	461a      	mov	r2, r3
 8005c80:	1d3b      	adds	r3, r7, #4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4413      	add	r3, r2
 8005c86:	7818      	ldrb	r0, [r3, #0]
 8005c88:	f107 0108 	add.w	r1, r7, #8
 8005c8c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005c90:	4613      	mov	r3, r2
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	4413      	add	r3, r2
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	440b      	add	r3, r1
 8005c9a:	3310      	adds	r3, #16
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].StackProf = rpcBuff[msgIdx++];
 8005ca0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005caa:	461a      	mov	r2, r3
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	7818      	ldrb	r0, [r3, #0]
 8005cb4:	f107 0108 	add.w	r1, r7, #8
 8005cb8:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	4413      	add	r3, r2
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	440b      	add	r3, r1
 8005cc6:	3311      	adds	r3, #17
 8005cc8:	4602      	mov	r2, r0
 8005cca:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].Lqi = rpcBuff[msgIdx++];
 8005ccc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	1d3b      	adds	r3, r7, #4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4413      	add	r3, r2
 8005cde:	7818      	ldrb	r0, [r3, #0]
 8005ce0:	f107 0108 	add.w	r1, r7, #8
 8005ce4:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005ce8:	4613      	mov	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	4413      	add	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	440b      	add	r3, r1
 8005cf2:	3312      	adds	r3, #18
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].Depth = rpcBuff[msgIdx++];
 8005cf8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005d02:	461a      	mov	r2, r3
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4413      	add	r3, r2
 8005d0a:	7818      	ldrb	r0, [r3, #0]
 8005d0c:	f107 0108 	add.w	r1, r7, #8
 8005d10:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005d14:	4613      	mov	r3, r2
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	4413      	add	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3313      	adds	r3, #19
 8005d20:	4602      	mov	r2, r0
 8005d22:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].UpdateId = rpcBuff[msgIdx++];
 8005d24:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005d2e:	461a      	mov	r2, r3
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	7818      	ldrb	r0, [r3, #0]
 8005d38:	f107 0108 	add.w	r1, r7, #8
 8005d3c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	440b      	add	r3, r1
 8005d4a:	3314      	adds	r3, #20
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	701a      	strb	r2, [r3, #0]

				rsp.BeaconList[i].ExtendedPanId = 0;
 8005d50:	f107 0108 	add.w	r1, r7, #8
 8005d54:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4419      	add	r1, r3
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8005d76:	e040      	b.n	8005dfa <processBeaconNotifyInd+0x32e>
					rsp.BeaconList[i].ExtendedPanId |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8005d78:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8005d82:	461a      	mov	r2, r3
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4413      	add	r3, r2
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	f897 120f 	ldrb.w	r1, [r7, #527]	; 0x20f
 8005d96:	00c9      	lsls	r1, r1, #3
 8005d98:	f1a1 0620 	sub.w	r6, r1, #32
 8005d9c:	f1c1 0020 	rsb	r0, r1, #32
 8005da0:	fa03 f501 	lsl.w	r5, r3, r1
 8005da4:	fa02 f606 	lsl.w	r6, r2, r6
 8005da8:	4335      	orrs	r5, r6
 8005daa:	fa22 f000 	lsr.w	r0, r2, r0
 8005dae:	4305      	orrs	r5, r0
 8005db0:	fa02 f401 	lsl.w	r4, r2, r1
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	440b      	add	r3, r1
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	ea44 0002 	orr.w	r0, r4, r2
 8005dd0:	ea45 0103 	orr.w	r1, r5, r3
 8005dd4:	460a      	mov	r2, r1
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	f107 0608 	add.w	r6, r7, #8
 8005ddc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005de0:	1c58      	adds	r0, r3, #1
 8005de2:	4603      	mov	r3, r0
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	4403      	add	r3, r0
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4433      	add	r3, r6
 8005dec:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 8005df0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8005df4:	3301      	adds	r3, #1
 8005df6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8005dfa:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8005dfe:	2b07      	cmp	r3, #7
 8005e00:	d9ba      	bls.n	8005d78 <processBeaconNotifyInd+0x2ac>
			for (i = 0; i < rsp.BeaconCount; i++) {
 8005e02:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005e06:	3301      	adds	r3, #1
 8005e08:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005e0c:	f107 0308 	add.w	r3, r7, #8
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	f4ff ae8b 	bcc.w	8005b34 <processBeaconNotifyInd+0x68>

			}
		}
		mtZdoCbs.pfnZdoBeaconNotifyInd(&rsp);
 8005e1e:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <processBeaconNotifyInd+0x368>)
 8005e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e22:	f107 0208 	add.w	r2, r7, #8
 8005e26:	4610      	mov	r0, r2
 8005e28:	4798      	blx	r3
	}
}
 8005e2a:	bf00      	nop
 8005e2c:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e34:	20000554 	.word	0x20000554
 8005e38:	0800ea10 	.word	0x0800ea10
 8005e3c:	0800ea24 	.word	0x0800ea24

08005e40 <processJoinCnf>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processJoinCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoJoinCnf) {
 8005e4c:	4b24      	ldr	r3, [pc, #144]	; (8005ee0 <processJoinCnf+0xa0>)
 8005e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d040      	beq.n	8005ed6 <processJoinCnf+0x96>
		uint8_t msgIdx = 2;
 8005e54:	2302      	movs	r3, #2
 8005e56:	73fb      	strb	r3, [r7, #15]
		JoinCnfFormat_t rsp;
		if (rpcLen < 5) {
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d802      	bhi.n	8005e64 <processJoinCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8005e5e:	4821      	ldr	r0, [pc, #132]	; (8005ee4 <processJoinCnf+0xa4>)
 8005e60:	f006 fb8e 	bl	800c580 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	4619      	mov	r1, r3
 8005e68:	481f      	ldr	r0, [pc, #124]	; (8005ee8 <processJoinCnf+0xa8>)
 8005e6a:	f006 fb15 	bl	800c498 <iprintf>

		rsp.Status = rpcBuff[msgIdx++];
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	73fa      	strb	r2, [r7, #15]
 8005e74:	461a      	mov	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4413      	add	r3, r2
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	723b      	strb	r3, [r7, #8]
		rsp.DevAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	4413      	add	r3, r2
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	440b      	add	r3, r1
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	4413      	add	r3, r2
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	73fb      	strb	r3, [r7, #15]
		rsp.ParentAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	440b      	add	r3, r1
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	3302      	adds	r3, #2
 8005ec8:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoJoinCnf(&rsp);
 8005eca:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <processJoinCnf+0xa0>)
 8005ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ece:	f107 0208 	add.w	r2, r7, #8
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4798      	blx	r3
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000554 	.word	0x20000554
 8005ee4:	0800ea10 	.word	0x0800ea10
 8005ee8:	0800ea24 	.word	0x0800ea24

08005eec <processNwkDiscoveryCnf>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNwkDiscoveryCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNwkDiscoveryCnf) {
 8005ef8:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <processNwkDiscoveryCnf+0x54>)
 8005efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01a      	beq.n	8005f36 <processNwkDiscoveryCnf+0x4a>
		uint8_t msgIdx = 2;
 8005f00:	2302      	movs	r3, #2
 8005f02:	73fb      	strb	r3, [r7, #15]
		NwkDiscoveryCnfFormat_t rsp;
		if (rpcLen < 1) {
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <processNwkDiscoveryCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8005f0a:	480e      	ldr	r0, [pc, #56]	; (8005f44 <processNwkDiscoveryCnf+0x58>)
 8005f0c:	f006 fb38 	bl	800c580 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	4619      	mov	r1, r3
 8005f14:	480c      	ldr	r0, [pc, #48]	; (8005f48 <processNwkDiscoveryCnf+0x5c>)
 8005f16:	f006 fabf 	bl	800c498 <iprintf>

		rsp.Status = rpcBuff[msgIdx++];
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	73fa      	strb	r2, [r7, #15]
 8005f20:	461a      	mov	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4413      	add	r3, r2
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	733b      	strb	r3, [r7, #12]

		mtZdoCbs.pfnZdoNwkDiscoveryCnf(&rsp);
 8005f2a:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <processNwkDiscoveryCnf+0x54>)
 8005f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f2e:	f107 020c 	add.w	r2, r7, #12
 8005f32:	4610      	mov	r0, r2
 8005f34:	4798      	blx	r3
	}
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000554 	.word	0x20000554
 8005f44:	0800ea10 	.word	0x0800ea10
 8005f48:	0800ea24 	.word	0x0800ea24

08005f4c <processLeaveInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processLeaveInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4e:	b08b      	sub	sp, #44	; 0x2c
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoLeaveInd) {
 8005f58:	4b41      	ldr	r3, [pc, #260]	; (8006060 <processLeaveInd+0x114>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d07b      	beq.n	8006058 <processLeaveInd+0x10c>
		uint8_t msgIdx = 2;
 8005f60:	2302      	movs	r3, #2
 8005f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		LeaveIndFormat_t rsp;
		if (rpcLen < 13) {
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	2b0c      	cmp	r3, #12
 8005f6a:	d802      	bhi.n	8005f72 <processLeaveInd+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8005f6c:	483d      	ldr	r0, [pc, #244]	; (8006064 <processLeaveInd+0x118>)
 8005f6e:	f006 fb07 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4413      	add	r3, r2
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f82:	3301      	adds	r3, #1
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	440b      	add	r3, r1
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	4413      	add	r3, r2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f9a:	3302      	adds	r3, #2
 8005f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		rsp.ExtAddr = 0;
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 8005fac:	2300      	movs	r3, #0
 8005fae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005fb2:	e029      	b.n	8006008 <processLeaveInd+0xbc>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8005fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8005fd0:	00c9      	lsls	r1, r1, #3
 8005fd2:	f1a1 0620 	sub.w	r6, r1, #32
 8005fd6:	f1c1 0020 	rsb	r0, r1, #32
 8005fda:	fa03 f501 	lsl.w	r5, r3, r1
 8005fde:	fa02 f606 	lsl.w	r6, r2, r6
 8005fe2:	4335      	orrs	r5, r6
 8005fe4:	fa22 f000 	lsr.w	r0, r2, r0
 8005fe8:	4305      	orrs	r5, r0
 8005fea:	fa02 f401 	lsl.w	r4, r2, r1
 8005fee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ff2:	ea40 0204 	orr.w	r2, r0, r4
 8005ff6:	ea41 0305 	orr.w	r3, r1, r5
 8005ffa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (i = 0; i < 8; i++) {
 8005ffe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006002:	3301      	adds	r3, #1
 8006004:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006008:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800600c:	2b07      	cmp	r3, #7
 800600e:	d9d1      	bls.n	8005fb4 <processLeaveInd+0x68>
		}
		rsp.Request = rpcBuff[msgIdx++];
 8006010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4413      	add	r3, r2
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	763b      	strb	r3, [r7, #24]
		rsp.Remove = rpcBuff[msgIdx++];
 8006024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800602e:	461a      	mov	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4413      	add	r3, r2
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	767b      	strb	r3, [r7, #25]
		rsp.Rejoin = rpcBuff[msgIdx++];
 8006038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8006042:	461a      	mov	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4413      	add	r3, r2
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	76bb      	strb	r3, [r7, #26]

		mtZdoCbs.pfnZdoLeaveInd(&rsp);
 800604c:	4b04      	ldr	r3, [pc, #16]	; (8006060 <processLeaveInd+0x114>)
 800604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006050:	f107 0208 	add.w	r2, r7, #8
 8006054:	4610      	mov	r0, r2
 8006056:	4798      	blx	r3
	}
}
 8006058:	bf00      	nop
 800605a:	372c      	adds	r7, #44	; 0x2c
 800605c:	46bd      	mov	sp, r7
 800605e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006060:	20000554 	.word	0x20000554
 8006064:	0800ea10 	.word	0x0800ea10

08006068 <processMsgCbIncoming>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMsgCbIncoming(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606a:	b08d      	sub	sp, #52	; 0x34
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMsgCbIncoming) {
 8006074:	4b6a      	ldr	r3, [pc, #424]	; (8006220 <processMsgCbIncoming+0x1b8>)
 8006076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 80cd 	beq.w	8006218 <processMsgCbIncoming+0x1b0>
		uint8_t msgIdx = 2;
 800607e:	2302      	movs	r3, #2
 8006080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		MsgCbIncomingFormat_t rsp;
		if (rpcLen < 9) {
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	2b08      	cmp	r3, #8
 8006088:	d802      	bhi.n	8006090 <processMsgCbIncoming+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 800608a:	4866      	ldr	r0, [pc, #408]	; (8006224 <processMsgCbIncoming+0x1bc>)
 800608c:	f006 fa78 	bl	800c580 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4413      	add	r3, r2
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b29a      	uxth	r2, r3
 800609c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060a0:	3301      	adds	r3, #1
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	440b      	add	r3, r1
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	4413      	add	r3, r2
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80060b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060b8:	3302      	adds	r3, #2
 80060ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		rsp.WasBroadcast = rpcBuff[msgIdx++];
 80060be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80060c8:	461a      	mov	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	72bb      	strb	r3, [r7, #10]
		rsp.ClusterID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80060d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	4413      	add	r3, r2
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b29a      	uxth	r2, r3
 80060de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060e2:	3301      	adds	r3, #1
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	440b      	add	r3, r1
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	4413      	add	r3, r2
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80060f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060fa:	3302      	adds	r3, #2
 80060fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		rsp.SecurityUse = rpcBuff[msgIdx++];
 8006100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800610a:	461a      	mov	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4413      	add	r3, r2
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	73bb      	strb	r3, [r7, #14]
		rsp.SeqNum = rpcBuff[msgIdx++];
 8006114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800611e:	461a      	mov	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4413      	add	r3, r2
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	73fb      	strb	r3, [r7, #15]
		rsp.MacDstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	4413      	add	r3, r2
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	b29a      	uxth	r2, r3
 8006134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006138:	3301      	adds	r3, #1
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	440b      	add	r3, r1
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	b29b      	uxth	r3, r3
 8006146:	4413      	add	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 800614c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006150:	3302      	adds	r3, #2
 8006152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		rsp.Status = rpcBuff[msgIdx++];
 8006156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8006160:	461a      	mov	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4413      	add	r3, r2
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	74bb      	strb	r3, [r7, #18]
		rsp.ExtAddr = 0;
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	e9c7 2306 	strd	r2, r3, [r7, #24]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 8006176:	2300      	movs	r3, #0
 8006178:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800617c:	e029      	b.n	80061d2 <processMsgCbIncoming+0x16a>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 800617e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800619a:	00c9      	lsls	r1, r1, #3
 800619c:	f1a1 0620 	sub.w	r6, r1, #32
 80061a0:	f1c1 0020 	rsb	r0, r1, #32
 80061a4:	fa03 f501 	lsl.w	r5, r3, r1
 80061a8:	fa02 f606 	lsl.w	r6, r2, r6
 80061ac:	4335      	orrs	r5, r6
 80061ae:	fa22 f000 	lsr.w	r0, r2, r0
 80061b2:	4305      	orrs	r5, r0
 80061b4:	fa02 f401 	lsl.w	r4, r2, r1
 80061b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80061bc:	ea40 0204 	orr.w	r2, r0, r4
 80061c0:	ea41 0305 	orr.w	r3, r1, r5
 80061c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for (i = 0; i < 8; i++) {
 80061c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80061cc:	3301      	adds	r3, #1
 80061ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80061d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80061d6:	2b07      	cmp	r3, #7
 80061d8:	d9d1      	bls.n	800617e <processMsgCbIncoming+0x116>
		}
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80061da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4413      	add	r3, r2
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061ea:	3301      	adds	r3, #1
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	440b      	add	r3, r1
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	4413      	add	r3, r2
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	843b      	strh	r3, [r7, #32]
		rsp.NotUsed = rpcBuff[msgIdx];
 80061fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4413      	add	r3, r2
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		mtZdoCbs.pfnZdoMsgCbIncoming(&rsp);
 800620c:	4b04      	ldr	r3, [pc, #16]	; (8006220 <processMsgCbIncoming+0x1b8>)
 800620e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006210:	f107 0208 	add.w	r2, r7, #8
 8006214:	4610      	mov	r0, r2
 8006216:	4798      	blx	r3
	}
}
 8006218:	bf00      	nop
 800621a:	3734      	adds	r7, #52	; 0x34
 800621c:	46bd      	mov	sp, r7
 800621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006220:	20000554 	.word	0x20000554
 8006224:	0800ea10 	.word	0x0800ea10

08006228 <zdoProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 ***********************************************************************************************/
void zdoProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	3301      	adds	r3, #1
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	49d7      	ldr	r1, [pc, #860]	; (80065a0 <zdoProcess+0x378>)
 8006242:	2004      	movs	r0, #4
 8006244:	f000 fb44 	bl	80068d0 <dbg_print>

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006250:	2b60      	cmp	r3, #96	; 0x60
 8006252:	d105      	bne.n	8006260 <zdoProcess+0x38>
		processSrsp(rpcBuff, rpcLen);
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fa93 	bl	8006784 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "zdoProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 800625e:	e26a      	b.n	8006736 <zdoProcess+0x50e>
		switch (rpcBuff[1]) {
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3301      	adds	r3, #1
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	3b80      	subs	r3, #128	; 0x80
 8006268:	2b7f      	cmp	r3, #127	; 0x7f
 800626a:	f200 8259 	bhi.w	8006720 <zdoProcess+0x4f8>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <zdoProcess+0x4c>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	08006489 	.word	0x08006489
 8006278:	0800649d 	.word	0x0800649d
 800627c:	080064b1 	.word	0x080064b1
 8006280:	080064c5 	.word	0x080064c5
 8006284:	080064d9 	.word	0x080064d9
 8006288:	080064ed 	.word	0x080064ed
 800628c:	08006501 	.word	0x08006501
 8006290:	08006721 	.word	0x08006721
 8006294:	08006721 	.word	0x08006721
 8006298:	08006721 	.word	0x08006721
 800629c:	08006721 	.word	0x08006721
 80062a0:	08006721 	.word	0x08006721
 80062a4:	08006721 	.word	0x08006721
 80062a8:	08006721 	.word	0x08006721
 80062ac:	08006721 	.word	0x08006721
 80062b0:	08006721 	.word	0x08006721
 80062b4:	08006515 	.word	0x08006515
 80062b8:	08006529 	.word	0x08006529
 80062bc:	08006721 	.word	0x08006721
 80062c0:	08006721 	.word	0x08006721
 80062c4:	0800653d 	.word	0x0800653d
 80062c8:	08006551 	.word	0x08006551
 80062cc:	08006721 	.word	0x08006721
 80062d0:	08006721 	.word	0x08006721
 80062d4:	08006721 	.word	0x08006721
 80062d8:	08006721 	.word	0x08006721
 80062dc:	08006721 	.word	0x08006721
 80062e0:	08006721 	.word	0x08006721
 80062e4:	08006721 	.word	0x08006721
 80062e8:	08006721 	.word	0x08006721
 80062ec:	08006721 	.word	0x08006721
 80062f0:	08006721 	.word	0x08006721
 80062f4:	08006565 	.word	0x08006565
 80062f8:	08006579 	.word	0x08006579
 80062fc:	0800658d 	.word	0x0800658d
 8006300:	08006721 	.word	0x08006721
 8006304:	08006721 	.word	0x08006721
 8006308:	08006721 	.word	0x08006721
 800630c:	08006721 	.word	0x08006721
 8006310:	08006721 	.word	0x08006721
 8006314:	08006721 	.word	0x08006721
 8006318:	08006721 	.word	0x08006721
 800631c:	08006721 	.word	0x08006721
 8006320:	08006721 	.word	0x08006721
 8006324:	08006721 	.word	0x08006721
 8006328:	08006721 	.word	0x08006721
 800632c:	08006721 	.word	0x08006721
 8006330:	08006721 	.word	0x08006721
 8006334:	080065e1 	.word	0x080065e1
 8006338:	080065f5 	.word	0x080065f5
 800633c:	08006609 	.word	0x08006609
 8006340:	0800661d 	.word	0x0800661d
 8006344:	08006631 	.word	0x08006631
 8006348:	08006645 	.word	0x08006645
 800634c:	08006659 	.word	0x08006659
 8006350:	08006721 	.word	0x08006721
 8006354:	08006721 	.word	0x08006721
 8006358:	08006721 	.word	0x08006721
 800635c:	08006721 	.word	0x08006721
 8006360:	08006721 	.word	0x08006721
 8006364:	08006721 	.word	0x08006721
 8006368:	08006721 	.word	0x08006721
 800636c:	08006721 	.word	0x08006721
 8006370:	08006721 	.word	0x08006721
 8006374:	08006475 	.word	0x08006475
 8006378:	0800666d 	.word	0x0800666d
 800637c:	08006681 	.word	0x08006681
 8006380:	08006695 	.word	0x08006695
 8006384:	080066a9 	.word	0x080066a9
 8006388:	080066bd 	.word	0x080066bd
 800638c:	080066d1 	.word	0x080066d1
 8006390:	080066e5 	.word	0x080066e5
 8006394:	08006721 	.word	0x08006721
 8006398:	080066f9 	.word	0x080066f9
 800639c:	08006721 	.word	0x08006721
 80063a0:	08006721 	.word	0x08006721
 80063a4:	08006721 	.word	0x08006721
 80063a8:	08006721 	.word	0x08006721
 80063ac:	08006721 	.word	0x08006721
 80063b0:	08006721 	.word	0x08006721
 80063b4:	08006721 	.word	0x08006721
 80063b8:	08006721 	.word	0x08006721
 80063bc:	08006721 	.word	0x08006721
 80063c0:	08006721 	.word	0x08006721
 80063c4:	08006721 	.word	0x08006721
 80063c8:	08006721 	.word	0x08006721
 80063cc:	08006721 	.word	0x08006721
 80063d0:	08006721 	.word	0x08006721
 80063d4:	08006721 	.word	0x08006721
 80063d8:	08006721 	.word	0x08006721
 80063dc:	08006721 	.word	0x08006721
 80063e0:	08006721 	.word	0x08006721
 80063e4:	08006721 	.word	0x08006721
 80063e8:	08006721 	.word	0x08006721
 80063ec:	08006721 	.word	0x08006721
 80063f0:	08006721 	.word	0x08006721
 80063f4:	08006721 	.word	0x08006721
 80063f8:	08006721 	.word	0x08006721
 80063fc:	08006721 	.word	0x08006721
 8006400:	08006721 	.word	0x08006721
 8006404:	08006721 	.word	0x08006721
 8006408:	08006721 	.word	0x08006721
 800640c:	08006721 	.word	0x08006721
 8006410:	08006721 	.word	0x08006721
 8006414:	08006721 	.word	0x08006721
 8006418:	08006721 	.word	0x08006721
 800641c:	08006721 	.word	0x08006721
 8006420:	08006721 	.word	0x08006721
 8006424:	08006721 	.word	0x08006721
 8006428:	08006721 	.word	0x08006721
 800642c:	08006721 	.word	0x08006721
 8006430:	08006721 	.word	0x08006721
 8006434:	08006721 	.word	0x08006721
 8006438:	08006721 	.word	0x08006721
 800643c:	08006721 	.word	0x08006721
 8006440:	08006721 	.word	0x08006721
 8006444:	08006721 	.word	0x08006721
 8006448:	08006721 	.word	0x08006721
 800644c:	08006721 	.word	0x08006721
 8006450:	08006721 	.word	0x08006721
 8006454:	08006721 	.word	0x08006721
 8006458:	08006721 	.word	0x08006721
 800645c:	08006721 	.word	0x08006721
 8006460:	08006721 	.word	0x08006721
 8006464:	08006721 	.word	0x08006721
 8006468:	08006721 	.word	0x08006721
 800646c:	08006721 	.word	0x08006721
 8006470:	0800670d 	.word	0x0800670d
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_STATE_CHANGE_IND\n");
 8006474:	494b      	ldr	r1, [pc, #300]	; (80065a4 <zdoProcess+0x37c>)
 8006476:	2004      	movs	r0, #4
 8006478:	f000 fa2a 	bl	80068d0 <dbg_print>
				processStateChange(rpcBuff, rpcLen);
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7fd faa9 	bl	80039d8 <processStateChange>
				break;
 8006486:	e156      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_NWK_ADDR_RSP\n");
 8006488:	4947      	ldr	r1, [pc, #284]	; (80065a8 <zdoProcess+0x380>)
 800648a:	2004      	movs	r0, #4
 800648c:	f000 fa20 	bl	80068d0 <dbg_print>
				processNwkAddrRsp(rpcBuff, rpcLen);
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7fd fc11 	bl	8003cbc <processNwkAddrRsp>
				break;
 800649a:	e14c      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_IEEE_ADDR_RSP\n");
 800649c:	4943      	ldr	r1, [pc, #268]	; (80065ac <zdoProcess+0x384>)
 800649e:	2004      	movs	r0, #4
 80064a0:	f000 fa16 	bl	80068d0 <dbg_print>
				processIeeeAddrRsp(rpcBuff, rpcLen);
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fd fcc7 	bl	8003e3c <processIeeeAddrRsp>
				break;
 80064ae:	e142      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_NODE_DESC_RSP\n");
 80064b0:	493f      	ldr	r1, [pc, #252]	; (80065b0 <zdoProcess+0x388>)
 80064b2:	2004      	movs	r0, #4
 80064b4:	f000 fa0c 	bl	80068d0 <dbg_print>
				processNodeDescRsp(rpcBuff, rpcLen);
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fd fd85 	bl	8003fcc <processNodeDescRsp>
				break;
 80064c2:	e138      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_POWER_DESC_RSP\n");
 80064c4:	493b      	ldr	r1, [pc, #236]	; (80065b4 <zdoProcess+0x38c>)
 80064c6:	2004      	movs	r0, #4
 80064c8:	f000 fa02 	bl	80068d0 <dbg_print>
				processPowerDescRsp(rpcBuff, rpcLen);
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7fd fe3f 	bl	8004154 <processPowerDescRsp>
				break;
 80064d6:	e12e      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_SIMPLE_DESC_RSP\n");
 80064d8:	4937      	ldr	r1, [pc, #220]	; (80065b8 <zdoProcess+0x390>)
 80064da:	2004      	movs	r0, #4
 80064dc:	f000 f9f8 	bl	80068d0 <dbg_print>
				processSimpleDescRsp(rpcBuff, rpcLen);
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7fd fe93 	bl	8004210 <processSimpleDescRsp>
				break;
 80064ea:	e124      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_ACTIVE_EP_RSP\n");
 80064ec:	4933      	ldr	r1, [pc, #204]	; (80065bc <zdoProcess+0x394>)
 80064ee:	2004      	movs	r0, #4
 80064f0:	f000 f9ee 	bl	80068d0 <dbg_print>
				processActiveEpRsp(rpcBuff, rpcLen);
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fd ff9b 	bl	8004434 <processActiveEpRsp>
				break;
 80064fe:	e11a      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MATCH_DESC_RSP\n");
 8006500:	492f      	ldr	r1, [pc, #188]	; (80065c0 <zdoProcess+0x398>)
 8006502:	2004      	movs	r0, #4
 8006504:	f000 f9e4 	bl	80068d0 <dbg_print>
				processMatchDescRsp(rpcBuff, rpcLen);
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7fe f811 	bl	8004534 <processMatchDescRsp>
				break;
 8006512:	e110      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_COMPLEX_DESC_RSP\n");
 8006514:	492b      	ldr	r1, [pc, #172]	; (80065c4 <zdoProcess+0x39c>)
 8006516:	2004      	movs	r0, #4
 8006518:	f000 f9da 	bl	80068d0 <dbg_print>
				processComplexDescRsp(rpcBuff, rpcLen);
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7fe f887 	bl	8004634 <processComplexDescRsp>
				break;
 8006526:	e106      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_USER_DESC_RSP\n");
 8006528:	4927      	ldr	r1, [pc, #156]	; (80065c8 <zdoProcess+0x3a0>)
 800652a:	2004      	movs	r0, #4
 800652c:	f000 f9d0 	bl	80068d0 <dbg_print>
				processUserDescRsp(rpcBuff, rpcLen);
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fe f8fd 	bl	8004734 <processUserDescRsp>
				break;
 800653a:	e0fc      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_USER_DESC_CONF\n");
 800653c:	4923      	ldr	r1, [pc, #140]	; (80065cc <zdoProcess+0x3a4>)
 800653e:	2004      	movs	r0, #4
 8006540:	f000 f9c6 	bl	80068d0 <dbg_print>
				processUserDescConf(rpcBuff, rpcLen);
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7fe f973 	bl	8004834 <processUserDescConf>
				break;
 800654e:	e0f2      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_SERVER_DISC_RSP\n");
 8006550:	491f      	ldr	r1, [pc, #124]	; (80065d0 <zdoProcess+0x3a8>)
 8006552:	2004      	movs	r0, #4
 8006554:	f000 f9bc 	bl	80068d0 <dbg_print>
				processServerDiscRsp(rpcBuff, rpcLen);
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7fe f9b7 	bl	80048d0 <processServerDiscRsp>
				break;
 8006562:	e0e8      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_END_DEVICE_BIND_RSP\n");
 8006564:	491b      	ldr	r1, [pc, #108]	; (80065d4 <zdoProcess+0x3ac>)
 8006566:	2004      	movs	r0, #4
 8006568:	f000 f9b2 	bl	80068d0 <dbg_print>
				processEndDeviceBindRsp(rpcBuff, rpcLen);
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7fe f9fb 	bl	800496c <processEndDeviceBindRsp>
				break;
 8006576:	e0de      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_BIND_RSP\n");
 8006578:	4917      	ldr	r1, [pc, #92]	; (80065d8 <zdoProcess+0x3b0>)
 800657a:	2004      	movs	r0, #4
 800657c:	f000 f9a8 	bl	80068d0 <dbg_print>
				processBindRsp(rpcBuff, rpcLen);
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7fe fa2d 	bl	80049e4 <processBindRsp>
				break;
 800658a:	e0d4      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_UNBIND_RSP\n");
 800658c:	4913      	ldr	r1, [pc, #76]	; (80065dc <zdoProcess+0x3b4>)
 800658e:	2004      	movs	r0, #4
 8006590:	f000 f99e 	bl	80068d0 <dbg_print>
				processUnbindRsp(rpcBuff, rpcLen);
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7fe fa5f 	bl	8004a5c <processUnbindRsp>
				break;
 800659e:	e0ca      	b.n	8006736 <zdoProcess+0x50e>
 80065a0:	0800ea34 	.word	0x0800ea34
 80065a4:	0800ea60 	.word	0x0800ea60
 80065a8:	0800ea88 	.word	0x0800ea88
 80065ac:	0800eaac 	.word	0x0800eaac
 80065b0:	0800ead0 	.word	0x0800ead0
 80065b4:	0800eaf4 	.word	0x0800eaf4
 80065b8:	0800eb18 	.word	0x0800eb18
 80065bc:	0800eb3c 	.word	0x0800eb3c
 80065c0:	0800eb60 	.word	0x0800eb60
 80065c4:	0800eb84 	.word	0x0800eb84
 80065c8:	0800ebac 	.word	0x0800ebac
 80065cc:	0800ebd0 	.word	0x0800ebd0
 80065d0:	0800ebf4 	.word	0x0800ebf4
 80065d4:	0800ec18 	.word	0x0800ec18
 80065d8:	0800ec40 	.word	0x0800ec40
 80065dc:	0800ec60 	.word	0x0800ec60
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_NWK_DISC_RSP\n");
 80065e0:	4957      	ldr	r1, [pc, #348]	; (8006740 <zdoProcess+0x518>)
 80065e2:	2004      	movs	r0, #4
 80065e4:	f000 f974 	bl	80068d0 <dbg_print>
				processMgmtNwkDiscRsp(rpcBuff, rpcLen);
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fe fa71 	bl	8004ad4 <processMgmtNwkDiscRsp>
				break;
 80065f2:	e0a0      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_LQI_RSP\n");
 80065f4:	4953      	ldr	r1, [pc, #332]	; (8006744 <zdoProcess+0x51c>)
 80065f6:	2004      	movs	r0, #4
 80065f8:	f000 f96a 	bl	80068d0 <dbg_print>
				processMgmtLqiRsp(rpcBuff, rpcLen);
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7fe fb93 	bl	8004d2c <processMgmtLqiRsp>
				break;
 8006606:	e096      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_RTG_RSP\n");
 8006608:	494f      	ldr	r1, [pc, #316]	; (8006748 <zdoProcess+0x520>)
 800660a:	2004      	movs	r0, #4
 800660c:	f000 f960 	bl	80068d0 <dbg_print>
				processMgmtRtgRsp(rpcBuff, rpcLen);
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7fe fd53 	bl	80050c0 <processMgmtRtgRsp>
				break;
 800661a:	e08c      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_BIND_RSP\n");
 800661c:	494b      	ldr	r1, [pc, #300]	; (800674c <zdoProcess+0x524>)
 800661e:	2004      	movs	r0, #4
 8006620:	f000 f956 	bl	80068d0 <dbg_print>
				processMgmtBindRsp(rpcBuff, rpcLen);
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fe fe31 	bl	8005290 <processMgmtBindRsp>
				break;
 800662e:	e082      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_LEAVE_RSP\n");
 8006630:	4947      	ldr	r1, [pc, #284]	; (8006750 <zdoProcess+0x528>)
 8006632:	2004      	movs	r0, #4
 8006634:	f000 f94c 	bl	80068d0 <dbg_print>
				processMgmtLeaveRsp(rpcBuff, rpcLen);
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7fe ffa3 	bl	8005588 <processMgmtLeaveRsp>
				break;
 8006642:	e078      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_DIRECT_JOIN_RSP\n");
 8006644:	4943      	ldr	r1, [pc, #268]	; (8006754 <zdoProcess+0x52c>)
 8006646:	2004      	movs	r0, #4
 8006648:	f000 f942 	bl	80068d0 <dbg_print>
				processMgmtDirectJoinRsp(rpcBuff, rpcLen);
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7fe ffd5 	bl	8005600 <processMgmtDirectJoinRsp>
				break;
 8006656:	e06e      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MGMT_PERMIT_JOIN_RSP\n");
 8006658:	493f      	ldr	r1, [pc, #252]	; (8006758 <zdoProcess+0x530>)
 800665a:	2004      	movs	r0, #4
 800665c:	f000 f938 	bl	80068d0 <dbg_print>
				processMgmtPermitJoinRsp(rpcBuff, rpcLen);
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff f807 	bl	8005678 <processMgmtPermitJoinRsp>
				break;
 800666a:	e064      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_END_DEVICE_ANNCE_IND\n");
 800666c:	493b      	ldr	r1, [pc, #236]	; (800675c <zdoProcess+0x534>)
 800666e:	2004      	movs	r0, #4
 8006670:	f000 f92e 	bl	80068d0 <dbg_print>
				processEndDeviceAnnceInd(rpcBuff, rpcLen);
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff f839 	bl	80056f0 <processEndDeviceAnnceInd>
				break;
 800667e:	e05a      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MATCH_DESC_RSP_SENT\n");
 8006680:	4937      	ldr	r1, [pc, #220]	; (8006760 <zdoProcess+0x538>)
 8006682:	2004      	movs	r0, #4
 8006684:	f000 f924 	bl	80068d0 <dbg_print>
				processMatchDescRspSent(rpcBuff, rpcLen);
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff f8c1 	bl	8005814 <processMatchDescRspSent>
				break;
 8006692:	e050      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_STATUS_ERROR_RSP\n");
 8006694:	4933      	ldr	r1, [pc, #204]	; (8006764 <zdoProcess+0x53c>)
 8006696:	2004      	movs	r0, #4
 8006698:	f000 f91a 	bl	80068d0 <dbg_print>
				processStatusErrorRsp(rpcBuff, rpcLen);
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff f957 	bl	8005954 <processStatusErrorRsp>
				break;
 80066a6:	e046      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_SRC_RTG_IND\n");
 80066a8:	492f      	ldr	r1, [pc, #188]	; (8006768 <zdoProcess+0x540>)
 80066aa:	2004      	movs	r0, #4
 80066ac:	f000 f910 	bl	80068d0 <dbg_print>
				processSrcRtgInd(rpcBuff, rpcLen);
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff f989 	bl	80059cc <processSrcRtgInd>
				break;
 80066ba:	e03c      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_BEACON_NOTIFY_IND\n");
 80066bc:	492b      	ldr	r1, [pc, #172]	; (800676c <zdoProcess+0x544>)
 80066be:	2004      	movs	r0, #4
 80066c0:	f000 f906 	bl	80068d0 <dbg_print>
				processBeaconNotifyInd(rpcBuff, rpcLen);
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff f9ff 	bl	8005acc <processBeaconNotifyInd>
				break;
 80066ce:	e032      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_JOIN_CNF\n");
 80066d0:	4927      	ldr	r1, [pc, #156]	; (8006770 <zdoProcess+0x548>)
 80066d2:	2004      	movs	r0, #4
 80066d4:	f000 f8fc 	bl	80068d0 <dbg_print>
				processJoinCnf(rpcBuff, rpcLen);
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff fbaf 	bl	8005e40 <processJoinCnf>
				break;
 80066e2:	e028      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_NWK_DISCOVERY_CNF\n");
 80066e4:	4923      	ldr	r1, [pc, #140]	; (8006774 <zdoProcess+0x54c>)
 80066e6:	2004      	movs	r0, #4
 80066e8:	f000 f8f2 	bl	80068d0 <dbg_print>
				processNwkDiscoveryCnf(rpcBuff, rpcLen);
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff fbfb 	bl	8005eec <processNwkDiscoveryCnf>
				break;
 80066f6:	e01e      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_LEAVE_IND\n");
 80066f8:	491f      	ldr	r1, [pc, #124]	; (8006778 <zdoProcess+0x550>)
 80066fa:	2004      	movs	r0, #4
 80066fc:	f000 f8e8 	bl	80068d0 <dbg_print>
				processLeaveInd(rpcBuff, rpcLen);
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff fc21 	bl	8005f4c <processLeaveInd>
				break;
 800670a:	e014      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_MSG_CB_INCOMING\n");
 800670c:	491b      	ldr	r1, [pc, #108]	; (800677c <zdoProcess+0x554>)
 800670e:	2004      	movs	r0, #4
 8006710:	f000 f8de 	bl	80068d0 <dbg_print>
				processMsgCbIncoming(rpcBuff, rpcLen);
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff fca5 	bl	8006068 <processMsgCbIncoming>
				break;
 800671e:	e00a      	b.n	8006736 <zdoProcess+0x50e>
				dbg_print(PRINT_LEVEL_WARNING, "zdoProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3301      	adds	r3, #1
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	4914      	ldr	r1, [pc, #80]	; (8006780 <zdoProcess+0x558>)
 800672e:	2001      	movs	r0, #1
 8006730:	f000 f8ce 	bl	80068d0 <dbg_print>
				break;
 8006734:	bf00      	nop
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	0800ec80 	.word	0x0800ec80
 8006744:	0800eca8 	.word	0x0800eca8
 8006748:	0800eccc 	.word	0x0800eccc
 800674c:	0800ecf0 	.word	0x0800ecf0
 8006750:	0800ed14 	.word	0x0800ed14
 8006754:	0800ed38 	.word	0x0800ed38
 8006758:	0800ed64 	.word	0x0800ed64
 800675c:	0800ed90 	.word	0x0800ed90
 8006760:	0800edbc 	.word	0x0800edbc
 8006764:	0800ede4 	.word	0x0800ede4
 8006768:	0800ee0c 	.word	0x0800ee0c
 800676c:	0800ee2c 	.word	0x0800ee2c
 8006770:	0800ee54 	.word	0x0800ee54
 8006774:	0800ee74 	.word	0x0800ee74
 8006778:	0800ee9c 	.word	0x0800ee9c
 800677c:	0800eebc 	.word	0x0800eebc
 8006780:	0800eee0 	.word	0x0800eee0

08006784 <processSrsp>:
 *
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	461a      	mov	r2, r3
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	480d      	ldr	r0, [pc, #52]	; (80067cc <processSrsp+0x48>)
 8006798:	f005 fe6a 	bl	800c470 <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3301      	adds	r3, #1
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b25      	cmp	r3, #37	; 0x25
 80067a4:	d109      	bne.n	80067ba <processSrsp+0x36>
		case MT_ZDO_GET_LINK_KEY:
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_GET_LINK_KEY\n");
 80067a6:	490a      	ldr	r1, [pc, #40]	; (80067d0 <processSrsp+0x4c>)
 80067a8:	2004      	movs	r0, #4
 80067aa:	f000 f891 	bl	80068d0 <dbg_print>
			processGetLinkKey(rpcBuff, rpcLen);
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fd fa0c 	bl	8003bd0 <processGetLinkKey>
			break;
 80067b8:	e004      	b.n	80067c4 <processSrsp+0x40>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message\n");
 80067ba:	4906      	ldr	r1, [pc, #24]	; (80067d4 <processSrsp+0x50>)
 80067bc:	2002      	movs	r0, #2
 80067be:	f000 f887 	bl	80068d0 <dbg_print>
			break;
 80067c2:	bf00      	nop
	}
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	200030a4 	.word	0x200030a4
 80067d0:	0800ef0c 	.word	0x0800ef0c
 80067d4:	0800ef30 	.word	0x0800ef30

080067d8 <zdoRegisterCallbacks>:
 *
 * @param
 *
 * @return
 */
void zdoRegisterCallbacks(mtZdoCb_t cbs) {
 80067d8:	b084      	sub	sp, #16
 80067da:	b580      	push	{r7, lr}
 80067dc:	af00      	add	r7, sp, #0
 80067de:	f107 0c08 	add.w	ip, r7, #8
 80067e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&mtZdoCbs, &cbs, sizeof(mtZdoCb_t));
 80067e6:	4b07      	ldr	r3, [pc, #28]	; (8006804 <zdoRegisterCallbacks+0x2c>)
 80067e8:	4618      	mov	r0, r3
 80067ea:	f107 0108 	add.w	r1, r7, #8
 80067ee:	2384      	movs	r3, #132	; 0x84
 80067f0:	461a      	mov	r2, r3
 80067f2:	f005 fe3d 	bl	800c470 <memcpy>
}
 80067f6:	bf00      	nop
 80067f8:	46bd      	mov	sp, r7
 80067fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067fe:	b004      	add	sp, #16
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20000554 	.word	0x20000554

08006808 <mtProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
void mtProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
	//Read CMD0
	switch (rpcBuff[0] & MT_RPC_SUBSYSTEM_MASK) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	3b01      	subs	r3, #1
 800681e:	2b0e      	cmp	r3, #14
 8006820:	d844      	bhi.n	80068ac <mtProcess+0xa4>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <mtProcess+0x20>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	08006871 	.word	0x08006871
 800682c:	080068ad 	.word	0x080068ad
 8006830:	080068ad 	.word	0x080068ad
 8006834:	0800687d 	.word	0x0800687d
 8006838:	08006865 	.word	0x08006865
 800683c:	08006889 	.word	0x08006889
 8006840:	08006895 	.word	0x08006895
 8006844:	080068ad 	.word	0x080068ad
 8006848:	080068ad 	.word	0x080068ad
 800684c:	080068ad 	.word	0x080068ad
 8006850:	080068ad 	.word	0x080068ad
 8006854:	080068ad 	.word	0x080068ad
 8006858:	080068ad 	.word	0x080068ad
 800685c:	080068ad 	.word	0x080068ad
 8006860:	080068a1 	.word	0x080068a1
		case MT_RPC_SYS_ZDO:
			//process ZDO RPC's in the ZDO module
			zdoProcess(rpcBuff, rpcLen);
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff fcdd 	bl	8006228 <zdoProcess>
			break;
 800686e:	e028      	b.n	80068c2 <mtProcess+0xba>

		case MT_RPC_SYS_SYS:
			//process SYS RPC's in the Sys module
			sysProcess(rpcBuff, rpcLen);
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7fc fef9 	bl	800366c <sysProcess>
			break;
 800687a:	e022      	b.n	80068c2 <mtProcess+0xba>

		case MT_RPC_SYS_AF:
			//process SYS RPC's in the Sys module
			afProcess(rpcBuff, rpcLen);
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7fb fc67 	bl	8002154 <afProcess>
			break;
 8006886:	e01c      	b.n	80068c2 <mtProcess+0xba>

		case MT_RPC_SYS_SAPI:
			//process SYS RPC's in the Sys module
			sapiProcess(rpcBuff, rpcLen);
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7fc f8f3 	bl	8002a78 <sapiProcess>
			break;
 8006892:	e016      	b.n	80068c2 <mtProcess+0xba>

		case MT_RPC_SYS_UTIL:
			//process SYS RPC's in the Util module
			utilProcess(rpcBuff, rpcLen);
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7fd f857 	bl	800394c <utilProcess>
			break;
 800689e:	e010      	b.n	80068c2 <mtProcess+0xba>

		case MT_RPC_SYS_APP_CFG:
			//process SYS RPC's in the App Cfg module
			appCfgProcess(rpcBuff, rpcLen);
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fb fdc9 	bl	800243c <appCfgProcess>
			break;
 80068aa:	e00a      	b.n	80068c2 <mtProcess+0xba>

		default:
			dbg_print(PRINT_LEVEL_VERBOSE, "mtProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3301      	adds	r3, #1
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	4904      	ldr	r1, [pc, #16]	; (80068cc <mtProcess+0xc4>)
 80068ba:	2004      	movs	r0, #4
 80068bc:	f000 f808 	bl	80068d0 <dbg_print>

			break;
 80068c0:	bf00      	nop
	}

}
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	0800ef54 	.word	0x0800ef54

080068d0 <dbg_print>:
 * None.
 *
 * @return      None.
 **************************************************************************************************
 */
void dbg_print(int print_level, const char *fmt, ...) {
 80068d0:	b40e      	push	{r1, r2, r3}
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b085      	sub	sp, #20
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
	static char working_buffer[256];

	if (print_level >= PRINT_LEVEL) {
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	dc0e      	bgt.n	80068fe <dbg_print+0x2e>
		return;
	}
	else {
		// Create vaarg list
		va_list args;
		va_start(args, fmt);
 80068e0:	f107 0320 	add.w	r3, r7, #32
 80068e4:	60fb      	str	r3, [r7, #12]

		// Write string to buffer
		vsnprintf(working_buffer, 256, fmt, args);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	69fa      	ldr	r2, [r7, #28]
 80068ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068ee:	4807      	ldr	r0, [pc, #28]	; (800690c <dbg_print+0x3c>)
 80068f0:	f006 f86c 	bl	800c9cc <vsniprintf>

		// Close vaarg list
		va_end(args);

		// send data
		log_print("%s", working_buffer);
 80068f4:	4905      	ldr	r1, [pc, #20]	; (800690c <dbg_print+0x3c>)
 80068f6:	4806      	ldr	r0, [pc, #24]	; (8006910 <dbg_print+0x40>)
 80068f8:	f7f9 feb4 	bl	8000664 <log_print>
 80068fc:	e000      	b.n	8006900 <dbg_print+0x30>
		return;
 80068fe:	bf00      	nop
	}
}
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006908:	b003      	add	sp, #12
 800690a:	4770      	bx	lr
 800690c:	200005d8 	.word	0x200005d8
 8006910:	0800ef80 	.word	0x0800ef80

08006914 <rpcTransportOpen>:
 *
 * @brief   opens the serial port to the CC253x.
 *
 * @return  status
 */
int32_t rpcTransportOpen(void) {
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
	// create queues
	rpc_q_uart_tx = xQueueCreate(256, sizeof(uint8_t));
 8006918:	2200      	movs	r2, #0
 800691a:	2101      	movs	r1, #1
 800691c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006920:	f003 fbc6 	bl	800a0b0 <xQueueGenericCreate>
 8006924:	4602      	mov	r2, r0
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <rpcTransportOpen+0x54>)
 8006928:	601a      	str	r2, [r3, #0]
	rpc_q_uart_rx = xQueueCreate(256, sizeof(uint8_t));
 800692a:	2200      	movs	r2, #0
 800692c:	2101      	movs	r1, #1
 800692e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006932:	f003 fbbd 	bl	800a0b0 <xQueueGenericCreate>
 8006936:	4602      	mov	r2, r0
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <rpcTransportOpen+0x58>)
 800693a:	601a      	str	r2, [r3, #0]

	// enable receive interrupt
	SET_BIT(hlpuart1.Instance->CR1, USART_CR1_RXNEIE);
 800693c:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <rpcTransportOpen+0x5c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <rpcTransportOpen+0x5c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0220 	orr.w	r2, r2, #32
 800694a:	601a      	str	r2, [r3, #0]

	// throw an error if one queue couldn't be created
	return (rpc_q_uart_tx == NULL || rpc_q_uart_rx == NULL) ? -1 : 0;
 800694c:	4b06      	ldr	r3, [pc, #24]	; (8006968 <rpcTransportOpen+0x54>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <rpcTransportOpen+0x48>
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <rpcTransportOpen+0x58>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <rpcTransportOpen+0x4e>
 800695c:	f04f 33ff 	mov.w	r3, #4294967295
 8006960:	e000      	b.n	8006964 <rpcTransportOpen+0x50>
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	bd80      	pop	{r7, pc}
 8006968:	200006d8 	.word	0x200006d8
 800696c:	200006dc 	.word	0x200006dc
 8006970:	20002fa0 	.word	0x20002fa0

08006974 <rpcTransportISR>:
/*********************************************************************
 * @fn      rpcTransportISR
 *
 * @brief   Interrupt Service Routine for RPC uart
 */
void rpcTransportISR(void) {
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
	// read status register
	isr_stat = hlpuart1.Instance->ISR;
 8006978:	4b23      	ldr	r3, [pc, #140]	; (8006a08 <rpcTransportISR+0x94>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	4a23      	ldr	r2, [pc, #140]	; (8006a0c <rpcTransportISR+0x98>)
 8006980:	6013      	str	r3, [r2, #0]

	// overrun error?
	if (isr_stat & USART_ISR_ORE)
 8006982:	4b22      	ldr	r3, [pc, #136]	; (8006a0c <rpcTransportISR+0x98>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <rpcTransportISR+0x2a>
		hlpuart1.Instance->ICR |= USART_ICR_ORECF;
 800698e:	4b1e      	ldr	r3, [pc, #120]	; (8006a08 <rpcTransportISR+0x94>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6a1a      	ldr	r2, [r3, #32]
 8006994:	4b1c      	ldr	r3, [pc, #112]	; (8006a08 <rpcTransportISR+0x94>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0208 	orr.w	r2, r2, #8
 800699c:	621a      	str	r2, [r3, #32]

	// check for rx interrupt
	if (isr_stat & USART_ISR_RXNE) {
 800699e:	4b1b      	ldr	r3, [pc, #108]	; (8006a0c <rpcTransportISR+0x98>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <rpcTransportISR+0x52>
		// read the data
		isr_data = hlpuart1.Instance->RDR & 0xFF;
 80069aa:	4b17      	ldr	r3, [pc, #92]	; (8006a08 <rpcTransportISR+0x94>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	4b16      	ldr	r3, [pc, #88]	; (8006a10 <rpcTransportISR+0x9c>)
 80069b6:	701a      	strb	r2, [r3, #0]

		// Transmit data to queue
		xQueueSendFromISR(rpc_q_uart_rx, (void* ) &isr_data, NULL);
 80069b8:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <rpcTransportISR+0xa0>)
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	2300      	movs	r3, #0
 80069be:	2200      	movs	r2, #0
 80069c0:	4913      	ldr	r1, [pc, #76]	; (8006a10 <rpcTransportISR+0x9c>)
 80069c2:	f003 fcd1 	bl	800a368 <xQueueGenericSendFromISR>
	}

	// check for data to send
	if (isr_stat & USART_ISR_TC) {
 80069c6:	4b11      	ldr	r3, [pc, #68]	; (8006a0c <rpcTransportISR+0x98>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d018      	beq.n	8006a04 <rpcTransportISR+0x90>
		// grab data from fifo
		if (xQueueReceiveFromISR(rpc_q_uart_tx, (void*) &isr_data, NULL) == pdFALSE) {
 80069d2:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <rpcTransportISR+0xa4>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2200      	movs	r2, #0
 80069d8:	490d      	ldr	r1, [pc, #52]	; (8006a10 <rpcTransportISR+0x9c>)
 80069da:	4618      	mov	r0, r3
 80069dc:	f003 ff3c 	bl	800a858 <xQueueReceiveFromISR>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d108      	bne.n	80069f8 <rpcTransportISR+0x84>
			// end of transmission, disable TX empty interrupt
			CLEAR_BIT(hlpuart1.Instance->CR1, USART_CR1_TCIE);
 80069e6:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <rpcTransportISR+0x94>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <rpcTransportISR+0x94>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f4:	601a      	str	r2, [r3, #0]
		else {
			// send another byte
			hlpuart1.Instance->TDR = isr_data;
		}
	}
}
 80069f6:	e005      	b.n	8006a04 <rpcTransportISR+0x90>
			hlpuart1.Instance->TDR = isr_data;
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <rpcTransportISR+0x9c>)
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	4b02      	ldr	r3, [pc, #8]	; (8006a08 <rpcTransportISR+0x94>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	b292      	uxth	r2, r2
 8006a02:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8006a04:	bf00      	nop
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20002fa0 	.word	0x20002fa0
 8006a0c:	200006e0 	.word	0x200006e0
 8006a10:	200006e4 	.word	0x200006e4
 8006a14:	200006dc 	.word	0x200006dc
 8006a18:	200006d8 	.word	0x200006d8

08006a1c <rpcTransportWrite>:
 * @param   buf - Buffer for data to be placed in
 * @param   len - Length of the given buffer
 *
 * @return  status
 */
void rpcTransportWrite(uint8_t *buf, uint8_t len) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
	for (uint16_t i = 0; i < len; i++) {
 8006a28:	2300      	movs	r3, #0
 8006a2a:	81fb      	strh	r3, [r7, #14]
 8006a2c:	e01b      	b.n	8006a66 <rpcTransportWrite+0x4a>
		// add data to tx queue
		xQueueSend(rpc_q_uart_tx, (void* ) &buf[i], 1);
 8006a2e:	4b12      	ldr	r3, [pc, #72]	; (8006a78 <rpcTransportWrite+0x5c>)
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	89fb      	ldrh	r3, [r7, #14]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	18d1      	adds	r1, r2, r3
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f003 fb9a 	bl	800a174 <xQueueGenericSend>

		// enable "RX Not Empty" and "TX Empty" interrupt
		SET_BIT(hlpuart1.Instance->CR1, USART_CR1_RXNEIE);
 8006a40:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <rpcTransportWrite+0x60>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <rpcTransportWrite+0x60>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0220 	orr.w	r2, r2, #32
 8006a4e:	601a      	str	r2, [r3, #0]
		SET_BIT(hlpuart1.Instance->CR1, USART_CR1_TCIE);
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <rpcTransportWrite+0x60>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <rpcTransportWrite+0x60>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a5e:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < len; i++) {
 8006a60:	89fb      	ldrh	r3, [r7, #14]
 8006a62:	3301      	adds	r3, #1
 8006a64:	81fb      	strh	r3, [r7, #14]
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	89fa      	ldrh	r2, [r7, #14]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d3de      	bcc.n	8006a2e <rpcTransportWrite+0x12>
	}
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	200006d8 	.word	0x200006d8
 8006a7c:	20002fa0 	.word	0x20002fa0

08006a80 <rpcTransportRead>:
 * @param   buf - Buffer for data to be placed in
 * @param   len - Length of the given buffer
 *
 * @return  amount of bytes read
 */
uint8_t rpcTransportRead(uint8_t *buf, uint8_t len) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
	int index = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]

	// keep waiting for data btyes
	while (xQueueReceive(rpc_q_uart_rx, &buf[index], 1) == pdTRUE) {
 8006a90:	e006      	b.n	8006aa0 <rpcTransportRead+0x20>
		// increment position in buffer
		index++;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3301      	adds	r3, #1
 8006a96:	60fb      	str	r3, [r7, #12]

		// all data received?
		if (index == len)
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d00c      	beq.n	8006aba <rpcTransportRead+0x3a>
	while (xQueueReceive(rpc_q_uart_rx, &buf[index], 1) == pdTRUE) {
 8006aa0:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <rpcTransportRead+0x48>)
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4619      	mov	r1, r3
 8006aae:	f003 fcef 	bl	800a490 <xQueueReceive>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d0ec      	beq.n	8006a92 <rpcTransportRead+0x12>
 8006ab8:	e000      	b.n	8006abc <rpcTransportRead+0x3c>
			break;
 8006aba:	bf00      	nop
	}

	// return the amount of data read
	return index;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	b2db      	uxtb	r3, r3
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	200006dc 	.word	0x200006dc

08006acc <rpcOpen>:
 *
 * @param   devicePath - path to the UART device
 *
 * @return  status
 */
int32_t rpcOpen(void) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
	// open RPC transport (create communication queues)
	if (rpcTransportOpen() < 0) {
 8006ad0:	f7ff ff20 	bl	8006914 <rpcTransportOpen>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	da06      	bge.n	8006ae8 <rpcOpen+0x1c>
		dbg_print(PRINT_LEVEL_ERROR, "rpcOpen: device open failed\n");
 8006ada:	490a      	ldr	r1, [pc, #40]	; (8006b04 <rpcOpen+0x38>)
 8006adc:	2000      	movs	r0, #0
 8006ade:	f7ff fef7 	bl	80068d0 <dbg_print>
		return (-1);
 8006ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae6:	e00a      	b.n	8006afe <rpcOpen+0x32>
	}

	// create binary semaphore
	srspSem = xSemaphoreCreateBinary();
 8006ae8:	2203      	movs	r2, #3
 8006aea:	2100      	movs	r1, #0
 8006aec:	2001      	movs	r0, #1
 8006aee:	f003 fadf 	bl	800a0b0 <xQueueGenericCreate>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <rpcOpen+0x3c>)
 8006af6:	601a      	str	r2, [r3, #0]

	// send force run command to CC2530
	rpcForceRun();
 8006af8:	f000 f84c 	bl	8006b94 <rpcForceRun>

	// return result
	return 0;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	0800ef84 	.word	0x0800ef84
 8006b08:	200006e8 	.word	0x200006e8

08006b0c <rpcInitMq>:
 *
 * @param   -
 *
 * @return  status
 */
int32_t rpcInitMq(void) {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
	llq_open(&rpcLlq);
 8006b10:	4802      	ldr	r0, [pc, #8]	; (8006b1c <rpcInitMq+0x10>)
 8006b12:	f000 faa1 	bl	8007058 <llq_open>
	return 0;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	200006f0 	.word	0x200006f0

08006b20 <rpcWaitMqClientMsg>:
 *
 * @param   -
 *
 * @return  status
 */
int32_t rpcWaitMqClientMsg(uint32_t timeout) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b0c4      	sub	sp, #272	; 0x110
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	6018      	str	r0, [r3, #0]
	uint8_t rpcFrame[RPC_MAX_LEN + 1];
	int32_t rpcLen;

	rpcLen = llq_timedreceive(&rpcLlq, (char*) rpcFrame, RPC_MAX_LEN + 1, timeout);
 8006b2a:	1d3b      	adds	r3, r7, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f107 0108 	add.w	r1, r7, #8
 8006b32:	f240 1201 	movw	r2, #257	; 0x101
 8006b36:	4814      	ldr	r0, [pc, #80]	; (8006b88 <rpcWaitMqClientMsg+0x68>)
 8006b38:	f000 fa9f 	bl	800707a <llq_timedreceive>
 8006b3c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	if (rpcLen != -1) {
 8006b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b48:	d010      	beq.n	8006b6c <rpcWaitMqClientMsg+0x4c>
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: processing MT[%d]\n", rpcLen);
 8006b4a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006b4e:	490f      	ldr	r1, [pc, #60]	; (8006b8c <rpcWaitMqClientMsg+0x6c>)
 8006b50:	2002      	movs	r0, #2
 8006b52:	f7ff febd 	bl	80068d0 <dbg_print>
		// process incoming message
		mtProcess(rpcFrame, rpcLen);
 8006b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	f107 0308 	add.w	r3, r7, #8
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff fe50 	bl	8006808 <mtProcess>
	else {
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: Timed out [%d]\n", rpcLen);
		return -1;
	}

	return 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e007      	b.n	8006b7c <rpcWaitMqClientMsg+0x5c>
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: Timed out [%d]\n", rpcLen);
 8006b6c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006b70:	4907      	ldr	r1, [pc, #28]	; (8006b90 <rpcWaitMqClientMsg+0x70>)
 8006b72:	2002      	movs	r0, #2
 8006b74:	f7ff feac 	bl	80068d0 <dbg_print>
		return -1;
 8006b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	200006f0 	.word	0x200006f0
 8006b8c:	0800f008 	.word	0x0800f008
 8006b90:	0800f030 	.word	0x0800f030

08006b94 <rpcForceRun>:
 *
 * @param   -
 *
 * @return  -
 */
void rpcForceRun(void) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
	uint8_t forceBoot = SB_FORCE_RUN;
 8006b9a:	2307      	movs	r3, #7
 8006b9c:	71fb      	strb	r3, [r7, #7]

	// send the bootloader force boot incase we have a bootloader that waits
	rpcTransportWrite(&forceBoot, 1);
 8006b9e:	1dfb      	adds	r3, r7, #7
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff ff3a 	bl	8006a1c <rpcTransportWrite>
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <rpcProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
int32_t rpcProcess(void) {
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	b0c3      	sub	sp, #268	; 0x10c
 8006bb4:	af00      	add	r7, sp, #0
	uint8_t rpcLen, rpcTempLen, bytesRead, sofByte, rpcBuffIdx;
	uint8_t retryAttempts = 0, len, rpcBuff[RPC_MAX_LEN];
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t fcs;

	//read first byte and check it is a SOF
	bytesRead = rpcTransportRead(&sofByte, 1);
 8006bbc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff ff5c 	bl	8006a80 <rpcTransportRead>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

	// did we recieve SOF?
	if ((sofByte == MT_RPC_SOF) && (bytesRead == 1))
 8006bce:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8006bd2:	2bfe      	cmp	r3, #254	; 0xfe
 8006bd4:	f040 8101 	bne.w	8006dda <rpcProcess+0x22a>
 8006bd8:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	f040 80fc 	bne.w	8006dda <rpcProcess+0x22a>
	{
		// clear retry counter
		retryAttempts = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

		// read length byte
		bytesRead = rpcTransportRead(&rpcLen, 1);
 8006be8:	f207 1301 	addw	r3, r7, #257	; 0x101
 8006bec:	2101      	movs	r1, #1
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff ff46 	bl	8006a80 <rpcTransportRead>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

		if (bytesRead == 1) {
 8006bfa:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	f040 80e4 	bne.w	8006dcc <rpcProcess+0x21c>
			len = rpcLen;
 8006c04:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006c08:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			rpcBuff[0] = rpcLen;
 8006c0c:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
 8006c10:	463b      	mov	r3, r7
 8006c12:	701a      	strb	r2, [r3, #0]

			//allocating RPC payload (+ cmd0, cmd1 and fcs)
			rpcLen += RPC_CMD0_FIELD_LEN + RPC_CMD1_FIELD_LEN + RPC_UART_FCS_LEN;
 8006c14:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006c18:	3303      	adds	r3, #3
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101

			//non blocking read, so we need to wait for the rpc to be read
			rpcBuffIdx = 1;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			rpcTempLen = rpcLen;
 8006c26:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006c2a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			while (rpcTempLen > 0) {
 8006c2e:	e04e      	b.n	8006cce <rpcProcess+0x11e>
				// read RPC frame
				bytesRead = rpcTransportRead(&(rpcBuff[rpcBuffIdx]), rpcTempLen);
 8006c30:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006c34:	463a      	mov	r2, r7
 8006c36:	4413      	add	r3, r2
 8006c38:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff ff1e 	bl	8006a80 <rpcTransportRead>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

				// check for error
				if (bytesRead > rpcTempLen) {
 8006c4a:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8006c4e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d923      	bls.n	8006c9e <rpcProcess+0xee>
					//there was an error
					dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: read of %d bytes failed - %s\n", rpcTempLen, strerror(errno));
 8006c56:	f897 4107 	ldrb.w	r4, [r7, #263]	; 0x107
 8006c5a:	f005 fbdf 	bl	800c41c <__errno>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f005 fe7a 	bl	800c95c <strerror>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	4622      	mov	r2, r4
 8006c6c:	495e      	ldr	r1, [pc, #376]	; (8006de8 <rpcProcess+0x238>)
 8006c6e:	2001      	movs	r0, #1
 8006c70:	f7ff fe2e 	bl	80068d0 <dbg_print>

					// check whether retry limits has been reached
					if (retryAttempts++ < 5) {
 8006c74:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d806      	bhi.n	8006c90 <rpcProcess+0xe0>
						// sleep for 10ms
						vTaskDelay(10);
 8006c82:	200a      	movs	r0, #10
 8006c84:	f004 f92c 	bl	800aee0 <vTaskDelay>

						// try again
						bytesRead = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8006c8e:	e006      	b.n	8006c9e <rpcProcess+0xee>
					}
					else {
						// something went wrong, abort
						dbg_print(PRINT_LEVEL_ERROR, "rpcProcess: transport read failed too many times\n");
 8006c90:	4956      	ldr	r1, [pc, #344]	; (8006dec <rpcProcess+0x23c>)
 8006c92:	2000      	movs	r0, #0
 8006c94:	f7ff fe1c 	bl	80068d0 <dbg_print>

						return -1;
 8006c98:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9c:	e09f      	b.n	8006dde <rpcProcess+0x22e>
					}
				}

				// update counters
				if (rpcTempLen > bytesRead) {
 8006c9e:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8006ca2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d907      	bls.n	8006cba <rpcProcess+0x10a>
					rpcTempLen -= bytesRead;
 8006caa:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8006cae:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8006cb8:	e002      	b.n	8006cc0 <rpcProcess+0x110>
				}
				else {
					rpcTempLen = 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				}
				rpcBuffIdx += bytesRead;
 8006cc0:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8006cc4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006cc8:	4413      	add	r3, r2
 8006cca:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			while (rpcTempLen > 0) {
 8006cce:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1ac      	bne.n	8006c30 <rpcProcess+0x80>
			}

			// print out incoming RPC frame
			printRpcMsg("SOC IN  <--", MT_RPC_SOF, len, &rpcBuff[1]);
 8006cd6:	463b      	mov	r3, r7
 8006cd8:	3301      	adds	r3, #1
 8006cda:	f897 2103 	ldrb.w	r2, [r7, #259]	; 0x103
 8006cde:	21fe      	movs	r1, #254	; 0xfe
 8006ce0:	4843      	ldr	r0, [pc, #268]	; (8006df0 <rpcProcess+0x240>)
 8006ce2:	f000 f967 	bl	8006fb4 <printRpcMsg>

			//Verify FCS of incoming MT frames
			fcs = calcFcs(&rpcBuff[0], (len + 3));
 8006ce6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8006cea:	3303      	adds	r3, #3
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	463b      	mov	r3, r7
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f942 	bl	8006f7c <calcFcs>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
			if (rpcBuff[len + 3] != fcs) {
 8006cfe:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8006d02:	3303      	adds	r3, #3
 8006d04:	463a      	mov	r2, r7
 8006d06:	5cd3      	ldrb	r3, [r2, r3]
 8006d08:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d00e      	beq.n	8006d2e <rpcProcess+0x17e>
				dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: fcs error %x:%x\n", rpcBuff[len + 3], fcs);
 8006d10:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8006d14:	3303      	adds	r3, #3
 8006d16:	463a      	mov	r2, r7
 8006d18:	5cd3      	ldrb	r3, [r2, r3]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8006d20:	4934      	ldr	r1, [pc, #208]	; (8006df4 <rpcProcess+0x244>)
 8006d22:	2001      	movs	r0, #1
 8006d24:	f7ff fdd4 	bl	80068d0 <dbg_print>
				return -1;
 8006d28:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2c:	e057      	b.n	8006dde <rpcProcess+0x22e>
			}

			if ((rpcBuff[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8006d2e:	463b      	mov	r3, r7
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006d36:	2b60      	cmp	r3, #96	; 0x60
 8006d38:	d136      	bne.n	8006da8 <rpcProcess+0x1f8>
				// SRSP command ID deteced
				if (expectedSrspCmdId == (rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK)) {
 8006d3a:	4b2f      	ldr	r3, [pc, #188]	; (8006df8 <rpcProcess+0x248>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	463b      	mov	r3, r7
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	f003 031f 	and.w	r3, r3, #31
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d120      	bne.n	8006d8e <rpcProcess+0x1de>
					dbg_print(PRINT_LEVEL_INFO, "rpcProcess: processing expected srsp [%02X]\n", rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK);
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	461a      	mov	r2, r3
 8006d56:	4929      	ldr	r1, [pc, #164]	; (8006dfc <rpcProcess+0x24c>)
 8006d58:	2002      	movs	r0, #2
 8006d5a:	f7ff fdb9 	bl	80068d0 <dbg_print>

					//unblock waiting sreq
					xSemaphoreGive(srspSem);
 8006d5e:	4b28      	ldr	r3, [pc, #160]	; (8006e00 <rpcProcess+0x250>)
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	2300      	movs	r3, #0
 8006d64:	2200      	movs	r2, #0
 8006d66:	2100      	movs	r1, #0
 8006d68:	f003 fa04 	bl	800a174 <xQueueGenericSend>

					dbg_print(PRINT_LEVEL_INFO, "rpcProcess: writing %d bytes SRSP to head of the queue\n", rpcLen);
 8006d6c:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006d70:	461a      	mov	r2, r3
 8006d72:	4924      	ldr	r1, [pc, #144]	; (8006e04 <rpcProcess+0x254>)
 8006d74:	2002      	movs	r0, #2
 8006d76:	f7ff fdab 	bl	80068d0 <dbg_print>

					// send message to queue
					llq_add(&rpcLlq, (char*) &rpcBuff[1], rpcLen, 1);
 8006d7a:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006d7e:	461a      	mov	r2, r3
 8006d80:	463b      	mov	r3, r7
 8006d82:	1c59      	adds	r1, r3, #1
 8006d84:	2301      	movs	r3, #1
 8006d86:	4820      	ldr	r0, [pc, #128]	; (8006e08 <rpcProcess+0x258>)
 8006d88:	f000 f9cb 	bl	8007122 <llq_add>
 8006d8c:	e01c      	b.n	8006dc8 <rpcProcess+0x218>
				}
				else {
					// unexpected SRSP discard
					dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: UNEXPECTED SREQ!: %02X%s:%02X%s", expectedSrspCmdId, (rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK));
 8006d8e:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <rpcProcess+0x248>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	463b      	mov	r3, r7
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	491b      	ldr	r1, [pc, #108]	; (8006e0c <rpcProcess+0x25c>)
 8006d9e:	2001      	movs	r0, #1
 8006da0:	f7ff fd96 	bl	80068d0 <dbg_print>
					return 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e01a      	b.n	8006dde <rpcProcess+0x22e>
				}
			}
			else {
				// should be AREQ frame
				dbg_print(PRINT_LEVEL_INFO, "rpcProcess: writing %d bytes AREQ to tail of the que\n", rpcLen);
 8006da8:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006dac:	461a      	mov	r2, r3
 8006dae:	4918      	ldr	r1, [pc, #96]	; (8006e10 <rpcProcess+0x260>)
 8006db0:	2002      	movs	r0, #2
 8006db2:	f7ff fd8d 	bl	80068d0 <dbg_print>

				// send message to queue
				llq_add(&rpcLlq, (char*) &rpcBuff[1], rpcLen, 0);
 8006db6:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006dba:	461a      	mov	r2, r3
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	1c59      	adds	r1, r3, #1
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4811      	ldr	r0, [pc, #68]	; (8006e08 <rpcProcess+0x258>)
 8006dc4:	f000 f9ad 	bl	8007122 <llq_add>
			}

			return 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e008      	b.n	8006dde <rpcProcess+0x22e>
		}
		else {
			dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: Len Not read [%x]\n", bytesRead);
 8006dcc:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4910      	ldr	r1, [pc, #64]	; (8006e14 <rpcProcess+0x264>)
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	f7ff fd7b 	bl	80068d0 <dbg_print>
		}
	}

	// nothing received yet
	return -1;
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd90      	pop	{r4, r7, pc}
 8006de8:	0800f054 	.word	0x0800f054
 8006dec:	0800f080 	.word	0x0800f080
 8006df0:	0800f0b4 	.word	0x0800f0b4
 8006df4:	0800f0c0 	.word	0x0800f0c0
 8006df8:	200006ec 	.word	0x200006ec
 8006dfc:	0800f0e0 	.word	0x0800f0e0
 8006e00:	200006e8 	.word	0x200006e8
 8006e04:	0800f110 	.word	0x0800f110
 8006e08:	200006f0 	.word	0x200006f0
 8006e0c:	0800f148 	.word	0x0800f148
 8006e10:	0800f174 	.word	0x0800f174
 8006e14:	0800f1ac 	.word	0x0800f1ac

08006e18 <rpcSendFrame>:
 *
 * @param   cmd0 System, cmd1 subsystem, ptr to payload, lenght of payload
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
uint8_t rpcSendFrame(uint8_t cmd0, uint8_t cmd1, uint8_t *payload, uint8_t payload_len) {
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	b0c5      	sub	sp, #276	; 0x114
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4608      	mov	r0, r1
 8006e22:	4639      	mov	r1, r7
 8006e24:	600a      	str	r2, [r1, #0]
 8006e26:	4619      	mov	r1, r3
 8006e28:	1dfb      	adds	r3, r7, #7
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	1dbb      	adds	r3, r7, #6
 8006e30:	4602      	mov	r2, r0
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	1d7b      	adds	r3, r7, #5
 8006e36:	460a      	mov	r2, r1
 8006e38:	701a      	strb	r2, [r3, #0]
	uint8_t buf[RPC_MAX_LEN];
	int32_t status = MT_RPC_SUCCESS;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	// block here if SREQ is in progress
	dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Sending RPC\n");
 8006e40:	4947      	ldr	r1, [pc, #284]	; (8006f60 <rpcSendFrame+0x148>)
 8006e42:	2002      	movs	r0, #2
 8006e44:	f7ff fd44 	bl	80068d0 <dbg_print>

	// fill in header bytes
	buf[0] = MT_RPC_SOF;
 8006e48:	f107 030c 	add.w	r3, r7, #12
 8006e4c:	22fe      	movs	r2, #254	; 0xfe
 8006e4e:	701a      	strb	r2, [r3, #0]
	buf[1] = payload_len;
 8006e50:	f107 030c 	add.w	r3, r7, #12
 8006e54:	1d7a      	adds	r2, r7, #5
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	705a      	strb	r2, [r3, #1]
	buf[2] = cmd0;
 8006e5a:	f107 030c 	add.w	r3, r7, #12
 8006e5e:	1dfa      	adds	r2, r7, #7
 8006e60:	7812      	ldrb	r2, [r2, #0]
 8006e62:	709a      	strb	r2, [r3, #2]
	buf[3] = cmd1;
 8006e64:	f107 030c 	add.w	r3, r7, #12
 8006e68:	1dba      	adds	r2, r7, #6
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	70da      	strb	r2, [r3, #3]

	if ((cmd0 & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ) {
 8006e6e:	1dfb      	adds	r3, r7, #7
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006e76:	2b20      	cmp	r3, #32
 8006e78:	d106      	bne.n	8006e88 <rpcSendFrame+0x70>
		// calculate expected SRSP
		expectedSrspCmdId = (cmd0 & MT_RPC_SUBSYSTEM_MASK);
 8006e7a:	1dfb      	adds	r3, r7, #7
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	4b37      	ldr	r3, [pc, #220]	; (8006f64 <rpcSendFrame+0x14c>)
 8006e86:	701a      	strb	r2, [r3, #0]
	}

	if (payload_len > 0) {
 8006e88:	1d7b      	adds	r3, r7, #5
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d009      	beq.n	8006ea4 <rpcSendFrame+0x8c>
		// copy payload to buffer
		memcpy(buf + RPC_UART_HDR_LEN, payload, payload_len);
 8006e90:	f107 030c 	add.w	r3, r7, #12
 8006e94:	3304      	adds	r3, #4
 8006e96:	1d7a      	adds	r2, r7, #5
 8006e98:	7812      	ldrb	r2, [r2, #0]
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	6809      	ldr	r1, [r1, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f005 fae6 	bl	800c470 <memcpy>
	}

	// calculate FCS field
	buf[payload_len + RPC_UART_HDR_LEN] = calcFcs(&buf[RPC_UART_FRAME_START_IDX], payload_len + RPC_HDR_LEN);
 8006ea4:	1d7b      	adds	r3, r7, #5
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	3303      	adds	r3, #3
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	1d7b      	adds	r3, r7, #5
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	1d1c      	adds	r4, r3, #4
 8006eb2:	f107 030c 	add.w	r3, r7, #12
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 f85e 	bl	8006f7c <calcFcs>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f107 030c 	add.w	r3, r7, #12
 8006ec8:	551a      	strb	r2, [r3, r4]

	// send out RPC  message
	rpcTransportWrite(buf, payload_len + RPC_UART_HDR_LEN + RPC_UART_FCS_LEN);
 8006eca:	1d7b      	adds	r3, r7, #5
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	3305      	adds	r3, #5
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	f107 030c 	add.w	r3, r7, #12
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff fd9f 	bl	8006a1c <rpcTransportWrite>

	// print out message to be sent
	printRpcMsg("SOC OUT -->", buf[0], payload_len, &buf[2]);
 8006ede:	f107 030c 	add.w	r3, r7, #12
 8006ee2:	7819      	ldrb	r1, [r3, #0]
 8006ee4:	f107 030c 	add.w	r3, r7, #12
 8006ee8:	1c98      	adds	r0, r3, #2
 8006eea:	1d7b      	adds	r3, r7, #5
 8006eec:	781a      	ldrb	r2, [r3, #0]
 8006eee:	4603      	mov	r3, r0
 8006ef0:	481d      	ldr	r0, [pc, #116]	; (8006f68 <rpcSendFrame+0x150>)
 8006ef2:	f000 f85f 	bl	8006fb4 <printRpcMsg>

	// wait for SRSP if necessary
	if ((cmd0 & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ) {
 8006ef6:	1dfb      	adds	r3, r7, #7
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d126      	bne.n	8006f50 <rpcSendFrame+0x138>
		// feedback
		dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: waiting for SRSP [%02x]\n", expectedSrspCmdId);
 8006f02:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <rpcSendFrame+0x14c>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	4918      	ldr	r1, [pc, #96]	; (8006f6c <rpcSendFrame+0x154>)
 8006f0a:	2002      	movs	r0, #2
 8006f0c:	f7ff fce0 	bl	80068d0 <dbg_print>

		// Wait for the SRSP
		if (xSemaphoreTake(srspSem, SRSP_TIMEOUT_MS) == pdFALSE) {
 8006f10:	4b17      	ldr	r3, [pc, #92]	; (8006f70 <rpcSendFrame+0x158>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f003 fb95 	bl	800a648 <xQueueSemaphoreTake>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10b      	bne.n	8006f3c <rpcSendFrame+0x124>
			dbg_print(PRINT_LEVEL_WARNING, "rpcSendFrame: SRSP Error - CMD0: 0x%02X CMD1: 0x%02X\n", cmd0, cmd1);
 8006f24:	1dfb      	adds	r3, r7, #7
 8006f26:	781a      	ldrb	r2, [r3, #0]
 8006f28:	1dbb      	adds	r3, r7, #6
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	4911      	ldr	r1, [pc, #68]	; (8006f74 <rpcSendFrame+0x15c>)
 8006f2e:	2001      	movs	r0, #1
 8006f30:	f7ff fcce 	bl	80068d0 <dbg_print>
			status = MT_RPC_ERR_SUBSYSTEM;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f3a:	e006      	b.n	8006f4a <rpcSendFrame+0x132>
		}
		else {
			dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Receive SRSP\n");
 8006f3c:	490e      	ldr	r1, [pc, #56]	; (8006f78 <rpcSendFrame+0x160>)
 8006f3e:	2002      	movs	r0, #2
 8006f40:	f7ff fcc6 	bl	80068d0 <dbg_print>
			status = MT_RPC_SUCCESS;
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		}

		//set expected SRSP to invalid
		expectedSrspCmdId = 0xFF;
 8006f4a:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <rpcSendFrame+0x14c>)
 8006f4c:	22ff      	movs	r2, #255	; 0xff
 8006f4e:	701a      	strb	r2, [r3, #0]
	}

	// return found status
	return status;
 8006f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f54:	b2db      	uxtb	r3, r3
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd90      	pop	{r4, r7, pc}
 8006f60:	0800f1cc 	.word	0x0800f1cc
 8006f64:	200006ec 	.word	0x200006ec
 8006f68:	0800f1e8 	.word	0x0800f1e8
 8006f6c:	0800f1f4 	.word	0x0800f1f4
 8006f70:	200006e8 	.word	0x200006e8
 8006f74:	0800f21c 	.word	0x0800f21c
 8006f78:	0800f254 	.word	0x0800f254

08006f7c <calcFcs>:
 * @param   msg  - pointer to the RPC general format frame message
 * @param   size - RPC general format frame size
 *
 * @return  FCS value
 */
static uint8_t calcFcs(uint8_t *msg, uint8_t size) {
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]

	// calculate FCS by XORing all bytes
	while (size--) {
 8006f8c:	e006      	b.n	8006f9c <calcFcs+0x20>
		result ^= *msg++;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	781a      	ldrb	r2, [r3, #0]
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	4053      	eors	r3, r2
 8006f9a:	73fb      	strb	r3, [r7, #15]
	while (size--) {
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	1e5a      	subs	r2, r3, #1
 8006fa0:	70fa      	strb	r2, [r7, #3]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f3      	bne.n	8006f8e <calcFcs+0x12>
	}

	return result;
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <printRpcMsg>:
 * @param   len - length byte
 * @param   msg  - pointer to the RPC message starting from Cmd0 byte
 *
 * @return  FCS value
 */
static void printRpcMsg(char *preMsg, uint8_t sof, uint8_t len, uint8_t *msg) {
 8006fb4:	b590      	push	{r4, r7, lr}
 8006fb6:	b08b      	sub	sp, #44	; 0x2c
 8006fb8:	af04      	add	r7, sp, #16
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	607b      	str	r3, [r7, #4]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	72fb      	strb	r3, [r7, #11]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	// print headers
	dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, "%s %d Bytes: SOF:%02X, Len:%02X, CMD0:%02X, CMD1:%02X, Payload:", preMsg, len + 5, sof, len, msg[0], msg[1]);
 8006fc6:	7abb      	ldrb	r3, [r7, #10]
 8006fc8:	1d58      	adds	r0, r3, #5
 8006fca:	7afb      	ldrb	r3, [r7, #11]
 8006fcc:	7aba      	ldrb	r2, [r7, #10]
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	7809      	ldrb	r1, [r1, #0]
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	3101      	adds	r1, #1
 8006fd8:	7809      	ldrb	r1, [r1, #0]
 8006fda:	9103      	str	r1, [sp, #12]
 8006fdc:	9402      	str	r4, [sp, #8]
 8006fde:	9201      	str	r2, [sp, #4]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4917      	ldr	r1, [pc, #92]	; (8007044 <printRpcMsg+0x90>)
 8006fe8:	2003      	movs	r0, #3
 8006fea:	f7ff fc71 	bl	80068d0 <dbg_print>

	// print frame payload
	for (i = 2; i < len + 2; i++) {
 8006fee:	2302      	movs	r3, #2
 8006ff0:	75fb      	strb	r3, [r7, #23]
 8006ff2:	e014      	b.n	800701e <printRpcMsg+0x6a>
		dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, "%02X%s", msg[i], i < (len + 2 - 1) ? ":" : ",");
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	7dfa      	ldrb	r2, [r7, #23]
 8007000:	7abb      	ldrb	r3, [r7, #10]
 8007002:	3301      	adds	r3, #1
 8007004:	429a      	cmp	r2, r3
 8007006:	da01      	bge.n	800700c <printRpcMsg+0x58>
 8007008:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <printRpcMsg+0x94>)
 800700a:	e000      	b.n	800700e <printRpcMsg+0x5a>
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <printRpcMsg+0x98>)
 800700e:	460a      	mov	r2, r1
 8007010:	490f      	ldr	r1, [pc, #60]	; (8007050 <printRpcMsg+0x9c>)
 8007012:	2003      	movs	r0, #3
 8007014:	f7ff fc5c 	bl	80068d0 <dbg_print>
	for (i = 2; i < len + 2; i++) {
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	3301      	adds	r3, #1
 800701c:	75fb      	strb	r3, [r7, #23]
 800701e:	7dfa      	ldrb	r2, [r7, #23]
 8007020:	7abb      	ldrb	r3, [r7, #10]
 8007022:	3302      	adds	r3, #2
 8007024:	429a      	cmp	r2, r3
 8007026:	dbe5      	blt.n	8006ff4 <printRpcMsg+0x40>
	}

	// print FCS
	dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, " FCS:%02X\n", msg[i]);
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	4413      	add	r3, r2
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	4908      	ldr	r1, [pc, #32]	; (8007054 <printRpcMsg+0xa0>)
 8007034:	2003      	movs	r0, #3
 8007036:	f7ff fc4b 	bl	80068d0 <dbg_print>

}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	bd90      	pop	{r4, r7, pc}
 8007042:	bf00      	nop
 8007044:	0800f270 	.word	0x0800f270
 8007048:	0800f2b0 	.word	0x0800f2b0
 800704c:	0800f2b4 	.word	0x0800f2b4
 8007050:	0800f2b8 	.word	0x0800f2b8
 8007054:	0800f2c0 	.word	0x0800f2c0

08007058 <llq_open>:
 *
 * @param    llq_t *hndl - handle to queue to be created
 *
 * @return   none
 */
void llq_open(llq_t *hndl) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
	hndl->queue = xQueueCreate(Q_SIZE, sizeof(queue_data_t));
 8007060:	2200      	movs	r2, #0
 8007062:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007066:	2008      	movs	r0, #8
 8007068:	f003 f822 	bl	800a0b0 <xQueueGenericCreate>
 800706c:	4602      	mov	r2, r0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	601a      	str	r2, [r3, #0]
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <llq_timedreceive>:
 * @Param	int maxLength - Max length of message to read
 * @Param	struct timespec * timeout - Timeout value
 *
 * @return   length of message read from queue
 */
int llq_timedreceive(llq_t *hndl, char *buffer, int maxLength, int timeout) {
 800707a:	b590      	push	{r4, r7, lr}
 800707c:	b0c9      	sub	sp, #292	; 0x124
 800707e:	af00      	add	r7, sp, #0
 8007080:	f107 040c 	add.w	r4, r7, #12
 8007084:	6020      	str	r0, [r4, #0]
 8007086:	f107 0008 	add.w	r0, r7, #8
 800708a:	6001      	str	r1, [r0, #0]
 800708c:	1d39      	adds	r1, r7, #4
 800708e:	600a      	str	r2, [r1, #0]
 8007090:	463a      	mov	r2, r7
 8007092:	6013      	str	r3, [r2, #0]
	int sepmRnt = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	queue_data_t q_buf = { 0 };
 800709a:	f107 0314 	add.w	r3, r7, #20
 800709e:	4618      	mov	r0, r3
 80070a0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80070a4:	461a      	mov	r2, r3
 80070a6:	2100      	movs	r1, #0
 80070a8:	f005 f9ed 	bl	800c486 <memset>

	// wait for a message or timeout
	if (xQueueReceive(hndl->queue, &q_buf, timeout) != pdTRUE) {
 80070ac:	f107 030c 	add.w	r3, r7, #12
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	463b      	mov	r3, r7
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	f107 0314 	add.w	r3, r7, #20
 80070bc:	4619      	mov	r1, r3
 80070be:	f003 f9e7 	bl	800a490 <xQueueReceive>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d003      	beq.n	80070d0 <llq_timedreceive+0x56>
		sepmRnt = -1;
 80070c8:	f04f 33ff 	mov.w	r3, #4294967295
 80070cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}

	int rLength = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	// we read with success?
	if (sepmRnt != -1) {
 80070d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d015      	beq.n	800710c <llq_timedreceive+0x92>
		rLength = MIN(q_buf.len, maxLength);
 80070e0:	f107 0314 	add.w	r3, r7, #20
 80070e4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80070e8:	461a      	mov	r2, r3
 80070ea:	1d3b      	adds	r3, r7, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4293      	cmp	r3, r2
 80070f0:	bfa8      	it	ge
 80070f2:	4613      	movge	r3, r2
 80070f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		memcpy(buffer, q_buf.data, rLength);
 80070f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80070fc:	f107 0114 	add.w	r1, r7, #20
 8007100:	f107 0308 	add.w	r3, r7, #8
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	f005 f9b3 	bl	800c470 <memcpy>
 800710a:	e003      	b.n	8007114 <llq_timedreceive+0x9a>
	}
	// error in read
	else {
		rLength = -1;
 800710c:	f04f 33ff 	mov.w	r3, #4294967295
 8007110:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	}

	// return
	return rLength;
 8007114:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8007118:	4618      	mov	r0, r3
 800711a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800711e:	46bd      	mov	sp, r7
 8007120:	bd90      	pop	{r4, r7, pc}

08007122 <llq_add>:
 * @Param	int prio - 1 message has priority and should be added to
 * 			head of queue, 0 message assed to tail of queue
 *
 * @return   length of message read from queue
 */
int llq_add(llq_t *hndl, char *buffer, int len, int prio) {
 8007122:	b590      	push	{r4, r7, lr}
 8007124:	b0c7      	sub	sp, #284	; 0x11c
 8007126:	af00      	add	r7, sp, #0
 8007128:	f107 040c 	add.w	r4, r7, #12
 800712c:	6020      	str	r0, [r4, #0]
 800712e:	f107 0008 	add.w	r0, r7, #8
 8007132:	6001      	str	r1, [r0, #0]
 8007134:	1d39      	adds	r1, r7, #4
 8007136:	600a      	str	r2, [r1, #0]
 8007138:	463a      	mov	r2, r7
 800713a:	6013      	str	r3, [r2, #0]
	int ret = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	queue_data_t q_buf = { 0 };
 8007142:	f107 0310 	add.w	r3, r7, #16
 8007146:	4618      	mov	r0, r3
 8007148:	f44f 7381 	mov.w	r3, #258	; 0x102
 800714c:	461a      	mov	r2, r3
 800714e:	2100      	movs	r1, #0
 8007150:	f005 f999 	bl	800c486 <memset>

	// length
	q_buf.len = MIN(Q_FRAME_SIZE, len);
 8007154:	1d3b      	adds	r3, r7, #4
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800715c:	bfa8      	it	ge
 800715e:	f44f 7380 	movge.w	r3, #256	; 0x100
 8007162:	b29a      	uxth	r2, r3
 8007164:	f107 0310 	add.w	r3, r7, #16
 8007168:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	// data
	memcpy(q_buf.data, buffer, q_buf.len);
 800716c:	f107 0310 	add.w	r3, r7, #16
 8007170:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8007174:	461a      	mov	r2, r3
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	f107 0010 	add.w	r0, r7, #16
 800717e:	6819      	ldr	r1, [r3, #0]
 8007180:	f005 f976 	bl	800c470 <memcpy>

	if (prio == 1) {
 8007184:	463b      	mov	r3, r7
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d10a      	bne.n	80071a2 <llq_add+0x80>
		xQueueSendToFront(hndl->queue, &q_buf, 10);
 800718c:	f107 030c 	add.w	r3, r7, #12
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	f107 0110 	add.w	r1, r7, #16
 8007198:	2301      	movs	r3, #1
 800719a:	220a      	movs	r2, #10
 800719c:	f002 ffea 	bl	800a174 <xQueueGenericSend>
 80071a0:	e009      	b.n	80071b6 <llq_add+0x94>
	}
	else {
		xQueueSendToBack(hndl->queue, &q_buf, 10);
 80071a2:	f107 030c 	add.w	r3, r7, #12
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	f107 0110 	add.w	r1, r7, #16
 80071ae:	2300      	movs	r3, #0
 80071b0:	220a      	movs	r2, #10
 80071b2:	f002 ffdf 	bl	800a174 <xQueueGenericSend>
	}

	return ret;
 80071b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd90      	pop	{r4, r7, pc}

080071c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071ce:	2003      	movs	r0, #3
 80071d0:	f000 f8db 	bl	800738a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80071d4:	2000      	movs	r0, #0
 80071d6:	f7fa f865 	bl	80012a4 <HAL_InitTick>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	71fb      	strb	r3, [r7, #7]
 80071e4:	e001      	b.n	80071ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80071e6:	f7fa f835 	bl	8001254 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80071ea:	79fb      	ldrb	r3, [r7, #7]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <HAL_IncTick+0x1c>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <HAL_IncTick+0x20>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4413      	add	r3, r2
 8007202:	4a03      	ldr	r2, [pc, #12]	; (8007210 <HAL_IncTick+0x1c>)
 8007204:	6013      	str	r3, [r2, #0]
}
 8007206:	bf00      	nop
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	200031a4 	.word	0x200031a4
 8007214:	200000e8 	.word	0x200000e8

08007218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  return uwTick;
 800721c:	4b03      	ldr	r3, [pc, #12]	; (800722c <HAL_GetTick+0x14>)
 800721e:	681b      	ldr	r3, [r3, #0]
}
 8007220:	4618      	mov	r0, r3
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	200031a4 	.word	0x200031a4

08007230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007240:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <__NVIC_SetPriorityGrouping+0x44>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800724c:	4013      	ands	r3, r2
 800724e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800725c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007262:	4a04      	ldr	r2, [pc, #16]	; (8007274 <__NVIC_SetPriorityGrouping+0x44>)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	60d3      	str	r3, [r2, #12]
}
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	e000ed00 	.word	0xe000ed00

08007278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <__NVIC_GetPriorityGrouping+0x18>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	0a1b      	lsrs	r3, r3, #8
 8007282:	f003 0307 	and.w	r3, r3, #7
}
 8007286:	4618      	mov	r0, r3
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	e000ed00 	.word	0xe000ed00

08007294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800729e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	db0b      	blt.n	80072be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	f003 021f 	and.w	r2, r3, #31
 80072ac:	4907      	ldr	r1, [pc, #28]	; (80072cc <__NVIC_EnableIRQ+0x38>)
 80072ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	2001      	movs	r0, #1
 80072b6:	fa00 f202 	lsl.w	r2, r0, r2
 80072ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	e000e100 	.word	0xe000e100

080072d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	6039      	str	r1, [r7, #0]
 80072da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db0a      	blt.n	80072fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	490c      	ldr	r1, [pc, #48]	; (800731c <__NVIC_SetPriority+0x4c>)
 80072ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ee:	0112      	lsls	r2, r2, #4
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	440b      	add	r3, r1
 80072f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072f8:	e00a      	b.n	8007310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	4908      	ldr	r1, [pc, #32]	; (8007320 <__NVIC_SetPriority+0x50>)
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	3b04      	subs	r3, #4
 8007308:	0112      	lsls	r2, r2, #4
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	440b      	add	r3, r1
 800730e:	761a      	strb	r2, [r3, #24]
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	e000e100 	.word	0xe000e100
 8007320:	e000ed00 	.word	0xe000ed00

08007324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007324:	b480      	push	{r7}
 8007326:	b089      	sub	sp, #36	; 0x24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	f1c3 0307 	rsb	r3, r3, #7
 800733e:	2b04      	cmp	r3, #4
 8007340:	bf28      	it	cs
 8007342:	2304      	movcs	r3, #4
 8007344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	3304      	adds	r3, #4
 800734a:	2b06      	cmp	r3, #6
 800734c:	d902      	bls.n	8007354 <NVIC_EncodePriority+0x30>
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	3b03      	subs	r3, #3
 8007352:	e000      	b.n	8007356 <NVIC_EncodePriority+0x32>
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007358:	f04f 32ff 	mov.w	r2, #4294967295
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	43da      	mvns	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	401a      	ands	r2, r3
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800736c:	f04f 31ff 	mov.w	r1, #4294967295
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	fa01 f303 	lsl.w	r3, r1, r3
 8007376:	43d9      	mvns	r1, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800737c:	4313      	orrs	r3, r2
         );
}
 800737e:	4618      	mov	r0, r3
 8007380:	3724      	adds	r7, #36	; 0x24
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff ff4c 	bl	8007230 <__NVIC_SetPriorityGrouping>
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80073b2:	f7ff ff61 	bl	8007278 <__NVIC_GetPriorityGrouping>
 80073b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	6978      	ldr	r0, [r7, #20]
 80073be:	f7ff ffb1 	bl	8007324 <NVIC_EncodePriority>
 80073c2:	4602      	mov	r2, r0
 80073c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff ff80 	bl	80072d0 <__NVIC_SetPriority>
}
 80073d0:	bf00      	nop
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff ff54 	bl	8007294 <__NVIC_EnableIRQ>
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007402:	e166      	b.n	80076d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	2101      	movs	r1, #1
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	fa01 f303 	lsl.w	r3, r1, r3
 8007410:	4013      	ands	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 8158 	beq.w	80076cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d00b      	beq.n	800743c <HAL_GPIO_Init+0x48>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d007      	beq.n	800743c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007430:	2b11      	cmp	r3, #17
 8007432:	d003      	beq.n	800743c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b12      	cmp	r3, #18
 800743a:	d130      	bne.n	800749e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	2203      	movs	r2, #3
 8007448:	fa02 f303 	lsl.w	r3, r2, r3
 800744c:	43db      	mvns	r3, r3
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4013      	ands	r3, r2
 8007452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007472:	2201      	movs	r2, #1
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	43db      	mvns	r3, r3
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4013      	ands	r3, r2
 8007480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	091b      	lsrs	r3, r3, #4
 8007488:	f003 0201 	and.w	r2, r3, #1
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	fa02 f303 	lsl.w	r3, r2, r3
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	2203      	movs	r2, #3
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	43db      	mvns	r3, r3
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4013      	ands	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d003      	beq.n	80074de <HAL_GPIO_Init+0xea>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b12      	cmp	r3, #18
 80074dc:	d123      	bne.n	8007526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	08da      	lsrs	r2, r3, #3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3208      	adds	r2, #8
 80074e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	220f      	movs	r2, #15
 80074f6:	fa02 f303 	lsl.w	r3, r2, r3
 80074fa:	43db      	mvns	r3, r3
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4013      	ands	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	691a      	ldr	r2, [r3, #16]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	fa02 f303 	lsl.w	r3, r2, r3
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	08da      	lsrs	r2, r3, #3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3208      	adds	r2, #8
 8007520:	6939      	ldr	r1, [r7, #16]
 8007522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	2203      	movs	r2, #3
 8007532:	fa02 f303 	lsl.w	r3, r2, r3
 8007536:	43db      	mvns	r3, r3
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4013      	ands	r3, r2
 800753c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f003 0203 	and.w	r2, r3, #3
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	fa02 f303 	lsl.w	r3, r2, r3
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	4313      	orrs	r3, r2
 8007552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 80b2 	beq.w	80076cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007568:	4b61      	ldr	r3, [pc, #388]	; (80076f0 <HAL_GPIO_Init+0x2fc>)
 800756a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756c:	4a60      	ldr	r2, [pc, #384]	; (80076f0 <HAL_GPIO_Init+0x2fc>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	6613      	str	r3, [r2, #96]	; 0x60
 8007574:	4b5e      	ldr	r3, [pc, #376]	; (80076f0 <HAL_GPIO_Init+0x2fc>)
 8007576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	60bb      	str	r3, [r7, #8]
 800757e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007580:	4a5c      	ldr	r2, [pc, #368]	; (80076f4 <HAL_GPIO_Init+0x300>)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	089b      	lsrs	r3, r3, #2
 8007586:	3302      	adds	r3, #2
 8007588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800758c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f003 0303 	and.w	r3, r3, #3
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	220f      	movs	r2, #15
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	43db      	mvns	r3, r3
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4013      	ands	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80075aa:	d02b      	beq.n	8007604 <HAL_GPIO_Init+0x210>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a52      	ldr	r2, [pc, #328]	; (80076f8 <HAL_GPIO_Init+0x304>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d025      	beq.n	8007600 <HAL_GPIO_Init+0x20c>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a51      	ldr	r2, [pc, #324]	; (80076fc <HAL_GPIO_Init+0x308>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d01f      	beq.n	80075fc <HAL_GPIO_Init+0x208>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a50      	ldr	r2, [pc, #320]	; (8007700 <HAL_GPIO_Init+0x30c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d019      	beq.n	80075f8 <HAL_GPIO_Init+0x204>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a4f      	ldr	r2, [pc, #316]	; (8007704 <HAL_GPIO_Init+0x310>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d013      	beq.n	80075f4 <HAL_GPIO_Init+0x200>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a4e      	ldr	r2, [pc, #312]	; (8007708 <HAL_GPIO_Init+0x314>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00d      	beq.n	80075f0 <HAL_GPIO_Init+0x1fc>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a4d      	ldr	r2, [pc, #308]	; (800770c <HAL_GPIO_Init+0x318>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d007      	beq.n	80075ec <HAL_GPIO_Init+0x1f8>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a4c      	ldr	r2, [pc, #304]	; (8007710 <HAL_GPIO_Init+0x31c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d101      	bne.n	80075e8 <HAL_GPIO_Init+0x1f4>
 80075e4:	2307      	movs	r3, #7
 80075e6:	e00e      	b.n	8007606 <HAL_GPIO_Init+0x212>
 80075e8:	2308      	movs	r3, #8
 80075ea:	e00c      	b.n	8007606 <HAL_GPIO_Init+0x212>
 80075ec:	2306      	movs	r3, #6
 80075ee:	e00a      	b.n	8007606 <HAL_GPIO_Init+0x212>
 80075f0:	2305      	movs	r3, #5
 80075f2:	e008      	b.n	8007606 <HAL_GPIO_Init+0x212>
 80075f4:	2304      	movs	r3, #4
 80075f6:	e006      	b.n	8007606 <HAL_GPIO_Init+0x212>
 80075f8:	2303      	movs	r3, #3
 80075fa:	e004      	b.n	8007606 <HAL_GPIO_Init+0x212>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e002      	b.n	8007606 <HAL_GPIO_Init+0x212>
 8007600:	2301      	movs	r3, #1
 8007602:	e000      	b.n	8007606 <HAL_GPIO_Init+0x212>
 8007604:	2300      	movs	r3, #0
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	f002 0203 	and.w	r2, r2, #3
 800760c:	0092      	lsls	r2, r2, #2
 800760e:	4093      	lsls	r3, r2
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007616:	4937      	ldr	r1, [pc, #220]	; (80076f4 <HAL_GPIO_Init+0x300>)
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	089b      	lsrs	r3, r3, #2
 800761c:	3302      	adds	r3, #2
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007624:	4b3b      	ldr	r3, [pc, #236]	; (8007714 <HAL_GPIO_Init+0x320>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	43db      	mvns	r3, r3
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4013      	ands	r3, r2
 8007632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007648:	4a32      	ldr	r2, [pc, #200]	; (8007714 <HAL_GPIO_Init+0x320>)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800764e:	4b31      	ldr	r3, [pc, #196]	; (8007714 <HAL_GPIO_Init+0x320>)
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	43db      	mvns	r3, r3
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4013      	ands	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007672:	4a28      	ldr	r2, [pc, #160]	; (8007714 <HAL_GPIO_Init+0x320>)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007678:	4b26      	ldr	r3, [pc, #152]	; (8007714 <HAL_GPIO_Init+0x320>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	43db      	mvns	r3, r3
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	4013      	ands	r3, r2
 8007686:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4313      	orrs	r3, r2
 800769a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800769c:	4a1d      	ldr	r2, [pc, #116]	; (8007714 <HAL_GPIO_Init+0x320>)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80076a2:	4b1c      	ldr	r3, [pc, #112]	; (8007714 <HAL_GPIO_Init+0x320>)
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	43db      	mvns	r3, r3
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4013      	ands	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80076c6:	4a13      	ldr	r2, [pc, #76]	; (8007714 <HAL_GPIO_Init+0x320>)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	3301      	adds	r3, #1
 80076d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	fa22 f303 	lsr.w	r3, r2, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f47f ae91 	bne.w	8007404 <HAL_GPIO_Init+0x10>
  }
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	40021000 	.word	0x40021000
 80076f4:	40010000 	.word	0x40010000
 80076f8:	48000400 	.word	0x48000400
 80076fc:	48000800 	.word	0x48000800
 8007700:	48000c00 	.word	0x48000c00
 8007704:	48001000 	.word	0x48001000
 8007708:	48001400 	.word	0x48001400
 800770c:	48001800 	.word	0x48001800
 8007710:	48001c00 	.word	0x48001c00
 8007714:	40010400 	.word	0x40010400

08007718 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <HAL_PWREx_GetVoltageRange+0x18>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007724:	4618      	mov	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40007000 	.word	0x40007000

08007734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007742:	d130      	bne.n	80077a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007744:	4b23      	ldr	r3, [pc, #140]	; (80077d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800774c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007750:	d038      	beq.n	80077c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007752:	4b20      	ldr	r3, [pc, #128]	; (80077d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800775a:	4a1e      	ldr	r2, [pc, #120]	; (80077d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800775c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007760:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007762:	4b1d      	ldr	r3, [pc, #116]	; (80077d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2232      	movs	r2, #50	; 0x32
 8007768:	fb02 f303 	mul.w	r3, r2, r3
 800776c:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	0c9b      	lsrs	r3, r3, #18
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007778:	e002      	b.n	8007780 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b01      	subs	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007780:	4b14      	ldr	r3, [pc, #80]	; (80077d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778c:	d102      	bne.n	8007794 <HAL_PWREx_ControlVoltageScaling+0x60>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1f2      	bne.n	800777a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007794:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800779c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a0:	d110      	bne.n	80077c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e00f      	b.n	80077c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80077a6:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b2:	d007      	beq.n	80077c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80077b4:	4b07      	ldr	r3, [pc, #28]	; (80077d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077bc:	4a05      	ldr	r2, [pc, #20]	; (80077d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	40007000 	.word	0x40007000
 80077d8:	200000e0 	.word	0x200000e0
 80077dc:	431bde83 	.word	0x431bde83

080077e0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80077e4:	4b05      	ldr	r3, [pc, #20]	; (80077fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	4a04      	ldr	r2, [pc, #16]	; (80077fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80077ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077ee:	6053      	str	r3, [r2, #4]
}
 80077f0:	bf00      	nop
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40007000 	.word	0x40007000

08007800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f000 bc16 	b.w	8008040 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007814:	4ba0      	ldr	r3, [pc, #640]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f003 030c 	and.w	r3, r3, #12
 800781c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800781e:	4b9e      	ldr	r3, [pc, #632]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f003 0303 	and.w	r3, r3, #3
 8007826:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 80e4 	beq.w	80079fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <HAL_RCC_OscConfig+0x4c>
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2b0c      	cmp	r3, #12
 8007840:	f040 808b 	bne.w	800795a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2b01      	cmp	r3, #1
 8007848:	f040 8087 	bne.w	800795a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800784c:	4b92      	ldr	r3, [pc, #584]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <HAL_RCC_OscConfig+0x64>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e3ed      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1a      	ldr	r2, [r3, #32]
 8007868:	4b8b      	ldr	r3, [pc, #556]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <HAL_RCC_OscConfig+0x7e>
 8007874:	4b88      	ldr	r3, [pc, #544]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800787c:	e005      	b.n	800788a <HAL_RCC_OscConfig+0x8a>
 800787e:	4b86      	ldr	r3, [pc, #536]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007884:	091b      	lsrs	r3, r3, #4
 8007886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800788a:	4293      	cmp	r3, r2
 800788c:	d223      	bcs.n	80078d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fdb0 	bl	80083f8 <RCC_SetFlashLatencyFromMSIRange>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e3ce      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078a2:	4b7d      	ldr	r3, [pc, #500]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a7c      	ldr	r2, [pc, #496]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078a8:	f043 0308 	orr.w	r3, r3, #8
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	4b7a      	ldr	r3, [pc, #488]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	4977      	ldr	r1, [pc, #476]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078c0:	4b75      	ldr	r3, [pc, #468]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	4972      	ldr	r1, [pc, #456]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	604b      	str	r3, [r1, #4]
 80078d4:	e025      	b.n	8007922 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078d6:	4b70      	ldr	r3, [pc, #448]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a6f      	ldr	r2, [pc, #444]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078dc:	f043 0308 	orr.w	r3, r3, #8
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	4b6d      	ldr	r3, [pc, #436]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	496a      	ldr	r1, [pc, #424]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078f4:	4b68      	ldr	r3, [pc, #416]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	021b      	lsls	r3, r3, #8
 8007902:	4965      	ldr	r1, [pc, #404]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007904:	4313      	orrs	r3, r2
 8007906:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fd70 	bl	80083f8 <RCC_SetFlashLatencyFromMSIRange>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e38e      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007922:	f000 fc75 	bl	8008210 <HAL_RCC_GetSysClockFreq>
 8007926:	4601      	mov	r1, r0
 8007928:	4b5b      	ldr	r3, [pc, #364]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	091b      	lsrs	r3, r3, #4
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	4a5a      	ldr	r2, [pc, #360]	; (8007a9c <HAL_RCC_OscConfig+0x29c>)
 8007934:	5cd3      	ldrb	r3, [r2, r3]
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	fa21 f303 	lsr.w	r3, r1, r3
 800793e:	4a58      	ldr	r2, [pc, #352]	; (8007aa0 <HAL_RCC_OscConfig+0x2a0>)
 8007940:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007942:	4b58      	ldr	r3, [pc, #352]	; (8007aa4 <HAL_RCC_OscConfig+0x2a4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f7f9 fcac 	bl	80012a4 <HAL_InitTick>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d052      	beq.n	80079fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	e372      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d032      	beq.n	80079c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007962:	4b4d      	ldr	r3, [pc, #308]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a4c      	ldr	r2, [pc, #304]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800796e:	f7ff fc53 	bl	8007218 <HAL_GetTick>
 8007972:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007974:	e008      	b.n	8007988 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007976:	f7ff fc4f 	bl	8007218 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d901      	bls.n	8007988 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e35b      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007988:	4b43      	ldr	r3, [pc, #268]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0f0      	beq.n	8007976 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007994:	4b40      	ldr	r3, [pc, #256]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a3f      	ldr	r2, [pc, #252]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 800799a:	f043 0308 	orr.w	r3, r3, #8
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	4b3d      	ldr	r3, [pc, #244]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	493a      	ldr	r1, [pc, #232]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80079b2:	4b39      	ldr	r3, [pc, #228]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	021b      	lsls	r3, r3, #8
 80079c0:	4935      	ldr	r1, [pc, #212]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	604b      	str	r3, [r1, #4]
 80079c6:	e01a      	b.n	80079fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80079c8:	4b33      	ldr	r3, [pc, #204]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a32      	ldr	r2, [pc, #200]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80079d4:	f7ff fc20 	bl	8007218 <HAL_GetTick>
 80079d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80079da:	e008      	b.n	80079ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079dc:	f7ff fc1c 	bl	8007218 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e328      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80079ee:	4b2a      	ldr	r3, [pc, #168]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1f0      	bne.n	80079dc <HAL_RCC_OscConfig+0x1dc>
 80079fa:	e000      	b.n	80079fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80079fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d073      	beq.n	8007af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d005      	beq.n	8007a1c <HAL_RCC_OscConfig+0x21c>
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	2b0c      	cmp	r3, #12
 8007a14:	d10e      	bne.n	8007a34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d10b      	bne.n	8007a34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a1c:	4b1e      	ldr	r3, [pc, #120]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d063      	beq.n	8007af0 <HAL_RCC_OscConfig+0x2f0>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d15f      	bne.n	8007af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e305      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3c:	d106      	bne.n	8007a4c <HAL_RCC_OscConfig+0x24c>
 8007a3e:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	e01d      	b.n	8007a88 <HAL_RCC_OscConfig+0x288>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a54:	d10c      	bne.n	8007a70 <HAL_RCC_OscConfig+0x270>
 8007a56:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a0f      	ldr	r2, [pc, #60]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	4b0d      	ldr	r3, [pc, #52]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a0c      	ldr	r2, [pc, #48]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	e00b      	b.n	8007a88 <HAL_RCC_OscConfig+0x288>
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a08      	ldr	r2, [pc, #32]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a05      	ldr	r2, [pc, #20]	; (8007a98 <HAL_RCC_OscConfig+0x298>)
 8007a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01b      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a90:	f7ff fbc2 	bl	8007218 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a96:	e010      	b.n	8007aba <HAL_RCC_OscConfig+0x2ba>
 8007a98:	40021000 	.word	0x40021000
 8007a9c:	0800f2fc 	.word	0x0800f2fc
 8007aa0:	200000e0 	.word	0x200000e0
 8007aa4:	200000e4 	.word	0x200000e4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aa8:	f7ff fbb6 	bl	8007218 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b64      	cmp	r3, #100	; 0x64
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e2c2      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aba:	4baf      	ldr	r3, [pc, #700]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f0      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x2a8>
 8007ac6:	e014      	b.n	8007af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac8:	f7ff fba6 	bl	8007218 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad0:	f7ff fba2 	bl	8007218 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b64      	cmp	r3, #100	; 0x64
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e2ae      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ae2:	4ba5      	ldr	r3, [pc, #660]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f0      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x2d0>
 8007aee:	e000      	b.n	8007af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d060      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d005      	beq.n	8007b10 <HAL_RCC_OscConfig+0x310>
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b0c      	cmp	r3, #12
 8007b08:	d119      	bne.n	8007b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d116      	bne.n	8007b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b10:	4b99      	ldr	r3, [pc, #612]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <HAL_RCC_OscConfig+0x328>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e28b      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b28:	4b93      	ldr	r3, [pc, #588]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	061b      	lsls	r3, r3, #24
 8007b36:	4990      	ldr	r1, [pc, #576]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b3c:	e040      	b.n	8007bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d023      	beq.n	8007b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b46:	4b8c      	ldr	r3, [pc, #560]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a8b      	ldr	r2, [pc, #556]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b52:	f7ff fb61 	bl	8007218 <HAL_GetTick>
 8007b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b58:	e008      	b.n	8007b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b5a:	f7ff fb5d 	bl	8007218 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d901      	bls.n	8007b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e269      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b6c:	4b82      	ldr	r3, [pc, #520]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0f0      	beq.n	8007b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b78:	4b7f      	ldr	r3, [pc, #508]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	061b      	lsls	r3, r3, #24
 8007b86:	497c      	ldr	r1, [pc, #496]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	604b      	str	r3, [r1, #4]
 8007b8c:	e018      	b.n	8007bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b8e:	4b7a      	ldr	r3, [pc, #488]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a79      	ldr	r2, [pc, #484]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9a:	f7ff fb3d 	bl	8007218 <HAL_GetTick>
 8007b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ba0:	e008      	b.n	8007bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ba2:	f7ff fb39 	bl	8007218 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d901      	bls.n	8007bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e245      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bb4:	4b70      	ldr	r3, [pc, #448]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1f0      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d03c      	beq.n	8007c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01c      	beq.n	8007c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bd4:	4b68      	ldr	r3, [pc, #416]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bda:	4a67      	ldr	r2, [pc, #412]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007bdc:	f043 0301 	orr.w	r3, r3, #1
 8007be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be4:	f7ff fb18 	bl	8007218 <HAL_GetTick>
 8007be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bec:	f7ff fb14 	bl	8007218 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e220      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bfe:	4b5e      	ldr	r3, [pc, #376]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0ef      	beq.n	8007bec <HAL_RCC_OscConfig+0x3ec>
 8007c0c:	e01b      	b.n	8007c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c0e:	4b5a      	ldr	r3, [pc, #360]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c14:	4a58      	ldr	r2, [pc, #352]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007c16:	f023 0301 	bic.w	r3, r3, #1
 8007c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c1e:	f7ff fafb 	bl	8007218 <HAL_GetTick>
 8007c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c24:	e008      	b.n	8007c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c26:	f7ff faf7 	bl	8007218 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d901      	bls.n	8007c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e203      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c38:	4b4f      	ldr	r3, [pc, #316]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1ef      	bne.n	8007c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 80a6 	beq.w	8007da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c54:	2300      	movs	r3, #0
 8007c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007c58:	4b47      	ldr	r3, [pc, #284]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10d      	bne.n	8007c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c64:	4b44      	ldr	r3, [pc, #272]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c68:	4a43      	ldr	r2, [pc, #268]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c70:	4b41      	ldr	r3, [pc, #260]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c80:	4b3e      	ldr	r3, [pc, #248]	; (8007d7c <HAL_RCC_OscConfig+0x57c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d118      	bne.n	8007cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c8c:	4b3b      	ldr	r3, [pc, #236]	; (8007d7c <HAL_RCC_OscConfig+0x57c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a3a      	ldr	r2, [pc, #232]	; (8007d7c <HAL_RCC_OscConfig+0x57c>)
 8007c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c98:	f7ff fabe 	bl	8007218 <HAL_GetTick>
 8007c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c9e:	e008      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ca0:	f7ff faba 	bl	8007218 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e1c6      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cb2:	4b32      	ldr	r3, [pc, #200]	; (8007d7c <HAL_RCC_OscConfig+0x57c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0f0      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d108      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x4d8>
 8007cc6:	4b2c      	ldr	r3, [pc, #176]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ccc:	4a2a      	ldr	r2, [pc, #168]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007cce:	f043 0301 	orr.w	r3, r3, #1
 8007cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cd6:	e024      	b.n	8007d22 <HAL_RCC_OscConfig+0x522>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	2b05      	cmp	r3, #5
 8007cde:	d110      	bne.n	8007d02 <HAL_RCC_OscConfig+0x502>
 8007ce0:	4b25      	ldr	r3, [pc, #148]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	4a24      	ldr	r2, [pc, #144]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007ce8:	f043 0304 	orr.w	r3, r3, #4
 8007cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cf0:	4b21      	ldr	r3, [pc, #132]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf6:	4a20      	ldr	r2, [pc, #128]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007cf8:	f043 0301 	orr.w	r3, r3, #1
 8007cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d00:	e00f      	b.n	8007d22 <HAL_RCC_OscConfig+0x522>
 8007d02:	4b1d      	ldr	r3, [pc, #116]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d08:	4a1b      	ldr	r2, [pc, #108]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007d0a:	f023 0301 	bic.w	r3, r3, #1
 8007d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d12:	4b19      	ldr	r3, [pc, #100]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d18:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007d1a:	f023 0304 	bic.w	r3, r3, #4
 8007d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d016      	beq.n	8007d58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d2a:	f7ff fa75 	bl	8007218 <HAL_GetTick>
 8007d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d30:	e00a      	b.n	8007d48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d32:	f7ff fa71 	bl	8007218 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d901      	bls.n	8007d48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e17b      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d48:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <HAL_RCC_OscConfig+0x578>)
 8007d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0ed      	beq.n	8007d32 <HAL_RCC_OscConfig+0x532>
 8007d56:	e01a      	b.n	8007d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d58:	f7ff fa5e 	bl	8007218 <HAL_GetTick>
 8007d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d5e:	e00f      	b.n	8007d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d60:	f7ff fa5a 	bl	8007218 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d906      	bls.n	8007d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e164      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
 8007d76:	bf00      	nop
 8007d78:	40021000 	.word	0x40021000
 8007d7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d80:	4ba8      	ldr	r3, [pc, #672]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e8      	bne.n	8007d60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d8e:	7ffb      	ldrb	r3, [r7, #31]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d105      	bne.n	8007da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d94:	4ba3      	ldr	r3, [pc, #652]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d98:	4aa2      	ldr	r2, [pc, #648]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d03c      	beq.n	8007e26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01c      	beq.n	8007dee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007db4:	4b9b      	ldr	r3, [pc, #620]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dba:	4a9a      	ldr	r2, [pc, #616]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc4:	f7ff fa28 	bl	8007218 <HAL_GetTick>
 8007dc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dcc:	f7ff fa24 	bl	8007218 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e130      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dde:	4b91      	ldr	r3, [pc, #580]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d0ef      	beq.n	8007dcc <HAL_RCC_OscConfig+0x5cc>
 8007dec:	e01b      	b.n	8007e26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007dee:	4b8d      	ldr	r3, [pc, #564]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007df4:	4a8b      	ldr	r2, [pc, #556]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007df6:	f023 0301 	bic.w	r3, r3, #1
 8007dfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dfe:	f7ff fa0b 	bl	8007218 <HAL_GetTick>
 8007e02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e04:	e008      	b.n	8007e18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e06:	f7ff fa07 	bl	8007218 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e113      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e18:	4b82      	ldr	r3, [pc, #520]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1ef      	bne.n	8007e06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8107 	beq.w	800803e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	f040 80cb 	bne.w	8007fd0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007e3a:	4b7a      	ldr	r3, [pc, #488]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f003 0203 	and.w	r2, r3, #3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d12c      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d123      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d11b      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d113      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8a:	085b      	lsrs	r3, r3, #1
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d109      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	085b      	lsrs	r3, r3, #1
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d06d      	beq.n	8007f84 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	2b0c      	cmp	r3, #12
 8007eac:	d068      	beq.n	8007f80 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007eae:	4b5d      	ldr	r3, [pc, #372]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d105      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007eba:	4b5a      	ldr	r3, [pc, #360]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e0ba      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007eca:	4b56      	ldr	r3, [pc, #344]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a55      	ldr	r2, [pc, #340]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ed4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ed6:	f7ff f99f 	bl	8007218 <HAL_GetTick>
 8007eda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007edc:	e008      	b.n	8007ef0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ede:	f7ff f99b 	bl	8007218 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d901      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e0a7      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ef0:	4b4c      	ldr	r3, [pc, #304]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1f0      	bne.n	8007ede <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007efc:	4b49      	ldr	r3, [pc, #292]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	4b49      	ldr	r3, [pc, #292]	; (8008028 <HAL_RCC_OscConfig+0x828>)
 8007f02:	4013      	ands	r3, r2
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f0c:	3a01      	subs	r2, #1
 8007f0e:	0112      	lsls	r2, r2, #4
 8007f10:	4311      	orrs	r1, r2
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f16:	0212      	lsls	r2, r2, #8
 8007f18:	4311      	orrs	r1, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007f1e:	0852      	lsrs	r2, r2, #1
 8007f20:	3a01      	subs	r2, #1
 8007f22:	0552      	lsls	r2, r2, #21
 8007f24:	4311      	orrs	r1, r2
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007f2a:	0852      	lsrs	r2, r2, #1
 8007f2c:	3a01      	subs	r2, #1
 8007f2e:	0652      	lsls	r2, r2, #25
 8007f30:	4311      	orrs	r1, r2
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f36:	06d2      	lsls	r2, r2, #27
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	493a      	ldr	r1, [pc, #232]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007f40:	4b38      	ldr	r3, [pc, #224]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a37      	ldr	r2, [pc, #220]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f4c:	4b35      	ldr	r3, [pc, #212]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	4a34      	ldr	r2, [pc, #208]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f58:	f7ff f95e 	bl	8007218 <HAL_GetTick>
 8007f5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f60:	f7ff f95a 	bl	8007218 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e066      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f72:	4b2c      	ldr	r3, [pc, #176]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0f0      	beq.n	8007f60 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f7e:	e05e      	b.n	800803e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e05d      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f84:	4b27      	ldr	r3, [pc, #156]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d156      	bne.n	800803e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007f90:	4b24      	ldr	r3, [pc, #144]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a23      	ldr	r2, [pc, #140]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f9c:	4b21      	ldr	r3, [pc, #132]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	4a20      	ldr	r2, [pc, #128]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007fa8:	f7ff f936 	bl	8007218 <HAL_GetTick>
 8007fac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fae:	e008      	b.n	8007fc2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fb0:	f7ff f932 	bl	8007218 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d901      	bls.n	8007fc2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e03e      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fc2:	4b18      	ldr	r3, [pc, #96]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0f0      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x7b0>
 8007fce:	e036      	b.n	800803e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	2b0c      	cmp	r3, #12
 8007fd4:	d031      	beq.n	800803a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fd6:	4b13      	ldr	r3, [pc, #76]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a12      	ldr	r2, [pc, #72]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007fdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fe0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007fe2:	4b10      	ldr	r3, [pc, #64]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d105      	bne.n	8007ffa <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007fee:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	4a0c      	ldr	r2, [pc, #48]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007ff4:	f023 0303 	bic.w	r3, r3, #3
 8007ff8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007ffa:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	4a09      	ldr	r2, [pc, #36]	; (8008024 <HAL_RCC_OscConfig+0x824>)
 8008000:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008008:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800a:	f7ff f905 	bl	8007218 <HAL_GetTick>
 800800e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008010:	e00c      	b.n	800802c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008012:	f7ff f901 	bl	8007218 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d905      	bls.n	800802c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e00d      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
 8008024:	40021000 	.word	0x40021000
 8008028:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800802c:	4b06      	ldr	r3, [pc, #24]	; (8008048 <HAL_RCC_OscConfig+0x848>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1ec      	bne.n	8008012 <HAL_RCC_OscConfig+0x812>
 8008038:	e001      	b.n	800803e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3720      	adds	r7, #32
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40021000 	.word	0x40021000

0800804c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e0c8      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008060:	4b66      	ldr	r3, [pc, #408]	; (80081fc <HAL_RCC_ClockConfig+0x1b0>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d910      	bls.n	8008090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806e:	4b63      	ldr	r3, [pc, #396]	; (80081fc <HAL_RCC_ClockConfig+0x1b0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f023 0207 	bic.w	r2, r3, #7
 8008076:	4961      	ldr	r1, [pc, #388]	; (80081fc <HAL_RCC_ClockConfig+0x1b0>)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	4313      	orrs	r3, r2
 800807c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800807e:	4b5f      	ldr	r3, [pc, #380]	; (80081fc <HAL_RCC_ClockConfig+0x1b0>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d001      	beq.n	8008090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e0b0      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d04c      	beq.n	8008136 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d107      	bne.n	80080b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080a4:	4b56      	ldr	r3, [pc, #344]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d121      	bne.n	80080f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e09e      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d107      	bne.n	80080cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080bc:	4b50      	ldr	r3, [pc, #320]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d115      	bne.n	80080f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e092      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d107      	bne.n	80080e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80080d4:	4b4a      	ldr	r3, [pc, #296]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d109      	bne.n	80080f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e086      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080e4:	4b46      	ldr	r3, [pc, #280]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e07e      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080f4:	4b42      	ldr	r3, [pc, #264]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f023 0203 	bic.w	r2, r3, #3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	493f      	ldr	r1, [pc, #252]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 8008102:	4313      	orrs	r3, r2
 8008104:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008106:	f7ff f887 	bl	8007218 <HAL_GetTick>
 800810a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800810c:	e00a      	b.n	8008124 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800810e:	f7ff f883 	bl	8007218 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	f241 3288 	movw	r2, #5000	; 0x1388
 800811c:	4293      	cmp	r3, r2
 800811e:	d901      	bls.n	8008124 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e066      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008124:	4b36      	ldr	r3, [pc, #216]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 020c 	and.w	r2, r3, #12
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	429a      	cmp	r2, r3
 8008134:	d1eb      	bne.n	800810e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d008      	beq.n	8008154 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008142:	4b2f      	ldr	r3, [pc, #188]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	492c      	ldr	r1, [pc, #176]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 8008150:	4313      	orrs	r3, r2
 8008152:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008154:	4b29      	ldr	r3, [pc, #164]	; (80081fc <HAL_RCC_ClockConfig+0x1b0>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d210      	bcs.n	8008184 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008162:	4b26      	ldr	r3, [pc, #152]	; (80081fc <HAL_RCC_ClockConfig+0x1b0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f023 0207 	bic.w	r2, r3, #7
 800816a:	4924      	ldr	r1, [pc, #144]	; (80081fc <HAL_RCC_ClockConfig+0x1b0>)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	4313      	orrs	r3, r2
 8008170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008172:	4b22      	ldr	r3, [pc, #136]	; (80081fc <HAL_RCC_ClockConfig+0x1b0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	429a      	cmp	r2, r3
 800817e:	d001      	beq.n	8008184 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e036      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	d008      	beq.n	80081a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008190:	4b1b      	ldr	r3, [pc, #108]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	4918      	ldr	r1, [pc, #96]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d009      	beq.n	80081c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081ae:	4b14      	ldr	r3, [pc, #80]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	4910      	ldr	r1, [pc, #64]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081c2:	f000 f825 	bl	8008210 <HAL_RCC_GetSysClockFreq>
 80081c6:	4601      	mov	r1, r0
 80081c8:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <HAL_RCC_ClockConfig+0x1b4>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	091b      	lsrs	r3, r3, #4
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	4a0c      	ldr	r2, [pc, #48]	; (8008204 <HAL_RCC_ClockConfig+0x1b8>)
 80081d4:	5cd3      	ldrb	r3, [r2, r3]
 80081d6:	f003 031f 	and.w	r3, r3, #31
 80081da:	fa21 f303 	lsr.w	r3, r1, r3
 80081de:	4a0a      	ldr	r2, [pc, #40]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80081e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80081e2:	4b0a      	ldr	r3, [pc, #40]	; (800820c <HAL_RCC_ClockConfig+0x1c0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7f9 f85c 	bl	80012a4 <HAL_InitTick>
 80081ec:	4603      	mov	r3, r0
 80081ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80081f0:	7afb      	ldrb	r3, [r7, #11]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	40022000 	.word	0x40022000
 8008200:	40021000 	.word	0x40021000
 8008204:	0800f2fc 	.word	0x0800f2fc
 8008208:	200000e0 	.word	0x200000e0
 800820c:	200000e4 	.word	0x200000e4

08008210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008210:	b480      	push	{r7}
 8008212:	b089      	sub	sp, #36	; 0x24
 8008214:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	61fb      	str	r3, [r7, #28]
 800821a:	2300      	movs	r3, #0
 800821c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800821e:	4b3d      	ldr	r3, [pc, #244]	; (8008314 <HAL_RCC_GetSysClockFreq+0x104>)
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f003 030c 	and.w	r3, r3, #12
 8008226:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008228:	4b3a      	ldr	r3, [pc, #232]	; (8008314 <HAL_RCC_GetSysClockFreq+0x104>)
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f003 0303 	and.w	r3, r3, #3
 8008230:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <HAL_RCC_GetSysClockFreq+0x34>
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2b0c      	cmp	r3, #12
 800823c:	d121      	bne.n	8008282 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d11e      	bne.n	8008282 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008244:	4b33      	ldr	r3, [pc, #204]	; (8008314 <HAL_RCC_GetSysClockFreq+0x104>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d107      	bne.n	8008260 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008250:	4b30      	ldr	r3, [pc, #192]	; (8008314 <HAL_RCC_GetSysClockFreq+0x104>)
 8008252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008256:	0a1b      	lsrs	r3, r3, #8
 8008258:	f003 030f 	and.w	r3, r3, #15
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	e005      	b.n	800826c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008260:	4b2c      	ldr	r3, [pc, #176]	; (8008314 <HAL_RCC_GetSysClockFreq+0x104>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	091b      	lsrs	r3, r3, #4
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800826c:	4a2a      	ldr	r2, [pc, #168]	; (8008318 <HAL_RCC_GetSysClockFreq+0x108>)
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008274:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10d      	bne.n	8008298 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008280:	e00a      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2b04      	cmp	r3, #4
 8008286:	d102      	bne.n	800828e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008288:	4b24      	ldr	r3, [pc, #144]	; (800831c <HAL_RCC_GetSysClockFreq+0x10c>)
 800828a:	61bb      	str	r3, [r7, #24]
 800828c:	e004      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	2b08      	cmp	r3, #8
 8008292:	d101      	bne.n	8008298 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008294:	4b22      	ldr	r3, [pc, #136]	; (8008320 <HAL_RCC_GetSysClockFreq+0x110>)
 8008296:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b0c      	cmp	r3, #12
 800829c:	d133      	bne.n	8008306 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800829e:	4b1d      	ldr	r3, [pc, #116]	; (8008314 <HAL_RCC_GetSysClockFreq+0x104>)
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d002      	beq.n	80082b4 <HAL_RCC_GetSysClockFreq+0xa4>
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d003      	beq.n	80082ba <HAL_RCC_GetSysClockFreq+0xaa>
 80082b2:	e005      	b.n	80082c0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80082b4:	4b19      	ldr	r3, [pc, #100]	; (800831c <HAL_RCC_GetSysClockFreq+0x10c>)
 80082b6:	617b      	str	r3, [r7, #20]
      break;
 80082b8:	e005      	b.n	80082c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80082ba:	4b19      	ldr	r3, [pc, #100]	; (8008320 <HAL_RCC_GetSysClockFreq+0x110>)
 80082bc:	617b      	str	r3, [r7, #20]
      break;
 80082be:	e002      	b.n	80082c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	617b      	str	r3, [r7, #20]
      break;
 80082c4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082c6:	4b13      	ldr	r3, [pc, #76]	; (8008314 <HAL_RCC_GetSysClockFreq+0x104>)
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	091b      	lsrs	r3, r3, #4
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	3301      	adds	r3, #1
 80082d2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80082d4:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <HAL_RCC_GetSysClockFreq+0x104>)
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	0a1b      	lsrs	r3, r3, #8
 80082da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	fb02 f203 	mul.w	r2, r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80082ec:	4b09      	ldr	r3, [pc, #36]	; (8008314 <HAL_RCC_GetSysClockFreq+0x104>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	0e5b      	lsrs	r3, r3, #25
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	3301      	adds	r3, #1
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	fbb2 f3f3 	udiv	r3, r2, r3
 8008304:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008306:	69bb      	ldr	r3, [r7, #24]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3724      	adds	r7, #36	; 0x24
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	40021000 	.word	0x40021000
 8008318:	0800f314 	.word	0x0800f314
 800831c:	00f42400 	.word	0x00f42400
 8008320:	007a1200 	.word	0x007a1200

08008324 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008328:	4b03      	ldr	r3, [pc, #12]	; (8008338 <HAL_RCC_GetHCLKFreq+0x14>)
 800832a:	681b      	ldr	r3, [r3, #0]
}
 800832c:	4618      	mov	r0, r3
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	200000e0 	.word	0x200000e0

0800833c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008340:	f7ff fff0 	bl	8008324 <HAL_RCC_GetHCLKFreq>
 8008344:	4601      	mov	r1, r0
 8008346:	4b06      	ldr	r3, [pc, #24]	; (8008360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	0a1b      	lsrs	r3, r3, #8
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	4a04      	ldr	r2, [pc, #16]	; (8008364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008352:	5cd3      	ldrb	r3, [r2, r3]
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	fa21 f303 	lsr.w	r3, r1, r3
}
 800835c:	4618      	mov	r0, r3
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40021000 	.word	0x40021000
 8008364:	0800f30c 	.word	0x0800f30c

08008368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800836c:	f7ff ffda 	bl	8008324 <HAL_RCC_GetHCLKFreq>
 8008370:	4601      	mov	r1, r0
 8008372:	4b06      	ldr	r3, [pc, #24]	; (800838c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	0adb      	lsrs	r3, r3, #11
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	4a04      	ldr	r2, [pc, #16]	; (8008390 <HAL_RCC_GetPCLK2Freq+0x28>)
 800837e:	5cd3      	ldrb	r3, [r2, r3]
 8008380:	f003 031f 	and.w	r3, r3, #31
 8008384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008388:	4618      	mov	r0, r3
 800838a:	bd80      	pop	{r7, pc}
 800838c:	40021000 	.word	0x40021000
 8008390:	0800f30c 	.word	0x0800f30c

08008394 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	220f      	movs	r2, #15
 80083a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80083a4:	4b12      	ldr	r3, [pc, #72]	; (80083f0 <HAL_RCC_GetClockConfig+0x5c>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f003 0203 	and.w	r2, r3, #3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80083b0:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <HAL_RCC_GetClockConfig+0x5c>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80083bc:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <HAL_RCC_GetClockConfig+0x5c>)
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80083c8:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <HAL_RCC_GetClockConfig+0x5c>)
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	08db      	lsrs	r3, r3, #3
 80083ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80083d6:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <HAL_RCC_GetClockConfig+0x60>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0207 	and.w	r2, r3, #7
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	601a      	str	r2, [r3, #0]
}
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	40021000 	.word	0x40021000
 80083f4:	40022000 	.word	0x40022000

080083f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008400:	2300      	movs	r3, #0
 8008402:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008404:	4b2a      	ldr	r3, [pc, #168]	; (80084b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008410:	f7ff f982 	bl	8007718 <HAL_PWREx_GetVoltageRange>
 8008414:	6178      	str	r0, [r7, #20]
 8008416:	e014      	b.n	8008442 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008418:	4b25      	ldr	r3, [pc, #148]	; (80084b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800841a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841c:	4a24      	ldr	r2, [pc, #144]	; (80084b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800841e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008422:	6593      	str	r3, [r2, #88]	; 0x58
 8008424:	4b22      	ldr	r3, [pc, #136]	; (80084b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800842c:	60fb      	str	r3, [r7, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008430:	f7ff f972 	bl	8007718 <HAL_PWREx_GetVoltageRange>
 8008434:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008436:	4b1e      	ldr	r3, [pc, #120]	; (80084b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843a:	4a1d      	ldr	r2, [pc, #116]	; (80084b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800843c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008440:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008448:	d10b      	bne.n	8008462 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b80      	cmp	r3, #128	; 0x80
 800844e:	d919      	bls.n	8008484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2ba0      	cmp	r3, #160	; 0xa0
 8008454:	d902      	bls.n	800845c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008456:	2302      	movs	r3, #2
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	e013      	b.n	8008484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800845c:	2301      	movs	r3, #1
 800845e:	613b      	str	r3, [r7, #16]
 8008460:	e010      	b.n	8008484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b80      	cmp	r3, #128	; 0x80
 8008466:	d902      	bls.n	800846e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008468:	2303      	movs	r3, #3
 800846a:	613b      	str	r3, [r7, #16]
 800846c:	e00a      	b.n	8008484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b80      	cmp	r3, #128	; 0x80
 8008472:	d102      	bne.n	800847a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008474:	2302      	movs	r3, #2
 8008476:	613b      	str	r3, [r7, #16]
 8008478:	e004      	b.n	8008484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b70      	cmp	r3, #112	; 0x70
 800847e:	d101      	bne.n	8008484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008480:	2301      	movs	r3, #1
 8008482:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008484:	4b0b      	ldr	r3, [pc, #44]	; (80084b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f023 0207 	bic.w	r2, r3, #7
 800848c:	4909      	ldr	r1, [pc, #36]	; (80084b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008494:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0307 	and.w	r3, r3, #7
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d001      	beq.n	80084a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40021000 	.word	0x40021000
 80084b4:	40022000 	.word	0x40022000

080084b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80084c0:	2300      	movs	r3, #0
 80084c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084c4:	2300      	movs	r3, #0
 80084c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d03f      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084dc:	d01c      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80084de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084e2:	d802      	bhi.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00e      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80084e8:	e01f      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80084ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084ee:	d003      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80084f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084f4:	d01c      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80084f6:	e018      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80084f8:	4b85      	ldr	r3, [pc, #532]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	4a84      	ldr	r2, [pc, #528]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80084fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008502:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008504:	e015      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3304      	adds	r3, #4
 800850a:	2100      	movs	r1, #0
 800850c:	4618      	mov	r0, r3
 800850e:	f000 facb 	bl	8008aa8 <RCCEx_PLLSAI1_Config>
 8008512:	4603      	mov	r3, r0
 8008514:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008516:	e00c      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3320      	adds	r3, #32
 800851c:	2100      	movs	r1, #0
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fbb2 	bl	8008c88 <RCCEx_PLLSAI2_Config>
 8008524:	4603      	mov	r3, r0
 8008526:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008528:	e003      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	74fb      	strb	r3, [r7, #19]
      break;
 800852e:	e000      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008532:	7cfb      	ldrb	r3, [r7, #19]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10b      	bne.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008538:	4b75      	ldr	r3, [pc, #468]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800853a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008546:	4972      	ldr	r1, [pc, #456]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008548:	4313      	orrs	r3, r2
 800854a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800854e:	e001      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008550:	7cfb      	ldrb	r3, [r7, #19]
 8008552:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d03f      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008568:	d01c      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800856a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800856e:	d802      	bhi.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00e      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8008574:	e01f      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800857a:	d003      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800857c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008580:	d01c      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8008582:	e018      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008584:	4b62      	ldr	r3, [pc, #392]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	4a61      	ldr	r2, [pc, #388]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800858a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800858e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008590:	e015      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3304      	adds	r3, #4
 8008596:	2100      	movs	r1, #0
 8008598:	4618      	mov	r0, r3
 800859a:	f000 fa85 	bl	8008aa8 <RCCEx_PLLSAI1_Config>
 800859e:	4603      	mov	r3, r0
 80085a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80085a2:	e00c      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3320      	adds	r3, #32
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fb6c 	bl	8008c88 <RCCEx_PLLSAI2_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80085b4:	e003      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	74fb      	strb	r3, [r7, #19]
      break;
 80085ba:	e000      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80085bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085be:	7cfb      	ldrb	r3, [r7, #19]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10b      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80085c4:	4b52      	ldr	r3, [pc, #328]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085d2:	494f      	ldr	r1, [pc, #316]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80085da:	e001      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085dc:	7cfb      	ldrb	r3, [r7, #19]
 80085de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80a0 	beq.w	800872e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085ee:	2300      	movs	r3, #0
 80085f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80085f2:	4b47      	ldr	r3, [pc, #284]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80085fe:	2301      	movs	r3, #1
 8008600:	e000      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008602:	2300      	movs	r3, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00d      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008608:	4b41      	ldr	r3, [pc, #260]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800860a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860c:	4a40      	ldr	r2, [pc, #256]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800860e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008612:	6593      	str	r3, [r2, #88]	; 0x58
 8008614:	4b3e      	ldr	r3, [pc, #248]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861c:	60bb      	str	r3, [r7, #8]
 800861e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008620:	2301      	movs	r3, #1
 8008622:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008624:	4b3b      	ldr	r3, [pc, #236]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a3a      	ldr	r2, [pc, #232]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800862a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800862e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008630:	f7fe fdf2 	bl	8007218 <HAL_GetTick>
 8008634:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008636:	e009      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008638:	f7fe fdee 	bl	8007218 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b02      	cmp	r3, #2
 8008644:	d902      	bls.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	74fb      	strb	r3, [r7, #19]
        break;
 800864a:	e005      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800864c:	4b31      	ldr	r3, [pc, #196]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0ef      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8008658:	7cfb      	ldrb	r3, [r7, #19]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d15c      	bne.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800865e:	4b2c      	ldr	r3, [pc, #176]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008668:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01f      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	429a      	cmp	r2, r3
 800867a:	d019      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800867c:	4b24      	ldr	r3, [pc, #144]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008688:	4b21      	ldr	r3, [pc, #132]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800868a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800868e:	4a20      	ldr	r2, [pc, #128]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800869a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800869e:	4a1c      	ldr	r2, [pc, #112]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80086a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80086a8:	4a19      	ldr	r2, [pc, #100]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d016      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ba:	f7fe fdad 	bl	8007218 <HAL_GetTick>
 80086be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086c0:	e00b      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086c2:	f7fe fda9 	bl	8007218 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d902      	bls.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	74fb      	strb	r3, [r7, #19]
            break;
 80086d8:	e006      	b.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086da:	4b0d      	ldr	r3, [pc, #52]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80086dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0ec      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80086e8:	7cfb      	ldrb	r3, [r7, #19]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10c      	bne.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086ee:	4b08      	ldr	r3, [pc, #32]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80086f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086fe:	4904      	ldr	r1, [pc, #16]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008700:	4313      	orrs	r3, r2
 8008702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008706:	e009      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008708:	7cfb      	ldrb	r3, [r7, #19]
 800870a:	74bb      	strb	r3, [r7, #18]
 800870c:	e006      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800870e:	bf00      	nop
 8008710:	40021000 	.word	0x40021000
 8008714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008718:	7cfb      	ldrb	r3, [r7, #19]
 800871a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800871c:	7c7b      	ldrb	r3, [r7, #17]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d105      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008722:	4ba6      	ldr	r3, [pc, #664]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008726:	4aa5      	ldr	r2, [pc, #660]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800872c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800873a:	4ba0      	ldr	r3, [pc, #640]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800873c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008740:	f023 0203 	bic.w	r2, r3, #3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	499c      	ldr	r1, [pc, #624]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800874a:	4313      	orrs	r3, r2
 800874c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00a      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800875c:	4b97      	ldr	r3, [pc, #604]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008762:	f023 020c 	bic.w	r2, r3, #12
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800876a:	4994      	ldr	r1, [pc, #592]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800876c:	4313      	orrs	r3, r2
 800876e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0304 	and.w	r3, r3, #4
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800877e:	4b8f      	ldr	r3, [pc, #572]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008784:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878c:	498b      	ldr	r1, [pc, #556]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800878e:	4313      	orrs	r3, r2
 8008790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0308 	and.w	r3, r3, #8
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00a      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80087a0:	4b86      	ldr	r3, [pc, #536]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ae:	4983      	ldr	r1, [pc, #524]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0310 	and.w	r3, r3, #16
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80087c2:	4b7e      	ldr	r3, [pc, #504]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087d0:	497a      	ldr	r1, [pc, #488]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087e4:	4b75      	ldr	r3, [pc, #468]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f2:	4972      	ldr	r1, [pc, #456]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008806:	4b6d      	ldr	r3, [pc, #436]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800880c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008814:	4969      	ldr	r1, [pc, #420]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008828:	4b64      	ldr	r3, [pc, #400]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800882a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008836:	4961      	ldr	r1, [pc, #388]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008838:	4313      	orrs	r3, r2
 800883a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800884a:	4b5c      	ldr	r3, [pc, #368]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800884c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008850:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008858:	4958      	ldr	r1, [pc, #352]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800885a:	4313      	orrs	r3, r2
 800885c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800886c:	4b53      	ldr	r3, [pc, #332]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800886e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008872:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887a:	4950      	ldr	r1, [pc, #320]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800887c:	4313      	orrs	r3, r2
 800887e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800888e:	4b4b      	ldr	r3, [pc, #300]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889c:	4947      	ldr	r1, [pc, #284]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088b0:	4b42      	ldr	r3, [pc, #264]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088b6:	f023 0203 	bic.w	r2, r3, #3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088be:	493f      	ldr	r1, [pc, #252]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d028      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088d2:	4b3a      	ldr	r3, [pc, #232]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e0:	4936      	ldr	r1, [pc, #216]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088f0:	d106      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088f2:	4b32      	ldr	r3, [pc, #200]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	4a31      	ldr	r2, [pc, #196]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088fc:	60d3      	str	r3, [r2, #12]
 80088fe:	e011      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008908:	d10c      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3304      	adds	r3, #4
 800890e:	2101      	movs	r1, #1
 8008910:	4618      	mov	r0, r3
 8008912:	f000 f8c9 	bl	8008aa8 <RCCEx_PLLSAI1_Config>
 8008916:	4603      	mov	r3, r0
 8008918:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800891a:	7cfb      	ldrb	r3, [r7, #19]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8008920:	7cfb      	ldrb	r3, [r7, #19]
 8008922:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d028      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008930:	4b22      	ldr	r3, [pc, #136]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800893e:	491f      	ldr	r1, [pc, #124]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008940:	4313      	orrs	r3, r2
 8008942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800894a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800894e:	d106      	bne.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008950:	4b1a      	ldr	r3, [pc, #104]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	4a19      	ldr	r2, [pc, #100]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800895a:	60d3      	str	r3, [r2, #12]
 800895c:	e011      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008962:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008966:	d10c      	bne.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3304      	adds	r3, #4
 800896c:	2101      	movs	r1, #1
 800896e:	4618      	mov	r0, r3
 8008970:	f000 f89a 	bl	8008aa8 <RCCEx_PLLSAI1_Config>
 8008974:	4603      	mov	r3, r0
 8008976:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008978:	7cfb      	ldrb	r3, [r7, #19]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 800897e:	7cfb      	ldrb	r3, [r7, #19]
 8008980:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d02a      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800898e:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008994:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800899c:	4907      	ldr	r1, [pc, #28]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089ac:	d108      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089ae:	4b03      	ldr	r3, [pc, #12]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	4a02      	ldr	r2, [pc, #8]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089b8:	60d3      	str	r3, [r2, #12]
 80089ba:	e013      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80089bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089c8:	d10c      	bne.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3304      	adds	r3, #4
 80089ce:	2101      	movs	r1, #1
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 f869 	bl	8008aa8 <RCCEx_PLLSAI1_Config>
 80089d6:	4603      	mov	r3, r0
 80089d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80089da:	7cfb      	ldrb	r3, [r7, #19]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 80089e0:	7cfb      	ldrb	r3, [r7, #19]
 80089e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d02f      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089f0:	4b2c      	ldr	r3, [pc, #176]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80089f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089fe:	4929      	ldr	r1, [pc, #164]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a0e:	d10d      	bne.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3304      	adds	r3, #4
 8008a14:	2102      	movs	r1, #2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f846 	bl	8008aa8 <RCCEx_PLLSAI1_Config>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a20:	7cfb      	ldrb	r3, [r7, #19]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d014      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8008a26:	7cfb      	ldrb	r3, [r7, #19]
 8008a28:	74bb      	strb	r3, [r7, #18]
 8008a2a:	e011      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a34:	d10c      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3320      	adds	r3, #32
 8008a3a:	2102      	movs	r1, #2
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f923 	bl	8008c88 <RCCEx_PLLSAI2_Config>
 8008a42:	4603      	mov	r3, r0
 8008a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a46:	7cfb      	ldrb	r3, [r7, #19]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8008a4c:	7cfb      	ldrb	r3, [r7, #19]
 8008a4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a5c:	4b11      	ldr	r3, [pc, #68]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a6c:	490d      	ldr	r1, [pc, #52]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00b      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a80:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a90:	4904      	ldr	r1, [pc, #16]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008a98:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40021000 	.word	0x40021000

08008aa8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008ab6:	4b73      	ldr	r3, [pc, #460]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d018      	beq.n	8008af4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008ac2:	4b70      	ldr	r3, [pc, #448]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	f003 0203 	and.w	r2, r3, #3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d10d      	bne.n	8008aee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
       ||
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d009      	beq.n	8008aee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008ada:	4b6a      	ldr	r3, [pc, #424]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	091b      	lsrs	r3, r3, #4
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
       ||
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d044      	beq.n	8008b78 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	73fb      	strb	r3, [r7, #15]
 8008af2:	e041      	b.n	8008b78 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d00c      	beq.n	8008b16 <RCCEx_PLLSAI1_Config+0x6e>
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d013      	beq.n	8008b28 <RCCEx_PLLSAI1_Config+0x80>
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d120      	bne.n	8008b46 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008b04:	4b5f      	ldr	r3, [pc, #380]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d11d      	bne.n	8008b4c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b14:	e01a      	b.n	8008b4c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008b16:	4b5b      	ldr	r3, [pc, #364]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d116      	bne.n	8008b50 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b26:	e013      	b.n	8008b50 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008b28:	4b56      	ldr	r3, [pc, #344]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10f      	bne.n	8008b54 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008b34:	4b53      	ldr	r3, [pc, #332]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b44:	e006      	b.n	8008b54 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4a:	e004      	b.n	8008b56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008b4c:	bf00      	nop
 8008b4e:	e002      	b.n	8008b56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008b50:	bf00      	nop
 8008b52:	e000      	b.n	8008b56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008b54:	bf00      	nop
    }

    if(status == HAL_OK)
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10d      	bne.n	8008b78 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008b5c:	4b49      	ldr	r3, [pc, #292]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6819      	ldr	r1, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	430b      	orrs	r3, r1
 8008b72:	4944      	ldr	r1, [pc, #272]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d17c      	bne.n	8008c78 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008b7e:	4b41      	ldr	r3, [pc, #260]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a40      	ldr	r2, [pc, #256]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b8a:	f7fe fb45 	bl	8007218 <HAL_GetTick>
 8008b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008b90:	e009      	b.n	8008ba6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b92:	f7fe fb41 	bl	8007218 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d902      	bls.n	8008ba6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	73fb      	strb	r3, [r7, #15]
        break;
 8008ba4:	e005      	b.n	8008bb2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008ba6:	4b37      	ldr	r3, [pc, #220]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1ef      	bne.n	8008b92 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d15f      	bne.n	8008c78 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d110      	bne.n	8008be0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008bbe:	4b31      	ldr	r3, [pc, #196]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008bc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6892      	ldr	r2, [r2, #8]
 8008bce:	0211      	lsls	r1, r2, #8
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	68d2      	ldr	r2, [r2, #12]
 8008bd4:	06d2      	lsls	r2, r2, #27
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	492a      	ldr	r1, [pc, #168]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	610b      	str	r3, [r1, #16]
 8008bde:	e027      	b.n	8008c30 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d112      	bne.n	8008c0c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008be6:	4b27      	ldr	r3, [pc, #156]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008bee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	6892      	ldr	r2, [r2, #8]
 8008bf6:	0211      	lsls	r1, r2, #8
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	6912      	ldr	r2, [r2, #16]
 8008bfc:	0852      	lsrs	r2, r2, #1
 8008bfe:	3a01      	subs	r2, #1
 8008c00:	0552      	lsls	r2, r2, #21
 8008c02:	430a      	orrs	r2, r1
 8008c04:	491f      	ldr	r1, [pc, #124]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	610b      	str	r3, [r1, #16]
 8008c0a:	e011      	b.n	8008c30 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008c0c:	4b1d      	ldr	r3, [pc, #116]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008c14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6892      	ldr	r2, [r2, #8]
 8008c1c:	0211      	lsls	r1, r2, #8
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	6952      	ldr	r2, [r2, #20]
 8008c22:	0852      	lsrs	r2, r2, #1
 8008c24:	3a01      	subs	r2, #1
 8008c26:	0652      	lsls	r2, r2, #25
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	4916      	ldr	r1, [pc, #88]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008c30:	4b14      	ldr	r3, [pc, #80]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a13      	ldr	r2, [pc, #76]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c3c:	f7fe faec 	bl	8007218 <HAL_GetTick>
 8008c40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008c42:	e009      	b.n	8008c58 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c44:	f7fe fae8 	bl	8007218 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d902      	bls.n	8008c58 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	73fb      	strb	r3, [r7, #15]
          break;
 8008c56:	e005      	b.n	8008c64 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008c58:	4b0a      	ldr	r3, [pc, #40]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0ef      	beq.n	8008c44 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d106      	bne.n	8008c78 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008c6a:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c6c:	691a      	ldr	r2, [r3, #16]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	4904      	ldr	r1, [pc, #16]	; (8008c84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	40021000 	.word	0x40021000

08008c88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008c96:	4b68      	ldr	r3, [pc, #416]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d018      	beq.n	8008cd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008ca2:	4b65      	ldr	r3, [pc, #404]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	f003 0203 	and.w	r2, r3, #3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d10d      	bne.n	8008cce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
       ||
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d009      	beq.n	8008cce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008cba:	4b5f      	ldr	r3, [pc, #380]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	091b      	lsrs	r3, r3, #4
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
       ||
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d044      	beq.n	8008d58 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	73fb      	strb	r3, [r7, #15]
 8008cd2:	e041      	b.n	8008d58 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d00c      	beq.n	8008cf6 <RCCEx_PLLSAI2_Config+0x6e>
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d013      	beq.n	8008d08 <RCCEx_PLLSAI2_Config+0x80>
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d120      	bne.n	8008d26 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008ce4:	4b54      	ldr	r3, [pc, #336]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d11d      	bne.n	8008d2c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cf4:	e01a      	b.n	8008d2c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008cf6:	4b50      	ldr	r3, [pc, #320]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d116      	bne.n	8008d30 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d06:	e013      	b.n	8008d30 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008d08:	4b4b      	ldr	r3, [pc, #300]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10f      	bne.n	8008d34 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008d14:	4b48      	ldr	r3, [pc, #288]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d109      	bne.n	8008d34 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d24:	e006      	b.n	8008d34 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	73fb      	strb	r3, [r7, #15]
      break;
 8008d2a:	e004      	b.n	8008d36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008d2c:	bf00      	nop
 8008d2e:	e002      	b.n	8008d36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008d30:	bf00      	nop
 8008d32:	e000      	b.n	8008d36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008d34:	bf00      	nop
    }

    if(status == HAL_OK)
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10d      	bne.n	8008d58 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008d3c:	4b3e      	ldr	r3, [pc, #248]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6819      	ldr	r1, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	430b      	orrs	r3, r1
 8008d52:	4939      	ldr	r1, [pc, #228]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d166      	bne.n	8008e2c <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008d5e:	4b36      	ldr	r3, [pc, #216]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a35      	ldr	r2, [pc, #212]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d6a:	f7fe fa55 	bl	8007218 <HAL_GetTick>
 8008d6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008d70:	e009      	b.n	8008d86 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008d72:	f7fe fa51 	bl	8007218 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d902      	bls.n	8008d86 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	73fb      	strb	r3, [r7, #15]
        break;
 8008d84:	e005      	b.n	8008d92 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008d86:	4b2c      	ldr	r3, [pc, #176]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1ef      	bne.n	8008d72 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d149      	bne.n	8008e2c <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d110      	bne.n	8008dc0 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008d9e:	4b26      	ldr	r3, [pc, #152]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008da6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	6892      	ldr	r2, [r2, #8]
 8008dae:	0211      	lsls	r1, r2, #8
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	68d2      	ldr	r2, [r2, #12]
 8008db4:	06d2      	lsls	r2, r2, #27
 8008db6:	430a      	orrs	r2, r1
 8008db8:	491f      	ldr	r1, [pc, #124]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	614b      	str	r3, [r1, #20]
 8008dbe:	e011      	b.n	8008de4 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008dc0:	4b1d      	ldr	r3, [pc, #116]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008dc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6892      	ldr	r2, [r2, #8]
 8008dd0:	0211      	lsls	r1, r2, #8
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6912      	ldr	r2, [r2, #16]
 8008dd6:	0852      	lsrs	r2, r2, #1
 8008dd8:	3a01      	subs	r2, #1
 8008dda:	0652      	lsls	r2, r2, #25
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	4916      	ldr	r1, [pc, #88]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008de4:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a13      	ldr	r2, [pc, #76]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df0:	f7fe fa12 	bl	8007218 <HAL_GetTick>
 8008df4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008df6:	e009      	b.n	8008e0c <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008df8:	f7fe fa0e 	bl	8007218 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d902      	bls.n	8008e0c <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	73fb      	strb	r3, [r7, #15]
          break;
 8008e0a:	e005      	b.n	8008e18 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0ef      	beq.n	8008df8 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008e1e:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008e20:	695a      	ldr	r2, [r3, #20]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	4904      	ldr	r1, [pc, #16]	; (8008e38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	40021000 	.word	0x40021000

08008e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e01d      	b.n	8008e8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d106      	bne.n	8008e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f815 	bl	8008e92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f000 f986 	bl	800918c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008e9a:	bf00      	nop
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
	...

08008ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0201 	orr.w	r2, r2, #1
 8008ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689a      	ldr	r2, [r3, #8]
 8008ec6:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <HAL_TIM_Base_Start_IT+0x50>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b06      	cmp	r3, #6
 8008ed0:	d00b      	beq.n	8008eea <HAL_TIM_Base_Start_IT+0x42>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed8:	d007      	beq.n	8008eea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f042 0201 	orr.w	r2, r2, #1
 8008ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	00010007 	.word	0x00010007

08008efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f003 0302 	and.w	r3, r3, #2
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d122      	bne.n	8008f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d11b      	bne.n	8008f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f06f 0202 	mvn.w	r2, #2
 8008f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	f003 0303 	and.w	r3, r3, #3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f905 	bl	800914e <HAL_TIM_IC_CaptureCallback>
 8008f44:	e005      	b.n	8008f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f8f7 	bl	800913a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f908 	bl	8009162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f003 0304 	and.w	r3, r3, #4
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d122      	bne.n	8008fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f003 0304 	and.w	r3, r3, #4
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	d11b      	bne.n	8008fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f06f 0204 	mvn.w	r2, #4
 8008f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f8db 	bl	800914e <HAL_TIM_IC_CaptureCallback>
 8008f98:	e005      	b.n	8008fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f8cd 	bl	800913a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f8de 	bl	8009162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d122      	bne.n	8009000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f003 0308 	and.w	r3, r3, #8
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	d11b      	bne.n	8009000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f06f 0208 	mvn.w	r2, #8
 8008fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2204      	movs	r2, #4
 8008fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	f003 0303 	and.w	r3, r3, #3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f8b1 	bl	800914e <HAL_TIM_IC_CaptureCallback>
 8008fec:	e005      	b.n	8008ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f8a3 	bl	800913a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f8b4 	bl	8009162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f003 0310 	and.w	r3, r3, #16
 800900a:	2b10      	cmp	r3, #16
 800900c:	d122      	bne.n	8009054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f003 0310 	and.w	r3, r3, #16
 8009018:	2b10      	cmp	r3, #16
 800901a:	d11b      	bne.n	8009054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f06f 0210 	mvn.w	r2, #16
 8009024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2208      	movs	r2, #8
 800902a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f887 	bl	800914e <HAL_TIM_IC_CaptureCallback>
 8009040:	e005      	b.n	800904e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f879 	bl	800913a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f88a 	bl	8009162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b01      	cmp	r3, #1
 8009060:	d10e      	bne.n	8009080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b01      	cmp	r3, #1
 800906e:	d107      	bne.n	8009080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f06f 0201 	mvn.w	r2, #1
 8009078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7f8 f8d0 	bl	8001220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800908a:	2b80      	cmp	r3, #128	; 0x80
 800908c:	d10e      	bne.n	80090ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009098:	2b80      	cmp	r3, #128	; 0x80
 800909a:	d107      	bne.n	80090ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f914 	bl	80092d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ba:	d10e      	bne.n	80090da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c6:	2b80      	cmp	r3, #128	; 0x80
 80090c8:	d107      	bne.n	80090da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80090d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f907 	bl	80092e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e4:	2b40      	cmp	r3, #64	; 0x40
 80090e6:	d10e      	bne.n	8009106 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f2:	2b40      	cmp	r3, #64	; 0x40
 80090f4:	d107      	bne.n	8009106 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f838 	bl	8009176 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b20      	cmp	r3, #32
 8009112:	d10e      	bne.n	8009132 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b20      	cmp	r3, #32
 8009120:	d107      	bne.n	8009132 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f06f 0220 	mvn.w	r2, #32
 800912a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f8c7 	bl	80092c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009132:	bf00      	nop
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009142:	bf00      	nop
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800914e:	b480      	push	{r7}
 8009150:	b083      	sub	sp, #12
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800916a:	bf00      	nop
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
	...

0800918c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a40      	ldr	r2, [pc, #256]	; (80092a0 <TIM_Base_SetConfig+0x114>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d013      	beq.n	80091cc <TIM_Base_SetConfig+0x40>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091aa:	d00f      	beq.n	80091cc <TIM_Base_SetConfig+0x40>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a3d      	ldr	r2, [pc, #244]	; (80092a4 <TIM_Base_SetConfig+0x118>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00b      	beq.n	80091cc <TIM_Base_SetConfig+0x40>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a3c      	ldr	r2, [pc, #240]	; (80092a8 <TIM_Base_SetConfig+0x11c>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <TIM_Base_SetConfig+0x40>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a3b      	ldr	r2, [pc, #236]	; (80092ac <TIM_Base_SetConfig+0x120>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d003      	beq.n	80091cc <TIM_Base_SetConfig+0x40>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a3a      	ldr	r2, [pc, #232]	; (80092b0 <TIM_Base_SetConfig+0x124>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d108      	bne.n	80091de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a2f      	ldr	r2, [pc, #188]	; (80092a0 <TIM_Base_SetConfig+0x114>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d01f      	beq.n	8009226 <TIM_Base_SetConfig+0x9a>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ec:	d01b      	beq.n	8009226 <TIM_Base_SetConfig+0x9a>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a2c      	ldr	r2, [pc, #176]	; (80092a4 <TIM_Base_SetConfig+0x118>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d017      	beq.n	8009226 <TIM_Base_SetConfig+0x9a>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a2b      	ldr	r2, [pc, #172]	; (80092a8 <TIM_Base_SetConfig+0x11c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d013      	beq.n	8009226 <TIM_Base_SetConfig+0x9a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a2a      	ldr	r2, [pc, #168]	; (80092ac <TIM_Base_SetConfig+0x120>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d00f      	beq.n	8009226 <TIM_Base_SetConfig+0x9a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a29      	ldr	r2, [pc, #164]	; (80092b0 <TIM_Base_SetConfig+0x124>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d00b      	beq.n	8009226 <TIM_Base_SetConfig+0x9a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a28      	ldr	r2, [pc, #160]	; (80092b4 <TIM_Base_SetConfig+0x128>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d007      	beq.n	8009226 <TIM_Base_SetConfig+0x9a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a27      	ldr	r2, [pc, #156]	; (80092b8 <TIM_Base_SetConfig+0x12c>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d003      	beq.n	8009226 <TIM_Base_SetConfig+0x9a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a26      	ldr	r2, [pc, #152]	; (80092bc <TIM_Base_SetConfig+0x130>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d108      	bne.n	8009238 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800922c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	4313      	orrs	r3, r2
 8009236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a10      	ldr	r2, [pc, #64]	; (80092a0 <TIM_Base_SetConfig+0x114>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d00f      	beq.n	8009284 <TIM_Base_SetConfig+0xf8>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a12      	ldr	r2, [pc, #72]	; (80092b0 <TIM_Base_SetConfig+0x124>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d00b      	beq.n	8009284 <TIM_Base_SetConfig+0xf8>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a11      	ldr	r2, [pc, #68]	; (80092b4 <TIM_Base_SetConfig+0x128>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d007      	beq.n	8009284 <TIM_Base_SetConfig+0xf8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a10      	ldr	r2, [pc, #64]	; (80092b8 <TIM_Base_SetConfig+0x12c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d003      	beq.n	8009284 <TIM_Base_SetConfig+0xf8>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a0f      	ldr	r2, [pc, #60]	; (80092bc <TIM_Base_SetConfig+0x130>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d103      	bne.n	800928c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	691a      	ldr	r2, [r3, #16]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	615a      	str	r2, [r3, #20]
}
 8009292:	bf00      	nop
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	40012c00 	.word	0x40012c00
 80092a4:	40000400 	.word	0x40000400
 80092a8:	40000800 	.word	0x40000800
 80092ac:	40000c00 	.word	0x40000c00
 80092b0:	40013400 	.word	0x40013400
 80092b4:	40014000 	.word	0x40014000
 80092b8:	40014400 	.word	0x40014400
 80092bc:	40014800 	.word	0x40014800

080092c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e040      	b.n	8009390 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009312:	2b00      	cmp	r3, #0
 8009314:	d106      	bne.n	8009324 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7f8 f97c 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2224      	movs	r2, #36	; 0x24
 8009328:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0201 	bic.w	r2, r2, #1
 8009338:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f8c0 	bl	80094c0 <UART_SetConfig>
 8009340:	4603      	mov	r3, r0
 8009342:	2b01      	cmp	r3, #1
 8009344:	d101      	bne.n	800934a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e022      	b.n	8009390 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fc26 	bl	8009ba4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f042 0201 	orr.w	r2, r2, #1
 8009386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fcad 	bl	8009ce8 <UART_CheckIdleState>
 800938e:	4603      	mov	r3, r0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08a      	sub	sp, #40	; 0x28
 800939c:	af02      	add	r7, sp, #8
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	603b      	str	r3, [r7, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ac:	2b20      	cmp	r3, #32
 80093ae:	f040 8081 	bne.w	80094b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <HAL_UART_Transmit+0x26>
 80093b8:	88fb      	ldrh	r3, [r7, #6]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e079      	b.n	80094b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d101      	bne.n	80093d0 <HAL_UART_Transmit+0x38>
 80093cc:	2302      	movs	r3, #2
 80093ce:	e072      	b.n	80094b6 <HAL_UART_Transmit+0x11e>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2221      	movs	r2, #33	; 0x21
 80093e2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80093e4:	f7fd ff18 	bl	8007218 <HAL_GetTick>
 80093e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	88fa      	ldrh	r2, [r7, #6]
 80093ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	88fa      	ldrh	r2, [r7, #6]
 80093f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009402:	d108      	bne.n	8009416 <HAL_UART_Transmit+0x7e>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d104      	bne.n	8009416 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	61bb      	str	r3, [r7, #24]
 8009414:	e003      	b.n	800941e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800941a:	2300      	movs	r3, #0
 800941c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009426:	e02d      	b.n	8009484 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2200      	movs	r2, #0
 8009430:	2180      	movs	r1, #128	; 0x80
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fc9d 	bl	8009d72 <UART_WaitOnFlagUntilTimeout>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e039      	b.n	80094b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10b      	bne.n	8009460 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	881a      	ldrh	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009454:	b292      	uxth	r2, r2
 8009456:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	3302      	adds	r3, #2
 800945c:	61bb      	str	r3, [r7, #24]
 800945e:	e008      	b.n	8009472 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	781a      	ldrb	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	b292      	uxth	r2, r2
 800946a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	3301      	adds	r3, #1
 8009470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009478:	b29b      	uxth	r3, r3
 800947a:	3b01      	subs	r3, #1
 800947c:	b29a      	uxth	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800948a:	b29b      	uxth	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1cb      	bne.n	8009428 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2200      	movs	r2, #0
 8009498:	2140      	movs	r1, #64	; 0x40
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 fc69 	bl	8009d72 <UART_WaitOnFlagUntilTimeout>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e005      	b.n	80094b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2220      	movs	r2, #32
 80094ae:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	e000      	b.n	80094b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80094b4:	2302      	movs	r3, #2
  }
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3720      	adds	r7, #32
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80094c4:	b08a      	sub	sp, #40	; 0x28
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	431a      	orrs	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	431a      	orrs	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	4bb8      	ldr	r3, [pc, #736]	; (80097d8 <UART_SetConfig+0x318>)
 80094f6:	4013      	ands	r3, r2
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6812      	ldr	r2, [r2, #0]
 80094fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094fe:	430b      	orrs	r3, r1
 8009500:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4aae      	ldr	r2, [pc, #696]	; (80097dc <UART_SetConfig+0x31c>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d004      	beq.n	8009532 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800952e:	4313      	orrs	r3, r2
 8009530:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009542:	430a      	orrs	r2, r1
 8009544:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4aa5      	ldr	r2, [pc, #660]	; (80097e0 <UART_SetConfig+0x320>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d126      	bne.n	800959e <UART_SetConfig+0xde>
 8009550:	4ba4      	ldr	r3, [pc, #656]	; (80097e4 <UART_SetConfig+0x324>)
 8009552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	2b03      	cmp	r3, #3
 800955c:	d81a      	bhi.n	8009594 <UART_SetConfig+0xd4>
 800955e:	a201      	add	r2, pc, #4	; (adr r2, 8009564 <UART_SetConfig+0xa4>)
 8009560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009564:	08009575 	.word	0x08009575
 8009568:	08009585 	.word	0x08009585
 800956c:	0800957d 	.word	0x0800957d
 8009570:	0800958d 	.word	0x0800958d
 8009574:	2301      	movs	r3, #1
 8009576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800957a:	e105      	b.n	8009788 <UART_SetConfig+0x2c8>
 800957c:	2302      	movs	r3, #2
 800957e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009582:	e101      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009584:	2304      	movs	r3, #4
 8009586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800958a:	e0fd      	b.n	8009788 <UART_SetConfig+0x2c8>
 800958c:	2308      	movs	r3, #8
 800958e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009592:	e0f9      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009594:	2310      	movs	r3, #16
 8009596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800959a:	bf00      	nop
 800959c:	e0f4      	b.n	8009788 <UART_SetConfig+0x2c8>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a91      	ldr	r2, [pc, #580]	; (80097e8 <UART_SetConfig+0x328>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d138      	bne.n	800961a <UART_SetConfig+0x15a>
 80095a8:	4b8e      	ldr	r3, [pc, #568]	; (80097e4 <UART_SetConfig+0x324>)
 80095aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ae:	f003 030c 	and.w	r3, r3, #12
 80095b2:	2b0c      	cmp	r3, #12
 80095b4:	d82c      	bhi.n	8009610 <UART_SetConfig+0x150>
 80095b6:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <UART_SetConfig+0xfc>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095f1 	.word	0x080095f1
 80095c0:	08009611 	.word	0x08009611
 80095c4:	08009611 	.word	0x08009611
 80095c8:	08009611 	.word	0x08009611
 80095cc:	08009601 	.word	0x08009601
 80095d0:	08009611 	.word	0x08009611
 80095d4:	08009611 	.word	0x08009611
 80095d8:	08009611 	.word	0x08009611
 80095dc:	080095f9 	.word	0x080095f9
 80095e0:	08009611 	.word	0x08009611
 80095e4:	08009611 	.word	0x08009611
 80095e8:	08009611 	.word	0x08009611
 80095ec:	08009609 	.word	0x08009609
 80095f0:	2300      	movs	r3, #0
 80095f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095f6:	e0c7      	b.n	8009788 <UART_SetConfig+0x2c8>
 80095f8:	2302      	movs	r3, #2
 80095fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095fe:	e0c3      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009600:	2304      	movs	r3, #4
 8009602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009606:	e0bf      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009608:	2308      	movs	r3, #8
 800960a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800960e:	e0bb      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009610:	2310      	movs	r3, #16
 8009612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009616:	bf00      	nop
 8009618:	e0b6      	b.n	8009788 <UART_SetConfig+0x2c8>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a73      	ldr	r2, [pc, #460]	; (80097ec <UART_SetConfig+0x32c>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d125      	bne.n	8009670 <UART_SetConfig+0x1b0>
 8009624:	4b6f      	ldr	r3, [pc, #444]	; (80097e4 <UART_SetConfig+0x324>)
 8009626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800962a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800962e:	2b10      	cmp	r3, #16
 8009630:	d011      	beq.n	8009656 <UART_SetConfig+0x196>
 8009632:	2b10      	cmp	r3, #16
 8009634:	d802      	bhi.n	800963c <UART_SetConfig+0x17c>
 8009636:	2b00      	cmp	r3, #0
 8009638:	d005      	beq.n	8009646 <UART_SetConfig+0x186>
 800963a:	e014      	b.n	8009666 <UART_SetConfig+0x1a6>
 800963c:	2b20      	cmp	r3, #32
 800963e:	d006      	beq.n	800964e <UART_SetConfig+0x18e>
 8009640:	2b30      	cmp	r3, #48	; 0x30
 8009642:	d00c      	beq.n	800965e <UART_SetConfig+0x19e>
 8009644:	e00f      	b.n	8009666 <UART_SetConfig+0x1a6>
 8009646:	2300      	movs	r3, #0
 8009648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800964c:	e09c      	b.n	8009788 <UART_SetConfig+0x2c8>
 800964e:	2302      	movs	r3, #2
 8009650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009654:	e098      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009656:	2304      	movs	r3, #4
 8009658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800965c:	e094      	b.n	8009788 <UART_SetConfig+0x2c8>
 800965e:	2308      	movs	r3, #8
 8009660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009664:	e090      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009666:	2310      	movs	r3, #16
 8009668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800966c:	bf00      	nop
 800966e:	e08b      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a5e      	ldr	r2, [pc, #376]	; (80097f0 <UART_SetConfig+0x330>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d125      	bne.n	80096c6 <UART_SetConfig+0x206>
 800967a:	4b5a      	ldr	r3, [pc, #360]	; (80097e4 <UART_SetConfig+0x324>)
 800967c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009680:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009684:	2b40      	cmp	r3, #64	; 0x40
 8009686:	d011      	beq.n	80096ac <UART_SetConfig+0x1ec>
 8009688:	2b40      	cmp	r3, #64	; 0x40
 800968a:	d802      	bhi.n	8009692 <UART_SetConfig+0x1d2>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <UART_SetConfig+0x1dc>
 8009690:	e014      	b.n	80096bc <UART_SetConfig+0x1fc>
 8009692:	2b80      	cmp	r3, #128	; 0x80
 8009694:	d006      	beq.n	80096a4 <UART_SetConfig+0x1e4>
 8009696:	2bc0      	cmp	r3, #192	; 0xc0
 8009698:	d00c      	beq.n	80096b4 <UART_SetConfig+0x1f4>
 800969a:	e00f      	b.n	80096bc <UART_SetConfig+0x1fc>
 800969c:	2300      	movs	r3, #0
 800969e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096a2:	e071      	b.n	8009788 <UART_SetConfig+0x2c8>
 80096a4:	2302      	movs	r3, #2
 80096a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096aa:	e06d      	b.n	8009788 <UART_SetConfig+0x2c8>
 80096ac:	2304      	movs	r3, #4
 80096ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096b2:	e069      	b.n	8009788 <UART_SetConfig+0x2c8>
 80096b4:	2308      	movs	r3, #8
 80096b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096ba:	e065      	b.n	8009788 <UART_SetConfig+0x2c8>
 80096bc:	2310      	movs	r3, #16
 80096be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096c2:	bf00      	nop
 80096c4:	e060      	b.n	8009788 <UART_SetConfig+0x2c8>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a4a      	ldr	r2, [pc, #296]	; (80097f4 <UART_SetConfig+0x334>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d129      	bne.n	8009724 <UART_SetConfig+0x264>
 80096d0:	4b44      	ldr	r3, [pc, #272]	; (80097e4 <UART_SetConfig+0x324>)
 80096d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096de:	d014      	beq.n	800970a <UART_SetConfig+0x24a>
 80096e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e4:	d802      	bhi.n	80096ec <UART_SetConfig+0x22c>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d007      	beq.n	80096fa <UART_SetConfig+0x23a>
 80096ea:	e016      	b.n	800971a <UART_SetConfig+0x25a>
 80096ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096f0:	d007      	beq.n	8009702 <UART_SetConfig+0x242>
 80096f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096f6:	d00c      	beq.n	8009712 <UART_SetConfig+0x252>
 80096f8:	e00f      	b.n	800971a <UART_SetConfig+0x25a>
 80096fa:	2300      	movs	r3, #0
 80096fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009700:	e042      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009702:	2302      	movs	r3, #2
 8009704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009708:	e03e      	b.n	8009788 <UART_SetConfig+0x2c8>
 800970a:	2304      	movs	r3, #4
 800970c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009710:	e03a      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009712:	2308      	movs	r3, #8
 8009714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009718:	e036      	b.n	8009788 <UART_SetConfig+0x2c8>
 800971a:	2310      	movs	r3, #16
 800971c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009720:	bf00      	nop
 8009722:	e031      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a2c      	ldr	r2, [pc, #176]	; (80097dc <UART_SetConfig+0x31c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d129      	bne.n	8009782 <UART_SetConfig+0x2c2>
 800972e:	4b2d      	ldr	r3, [pc, #180]	; (80097e4 <UART_SetConfig+0x324>)
 8009730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009734:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800973c:	d014      	beq.n	8009768 <UART_SetConfig+0x2a8>
 800973e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009742:	d802      	bhi.n	800974a <UART_SetConfig+0x28a>
 8009744:	2b00      	cmp	r3, #0
 8009746:	d007      	beq.n	8009758 <UART_SetConfig+0x298>
 8009748:	e016      	b.n	8009778 <UART_SetConfig+0x2b8>
 800974a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800974e:	d007      	beq.n	8009760 <UART_SetConfig+0x2a0>
 8009750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009754:	d00c      	beq.n	8009770 <UART_SetConfig+0x2b0>
 8009756:	e00f      	b.n	8009778 <UART_SetConfig+0x2b8>
 8009758:	2300      	movs	r3, #0
 800975a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800975e:	e013      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009760:	2302      	movs	r3, #2
 8009762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009766:	e00f      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009768:	2304      	movs	r3, #4
 800976a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800976e:	e00b      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009770:	2308      	movs	r3, #8
 8009772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009776:	e007      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009778:	2310      	movs	r3, #16
 800977a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800977e:	bf00      	nop
 8009780:	e002      	b.n	8009788 <UART_SetConfig+0x2c8>
 8009782:	2310      	movs	r3, #16
 8009784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a13      	ldr	r2, [pc, #76]	; (80097dc <UART_SetConfig+0x31c>)
 800978e:	4293      	cmp	r3, r2
 8009790:	f040 80fe 	bne.w	8009990 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009798:	2b08      	cmp	r3, #8
 800979a:	d837      	bhi.n	800980c <UART_SetConfig+0x34c>
 800979c:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <UART_SetConfig+0x2e4>)
 800979e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a2:	bf00      	nop
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	0800980d 	.word	0x0800980d
 80097ac:	080097d1 	.word	0x080097d1
 80097b0:	0800980d 	.word	0x0800980d
 80097b4:	080097fd 	.word	0x080097fd
 80097b8:	0800980d 	.word	0x0800980d
 80097bc:	0800980d 	.word	0x0800980d
 80097c0:	0800980d 	.word	0x0800980d
 80097c4:	08009805 	.word	0x08009805
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80097c8:	f7fe fdb8 	bl	800833c <HAL_RCC_GetPCLK1Freq>
 80097cc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80097ce:	e020      	b.n	8009812 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80097d0:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <UART_SetConfig+0x338>)
 80097d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80097d4:	e01d      	b.n	8009812 <UART_SetConfig+0x352>
 80097d6:	bf00      	nop
 80097d8:	efff69f3 	.word	0xefff69f3
 80097dc:	40008000 	.word	0x40008000
 80097e0:	40013800 	.word	0x40013800
 80097e4:	40021000 	.word	0x40021000
 80097e8:	40004400 	.word	0x40004400
 80097ec:	40004800 	.word	0x40004800
 80097f0:	40004c00 	.word	0x40004c00
 80097f4:	40005000 	.word	0x40005000
 80097f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80097fc:	f7fe fd08 	bl	8008210 <HAL_RCC_GetSysClockFreq>
 8009800:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009802:	e006      	b.n	8009812 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8009804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009808:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800980a:	e002      	b.n	8009812 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	76fb      	strb	r3, [r7, #27]
        break;
 8009810:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 81b9 	beq.w	8009b8c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	4613      	mov	r3, r2
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	4413      	add	r3, r2
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	429a      	cmp	r2, r3
 8009828:	d305      	bcc.n	8009836 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	429a      	cmp	r2, r3
 8009834:	d902      	bls.n	800983c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	76fb      	strb	r3, [r7, #27]
 800983a:	e1a7      	b.n	8009b8c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800983c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009840:	2b08      	cmp	r3, #8
 8009842:	f200 8092 	bhi.w	800996a <UART_SetConfig+0x4aa>
 8009846:	a201      	add	r2, pc, #4	; (adr r2, 800984c <UART_SetConfig+0x38c>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	08009871 	.word	0x08009871
 8009850:	0800996b 	.word	0x0800996b
 8009854:	080098bf 	.word	0x080098bf
 8009858:	0800996b 	.word	0x0800996b
 800985c:	080098f3 	.word	0x080098f3
 8009860:	0800996b 	.word	0x0800996b
 8009864:	0800996b 	.word	0x0800996b
 8009868:	0800996b 	.word	0x0800996b
 800986c:	08009941 	.word	0x08009941
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8009870:	f7fe fd64 	bl	800833c <HAL_RCC_GetPCLK1Freq>
 8009874:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	4619      	mov	r1, r3
 800987a:	f04f 0200 	mov.w	r2, #0
 800987e:	f04f 0300 	mov.w	r3, #0
 8009882:	f04f 0400 	mov.w	r4, #0
 8009886:	0214      	lsls	r4, r2, #8
 8009888:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800988c:	020b      	lsls	r3, r1, #8
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6852      	ldr	r2, [r2, #4]
 8009892:	0852      	lsrs	r2, r2, #1
 8009894:	4611      	mov	r1, r2
 8009896:	f04f 0200 	mov.w	r2, #0
 800989a:	eb13 0b01 	adds.w	fp, r3, r1
 800989e:	eb44 0c02 	adc.w	ip, r4, r2
 80098a2:	4658      	mov	r0, fp
 80098a4:	4661      	mov	r1, ip
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f04f 0400 	mov.w	r4, #0
 80098ae:	461a      	mov	r2, r3
 80098b0:	4623      	mov	r3, r4
 80098b2:	f7f6 fcf5 	bl	80002a0 <__aeabi_uldivmod>
 80098b6:	4603      	mov	r3, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80098bc:	e058      	b.n	8009970 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	085b      	lsrs	r3, r3, #1
 80098c4:	f04f 0400 	mov.w	r4, #0
 80098c8:	49ae      	ldr	r1, [pc, #696]	; (8009b84 <UART_SetConfig+0x6c4>)
 80098ca:	f04f 0200 	mov.w	r2, #0
 80098ce:	eb13 0b01 	adds.w	fp, r3, r1
 80098d2:	eb44 0c02 	adc.w	ip, r4, r2
 80098d6:	4658      	mov	r0, fp
 80098d8:	4661      	mov	r1, ip
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f04f 0400 	mov.w	r4, #0
 80098e2:	461a      	mov	r2, r3
 80098e4:	4623      	mov	r3, r4
 80098e6:	f7f6 fcdb 	bl	80002a0 <__aeabi_uldivmod>
 80098ea:	4603      	mov	r3, r0
 80098ec:	460c      	mov	r4, r1
 80098ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80098f0:	e03e      	b.n	8009970 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80098f2:	f7fe fc8d 	bl	8008210 <HAL_RCC_GetSysClockFreq>
 80098f6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	4619      	mov	r1, r3
 80098fc:	f04f 0200 	mov.w	r2, #0
 8009900:	f04f 0300 	mov.w	r3, #0
 8009904:	f04f 0400 	mov.w	r4, #0
 8009908:	0214      	lsls	r4, r2, #8
 800990a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800990e:	020b      	lsls	r3, r1, #8
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6852      	ldr	r2, [r2, #4]
 8009914:	0852      	lsrs	r2, r2, #1
 8009916:	4611      	mov	r1, r2
 8009918:	f04f 0200 	mov.w	r2, #0
 800991c:	eb13 0b01 	adds.w	fp, r3, r1
 8009920:	eb44 0c02 	adc.w	ip, r4, r2
 8009924:	4658      	mov	r0, fp
 8009926:	4661      	mov	r1, ip
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f04f 0400 	mov.w	r4, #0
 8009930:	461a      	mov	r2, r3
 8009932:	4623      	mov	r3, r4
 8009934:	f7f6 fcb4 	bl	80002a0 <__aeabi_uldivmod>
 8009938:	4603      	mov	r3, r0
 800993a:	460c      	mov	r4, r1
 800993c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800993e:	e017      	b.n	8009970 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	085b      	lsrs	r3, r3, #1
 8009946:	f04f 0400 	mov.w	r4, #0
 800994a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800994e:	f144 0100 	adc.w	r1, r4, #0
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f04f 0400 	mov.w	r4, #0
 800995a:	461a      	mov	r2, r3
 800995c:	4623      	mov	r3, r4
 800995e:	f7f6 fc9f 	bl	80002a0 <__aeabi_uldivmod>
 8009962:	4603      	mov	r3, r0
 8009964:	460c      	mov	r4, r1
 8009966:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8009968:	e002      	b.n	8009970 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	76fb      	strb	r3, [r7, #27]
            break;
 800996e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009976:	d308      	bcc.n	800998a <UART_SetConfig+0x4ca>
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800997e:	d204      	bcs.n	800998a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	69fa      	ldr	r2, [r7, #28]
 8009986:	60da      	str	r2, [r3, #12]
 8009988:	e100      	b.n	8009b8c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	76fb      	strb	r3, [r7, #27]
 800998e:	e0fd      	b.n	8009b8c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009998:	f040 8084 	bne.w	8009aa4 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800999c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099a0:	2b08      	cmp	r3, #8
 80099a2:	d85f      	bhi.n	8009a64 <UART_SetConfig+0x5a4>
 80099a4:	a201      	add	r2, pc, #4	; (adr r2, 80099ac <UART_SetConfig+0x4ec>)
 80099a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099aa:	bf00      	nop
 80099ac:	080099d1 	.word	0x080099d1
 80099b0:	080099f1 	.word	0x080099f1
 80099b4:	08009a11 	.word	0x08009a11
 80099b8:	08009a65 	.word	0x08009a65
 80099bc:	08009a2d 	.word	0x08009a2d
 80099c0:	08009a65 	.word	0x08009a65
 80099c4:	08009a65 	.word	0x08009a65
 80099c8:	08009a65 	.word	0x08009a65
 80099cc:	08009a4d 	.word	0x08009a4d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099d0:	f7fe fcb4 	bl	800833c <HAL_RCC_GetPCLK1Freq>
 80099d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	005a      	lsls	r2, r3, #1
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	085b      	lsrs	r3, r3, #1
 80099e0:	441a      	add	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80099ee:	e03c      	b.n	8009a6a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099f0:	f7fe fcba 	bl	8008368 <HAL_RCC_GetPCLK2Freq>
 80099f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	005a      	lsls	r2, r3, #1
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	085b      	lsrs	r3, r3, #1
 8009a00:	441a      	add	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009a0e:	e02c      	b.n	8009a6a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	085b      	lsrs	r3, r3, #1
 8009a16:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8009a1a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	6852      	ldr	r2, [r2, #4]
 8009a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009a2a:	e01e      	b.n	8009a6a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a2c:	f7fe fbf0 	bl	8008210 <HAL_RCC_GetSysClockFreq>
 8009a30:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	005a      	lsls	r2, r3, #1
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	085b      	lsrs	r3, r3, #1
 8009a3c:	441a      	add	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009a4a:	e00e      	b.n	8009a6a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	085b      	lsrs	r3, r3, #1
 8009a52:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009a62:	e002      	b.n	8009a6a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	76fb      	strb	r3, [r7, #27]
        break;
 8009a68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	2b0f      	cmp	r3, #15
 8009a6e:	d916      	bls.n	8009a9e <UART_SetConfig+0x5de>
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a76:	d212      	bcs.n	8009a9e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	f023 030f 	bic.w	r3, r3, #15
 8009a80:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	085b      	lsrs	r3, r3, #1
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	f003 0307 	and.w	r3, r3, #7
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	89fb      	ldrh	r3, [r7, #14]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	89fa      	ldrh	r2, [r7, #14]
 8009a9a:	60da      	str	r2, [r3, #12]
 8009a9c:	e076      	b.n	8009b8c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	76fb      	strb	r3, [r7, #27]
 8009aa2:	e073      	b.n	8009b8c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8009aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d85c      	bhi.n	8009b66 <UART_SetConfig+0x6a6>
 8009aac:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <UART_SetConfig+0x5f4>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009ad9 	.word	0x08009ad9
 8009ab8:	08009af7 	.word	0x08009af7
 8009abc:	08009b15 	.word	0x08009b15
 8009ac0:	08009b67 	.word	0x08009b67
 8009ac4:	08009b31 	.word	0x08009b31
 8009ac8:	08009b67 	.word	0x08009b67
 8009acc:	08009b67 	.word	0x08009b67
 8009ad0:	08009b67 	.word	0x08009b67
 8009ad4:	08009b4f 	.word	0x08009b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ad8:	f7fe fc30 	bl	800833c <HAL_RCC_GetPCLK1Freq>
 8009adc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	085a      	lsrs	r2, r3, #1
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	441a      	add	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009af4:	e03a      	b.n	8009b6c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009af6:	f7fe fc37 	bl	8008368 <HAL_RCC_GetPCLK2Freq>
 8009afa:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	085a      	lsrs	r2, r3, #1
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	441a      	add	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009b12:	e02b      	b.n	8009b6c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	085b      	lsrs	r3, r3, #1
 8009b1a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8009b1e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6852      	ldr	r2, [r2, #4]
 8009b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009b2e:	e01d      	b.n	8009b6c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b30:	f7fe fb6e 	bl	8008210 <HAL_RCC_GetSysClockFreq>
 8009b34:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	085a      	lsrs	r2, r3, #1
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	441a      	add	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009b4c:	e00e      	b.n	8009b6c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	085b      	lsrs	r3, r3, #1
 8009b54:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009b64:	e002      	b.n	8009b6c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	76fb      	strb	r3, [r7, #27]
        break;
 8009b6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	2b0f      	cmp	r3, #15
 8009b70:	d90a      	bls.n	8009b88 <UART_SetConfig+0x6c8>
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b78:	d206      	bcs.n	8009b88 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	69fa      	ldr	r2, [r7, #28]
 8009b80:	60da      	str	r2, [r3, #12]
 8009b82:	e003      	b.n	8009b8c <UART_SetConfig+0x6cc>
 8009b84:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009b98:	7efb      	ldrb	r3, [r7, #27]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3728      	adds	r7, #40	; 0x28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00a      	beq.n	8009bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	f003 0302 	and.w	r3, r3, #2
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00a      	beq.n	8009c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c16:	f003 0308 	and.w	r3, r3, #8
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00a      	beq.n	8009c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	430a      	orrs	r2, r1
 8009c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	f003 0310 	and.w	r3, r3, #16
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00a      	beq.n	8009c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	430a      	orrs	r2, r1
 8009c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00a      	beq.n	8009c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	430a      	orrs	r2, r1
 8009c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d01a      	beq.n	8009cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ca2:	d10a      	bne.n	8009cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00a      	beq.n	8009cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	605a      	str	r2, [r3, #4]
  }
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af02      	add	r7, sp, #8
 8009cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009cf6:	f7fd fa8f 	bl	8007218 <HAL_GetTick>
 8009cfa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	2b08      	cmp	r3, #8
 8009d08:	d10e      	bne.n	8009d28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f82a 	bl	8009d72 <UART_WaitOnFlagUntilTimeout>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e020      	b.n	8009d6a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 0304 	and.w	r3, r3, #4
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d10e      	bne.n	8009d54 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f814 	bl	8009d72 <UART_WaitOnFlagUntilTimeout>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e00a      	b.n	8009d6a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2220      	movs	r2, #32
 8009d58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	60f8      	str	r0, [r7, #12]
 8009d7a:	60b9      	str	r1, [r7, #8]
 8009d7c:	603b      	str	r3, [r7, #0]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d82:	e05d      	b.n	8009e40 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8a:	d059      	beq.n	8009e40 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d8c:	f7fd fa44 	bl	8007218 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	69ba      	ldr	r2, [r7, #24]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d302      	bcc.n	8009da2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d11b      	bne.n	8009dda <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009db0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689a      	ldr	r2, [r3, #8]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 0201 	bic.w	r2, r2, #1
 8009dc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e042      	b.n	8009e60 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0304 	and.w	r3, r3, #4
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d02b      	beq.n	8009e40 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009df6:	d123      	bne.n	8009e40 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e00:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e10:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689a      	ldr	r2, [r3, #8]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f022 0201 	bic.w	r2, r2, #1
 8009e20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2220      	movs	r2, #32
 8009e26:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2220      	movs	r2, #32
 8009e2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2220      	movs	r2, #32
 8009e32:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e00f      	b.n	8009e60 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	69da      	ldr	r2, [r3, #28]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	4013      	ands	r3, r2
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	bf0c      	ite	eq
 8009e50:	2301      	moveq	r3, #1
 8009e52:	2300      	movne	r3, #0
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	461a      	mov	r2, r3
 8009e58:	79fb      	ldrb	r3, [r7, #7]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d092      	beq.n	8009d84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009e6c:	f001 f86c 	bl	800af48 <vTaskStartScheduler>
  
  return osOK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e76:	b480      	push	{r7}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f103 0208 	add.w	r2, r3, #8
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f103 0208 	add.w	r2, r3, #8
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f103 0208 	add.w	r2, r3, #8
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	689a      	ldr	r2, [r3, #8]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	601a      	str	r2, [r3, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	d103      	bne.n	8009f38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	e00c      	b.n	8009f52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	60fb      	str	r3, [r7, #12]
 8009f3e:	e002      	b.n	8009f46 <vListInsert+0x2e>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d2f6      	bcs.n	8009f40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	601a      	str	r2, [r3, #0]
}
 8009f7e:	bf00      	nop
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	6892      	ldr	r2, [r2, #8]
 8009fa0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	6852      	ldr	r2, [r2, #4]
 8009faa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d103      	bne.n	8009fbe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689a      	ldr	r2, [r3, #8]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	1e5a      	subs	r2, r3, #1
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
	...

08009fe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d109      	bne.n	800a008 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	60bb      	str	r3, [r7, #8]
 800a006:	e7fe      	b.n	800a006 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a008:	f001 ff18 	bl	800be3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a014:	68f9      	ldr	r1, [r7, #12]
 800a016:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a018:	fb01 f303 	mul.w	r3, r1, r3
 800a01c:	441a      	add	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a038:	3b01      	subs	r3, #1
 800a03a:	68f9      	ldr	r1, [r7, #12]
 800a03c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a03e:	fb01 f303 	mul.w	r3, r1, r3
 800a042:	441a      	add	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	22ff      	movs	r2, #255	; 0xff
 800a04c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	22ff      	movs	r2, #255	; 0xff
 800a054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d114      	bne.n	800a088 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d01a      	beq.n	800a09c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3310      	adds	r3, #16
 800a06a:	4618      	mov	r0, r3
 800a06c:	f001 f9d8 	bl	800b420 <xTaskRemoveFromEventList>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d012      	beq.n	800a09c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a076:	4b0d      	ldr	r3, [pc, #52]	; (800a0ac <xQueueGenericReset+0xcc>)
 800a078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	e009      	b.n	800a09c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3310      	adds	r3, #16
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff fef2 	bl	8009e76 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3324      	adds	r3, #36	; 0x24
 800a096:	4618      	mov	r0, r3
 800a098:	f7ff feed 	bl	8009e76 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a09c:	f001 fefc 	bl	800be98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0a0:	2301      	movs	r3, #1
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	e000ed04 	.word	0xe000ed04

0800a0b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08a      	sub	sp, #40	; 0x28
 800a0b4:	af02      	add	r7, sp, #8
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d109      	bne.n	800a0d8 <xQueueGenericCreate+0x28>
 800a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	613b      	str	r3, [r7, #16]
 800a0d6:	e7fe      	b.n	800a0d6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d102      	bne.n	800a0e4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	e004      	b.n	800a0ee <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	fb02 f303 	mul.w	r3, r2, r3
 800a0ec:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	3350      	adds	r3, #80	; 0x50
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 ffbc 	bl	800c070 <pvPortMalloc>
 800a0f8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d011      	beq.n	800a124 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	3350      	adds	r3, #80	; 0x50
 800a108:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a112:	79fa      	ldrb	r2, [r7, #7]
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	4613      	mov	r3, r2
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	68b9      	ldr	r1, [r7, #8]
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 f805 	bl	800a12e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a124:	69bb      	ldr	r3, [r7, #24]
	}
 800a126:	4618      	mov	r0, r3
 800a128:	3720      	adds	r7, #32
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d103      	bne.n	800a14a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	69ba      	ldr	r2, [r7, #24]
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	e002      	b.n	800a150 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a15c:	2101      	movs	r1, #1
 800a15e:	69b8      	ldr	r0, [r7, #24]
 800a160:	f7ff ff3e 	bl	8009fe0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a16c:	bf00      	nop
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08e      	sub	sp, #56	; 0x38
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a182:	2300      	movs	r3, #0
 800a184:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d109      	bne.n	800a1a4 <xQueueGenericSend+0x30>
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1a2:	e7fe      	b.n	800a1a2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d103      	bne.n	800a1b2 <xQueueGenericSend+0x3e>
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <xQueueGenericSend+0x42>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <xQueueGenericSend+0x44>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d109      	bne.n	800a1d0 <xQueueGenericSend+0x5c>
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ce:	e7fe      	b.n	800a1ce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d103      	bne.n	800a1de <xQueueGenericSend+0x6a>
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <xQueueGenericSend+0x6e>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <xQueueGenericSend+0x70>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d109      	bne.n	800a1fc <xQueueGenericSend+0x88>
 800a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	623b      	str	r3, [r7, #32]
 800a1fa:	e7fe      	b.n	800a1fa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1fc:	f001 fac6 	bl	800b78c <xTaskGetSchedulerState>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d102      	bne.n	800a20c <xQueueGenericSend+0x98>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <xQueueGenericSend+0x9c>
 800a20c:	2301      	movs	r3, #1
 800a20e:	e000      	b.n	800a212 <xQueueGenericSend+0x9e>
 800a210:	2300      	movs	r3, #0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <xQueueGenericSend+0xb6>
 800a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	61fb      	str	r3, [r7, #28]
 800a228:	e7fe      	b.n	800a228 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a22a:	f001 fe07 	bl	800be3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a236:	429a      	cmp	r2, r3
 800a238:	d302      	bcc.n	800a240 <xQueueGenericSend+0xcc>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d129      	bne.n	800a294 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	68b9      	ldr	r1, [r7, #8]
 800a244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a246:	f000 fb9c 	bl	800a982 <prvCopyDataToQueue>
 800a24a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	2b00      	cmp	r3, #0
 800a252:	d010      	beq.n	800a276 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	3324      	adds	r3, #36	; 0x24
 800a258:	4618      	mov	r0, r3
 800a25a:	f001 f8e1 	bl	800b420 <xTaskRemoveFromEventList>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d013      	beq.n	800a28c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a264:	4b3f      	ldr	r3, [pc, #252]	; (800a364 <xQueueGenericSend+0x1f0>)
 800a266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	e00a      	b.n	800a28c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d007      	beq.n	800a28c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a27c:	4b39      	ldr	r3, [pc, #228]	; (800a364 <xQueueGenericSend+0x1f0>)
 800a27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a28c:	f001 fe04 	bl	800be98 <vPortExitCritical>
				return pdPASS;
 800a290:	2301      	movs	r3, #1
 800a292:	e063      	b.n	800a35c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d103      	bne.n	800a2a2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a29a:	f001 fdfd 	bl	800be98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e05c      	b.n	800a35c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2a8:	f107 0314 	add.w	r3, r7, #20
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f001 f919 	bl	800b4e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2b6:	f001 fdef 	bl	800be98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2ba:	f000 fea5 	bl	800b008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2be:	f001 fdbd 	bl	800be3c <vPortEnterCritical>
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2c8:	b25b      	sxtb	r3, r3
 800a2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ce:	d103      	bne.n	800a2d8 <xQueueGenericSend+0x164>
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2de:	b25b      	sxtb	r3, r3
 800a2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e4:	d103      	bne.n	800a2ee <xQueueGenericSend+0x17a>
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2ee:	f001 fdd3 	bl	800be98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2f2:	1d3a      	adds	r2, r7, #4
 800a2f4:	f107 0314 	add.w	r3, r7, #20
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f001 f908 	bl	800b510 <xTaskCheckForTimeOut>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d124      	bne.n	800a350 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a308:	f000 fc33 	bl	800ab72 <prvIsQueueFull>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d018      	beq.n	800a344 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	3310      	adds	r3, #16
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	4611      	mov	r1, r2
 800a31a:	4618      	mov	r0, r3
 800a31c:	f001 f85c 	bl	800b3d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a322:	f000 fbbe 	bl	800aaa2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a326:	f000 fe7d 	bl	800b024 <xTaskResumeAll>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f47f af7c 	bne.w	800a22a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a332:	4b0c      	ldr	r3, [pc, #48]	; (800a364 <xQueueGenericSend+0x1f0>)
 800a334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	e772      	b.n	800a22a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a346:	f000 fbac 	bl	800aaa2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a34a:	f000 fe6b 	bl	800b024 <xTaskResumeAll>
 800a34e:	e76c      	b.n	800a22a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a352:	f000 fba6 	bl	800aaa2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a356:	f000 fe65 	bl	800b024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a35a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3738      	adds	r7, #56	; 0x38
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	e000ed04 	.word	0xe000ed04

0800a368 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08e      	sub	sp, #56	; 0x38
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d109      	bne.n	800a394 <xQueueGenericSendFromISR+0x2c>
 800a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	627b      	str	r3, [r7, #36]	; 0x24
 800a392:	e7fe      	b.n	800a392 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d103      	bne.n	800a3a2 <xQueueGenericSendFromISR+0x3a>
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <xQueueGenericSendFromISR+0x3e>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e000      	b.n	800a3a8 <xQueueGenericSendFromISR+0x40>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d109      	bne.n	800a3c0 <xQueueGenericSendFromISR+0x58>
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	623b      	str	r3, [r7, #32]
 800a3be:	e7fe      	b.n	800a3be <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d103      	bne.n	800a3ce <xQueueGenericSendFromISR+0x66>
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <xQueueGenericSendFromISR+0x6a>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e000      	b.n	800a3d4 <xQueueGenericSendFromISR+0x6c>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d109      	bne.n	800a3ec <xQueueGenericSendFromISR+0x84>
 800a3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	61fb      	str	r3, [r7, #28]
 800a3ea:	e7fe      	b.n	800a3ea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3ec:	f001 fe02 	bl	800bff4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3f0:	f3ef 8211 	mrs	r2, BASEPRI
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	61ba      	str	r2, [r7, #24]
 800a406:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a408:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a414:	429a      	cmp	r2, r3
 800a416:	d302      	bcc.n	800a41e <xQueueGenericSendFromISR+0xb6>
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d12c      	bne.n	800a478 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a42e:	f000 faa8 	bl	800a982 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a432:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43a:	d112      	bne.n	800a462 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	2b00      	cmp	r3, #0
 800a442:	d016      	beq.n	800a472 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a446:	3324      	adds	r3, #36	; 0x24
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 ffe9 	bl	800b420 <xTaskRemoveFromEventList>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00e      	beq.n	800a472 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00b      	beq.n	800a472 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	e007      	b.n	800a472 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a462:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a466:	3301      	adds	r3, #1
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	b25a      	sxtb	r2, r3
 800a46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a472:	2301      	movs	r3, #1
 800a474:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a476:	e001      	b.n	800a47c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a478:	2300      	movs	r3, #0
 800a47a:	637b      	str	r3, [r7, #52]	; 0x34
 800a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3738      	adds	r7, #56	; 0x38
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08c      	sub	sp, #48	; 0x30
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a49c:	2300      	movs	r3, #0
 800a49e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d109      	bne.n	800a4be <xQueueReceive+0x2e>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	623b      	str	r3, [r7, #32]
 800a4bc:	e7fe      	b.n	800a4bc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d103      	bne.n	800a4cc <xQueueReceive+0x3c>
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <xQueueReceive+0x40>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <xQueueReceive+0x42>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d109      	bne.n	800a4ea <xQueueReceive+0x5a>
 800a4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	61fb      	str	r3, [r7, #28]
 800a4e8:	e7fe      	b.n	800a4e8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4ea:	f001 f94f 	bl	800b78c <xTaskGetSchedulerState>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <xQueueReceive+0x6a>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <xQueueReceive+0x6e>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e000      	b.n	800a500 <xQueueReceive+0x70>
 800a4fe:	2300      	movs	r3, #0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d109      	bne.n	800a518 <xQueueReceive+0x88>
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	61bb      	str	r3, [r7, #24]
 800a516:	e7fe      	b.n	800a516 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a518:	f001 fc90 	bl	800be3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01f      	beq.n	800a568 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a528:	68b9      	ldr	r1, [r7, #8]
 800a52a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52c:	f000 fa93 	bl	800aa56 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a532:	1e5a      	subs	r2, r3, #1
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00f      	beq.n	800a560 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	3310      	adds	r3, #16
 800a544:	4618      	mov	r0, r3
 800a546:	f000 ff6b 	bl	800b420 <xTaskRemoveFromEventList>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d007      	beq.n	800a560 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a550:	4b3c      	ldr	r3, [pc, #240]	; (800a644 <xQueueReceive+0x1b4>)
 800a552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a556:	601a      	str	r2, [r3, #0]
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a560:	f001 fc9a 	bl	800be98 <vPortExitCritical>
				return pdPASS;
 800a564:	2301      	movs	r3, #1
 800a566:	e069      	b.n	800a63c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d103      	bne.n	800a576 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a56e:	f001 fc93 	bl	800be98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a572:	2300      	movs	r3, #0
 800a574:	e062      	b.n	800a63c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d106      	bne.n	800a58a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a57c:	f107 0310 	add.w	r3, r7, #16
 800a580:	4618      	mov	r0, r3
 800a582:	f000 ffaf 	bl	800b4e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a586:	2301      	movs	r3, #1
 800a588:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a58a:	f001 fc85 	bl	800be98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a58e:	f000 fd3b 	bl	800b008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a592:	f001 fc53 	bl	800be3c <vPortEnterCritical>
 800a596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a59c:	b25b      	sxtb	r3, r3
 800a59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a2:	d103      	bne.n	800a5ac <xQueueReceive+0x11c>
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5b2:	b25b      	sxtb	r3, r3
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b8:	d103      	bne.n	800a5c2 <xQueueReceive+0x132>
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5c2:	f001 fc69 	bl	800be98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5c6:	1d3a      	adds	r2, r7, #4
 800a5c8:	f107 0310 	add.w	r3, r7, #16
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 ff9e 	bl	800b510 <xTaskCheckForTimeOut>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d123      	bne.n	800a622 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5dc:	f000 fab3 	bl	800ab46 <prvIsQueueEmpty>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d017      	beq.n	800a616 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e8:	3324      	adds	r3, #36	; 0x24
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 fef2 	bl	800b3d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f6:	f000 fa54 	bl	800aaa2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5fa:	f000 fd13 	bl	800b024 <xTaskResumeAll>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d189      	bne.n	800a518 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a604:	4b0f      	ldr	r3, [pc, #60]	; (800a644 <xQueueReceive+0x1b4>)
 800a606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	e780      	b.n	800a518 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a618:	f000 fa43 	bl	800aaa2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a61c:	f000 fd02 	bl	800b024 <xTaskResumeAll>
 800a620:	e77a      	b.n	800a518 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a624:	f000 fa3d 	bl	800aaa2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a628:	f000 fcfc 	bl	800b024 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a62e:	f000 fa8a 	bl	800ab46 <prvIsQueueEmpty>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	f43f af6f 	beq.w	800a518 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a63a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3730      	adds	r7, #48	; 0x30
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	e000ed04 	.word	0xe000ed04

0800a648 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08e      	sub	sp, #56	; 0x38
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a652:	2300      	movs	r3, #0
 800a654:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a65a:	2300      	movs	r3, #0
 800a65c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a660:	2b00      	cmp	r3, #0
 800a662:	d109      	bne.n	800a678 <xQueueSemaphoreTake+0x30>
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	623b      	str	r3, [r7, #32]
 800a676:	e7fe      	b.n	800a676 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d009      	beq.n	800a694 <xQueueSemaphoreTake+0x4c>
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	61fb      	str	r3, [r7, #28]
 800a692:	e7fe      	b.n	800a692 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a694:	f001 f87a 	bl	800b78c <xTaskGetSchedulerState>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d102      	bne.n	800a6a4 <xQueueSemaphoreTake+0x5c>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <xQueueSemaphoreTake+0x60>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e000      	b.n	800a6aa <xQueueSemaphoreTake+0x62>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d109      	bne.n	800a6c2 <xQueueSemaphoreTake+0x7a>
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	61bb      	str	r3, [r7, #24]
 800a6c0:	e7fe      	b.n	800a6c0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6c2:	f001 fbbb 	bl	800be3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d024      	beq.n	800a71c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	1e5a      	subs	r2, r3, #1
 800a6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d104      	bne.n	800a6ec <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a6e2:	f001 fa0d 	bl	800bb00 <pvTaskIncrementMutexHeldCount>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00f      	beq.n	800a714 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	3310      	adds	r3, #16
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 fe91 	bl	800b420 <xTaskRemoveFromEventList>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d007      	beq.n	800a714 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a704:	4b53      	ldr	r3, [pc, #332]	; (800a854 <xQueueSemaphoreTake+0x20c>)
 800a706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70a:	601a      	str	r2, [r3, #0]
 800a70c:	f3bf 8f4f 	dsb	sy
 800a710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a714:	f001 fbc0 	bl	800be98 <vPortExitCritical>
				return pdPASS;
 800a718:	2301      	movs	r3, #1
 800a71a:	e096      	b.n	800a84a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d110      	bne.n	800a744 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	2b00      	cmp	r3, #0
 800a726:	d009      	beq.n	800a73c <xQueueSemaphoreTake+0xf4>
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	617b      	str	r3, [r7, #20]
 800a73a:	e7fe      	b.n	800a73a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a73c:	f001 fbac 	bl	800be98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a740:	2300      	movs	r3, #0
 800a742:	e082      	b.n	800a84a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a746:	2b00      	cmp	r3, #0
 800a748:	d106      	bne.n	800a758 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a74a:	f107 030c 	add.w	r3, r7, #12
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fec8 	bl	800b4e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a754:	2301      	movs	r3, #1
 800a756:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a758:	f001 fb9e 	bl	800be98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a75c:	f000 fc54 	bl	800b008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a760:	f001 fb6c 	bl	800be3c <vPortEnterCritical>
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a76a:	b25b      	sxtb	r3, r3
 800a76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a770:	d103      	bne.n	800a77a <xQueueSemaphoreTake+0x132>
 800a772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a774:	2200      	movs	r2, #0
 800a776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a780:	b25b      	sxtb	r3, r3
 800a782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a786:	d103      	bne.n	800a790 <xQueueSemaphoreTake+0x148>
 800a788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a790:	f001 fb82 	bl	800be98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a794:	463a      	mov	r2, r7
 800a796:	f107 030c 	add.w	r3, r7, #12
 800a79a:	4611      	mov	r1, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 feb7 	bl	800b510 <xTaskCheckForTimeOut>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d132      	bne.n	800a80e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7aa:	f000 f9cc 	bl	800ab46 <prvIsQueueEmpty>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d026      	beq.n	800a802 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d109      	bne.n	800a7d0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a7bc:	f001 fb3e 	bl	800be3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 ffff 	bl	800b7c8 <xTaskPriorityInherit>
 800a7ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a7cc:	f001 fb64 	bl	800be98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	3324      	adds	r3, #36	; 0x24
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 fdfd 	bl	800b3d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7e0:	f000 f95f 	bl	800aaa2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7e4:	f000 fc1e 	bl	800b024 <xTaskResumeAll>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f47f af69 	bne.w	800a6c2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a7f0:	4b18      	ldr	r3, [pc, #96]	; (800a854 <xQueueSemaphoreTake+0x20c>)
 800a7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	e75f      	b.n	800a6c2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a804:	f000 f94d 	bl	800aaa2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a808:	f000 fc0c 	bl	800b024 <xTaskResumeAll>
 800a80c:	e759      	b.n	800a6c2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a80e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a810:	f000 f947 	bl	800aaa2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a814:	f000 fc06 	bl	800b024 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a81a:	f000 f994 	bl	800ab46 <prvIsQueueEmpty>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	f43f af4e 	beq.w	800a6c2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00d      	beq.n	800a848 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a82c:	f001 fb06 	bl	800be3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a832:	f000 f88e 	bl	800a952 <prvGetDisinheritPriorityAfterTimeout>
 800a836:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a83e:	4618      	mov	r0, r3
 800a840:	f001 f8c6 	bl	800b9d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a844:	f001 fb28 	bl	800be98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3738      	adds	r7, #56	; 0x38
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	e000ed04 	.word	0xe000ed04

0800a858 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08e      	sub	sp, #56	; 0x38
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d109      	bne.n	800a882 <xQueueReceiveFromISR+0x2a>
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	623b      	str	r3, [r7, #32]
 800a880:	e7fe      	b.n	800a880 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d103      	bne.n	800a890 <xQueueReceiveFromISR+0x38>
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <xQueueReceiveFromISR+0x3c>
 800a890:	2301      	movs	r3, #1
 800a892:	e000      	b.n	800a896 <xQueueReceiveFromISR+0x3e>
 800a894:	2300      	movs	r3, #0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d109      	bne.n	800a8ae <xQueueReceiveFromISR+0x56>
 800a89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	61fb      	str	r3, [r7, #28]
 800a8ac:	e7fe      	b.n	800a8ac <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8ae:	f001 fba1 	bl	800bff4 <vPortValidateInterruptPriority>
	__asm volatile
 800a8b2:	f3ef 8211 	mrs	r2, BASEPRI
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	61ba      	str	r2, [r7, #24]
 800a8c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a8ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d02f      	beq.n	800a93a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a8e4:	68b9      	ldr	r1, [r7, #8]
 800a8e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8e8:	f000 f8b5 	bl	800aa56 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	1e5a      	subs	r2, r3, #1
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a8f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fc:	d112      	bne.n	800a924 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d016      	beq.n	800a934 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	3310      	adds	r3, #16
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fd88 	bl	800b420 <xTaskRemoveFromEventList>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00e      	beq.n	800a934 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00b      	beq.n	800a934 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	e007      	b.n	800a934 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a928:	3301      	adds	r3, #1
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	b25a      	sxtb	r2, r3
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a934:	2301      	movs	r3, #1
 800a936:	637b      	str	r3, [r7, #52]	; 0x34
 800a938:	e001      	b.n	800a93e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a93a:	2300      	movs	r3, #0
 800a93c:	637b      	str	r3, [r7, #52]	; 0x34
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3738      	adds	r7, #56	; 0x38
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a952:	b480      	push	{r7}
 800a954:	b085      	sub	sp, #20
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d006      	beq.n	800a970 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f1c3 0307 	rsb	r3, r3, #7
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	e001      	b.n	800a974 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a970:	2300      	movs	r3, #0
 800a972:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a974:	68fb      	ldr	r3, [r7, #12]
	}
 800a976:	4618      	mov	r0, r3
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b086      	sub	sp, #24
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a98e:	2300      	movs	r3, #0
 800a990:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a996:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10d      	bne.n	800a9bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d14d      	bne.n	800aa44 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 ff8b 	bl	800b8c8 <xTaskPriorityDisinherit>
 800a9b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	609a      	str	r2, [r3, #8]
 800a9ba:	e043      	b.n	800aa44 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d119      	bne.n	800a9f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6858      	ldr	r0, [r3, #4]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	f001 fd4f 	bl	800c470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9da:	441a      	add	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	685a      	ldr	r2, [r3, #4]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d32b      	bcc.n	800aa44 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	605a      	str	r2, [r3, #4]
 800a9f4:	e026      	b.n	800aa44 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	68d8      	ldr	r0, [r3, #12]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fe:	461a      	mov	r2, r3
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	f001 fd35 	bl	800c470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	68da      	ldr	r2, [r3, #12]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0e:	425b      	negs	r3, r3
 800aa10:	441a      	add	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d207      	bcs.n	800aa32 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	689a      	ldr	r2, [r3, #8]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2a:	425b      	negs	r3, r3
 800aa2c:	441a      	add	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d105      	bne.n	800aa44 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	3b01      	subs	r3, #1
 800aa42:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa4c:	697b      	ldr	r3, [r7, #20]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b082      	sub	sp, #8
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d018      	beq.n	800aa9a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68da      	ldr	r2, [r3, #12]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa70:	441a      	add	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	68da      	ldr	r2, [r3, #12]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d303      	bcc.n	800aa8a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	68d9      	ldr	r1, [r3, #12]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	461a      	mov	r2, r3
 800aa94:	6838      	ldr	r0, [r7, #0]
 800aa96:	f001 fceb 	bl	800c470 <memcpy>
	}
}
 800aa9a:	bf00      	nop
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aaaa:	f001 f9c7 	bl	800be3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aab4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aab6:	e011      	b.n	800aadc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d012      	beq.n	800aae6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3324      	adds	r3, #36	; 0x24
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 fcab 	bl	800b420 <xTaskRemoveFromEventList>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aad0:	f000 fd7e 	bl	800b5d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	dce9      	bgt.n	800aab8 <prvUnlockQueue+0x16>
 800aae4:	e000      	b.n	800aae8 <prvUnlockQueue+0x46>
					break;
 800aae6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	22ff      	movs	r2, #255	; 0xff
 800aaec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aaf0:	f001 f9d2 	bl	800be98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aaf4:	f001 f9a2 	bl	800be3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aafe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab00:	e011      	b.n	800ab26 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d012      	beq.n	800ab30 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3310      	adds	r3, #16
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 fc86 	bl	800b420 <xTaskRemoveFromEventList>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab1a:	f000 fd59 	bl	800b5d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	dce9      	bgt.n	800ab02 <prvUnlockQueue+0x60>
 800ab2e:	e000      	b.n	800ab32 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab30:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	22ff      	movs	r2, #255	; 0xff
 800ab36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab3a:	f001 f9ad 	bl	800be98 <vPortExitCritical>
}
 800ab3e:	bf00      	nop
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab4e:	f001 f975 	bl	800be3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d102      	bne.n	800ab60 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	60fb      	str	r3, [r7, #12]
 800ab5e:	e001      	b.n	800ab64 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab60:	2300      	movs	r3, #0
 800ab62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab64:	f001 f998 	bl	800be98 <vPortExitCritical>

	return xReturn;
 800ab68:	68fb      	ldr	r3, [r7, #12]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab7a:	f001 f95f 	bl	800be3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d102      	bne.n	800ab90 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	60fb      	str	r3, [r7, #12]
 800ab8e:	e001      	b.n	800ab94 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab90:	2300      	movs	r3, #0
 800ab92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab94:	f001 f980 	bl	800be98 <vPortExitCritical>

	return xReturn;
 800ab98:	68fb      	ldr	r3, [r7, #12]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b08e      	sub	sp, #56	; 0x38
 800aba6:	af04      	add	r7, sp, #16
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	60b9      	str	r1, [r7, #8]
 800abac:	607a      	str	r2, [r7, #4]
 800abae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d109      	bne.n	800abca <xTaskCreateStatic+0x28>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	623b      	str	r3, [r7, #32]
 800abc8:	e7fe      	b.n	800abc8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800abca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d109      	bne.n	800abe4 <xTaskCreateStatic+0x42>
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	61fb      	str	r3, [r7, #28]
 800abe2:	e7fe      	b.n	800abe2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abe4:	2360      	movs	r3, #96	; 0x60
 800abe6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	2b60      	cmp	r3, #96	; 0x60
 800abec:	d009      	beq.n	800ac02 <xTaskCreateStatic+0x60>
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	61bb      	str	r3, [r7, #24]
 800ac00:	e7fe      	b.n	800ac00 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d01e      	beq.n	800ac48 <xTaskCreateStatic+0xa6>
 800ac0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d01b      	beq.n	800ac48 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac22:	2300      	movs	r3, #0
 800ac24:	9303      	str	r3, [sp, #12]
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	9302      	str	r3, [sp, #8]
 800ac2a:	f107 0314 	add.w	r3, r7, #20
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	68b9      	ldr	r1, [r7, #8]
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 f850 	bl	800ace0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac42:	f000 f8df 	bl	800ae04 <prvAddNewTaskToReadyList>
 800ac46:	e001      	b.n	800ac4c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac4c:	697b      	ldr	r3, [r7, #20]
	}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3728      	adds	r7, #40	; 0x28
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b08c      	sub	sp, #48	; 0x30
 800ac5a:	af04      	add	r7, sp, #16
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	603b      	str	r3, [r7, #0]
 800ac62:	4613      	mov	r3, r2
 800ac64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac66:	88fb      	ldrh	r3, [r7, #6]
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f001 fa00 	bl	800c070 <pvPortMalloc>
 800ac70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00e      	beq.n	800ac96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac78:	2060      	movs	r0, #96	; 0x60
 800ac7a:	f001 f9f9 	bl	800c070 <pvPortMalloc>
 800ac7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	631a      	str	r2, [r3, #48]	; 0x30
 800ac8c:	e005      	b.n	800ac9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac8e:	6978      	ldr	r0, [r7, #20]
 800ac90:	f001 fab0 	bl	800c1f4 <vPortFree>
 800ac94:	e001      	b.n	800ac9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac96:	2300      	movs	r3, #0
 800ac98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d017      	beq.n	800acd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aca8:	88fa      	ldrh	r2, [r7, #6]
 800acaa:	2300      	movs	r3, #0
 800acac:	9303      	str	r3, [sp, #12]
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	9302      	str	r3, [sp, #8]
 800acb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	68b9      	ldr	r1, [r7, #8]
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f000 f80e 	bl	800ace0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acc4:	69f8      	ldr	r0, [r7, #28]
 800acc6:	f000 f89d 	bl	800ae04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acca:	2301      	movs	r3, #1
 800accc:	61bb      	str	r3, [r7, #24]
 800acce:	e002      	b.n	800acd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800acd0:	f04f 33ff 	mov.w	r3, #4294967295
 800acd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800acd6:	69bb      	ldr	r3, [r7, #24]
	}
 800acd8:	4618      	mov	r0, r3
 800acda:	3720      	adds	r7, #32
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	461a      	mov	r2, r3
 800acf8:	21a5      	movs	r1, #165	; 0xa5
 800acfa:	f001 fbc4 	bl	800c486 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	f023 0307 	bic.w	r3, r3, #7
 800ad16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	f003 0307 	and.w	r3, r3, #7
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d009      	beq.n	800ad36 <prvInitialiseNewTask+0x56>
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	617b      	str	r3, [r7, #20]
 800ad34:	e7fe      	b.n	800ad34 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d01f      	beq.n	800ad7c <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	61fb      	str	r3, [r7, #28]
 800ad40:	e012      	b.n	800ad68 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	4413      	add	r3, r2
 800ad48:	7819      	ldrb	r1, [r3, #0]
 800ad4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	4413      	add	r3, r2
 800ad50:	3334      	adds	r3, #52	; 0x34
 800ad52:	460a      	mov	r2, r1
 800ad54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d006      	beq.n	800ad70 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	3301      	adds	r3, #1
 800ad66:	61fb      	str	r3, [r7, #28]
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	2b0f      	cmp	r3, #15
 800ad6c:	d9e9      	bls.n	800ad42 <prvInitialiseNewTask+0x62>
 800ad6e:	e000      	b.n	800ad72 <prvInitialiseNewTask+0x92>
			{
				break;
 800ad70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad7a:	e003      	b.n	800ad84 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad86:	2b06      	cmp	r3, #6
 800ad88:	d901      	bls.n	800ad8e <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad8a:	2306      	movs	r3, #6
 800ad8c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad92:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad98:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ada0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada2:	3304      	adds	r3, #4
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7ff f886 	bl	8009eb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	3318      	adds	r3, #24
 800adae:	4618      	mov	r0, r3
 800adb0:	f7ff f881 	bl	8009eb6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbc:	f1c3 0207 	rsb	r2, r3, #7
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adc8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	2200      	movs	r2, #0
 800adce:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	2200      	movs	r2, #0
 800add4:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	2200      	movs	r2, #0
 800adda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	68f9      	ldr	r1, [r7, #12]
 800ade2:	69b8      	ldr	r0, [r7, #24]
 800ade4:	f000 ff06 	bl	800bbf4 <pxPortInitialiseStack>
 800ade8:	4602      	mov	r2, r0
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adfa:	bf00      	nop
 800adfc:	3720      	adds	r7, #32
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae0c:	f001 f816 	bl	800be3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae10:	4b2c      	ldr	r3, [pc, #176]	; (800aec4 <prvAddNewTaskToReadyList+0xc0>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3301      	adds	r3, #1
 800ae16:	4a2b      	ldr	r2, [pc, #172]	; (800aec4 <prvAddNewTaskToReadyList+0xc0>)
 800ae18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae1a:	4b2b      	ldr	r3, [pc, #172]	; (800aec8 <prvAddNewTaskToReadyList+0xc4>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d109      	bne.n	800ae36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae22:	4a29      	ldr	r2, [pc, #164]	; (800aec8 <prvAddNewTaskToReadyList+0xc4>)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae28:	4b26      	ldr	r3, [pc, #152]	; (800aec4 <prvAddNewTaskToReadyList+0xc0>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d110      	bne.n	800ae52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae30:	f000 fbf2 	bl	800b618 <prvInitialiseTaskLists>
 800ae34:	e00d      	b.n	800ae52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae36:	4b25      	ldr	r3, [pc, #148]	; (800aecc <prvAddNewTaskToReadyList+0xc8>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d109      	bne.n	800ae52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae3e:	4b22      	ldr	r3, [pc, #136]	; (800aec8 <prvAddNewTaskToReadyList+0xc4>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d802      	bhi.n	800ae52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae4c:	4a1e      	ldr	r2, [pc, #120]	; (800aec8 <prvAddNewTaskToReadyList+0xc4>)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae52:	4b1f      	ldr	r3, [pc, #124]	; (800aed0 <prvAddNewTaskToReadyList+0xcc>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3301      	adds	r3, #1
 800ae58:	4a1d      	ldr	r2, [pc, #116]	; (800aed0 <prvAddNewTaskToReadyList+0xcc>)
 800ae5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae5c:	4b1c      	ldr	r3, [pc, #112]	; (800aed0 <prvAddNewTaskToReadyList+0xcc>)
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	2201      	movs	r2, #1
 800ae6a:	409a      	lsls	r2, r3
 800ae6c:	4b19      	ldr	r3, [pc, #100]	; (800aed4 <prvAddNewTaskToReadyList+0xd0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	4a18      	ldr	r2, [pc, #96]	; (800aed4 <prvAddNewTaskToReadyList+0xd0>)
 800ae74:	6013      	str	r3, [r2, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4a15      	ldr	r2, [pc, #84]	; (800aed8 <prvAddNewTaskToReadyList+0xd4>)
 800ae84:	441a      	add	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f7ff f81f 	bl	8009ed0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae92:	f001 f801 	bl	800be98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae96:	4b0d      	ldr	r3, [pc, #52]	; (800aecc <prvAddNewTaskToReadyList+0xc8>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00e      	beq.n	800aebc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae9e:	4b0a      	ldr	r3, [pc, #40]	; (800aec8 <prvAddNewTaskToReadyList+0xc4>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d207      	bcs.n	800aebc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aeac:	4b0b      	ldr	r3, [pc, #44]	; (800aedc <prvAddNewTaskToReadyList+0xd8>)
 800aeae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	200007f4 	.word	0x200007f4
 800aec8:	200006f4 	.word	0x200006f4
 800aecc:	20000800 	.word	0x20000800
 800aed0:	20000810 	.word	0x20000810
 800aed4:	200007fc 	.word	0x200007fc
 800aed8:	200006f8 	.word	0x200006f8
 800aedc:	e000ed04 	.word	0xe000ed04

0800aee0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aee8:	2300      	movs	r3, #0
 800aeea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d016      	beq.n	800af20 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aef2:	4b13      	ldr	r3, [pc, #76]	; (800af40 <vTaskDelay+0x60>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d009      	beq.n	800af0e <vTaskDelay+0x2e>
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	60bb      	str	r3, [r7, #8]
 800af0c:	e7fe      	b.n	800af0c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800af0e:	f000 f87b 	bl	800b008 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af12:	2100      	movs	r1, #0
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fe07 	bl	800bb28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af1a:	f000 f883 	bl	800b024 <xTaskResumeAll>
 800af1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d107      	bne.n	800af36 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800af26:	4b07      	ldr	r3, [pc, #28]	; (800af44 <vTaskDelay+0x64>)
 800af28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af36:	bf00      	nop
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	2000081c 	.word	0x2000081c
 800af44:	e000ed04 	.word	0xe000ed04

0800af48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08a      	sub	sp, #40	; 0x28
 800af4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af4e:	2300      	movs	r3, #0
 800af50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af56:	463a      	mov	r2, r7
 800af58:	1d39      	adds	r1, r7, #4
 800af5a:	f107 0308 	add.w	r3, r7, #8
 800af5e:	4618      	mov	r0, r3
 800af60:	f7f5 fb2e 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	9202      	str	r2, [sp, #8]
 800af6c:	9301      	str	r3, [sp, #4]
 800af6e:	2300      	movs	r3, #0
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	2300      	movs	r3, #0
 800af74:	460a      	mov	r2, r1
 800af76:	491e      	ldr	r1, [pc, #120]	; (800aff0 <vTaskStartScheduler+0xa8>)
 800af78:	481e      	ldr	r0, [pc, #120]	; (800aff4 <vTaskStartScheduler+0xac>)
 800af7a:	f7ff fe12 	bl	800aba2 <xTaskCreateStatic>
 800af7e:	4602      	mov	r2, r0
 800af80:	4b1d      	ldr	r3, [pc, #116]	; (800aff8 <vTaskStartScheduler+0xb0>)
 800af82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af84:	4b1c      	ldr	r3, [pc, #112]	; (800aff8 <vTaskStartScheduler+0xb0>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af8c:	2301      	movs	r3, #1
 800af8e:	617b      	str	r3, [r7, #20]
 800af90:	e001      	b.n	800af96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af92:	2300      	movs	r3, #0
 800af94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d117      	bne.n	800afcc <vTaskStartScheduler+0x84>
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afae:	4b13      	ldr	r3, [pc, #76]	; (800affc <vTaskStartScheduler+0xb4>)
 800afb0:	f04f 32ff 	mov.w	r2, #4294967295
 800afb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afb6:	4b12      	ldr	r3, [pc, #72]	; (800b000 <vTaskStartScheduler+0xb8>)
 800afb8:	2201      	movs	r2, #1
 800afba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afbc:	4b11      	ldr	r3, [pc, #68]	; (800b004 <vTaskStartScheduler+0xbc>)
 800afbe:	2200      	movs	r2, #0
 800afc0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800afc2:	f7f5 faed 	bl	80005a0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afc6:	f000 fe9b 	bl	800bd00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afca:	e00d      	b.n	800afe8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd2:	d109      	bne.n	800afe8 <vTaskStartScheduler+0xa0>
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e7fe      	b.n	800afe6 <vTaskStartScheduler+0x9e>
}
 800afe8:	bf00      	nop
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	0800f2cc 	.word	0x0800f2cc
 800aff4:	0800b5e9 	.word	0x0800b5e9
 800aff8:	20000818 	.word	0x20000818
 800affc:	20000814 	.word	0x20000814
 800b000:	20000800 	.word	0x20000800
 800b004:	200007f8 	.word	0x200007f8

0800b008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b00c:	4b04      	ldr	r3, [pc, #16]	; (800b020 <vTaskSuspendAll+0x18>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	3301      	adds	r3, #1
 800b012:	4a03      	ldr	r2, [pc, #12]	; (800b020 <vTaskSuspendAll+0x18>)
 800b014:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b016:	bf00      	nop
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	2000081c 	.word	0x2000081c

0800b024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b02e:	2300      	movs	r3, #0
 800b030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b032:	4b41      	ldr	r3, [pc, #260]	; (800b138 <xTaskResumeAll+0x114>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d109      	bne.n	800b04e <xTaskResumeAll+0x2a>
 800b03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	e7fe      	b.n	800b04c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b04e:	f000 fef5 	bl	800be3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b052:	4b39      	ldr	r3, [pc, #228]	; (800b138 <xTaskResumeAll+0x114>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3b01      	subs	r3, #1
 800b058:	4a37      	ldr	r2, [pc, #220]	; (800b138 <xTaskResumeAll+0x114>)
 800b05a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b05c:	4b36      	ldr	r3, [pc, #216]	; (800b138 <xTaskResumeAll+0x114>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d161      	bne.n	800b128 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b064:	4b35      	ldr	r3, [pc, #212]	; (800b13c <xTaskResumeAll+0x118>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d05d      	beq.n	800b128 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b06c:	e02e      	b.n	800b0cc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b06e:	4b34      	ldr	r3, [pc, #208]	; (800b140 <xTaskResumeAll+0x11c>)
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	3318      	adds	r3, #24
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fe ff85 	bl	8009f8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3304      	adds	r3, #4
 800b084:	4618      	mov	r0, r3
 800b086:	f7fe ff80 	bl	8009f8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08e:	2201      	movs	r2, #1
 800b090:	409a      	lsls	r2, r3
 800b092:	4b2c      	ldr	r3, [pc, #176]	; (800b144 <xTaskResumeAll+0x120>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4313      	orrs	r3, r2
 800b098:	4a2a      	ldr	r2, [pc, #168]	; (800b144 <xTaskResumeAll+0x120>)
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4a27      	ldr	r2, [pc, #156]	; (800b148 <xTaskResumeAll+0x124>)
 800b0aa:	441a      	add	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f7fe ff0c 	bl	8009ed0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0bc:	4b23      	ldr	r3, [pc, #140]	; (800b14c <xTaskResumeAll+0x128>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d302      	bcc.n	800b0cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b0c6:	4b22      	ldr	r3, [pc, #136]	; (800b150 <xTaskResumeAll+0x12c>)
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0cc:	4b1c      	ldr	r3, [pc, #112]	; (800b140 <xTaskResumeAll+0x11c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1cc      	bne.n	800b06e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0da:	f000 fb37 	bl	800b74c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b0de:	4b1d      	ldr	r3, [pc, #116]	; (800b154 <xTaskResumeAll+0x130>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d010      	beq.n	800b10c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0ea:	f000 f847 	bl	800b17c <xTaskIncrementTick>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d002      	beq.n	800b0fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b0f4:	4b16      	ldr	r3, [pc, #88]	; (800b150 <xTaskResumeAll+0x12c>)
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1f1      	bne.n	800b0ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b106:	4b13      	ldr	r3, [pc, #76]	; (800b154 <xTaskResumeAll+0x130>)
 800b108:	2200      	movs	r2, #0
 800b10a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b10c:	4b10      	ldr	r3, [pc, #64]	; (800b150 <xTaskResumeAll+0x12c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d009      	beq.n	800b128 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b114:	2301      	movs	r3, #1
 800b116:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b118:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <xTaskResumeAll+0x134>)
 800b11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b128:	f000 feb6 	bl	800be98 <vPortExitCritical>

	return xAlreadyYielded;
 800b12c:	68bb      	ldr	r3, [r7, #8]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	2000081c 	.word	0x2000081c
 800b13c:	200007f4 	.word	0x200007f4
 800b140:	200007b4 	.word	0x200007b4
 800b144:	200007fc 	.word	0x200007fc
 800b148:	200006f8 	.word	0x200006f8
 800b14c:	200006f4 	.word	0x200006f4
 800b150:	20000808 	.word	0x20000808
 800b154:	20000804 	.word	0x20000804
 800b158:	e000ed04 	.word	0xe000ed04

0800b15c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b162:	4b05      	ldr	r3, [pc, #20]	; (800b178 <xTaskGetTickCount+0x1c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b168:	687b      	ldr	r3, [r7, #4]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	370c      	adds	r7, #12
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	200007f8 	.word	0x200007f8

0800b17c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b182:	2300      	movs	r3, #0
 800b184:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b186:	4b4e      	ldr	r3, [pc, #312]	; (800b2c0 <xTaskIncrementTick+0x144>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f040 8087 	bne.w	800b29e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b190:	4b4c      	ldr	r3, [pc, #304]	; (800b2c4 <xTaskIncrementTick+0x148>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3301      	adds	r3, #1
 800b196:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b198:	4a4a      	ldr	r2, [pc, #296]	; (800b2c4 <xTaskIncrementTick+0x148>)
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d11f      	bne.n	800b1e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1a4:	4b48      	ldr	r3, [pc, #288]	; (800b2c8 <xTaskIncrementTick+0x14c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d009      	beq.n	800b1c2 <xTaskIncrementTick+0x46>
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	e7fe      	b.n	800b1c0 <xTaskIncrementTick+0x44>
 800b1c2:	4b41      	ldr	r3, [pc, #260]	; (800b2c8 <xTaskIncrementTick+0x14c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60fb      	str	r3, [r7, #12]
 800b1c8:	4b40      	ldr	r3, [pc, #256]	; (800b2cc <xTaskIncrementTick+0x150>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a3e      	ldr	r2, [pc, #248]	; (800b2c8 <xTaskIncrementTick+0x14c>)
 800b1ce:	6013      	str	r3, [r2, #0]
 800b1d0:	4a3e      	ldr	r2, [pc, #248]	; (800b2cc <xTaskIncrementTick+0x150>)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6013      	str	r3, [r2, #0]
 800b1d6:	4b3e      	ldr	r3, [pc, #248]	; (800b2d0 <xTaskIncrementTick+0x154>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	4a3c      	ldr	r2, [pc, #240]	; (800b2d0 <xTaskIncrementTick+0x154>)
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	f000 fab4 	bl	800b74c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b1e4:	4b3b      	ldr	r3, [pc, #236]	; (800b2d4 <xTaskIncrementTick+0x158>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d348      	bcc.n	800b280 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1ee:	4b36      	ldr	r3, [pc, #216]	; (800b2c8 <xTaskIncrementTick+0x14c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d104      	bne.n	800b202 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1f8:	4b36      	ldr	r3, [pc, #216]	; (800b2d4 <xTaskIncrementTick+0x158>)
 800b1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fe:	601a      	str	r2, [r3, #0]
					break;
 800b200:	e03e      	b.n	800b280 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b202:	4b31      	ldr	r3, [pc, #196]	; (800b2c8 <xTaskIncrementTick+0x14c>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	429a      	cmp	r2, r3
 800b218:	d203      	bcs.n	800b222 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b21a:	4a2e      	ldr	r2, [pc, #184]	; (800b2d4 <xTaskIncrementTick+0x158>)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b220:	e02e      	b.n	800b280 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	3304      	adds	r3, #4
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe feaf 	bl	8009f8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b230:	2b00      	cmp	r3, #0
 800b232:	d004      	beq.n	800b23e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	3318      	adds	r3, #24
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fe fea6 	bl	8009f8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b242:	2201      	movs	r2, #1
 800b244:	409a      	lsls	r2, r3
 800b246:	4b24      	ldr	r3, [pc, #144]	; (800b2d8 <xTaskIncrementTick+0x15c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	4a22      	ldr	r2, [pc, #136]	; (800b2d8 <xTaskIncrementTick+0x15c>)
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4a1f      	ldr	r2, [pc, #124]	; (800b2dc <xTaskIncrementTick+0x160>)
 800b25e:	441a      	add	r2, r3
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	3304      	adds	r3, #4
 800b264:	4619      	mov	r1, r3
 800b266:	4610      	mov	r0, r2
 800b268:	f7fe fe32 	bl	8009ed0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b270:	4b1b      	ldr	r3, [pc, #108]	; (800b2e0 <xTaskIncrementTick+0x164>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b276:	429a      	cmp	r2, r3
 800b278:	d3b9      	bcc.n	800b1ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b27a:	2301      	movs	r3, #1
 800b27c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b27e:	e7b6      	b.n	800b1ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b280:	4b17      	ldr	r3, [pc, #92]	; (800b2e0 <xTaskIncrementTick+0x164>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b286:	4915      	ldr	r1, [pc, #84]	; (800b2dc <xTaskIncrementTick+0x160>)
 800b288:	4613      	mov	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	440b      	add	r3, r1
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d907      	bls.n	800b2a8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b298:	2301      	movs	r3, #1
 800b29a:	617b      	str	r3, [r7, #20]
 800b29c:	e004      	b.n	800b2a8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b29e:	4b11      	ldr	r3, [pc, #68]	; (800b2e4 <xTaskIncrementTick+0x168>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	4a0f      	ldr	r2, [pc, #60]	; (800b2e4 <xTaskIncrementTick+0x168>)
 800b2a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b2a8:	4b0f      	ldr	r3, [pc, #60]	; (800b2e8 <xTaskIncrementTick+0x16c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b2b4:	697b      	ldr	r3, [r7, #20]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	2000081c 	.word	0x2000081c
 800b2c4:	200007f8 	.word	0x200007f8
 800b2c8:	200007ac 	.word	0x200007ac
 800b2cc:	200007b0 	.word	0x200007b0
 800b2d0:	2000080c 	.word	0x2000080c
 800b2d4:	20000814 	.word	0x20000814
 800b2d8:	200007fc 	.word	0x200007fc
 800b2dc:	200006f8 	.word	0x200006f8
 800b2e0:	200006f4 	.word	0x200006f4
 800b2e4:	20000804 	.word	0x20000804
 800b2e8:	20000808 	.word	0x20000808

0800b2ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2f2:	4b32      	ldr	r3, [pc, #200]	; (800b3bc <vTaskSwitchContext+0xd0>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2fa:	4b31      	ldr	r3, [pc, #196]	; (800b3c0 <vTaskSwitchContext+0xd4>)
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b300:	e057      	b.n	800b3b2 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800b302:	4b2f      	ldr	r3, [pc, #188]	; (800b3c0 <vTaskSwitchContext+0xd4>)
 800b304:	2200      	movs	r2, #0
 800b306:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b308:	f7f5 f951 	bl	80005ae <getRunTimeCounterValue>
 800b30c:	4602      	mov	r2, r0
 800b30e:	4b2d      	ldr	r3, [pc, #180]	; (800b3c4 <vTaskSwitchContext+0xd8>)
 800b310:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b312:	4b2c      	ldr	r3, [pc, #176]	; (800b3c4 <vTaskSwitchContext+0xd8>)
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	4b2c      	ldr	r3, [pc, #176]	; (800b3c8 <vTaskSwitchContext+0xdc>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d909      	bls.n	800b332 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b31e:	4b2b      	ldr	r3, [pc, #172]	; (800b3cc <vTaskSwitchContext+0xe0>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b324:	4a27      	ldr	r2, [pc, #156]	; (800b3c4 <vTaskSwitchContext+0xd8>)
 800b326:	6810      	ldr	r0, [r2, #0]
 800b328:	4a27      	ldr	r2, [pc, #156]	; (800b3c8 <vTaskSwitchContext+0xdc>)
 800b32a:	6812      	ldr	r2, [r2, #0]
 800b32c:	1a82      	subs	r2, r0, r2
 800b32e:	440a      	add	r2, r1
 800b330:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b332:	4b24      	ldr	r3, [pc, #144]	; (800b3c4 <vTaskSwitchContext+0xd8>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a24      	ldr	r2, [pc, #144]	; (800b3c8 <vTaskSwitchContext+0xdc>)
 800b338:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b33a:	4b25      	ldr	r3, [pc, #148]	; (800b3d0 <vTaskSwitchContext+0xe4>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	fab3 f383 	clz	r3, r3
 800b346:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b348:	7afb      	ldrb	r3, [r7, #11]
 800b34a:	f1c3 031f 	rsb	r3, r3, #31
 800b34e:	617b      	str	r3, [r7, #20]
 800b350:	4920      	ldr	r1, [pc, #128]	; (800b3d4 <vTaskSwitchContext+0xe8>)
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	4613      	mov	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	440b      	add	r3, r1
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d109      	bne.n	800b378 <vTaskSwitchContext+0x8c>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	607b      	str	r3, [r7, #4]
 800b376:	e7fe      	b.n	800b376 <vTaskSwitchContext+0x8a>
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	4613      	mov	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4a14      	ldr	r2, [pc, #80]	; (800b3d4 <vTaskSwitchContext+0xe8>)
 800b384:	4413      	add	r3, r2
 800b386:	613b      	str	r3, [r7, #16]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	685a      	ldr	r2, [r3, #4]
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	605a      	str	r2, [r3, #4]
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	3308      	adds	r3, #8
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d104      	bne.n	800b3a8 <vTaskSwitchContext+0xbc>
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	605a      	str	r2, [r3, #4]
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	4a07      	ldr	r2, [pc, #28]	; (800b3cc <vTaskSwitchContext+0xe0>)
 800b3b0:	6013      	str	r3, [r2, #0]
}
 800b3b2:	bf00      	nop
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	2000081c 	.word	0x2000081c
 800b3c0:	20000808 	.word	0x20000808
 800b3c4:	20000824 	.word	0x20000824
 800b3c8:	20000820 	.word	0x20000820
 800b3cc:	200006f4 	.word	0x200006f4
 800b3d0:	200007fc 	.word	0x200007fc
 800b3d4:	200006f8 	.word	0x200006f8

0800b3d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d109      	bne.n	800b3fc <vTaskPlaceOnEventList+0x24>
 800b3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ec:	f383 8811 	msr	BASEPRI, r3
 800b3f0:	f3bf 8f6f 	isb	sy
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	e7fe      	b.n	800b3fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3fc:	4b07      	ldr	r3, [pc, #28]	; (800b41c <vTaskPlaceOnEventList+0x44>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3318      	adds	r3, #24
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7fe fd87 	bl	8009f18 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b40a:	2101      	movs	r1, #1
 800b40c:	6838      	ldr	r0, [r7, #0]
 800b40e:	f000 fb8b 	bl	800bb28 <prvAddCurrentTaskToDelayedList>
}
 800b412:	bf00      	nop
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	200006f4 	.word	0x200006f4

0800b420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d109      	bne.n	800b44a <xTaskRemoveFromEventList+0x2a>
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	e7fe      	b.n	800b448 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	3318      	adds	r3, #24
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe fd9b 	bl	8009f8a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b454:	4b1d      	ldr	r3, [pc, #116]	; (800b4cc <xTaskRemoveFromEventList+0xac>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d11c      	bne.n	800b496 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	3304      	adds	r3, #4
 800b460:	4618      	mov	r0, r3
 800b462:	f7fe fd92 	bl	8009f8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46a:	2201      	movs	r2, #1
 800b46c:	409a      	lsls	r2, r3
 800b46e:	4b18      	ldr	r3, [pc, #96]	; (800b4d0 <xTaskRemoveFromEventList+0xb0>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4313      	orrs	r3, r2
 800b474:	4a16      	ldr	r2, [pc, #88]	; (800b4d0 <xTaskRemoveFromEventList+0xb0>)
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4a13      	ldr	r2, [pc, #76]	; (800b4d4 <xTaskRemoveFromEventList+0xb4>)
 800b486:	441a      	add	r2, r3
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	3304      	adds	r3, #4
 800b48c:	4619      	mov	r1, r3
 800b48e:	4610      	mov	r0, r2
 800b490:	f7fe fd1e 	bl	8009ed0 <vListInsertEnd>
 800b494:	e005      	b.n	800b4a2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	3318      	adds	r3, #24
 800b49a:	4619      	mov	r1, r3
 800b49c:	480e      	ldr	r0, [pc, #56]	; (800b4d8 <xTaskRemoveFromEventList+0xb8>)
 800b49e:	f7fe fd17 	bl	8009ed0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a6:	4b0d      	ldr	r3, [pc, #52]	; (800b4dc <xTaskRemoveFromEventList+0xbc>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d905      	bls.n	800b4bc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4b4:	4b0a      	ldr	r3, [pc, #40]	; (800b4e0 <xTaskRemoveFromEventList+0xc0>)
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	e001      	b.n	800b4c0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b4c0:	697b      	ldr	r3, [r7, #20]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	2000081c 	.word	0x2000081c
 800b4d0:	200007fc 	.word	0x200007fc
 800b4d4:	200006f8 	.word	0x200006f8
 800b4d8:	200007b4 	.word	0x200007b4
 800b4dc:	200006f4 	.word	0x200006f4
 800b4e0:	20000808 	.word	0x20000808

0800b4e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4ec:	4b06      	ldr	r3, [pc, #24]	; (800b508 <vTaskInternalSetTimeOutState+0x24>)
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4f4:	4b05      	ldr	r3, [pc, #20]	; (800b50c <vTaskInternalSetTimeOutState+0x28>)
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	605a      	str	r2, [r3, #4]
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	2000080c 	.word	0x2000080c
 800b50c:	200007f8 	.word	0x200007f8

0800b510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b088      	sub	sp, #32
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d109      	bne.n	800b534 <xTaskCheckForTimeOut+0x24>
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	613b      	str	r3, [r7, #16]
 800b532:	e7fe      	b.n	800b532 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d109      	bne.n	800b54e <xTaskCheckForTimeOut+0x3e>
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	60fb      	str	r3, [r7, #12]
 800b54c:	e7fe      	b.n	800b54c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b54e:	f000 fc75 	bl	800be3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b552:	4b1d      	ldr	r3, [pc, #116]	; (800b5c8 <xTaskCheckForTimeOut+0xb8>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56a:	d102      	bne.n	800b572 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b56c:	2300      	movs	r3, #0
 800b56e:	61fb      	str	r3, [r7, #28]
 800b570:	e023      	b.n	800b5ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	4b15      	ldr	r3, [pc, #84]	; (800b5cc <xTaskCheckForTimeOut+0xbc>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d007      	beq.n	800b58e <xTaskCheckForTimeOut+0x7e>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	69ba      	ldr	r2, [r7, #24]
 800b584:	429a      	cmp	r2, r3
 800b586:	d302      	bcc.n	800b58e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b588:	2301      	movs	r3, #1
 800b58a:	61fb      	str	r3, [r7, #28]
 800b58c:	e015      	b.n	800b5ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	429a      	cmp	r2, r3
 800b596:	d20b      	bcs.n	800b5b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	1ad2      	subs	r2, r2, r3
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7ff ff9d 	bl	800b4e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	61fb      	str	r3, [r7, #28]
 800b5ae:	e004      	b.n	800b5ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5ba:	f000 fc6d 	bl	800be98 <vPortExitCritical>

	return xReturn;
 800b5be:	69fb      	ldr	r3, [r7, #28]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3720      	adds	r7, #32
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	200007f8 	.word	0x200007f8
 800b5cc:	2000080c 	.word	0x2000080c

0800b5d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b5d4:	4b03      	ldr	r3, [pc, #12]	; (800b5e4 <vTaskMissedYield+0x14>)
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	601a      	str	r2, [r3, #0]
}
 800b5da:	bf00      	nop
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	20000808 	.word	0x20000808

0800b5e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5f0:	f000 f852 	bl	800b698 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5f4:	4b06      	ldr	r3, [pc, #24]	; (800b610 <prvIdleTask+0x28>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d9f9      	bls.n	800b5f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5fc:	4b05      	ldr	r3, [pc, #20]	; (800b614 <prvIdleTask+0x2c>)
 800b5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b60c:	e7f0      	b.n	800b5f0 <prvIdleTask+0x8>
 800b60e:	bf00      	nop
 800b610:	200006f8 	.word	0x200006f8
 800b614:	e000ed04 	.word	0xe000ed04

0800b618 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b61e:	2300      	movs	r3, #0
 800b620:	607b      	str	r3, [r7, #4]
 800b622:	e00c      	b.n	800b63e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	4613      	mov	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4a12      	ldr	r2, [pc, #72]	; (800b678 <prvInitialiseTaskLists+0x60>)
 800b630:	4413      	add	r3, r2
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe fc1f 	bl	8009e76 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3301      	adds	r3, #1
 800b63c:	607b      	str	r3, [r7, #4]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b06      	cmp	r3, #6
 800b642:	d9ef      	bls.n	800b624 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b644:	480d      	ldr	r0, [pc, #52]	; (800b67c <prvInitialiseTaskLists+0x64>)
 800b646:	f7fe fc16 	bl	8009e76 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b64a:	480d      	ldr	r0, [pc, #52]	; (800b680 <prvInitialiseTaskLists+0x68>)
 800b64c:	f7fe fc13 	bl	8009e76 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b650:	480c      	ldr	r0, [pc, #48]	; (800b684 <prvInitialiseTaskLists+0x6c>)
 800b652:	f7fe fc10 	bl	8009e76 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b656:	480c      	ldr	r0, [pc, #48]	; (800b688 <prvInitialiseTaskLists+0x70>)
 800b658:	f7fe fc0d 	bl	8009e76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b65c:	480b      	ldr	r0, [pc, #44]	; (800b68c <prvInitialiseTaskLists+0x74>)
 800b65e:	f7fe fc0a 	bl	8009e76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b662:	4b0b      	ldr	r3, [pc, #44]	; (800b690 <prvInitialiseTaskLists+0x78>)
 800b664:	4a05      	ldr	r2, [pc, #20]	; (800b67c <prvInitialiseTaskLists+0x64>)
 800b666:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b668:	4b0a      	ldr	r3, [pc, #40]	; (800b694 <prvInitialiseTaskLists+0x7c>)
 800b66a:	4a05      	ldr	r2, [pc, #20]	; (800b680 <prvInitialiseTaskLists+0x68>)
 800b66c:	601a      	str	r2, [r3, #0]
}
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	200006f8 	.word	0x200006f8
 800b67c:	20000784 	.word	0x20000784
 800b680:	20000798 	.word	0x20000798
 800b684:	200007b4 	.word	0x200007b4
 800b688:	200007c8 	.word	0x200007c8
 800b68c:	200007e0 	.word	0x200007e0
 800b690:	200007ac 	.word	0x200007ac
 800b694:	200007b0 	.word	0x200007b0

0800b698 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b69e:	e019      	b.n	800b6d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6a0:	f000 fbcc 	bl	800be3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a4:	4b0f      	ldr	r3, [pc, #60]	; (800b6e4 <prvCheckTasksWaitingTermination+0x4c>)
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	3304      	adds	r3, #4
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe fc6a 	bl	8009f8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6b6:	4b0c      	ldr	r3, [pc, #48]	; (800b6e8 <prvCheckTasksWaitingTermination+0x50>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	4a0a      	ldr	r2, [pc, #40]	; (800b6e8 <prvCheckTasksWaitingTermination+0x50>)
 800b6be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6c0:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <prvCheckTasksWaitingTermination+0x54>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	4a09      	ldr	r2, [pc, #36]	; (800b6ec <prvCheckTasksWaitingTermination+0x54>)
 800b6c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b6ca:	f000 fbe5 	bl	800be98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f80e 	bl	800b6f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6d4:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <prvCheckTasksWaitingTermination+0x54>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1e1      	bne.n	800b6a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6dc:	bf00      	nop
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	200007c8 	.word	0x200007c8
 800b6e8:	200007f4 	.word	0x200007f4
 800b6ec:	200007dc 	.word	0x200007dc

0800b6f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d108      	bne.n	800b714 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b706:	4618      	mov	r0, r3
 800b708:	f000 fd74 	bl	800c1f4 <vPortFree>
				vPortFree( pxTCB );
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fd71 	bl	800c1f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b712:	e017      	b.n	800b744 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d103      	bne.n	800b726 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fd68 	bl	800c1f4 <vPortFree>
	}
 800b724:	e00e      	b.n	800b744 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d009      	beq.n	800b744 <prvDeleteTCB+0x54>
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	60fb      	str	r3, [r7, #12]
 800b742:	e7fe      	b.n	800b742 <prvDeleteTCB+0x52>
	}
 800b744:	bf00      	nop
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b752:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <prvResetNextTaskUnblockTime+0x38>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d104      	bne.n	800b766 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b75c:	4b0a      	ldr	r3, [pc, #40]	; (800b788 <prvResetNextTaskUnblockTime+0x3c>)
 800b75e:	f04f 32ff 	mov.w	r2, #4294967295
 800b762:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b764:	e008      	b.n	800b778 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b766:	4b07      	ldr	r3, [pc, #28]	; (800b784 <prvResetNextTaskUnblockTime+0x38>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	4a04      	ldr	r2, [pc, #16]	; (800b788 <prvResetNextTaskUnblockTime+0x3c>)
 800b776:	6013      	str	r3, [r2, #0]
}
 800b778:	bf00      	nop
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	200007ac 	.word	0x200007ac
 800b788:	20000814 	.word	0x20000814

0800b78c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b792:	4b0b      	ldr	r3, [pc, #44]	; (800b7c0 <xTaskGetSchedulerState+0x34>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d102      	bne.n	800b7a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b79a:	2301      	movs	r3, #1
 800b79c:	607b      	str	r3, [r7, #4]
 800b79e:	e008      	b.n	800b7b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7a0:	4b08      	ldr	r3, [pc, #32]	; (800b7c4 <xTaskGetSchedulerState+0x38>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d102      	bne.n	800b7ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	607b      	str	r3, [r7, #4]
 800b7ac:	e001      	b.n	800b7b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b7b2:	687b      	ldr	r3, [r7, #4]
	}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	20000800 	.word	0x20000800
 800b7c4:	2000081c 	.word	0x2000081c

0800b7c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d069      	beq.n	800b8b2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e2:	4b36      	ldr	r3, [pc, #216]	; (800b8bc <xTaskPriorityInherit+0xf4>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d259      	bcs.n	800b8a0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	db06      	blt.n	800b802 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f4:	4b31      	ldr	r3, [pc, #196]	; (800b8bc <xTaskPriorityInherit+0xf4>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fa:	f1c3 0207 	rsb	r2, r3, #7
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	6959      	ldr	r1, [r3, #20]
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80a:	4613      	mov	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4a2b      	ldr	r2, [pc, #172]	; (800b8c0 <xTaskPriorityInherit+0xf8>)
 800b814:	4413      	add	r3, r2
 800b816:	4299      	cmp	r1, r3
 800b818:	d13a      	bne.n	800b890 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	3304      	adds	r3, #4
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fe fbb3 	bl	8009f8a <uxListRemove>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d115      	bne.n	800b856 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82e:	4924      	ldr	r1, [pc, #144]	; (800b8c0 <xTaskPriorityInherit+0xf8>)
 800b830:	4613      	mov	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	440b      	add	r3, r1
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10a      	bne.n	800b856 <xTaskPriorityInherit+0x8e>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b844:	2201      	movs	r2, #1
 800b846:	fa02 f303 	lsl.w	r3, r2, r3
 800b84a:	43da      	mvns	r2, r3
 800b84c:	4b1d      	ldr	r3, [pc, #116]	; (800b8c4 <xTaskPriorityInherit+0xfc>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4013      	ands	r3, r2
 800b852:	4a1c      	ldr	r2, [pc, #112]	; (800b8c4 <xTaskPriorityInherit+0xfc>)
 800b854:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b856:	4b19      	ldr	r3, [pc, #100]	; (800b8bc <xTaskPriorityInherit+0xf4>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	2201      	movs	r2, #1
 800b866:	409a      	lsls	r2, r3
 800b868:	4b16      	ldr	r3, [pc, #88]	; (800b8c4 <xTaskPriorityInherit+0xfc>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	4a15      	ldr	r2, [pc, #84]	; (800b8c4 <xTaskPriorityInherit+0xfc>)
 800b870:	6013      	str	r3, [r2, #0]
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b876:	4613      	mov	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	4413      	add	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4a10      	ldr	r2, [pc, #64]	; (800b8c0 <xTaskPriorityInherit+0xf8>)
 800b880:	441a      	add	r2, r3
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	3304      	adds	r3, #4
 800b886:	4619      	mov	r1, r3
 800b888:	4610      	mov	r0, r2
 800b88a:	f7fe fb21 	bl	8009ed0 <vListInsertEnd>
 800b88e:	e004      	b.n	800b89a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b890:	4b0a      	ldr	r3, [pc, #40]	; (800b8bc <xTaskPriorityInherit+0xf4>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b89a:	2301      	movs	r3, #1
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	e008      	b.n	800b8b2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8a4:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <xTaskPriorityInherit+0xf4>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d201      	bcs.n	800b8b2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
	}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	200006f4 	.word	0x200006f4
 800b8c0:	200006f8 	.word	0x200006f8
 800b8c4:	200007fc 	.word	0x200007fc

0800b8c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d06c      	beq.n	800b9b8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b8de:	4b39      	ldr	r3, [pc, #228]	; (800b9c4 <xTaskPriorityDisinherit+0xfc>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d009      	beq.n	800b8fc <xTaskPriorityDisinherit+0x34>
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	60fb      	str	r3, [r7, #12]
 800b8fa:	e7fe      	b.n	800b8fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b900:	2b00      	cmp	r3, #0
 800b902:	d109      	bne.n	800b918 <xTaskPriorityDisinherit+0x50>
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	60bb      	str	r3, [r7, #8]
 800b916:	e7fe      	b.n	800b916 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b91c:	1e5a      	subs	r2, r3, #1
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d044      	beq.n	800b9b8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b932:	2b00      	cmp	r3, #0
 800b934:	d140      	bne.n	800b9b8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	3304      	adds	r3, #4
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe fb25 	bl	8009f8a <uxListRemove>
 800b940:	4603      	mov	r3, r0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d115      	bne.n	800b972 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94a:	491f      	ldr	r1, [pc, #124]	; (800b9c8 <xTaskPriorityDisinherit+0x100>)
 800b94c:	4613      	mov	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	440b      	add	r3, r1
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <xTaskPriorityDisinherit+0xaa>
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	2201      	movs	r2, #1
 800b962:	fa02 f303 	lsl.w	r3, r2, r3
 800b966:	43da      	mvns	r2, r3
 800b968:	4b18      	ldr	r3, [pc, #96]	; (800b9cc <xTaskPriorityDisinherit+0x104>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4013      	ands	r3, r2
 800b96e:	4a17      	ldr	r2, [pc, #92]	; (800b9cc <xTaskPriorityDisinherit+0x104>)
 800b970:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97e:	f1c3 0207 	rsb	r2, r3, #7
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98a:	2201      	movs	r2, #1
 800b98c:	409a      	lsls	r2, r3
 800b98e:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <xTaskPriorityDisinherit+0x104>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4313      	orrs	r3, r2
 800b994:	4a0d      	ldr	r2, [pc, #52]	; (800b9cc <xTaskPriorityDisinherit+0x104>)
 800b996:	6013      	str	r3, [r2, #0]
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99c:	4613      	mov	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	4413      	add	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4a08      	ldr	r2, [pc, #32]	; (800b9c8 <xTaskPriorityDisinherit+0x100>)
 800b9a6:	441a      	add	r2, r3
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	f7fe fa8e 	bl	8009ed0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9b8:	697b      	ldr	r3, [r7, #20]
	}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	200006f4 	.word	0x200006f4
 800b9c8:	200006f8 	.word	0x200006f8
 800b9cc:	200007fc 	.word	0x200007fc

0800b9d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 8081 	beq.w	800baec <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d109      	bne.n	800ba06 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	e7fe      	b.n	800ba04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d902      	bls.n	800ba16 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	61fb      	str	r3, [r7, #28]
 800ba14:	e002      	b.n	800ba1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	69fa      	ldr	r2, [r7, #28]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d062      	beq.n	800baec <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d15d      	bne.n	800baec <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ba30:	4b30      	ldr	r3, [pc, #192]	; (800baf4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	69ba      	ldr	r2, [r7, #24]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d109      	bne.n	800ba4e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	60bb      	str	r3, [r7, #8]
 800ba4c:	e7fe      	b.n	800ba4c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba52:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	69fa      	ldr	r2, [r7, #28]
 800ba58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	db04      	blt.n	800ba6c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	f1c3 0207 	rsb	r2, r3, #7
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	6959      	ldr	r1, [r3, #20]
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	4613      	mov	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4413      	add	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4a1f      	ldr	r2, [pc, #124]	; (800baf8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ba7c:	4413      	add	r3, r2
 800ba7e:	4299      	cmp	r1, r3
 800ba80:	d134      	bne.n	800baec <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	3304      	adds	r3, #4
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fe fa7f 	bl	8009f8a <uxListRemove>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d115      	bne.n	800babe <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba96:	4918      	ldr	r1, [pc, #96]	; (800baf8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	440b      	add	r3, r1
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10a      	bne.n	800babe <vTaskPriorityDisinheritAfterTimeout+0xee>
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baac:	2201      	movs	r2, #1
 800baae:	fa02 f303 	lsl.w	r3, r2, r3
 800bab2:	43da      	mvns	r2, r3
 800bab4:	4b11      	ldr	r3, [pc, #68]	; (800bafc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4013      	ands	r3, r2
 800baba:	4a10      	ldr	r2, [pc, #64]	; (800bafc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800babc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac2:	2201      	movs	r2, #1
 800bac4:	409a      	lsls	r2, r3
 800bac6:	4b0d      	ldr	r3, [pc, #52]	; (800bafc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4313      	orrs	r3, r2
 800bacc:	4a0b      	ldr	r2, [pc, #44]	; (800bafc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800bace:	6013      	str	r3, [r2, #0]
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad4:	4613      	mov	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	4a06      	ldr	r2, [pc, #24]	; (800baf8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800bade:	441a      	add	r2, r3
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	3304      	adds	r3, #4
 800bae4:	4619      	mov	r1, r3
 800bae6:	4610      	mov	r0, r2
 800bae8:	f7fe f9f2 	bl	8009ed0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800baec:	bf00      	nop
 800baee:	3720      	adds	r7, #32
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	200006f4 	.word	0x200006f4
 800baf8:	200006f8 	.word	0x200006f8
 800bafc:	200007fc 	.word	0x200007fc

0800bb00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb00:	b480      	push	{r7}
 800bb02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb04:	4b07      	ldr	r3, [pc, #28]	; (800bb24 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d004      	beq.n	800bb16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb0c:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb12:	3201      	adds	r2, #1
 800bb14:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bb16:	4b03      	ldr	r3, [pc, #12]	; (800bb24 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb18:	681b      	ldr	r3, [r3, #0]
	}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	200006f4 	.word	0x200006f4

0800bb28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb32:	4b29      	ldr	r3, [pc, #164]	; (800bbd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb38:	4b28      	ldr	r3, [pc, #160]	; (800bbdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe fa23 	bl	8009f8a <uxListRemove>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10b      	bne.n	800bb62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bb4a:	4b24      	ldr	r3, [pc, #144]	; (800bbdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb50:	2201      	movs	r2, #1
 800bb52:	fa02 f303 	lsl.w	r3, r2, r3
 800bb56:	43da      	mvns	r2, r3
 800bb58:	4b21      	ldr	r3, [pc, #132]	; (800bbe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	4a20      	ldr	r2, [pc, #128]	; (800bbe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb68:	d10a      	bne.n	800bb80 <prvAddCurrentTaskToDelayedList+0x58>
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d007      	beq.n	800bb80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb70:	4b1a      	ldr	r3, [pc, #104]	; (800bbdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3304      	adds	r3, #4
 800bb76:	4619      	mov	r1, r3
 800bb78:	481a      	ldr	r0, [pc, #104]	; (800bbe4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bb7a:	f7fe f9a9 	bl	8009ed0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb7e:	e026      	b.n	800bbce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4413      	add	r3, r2
 800bb86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb88:	4b14      	ldr	r3, [pc, #80]	; (800bbdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d209      	bcs.n	800bbac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb98:	4b13      	ldr	r3, [pc, #76]	; (800bbe8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3304      	adds	r3, #4
 800bba2:	4619      	mov	r1, r3
 800bba4:	4610      	mov	r0, r2
 800bba6:	f7fe f9b7 	bl	8009f18 <vListInsert>
}
 800bbaa:	e010      	b.n	800bbce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbac:	4b0f      	ldr	r3, [pc, #60]	; (800bbec <prvAddCurrentTaskToDelayedList+0xc4>)
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	; (800bbdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4610      	mov	r0, r2
 800bbba:	f7fe f9ad 	bl	8009f18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bbbe:	4b0c      	ldr	r3, [pc, #48]	; (800bbf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d202      	bcs.n	800bbce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bbc8:	4a09      	ldr	r2, [pc, #36]	; (800bbf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	6013      	str	r3, [r2, #0]
}
 800bbce:	bf00      	nop
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	200007f8 	.word	0x200007f8
 800bbdc:	200006f4 	.word	0x200006f4
 800bbe0:	200007fc 	.word	0x200007fc
 800bbe4:	200007e0 	.word	0x200007e0
 800bbe8:	200007b0 	.word	0x200007b0
 800bbec:	200007ac 	.word	0x200007ac
 800bbf0:	20000814 	.word	0x20000814

0800bbf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	3b04      	subs	r3, #4
 800bc04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bc0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	3b04      	subs	r3, #4
 800bc12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	f023 0201 	bic.w	r2, r3, #1
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3b04      	subs	r3, #4
 800bc22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc24:	4a0c      	ldr	r2, [pc, #48]	; (800bc58 <pxPortInitialiseStack+0x64>)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	3b14      	subs	r3, #20
 800bc2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	3b04      	subs	r3, #4
 800bc3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f06f 0202 	mvn.w	r2, #2
 800bc42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	3b20      	subs	r3, #32
 800bc48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	0800bc5d 	.word	0x0800bc5d

0800bc5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc62:	2300      	movs	r3, #0
 800bc64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc66:	4b11      	ldr	r3, [pc, #68]	; (800bcac <prvTaskExitError+0x50>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6e:	d009      	beq.n	800bc84 <prvTaskExitError+0x28>
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	60fb      	str	r3, [r7, #12]
 800bc82:	e7fe      	b.n	800bc82 <prvTaskExitError+0x26>
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc96:	bf00      	nop
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0fc      	beq.n	800bc98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc9e:	bf00      	nop
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	200000ec 	.word	0x200000ec

0800bcb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bcb0:	4b07      	ldr	r3, [pc, #28]	; (800bcd0 <pxCurrentTCBConst2>)
 800bcb2:	6819      	ldr	r1, [r3, #0]
 800bcb4:	6808      	ldr	r0, [r1, #0]
 800bcb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcba:	f380 8809 	msr	PSP, r0
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f04f 0000 	mov.w	r0, #0
 800bcc6:	f380 8811 	msr	BASEPRI, r0
 800bcca:	4770      	bx	lr
 800bccc:	f3af 8000 	nop.w

0800bcd0 <pxCurrentTCBConst2>:
 800bcd0:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bcd4:	bf00      	nop
 800bcd6:	bf00      	nop

0800bcd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bcd8:	4808      	ldr	r0, [pc, #32]	; (800bcfc <prvPortStartFirstTask+0x24>)
 800bcda:	6800      	ldr	r0, [r0, #0]
 800bcdc:	6800      	ldr	r0, [r0, #0]
 800bcde:	f380 8808 	msr	MSP, r0
 800bce2:	f04f 0000 	mov.w	r0, #0
 800bce6:	f380 8814 	msr	CONTROL, r0
 800bcea:	b662      	cpsie	i
 800bcec:	b661      	cpsie	f
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	df00      	svc	0
 800bcf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcfa:	bf00      	nop
 800bcfc:	e000ed08 	.word	0xe000ed08

0800bd00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bd06:	4b44      	ldr	r3, [pc, #272]	; (800be18 <xPortStartScheduler+0x118>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a44      	ldr	r2, [pc, #272]	; (800be1c <xPortStartScheduler+0x11c>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d109      	bne.n	800bd24 <xPortStartScheduler+0x24>
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	613b      	str	r3, [r7, #16]
 800bd22:	e7fe      	b.n	800bd22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd24:	4b3c      	ldr	r3, [pc, #240]	; (800be18 <xPortStartScheduler+0x118>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a3d      	ldr	r2, [pc, #244]	; (800be20 <xPortStartScheduler+0x120>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d109      	bne.n	800bd42 <xPortStartScheduler+0x42>
 800bd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	e7fe      	b.n	800bd40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd42:	4b38      	ldr	r3, [pc, #224]	; (800be24 <xPortStartScheduler+0x124>)
 800bd44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	22ff      	movs	r2, #255	; 0xff
 800bd52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd5c:	78fb      	ldrb	r3, [r7, #3]
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	4b30      	ldr	r3, [pc, #192]	; (800be28 <xPortStartScheduler+0x128>)
 800bd68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd6a:	4b30      	ldr	r3, [pc, #192]	; (800be2c <xPortStartScheduler+0x12c>)
 800bd6c:	2207      	movs	r2, #7
 800bd6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd70:	e009      	b.n	800bd86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800bd72:	4b2e      	ldr	r3, [pc, #184]	; (800be2c <xPortStartScheduler+0x12c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	3b01      	subs	r3, #1
 800bd78:	4a2c      	ldr	r2, [pc, #176]	; (800be2c <xPortStartScheduler+0x12c>)
 800bd7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd7c:	78fb      	ldrb	r3, [r7, #3]
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	005b      	lsls	r3, r3, #1
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd86:	78fb      	ldrb	r3, [r7, #3]
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd8e:	2b80      	cmp	r3, #128	; 0x80
 800bd90:	d0ef      	beq.n	800bd72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd92:	4b26      	ldr	r3, [pc, #152]	; (800be2c <xPortStartScheduler+0x12c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f1c3 0307 	rsb	r3, r3, #7
 800bd9a:	2b04      	cmp	r3, #4
 800bd9c:	d009      	beq.n	800bdb2 <xPortStartScheduler+0xb2>
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	60bb      	str	r3, [r7, #8]
 800bdb0:	e7fe      	b.n	800bdb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bdb2:	4b1e      	ldr	r3, [pc, #120]	; (800be2c <xPortStartScheduler+0x12c>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	021b      	lsls	r3, r3, #8
 800bdb8:	4a1c      	ldr	r2, [pc, #112]	; (800be2c <xPortStartScheduler+0x12c>)
 800bdba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bdbc:	4b1b      	ldr	r3, [pc, #108]	; (800be2c <xPortStartScheduler+0x12c>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bdc4:	4a19      	ldr	r2, [pc, #100]	; (800be2c <xPortStartScheduler+0x12c>)
 800bdc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bdd0:	4b17      	ldr	r3, [pc, #92]	; (800be30 <xPortStartScheduler+0x130>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a16      	ldr	r2, [pc, #88]	; (800be30 <xPortStartScheduler+0x130>)
 800bdd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bddc:	4b14      	ldr	r3, [pc, #80]	; (800be30 <xPortStartScheduler+0x130>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a13      	ldr	r2, [pc, #76]	; (800be30 <xPortStartScheduler+0x130>)
 800bde2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bde6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bde8:	f000 f8d6 	bl	800bf98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdec:	4b11      	ldr	r3, [pc, #68]	; (800be34 <xPortStartScheduler+0x134>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdf2:	f000 f8f5 	bl	800bfe0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdf6:	4b10      	ldr	r3, [pc, #64]	; (800be38 <xPortStartScheduler+0x138>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a0f      	ldr	r2, [pc, #60]	; (800be38 <xPortStartScheduler+0x138>)
 800bdfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800be00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be02:	f7ff ff69 	bl	800bcd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be06:	f7ff fa71 	bl	800b2ec <vTaskSwitchContext>
	prvTaskExitError();
 800be0a:	f7ff ff27 	bl	800bc5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3718      	adds	r7, #24
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	e000ed00 	.word	0xe000ed00
 800be1c:	410fc271 	.word	0x410fc271
 800be20:	410fc270 	.word	0x410fc270
 800be24:	e000e400 	.word	0xe000e400
 800be28:	20000828 	.word	0x20000828
 800be2c:	2000082c 	.word	0x2000082c
 800be30:	e000ed20 	.word	0xe000ed20
 800be34:	200000ec 	.word	0x200000ec
 800be38:	e000ef34 	.word	0xe000ef34

0800be3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be54:	4b0e      	ldr	r3, [pc, #56]	; (800be90 <vPortEnterCritical+0x54>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	3301      	adds	r3, #1
 800be5a:	4a0d      	ldr	r2, [pc, #52]	; (800be90 <vPortEnterCritical+0x54>)
 800be5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be5e:	4b0c      	ldr	r3, [pc, #48]	; (800be90 <vPortEnterCritical+0x54>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d10e      	bne.n	800be84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be66:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <vPortEnterCritical+0x58>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d009      	beq.n	800be84 <vPortEnterCritical+0x48>
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	603b      	str	r3, [r7, #0]
 800be82:	e7fe      	b.n	800be82 <vPortEnterCritical+0x46>
	}
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr
 800be90:	200000ec 	.word	0x200000ec
 800be94:	e000ed04 	.word	0xe000ed04

0800be98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be9e:	4b11      	ldr	r3, [pc, #68]	; (800bee4 <vPortExitCritical+0x4c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d109      	bne.n	800beba <vPortExitCritical+0x22>
 800bea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	607b      	str	r3, [r7, #4]
 800beb8:	e7fe      	b.n	800beb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800beba:	4b0a      	ldr	r3, [pc, #40]	; (800bee4 <vPortExitCritical+0x4c>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3b01      	subs	r3, #1
 800bec0:	4a08      	ldr	r2, [pc, #32]	; (800bee4 <vPortExitCritical+0x4c>)
 800bec2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bec4:	4b07      	ldr	r3, [pc, #28]	; (800bee4 <vPortExitCritical+0x4c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d104      	bne.n	800bed6 <vPortExitCritical+0x3e>
 800becc:	2300      	movs	r3, #0
 800bece:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bed6:	bf00      	nop
 800bed8:	370c      	adds	r7, #12
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	200000ec 	.word	0x200000ec
	...

0800bef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bef0:	f3ef 8009 	mrs	r0, PSP
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	4b15      	ldr	r3, [pc, #84]	; (800bf50 <pxCurrentTCBConst>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	f01e 0f10 	tst.w	lr, #16
 800bf00:	bf08      	it	eq
 800bf02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0a:	6010      	str	r0, [r2, #0]
 800bf0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bf14:	f380 8811 	msr	BASEPRI, r0
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f7ff f9e4 	bl	800b2ec <vTaskSwitchContext>
 800bf24:	f04f 0000 	mov.w	r0, #0
 800bf28:	f380 8811 	msr	BASEPRI, r0
 800bf2c:	bc09      	pop	{r0, r3}
 800bf2e:	6819      	ldr	r1, [r3, #0]
 800bf30:	6808      	ldr	r0, [r1, #0]
 800bf32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf36:	f01e 0f10 	tst.w	lr, #16
 800bf3a:	bf08      	it	eq
 800bf3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf40:	f380 8809 	msr	PSP, r0
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	f3af 8000 	nop.w

0800bf50 <pxCurrentTCBConst>:
 800bf50:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop

0800bf58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf70:	f7ff f904 	bl	800b17c <xTaskIncrementTick>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d003      	beq.n	800bf82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf7a:	4b06      	ldr	r3, [pc, #24]	; (800bf94 <SysTick_Handler+0x3c>)
 800bf7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	2300      	movs	r3, #0
 800bf84:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf8c:	bf00      	nop
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	e000ed04 	.word	0xe000ed04

0800bf98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf98:	b480      	push	{r7}
 800bf9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf9c:	4b0b      	ldr	r3, [pc, #44]	; (800bfcc <vPortSetupTimerInterrupt+0x34>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bfa2:	4b0b      	ldr	r3, [pc, #44]	; (800bfd0 <vPortSetupTimerInterrupt+0x38>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bfa8:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <vPortSetupTimerInterrupt+0x3c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a0a      	ldr	r2, [pc, #40]	; (800bfd8 <vPortSetupTimerInterrupt+0x40>)
 800bfae:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb2:	099b      	lsrs	r3, r3, #6
 800bfb4:	4a09      	ldr	r2, [pc, #36]	; (800bfdc <vPortSetupTimerInterrupt+0x44>)
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bfba:	4b04      	ldr	r3, [pc, #16]	; (800bfcc <vPortSetupTimerInterrupt+0x34>)
 800bfbc:	2207      	movs	r2, #7
 800bfbe:	601a      	str	r2, [r3, #0]
}
 800bfc0:	bf00      	nop
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	e000e010 	.word	0xe000e010
 800bfd0:	e000e018 	.word	0xe000e018
 800bfd4:	200000e0 	.word	0x200000e0
 800bfd8:	10624dd3 	.word	0x10624dd3
 800bfdc:	e000e014 	.word	0xe000e014

0800bfe0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfe0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bff0 <vPortEnableVFP+0x10>
 800bfe4:	6801      	ldr	r1, [r0, #0]
 800bfe6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfea:	6001      	str	r1, [r0, #0]
 800bfec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfee:	bf00      	nop
 800bff0:	e000ed88 	.word	0xe000ed88

0800bff4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bffa:	f3ef 8305 	mrs	r3, IPSR
 800bffe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b0f      	cmp	r3, #15
 800c004:	d913      	bls.n	800c02e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c006:	4a16      	ldr	r2, [pc, #88]	; (800c060 <vPortValidateInterruptPriority+0x6c>)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	4413      	add	r3, r2
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c010:	4b14      	ldr	r3, [pc, #80]	; (800c064 <vPortValidateInterruptPriority+0x70>)
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	7afa      	ldrb	r2, [r7, #11]
 800c016:	429a      	cmp	r2, r3
 800c018:	d209      	bcs.n	800c02e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01e:	f383 8811 	msr	BASEPRI, r3
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	607b      	str	r3, [r7, #4]
 800c02c:	e7fe      	b.n	800c02c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c02e:	4b0e      	ldr	r3, [pc, #56]	; (800c068 <vPortValidateInterruptPriority+0x74>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c036:	4b0d      	ldr	r3, [pc, #52]	; (800c06c <vPortValidateInterruptPriority+0x78>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d909      	bls.n	800c052 <vPortValidateInterruptPriority+0x5e>
 800c03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	e7fe      	b.n	800c050 <vPortValidateInterruptPriority+0x5c>
	}
 800c052:	bf00      	nop
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	e000e3f0 	.word	0xe000e3f0
 800c064:	20000828 	.word	0x20000828
 800c068:	e000ed0c 	.word	0xe000ed0c
 800c06c:	2000082c 	.word	0x2000082c

0800c070 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b08a      	sub	sp, #40	; 0x28
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c078:	2300      	movs	r3, #0
 800c07a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c07c:	f7fe ffc4 	bl	800b008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c080:	4b57      	ldr	r3, [pc, #348]	; (800c1e0 <pvPortMalloc+0x170>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d101      	bne.n	800c08c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c088:	f000 f90c 	bl	800c2a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c08c:	4b55      	ldr	r3, [pc, #340]	; (800c1e4 <pvPortMalloc+0x174>)
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4013      	ands	r3, r2
 800c094:	2b00      	cmp	r3, #0
 800c096:	f040 808c 	bne.w	800c1b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d01c      	beq.n	800c0da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c0a0:	2208      	movs	r2, #8
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f003 0307 	and.w	r3, r3, #7
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d013      	beq.n	800c0da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f023 0307 	bic.w	r3, r3, #7
 800c0b8:	3308      	adds	r3, #8
 800c0ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f003 0307 	and.w	r3, r3, #7
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d009      	beq.n	800c0da <pvPortMalloc+0x6a>
 800c0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	617b      	str	r3, [r7, #20]
 800c0d8:	e7fe      	b.n	800c0d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d068      	beq.n	800c1b2 <pvPortMalloc+0x142>
 800c0e0:	4b41      	ldr	r3, [pc, #260]	; (800c1e8 <pvPortMalloc+0x178>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d863      	bhi.n	800c1b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0ea:	4b40      	ldr	r3, [pc, #256]	; (800c1ec <pvPortMalloc+0x17c>)
 800c0ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0ee:	4b3f      	ldr	r3, [pc, #252]	; (800c1ec <pvPortMalloc+0x17c>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0f4:	e004      	b.n	800c100 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	429a      	cmp	r2, r3
 800c108:	d903      	bls.n	800c112 <pvPortMalloc+0xa2>
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1f1      	bne.n	800c0f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c112:	4b33      	ldr	r3, [pc, #204]	; (800c1e0 <pvPortMalloc+0x170>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c118:	429a      	cmp	r2, r3
 800c11a:	d04a      	beq.n	800c1b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2208      	movs	r2, #8
 800c122:	4413      	add	r3, r2
 800c124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	6a3b      	ldr	r3, [r7, #32]
 800c12c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c130:	685a      	ldr	r2, [r3, #4]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	1ad2      	subs	r2, r2, r3
 800c136:	2308      	movs	r3, #8
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d91e      	bls.n	800c17c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4413      	add	r3, r2
 800c144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	f003 0307 	and.w	r3, r3, #7
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d009      	beq.n	800c164 <pvPortMalloc+0xf4>
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	613b      	str	r3, [r7, #16]
 800c162:	e7fe      	b.n	800c162 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	685a      	ldr	r2, [r3, #4]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	1ad2      	subs	r2, r2, r3
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c176:	69b8      	ldr	r0, [r7, #24]
 800c178:	f000 f8f6 	bl	800c368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c17c:	4b1a      	ldr	r3, [pc, #104]	; (800c1e8 <pvPortMalloc+0x178>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	4a18      	ldr	r2, [pc, #96]	; (800c1e8 <pvPortMalloc+0x178>)
 800c188:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c18a:	4b17      	ldr	r3, [pc, #92]	; (800c1e8 <pvPortMalloc+0x178>)
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	4b18      	ldr	r3, [pc, #96]	; (800c1f0 <pvPortMalloc+0x180>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	429a      	cmp	r2, r3
 800c194:	d203      	bcs.n	800c19e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c196:	4b14      	ldr	r3, [pc, #80]	; (800c1e8 <pvPortMalloc+0x178>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a15      	ldr	r2, [pc, #84]	; (800c1f0 <pvPortMalloc+0x180>)
 800c19c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	4b10      	ldr	r3, [pc, #64]	; (800c1e4 <pvPortMalloc+0x174>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1b2:	f7fe ff37 	bl	800b024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	f003 0307 	and.w	r3, r3, #7
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d009      	beq.n	800c1d4 <pvPortMalloc+0x164>
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
 800c1d2:	e7fe      	b.n	800c1d2 <pvPortMalloc+0x162>
	return pvReturn;
 800c1d4:	69fb      	ldr	r3, [r7, #28]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3728      	adds	r7, #40	; 0x28
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20002f48 	.word	0x20002f48
 800c1e4:	20002f54 	.word	0x20002f54
 800c1e8:	20002f4c 	.word	0x20002f4c
 800c1ec:	20002f40 	.word	0x20002f40
 800c1f0:	20002f50 	.word	0x20002f50

0800c1f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d046      	beq.n	800c294 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c206:	2308      	movs	r3, #8
 800c208:	425b      	negs	r3, r3
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	4413      	add	r3, r2
 800c20e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	685a      	ldr	r2, [r3, #4]
 800c218:	4b20      	ldr	r3, [pc, #128]	; (800c29c <vPortFree+0xa8>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4013      	ands	r3, r2
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d109      	bne.n	800c236 <vPortFree+0x42>
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	60fb      	str	r3, [r7, #12]
 800c234:	e7fe      	b.n	800c234 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d009      	beq.n	800c252 <vPortFree+0x5e>
 800c23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	60bb      	str	r3, [r7, #8]
 800c250:	e7fe      	b.n	800c250 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	685a      	ldr	r2, [r3, #4]
 800c256:	4b11      	ldr	r3, [pc, #68]	; (800c29c <vPortFree+0xa8>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4013      	ands	r3, r2
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d019      	beq.n	800c294 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d115      	bne.n	800c294 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	685a      	ldr	r2, [r3, #4]
 800c26c:	4b0b      	ldr	r3, [pc, #44]	; (800c29c <vPortFree+0xa8>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	43db      	mvns	r3, r3
 800c272:	401a      	ands	r2, r3
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c278:	f7fe fec6 	bl	800b008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	685a      	ldr	r2, [r3, #4]
 800c280:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <vPortFree+0xac>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4413      	add	r3, r2
 800c286:	4a06      	ldr	r2, [pc, #24]	; (800c2a0 <vPortFree+0xac>)
 800c288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c28a:	6938      	ldr	r0, [r7, #16]
 800c28c:	f000 f86c 	bl	800c368 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c290:	f7fe fec8 	bl	800b024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c294:	bf00      	nop
 800c296:	3718      	adds	r7, #24
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	20002f54 	.word	0x20002f54
 800c2a0:	20002f4c 	.word	0x20002f4c

0800c2a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2aa:	f242 7310 	movw	r3, #10000	; 0x2710
 800c2ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2b0:	4b27      	ldr	r3, [pc, #156]	; (800c350 <prvHeapInit+0xac>)
 800c2b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f003 0307 	and.w	r3, r3, #7
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00c      	beq.n	800c2d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3307      	adds	r3, #7
 800c2c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f023 0307 	bic.w	r3, r3, #7
 800c2ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	4a1f      	ldr	r2, [pc, #124]	; (800c350 <prvHeapInit+0xac>)
 800c2d4:	4413      	add	r3, r2
 800c2d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2dc:	4a1d      	ldr	r2, [pc, #116]	; (800c354 <prvHeapInit+0xb0>)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2e2:	4b1c      	ldr	r3, [pc, #112]	; (800c354 <prvHeapInit+0xb0>)
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2f0:	2208      	movs	r2, #8
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	1a9b      	subs	r3, r3, r2
 800c2f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f023 0307 	bic.w	r3, r3, #7
 800c2fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4a15      	ldr	r2, [pc, #84]	; (800c358 <prvHeapInit+0xb4>)
 800c304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c306:	4b14      	ldr	r3, [pc, #80]	; (800c358 <prvHeapInit+0xb4>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2200      	movs	r2, #0
 800c30c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c30e:	4b12      	ldr	r3, [pc, #72]	; (800c358 <prvHeapInit+0xb4>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2200      	movs	r2, #0
 800c314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	1ad2      	subs	r2, r2, r3
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c324:	4b0c      	ldr	r3, [pc, #48]	; (800c358 <prvHeapInit+0xb4>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	4a0a      	ldr	r2, [pc, #40]	; (800c35c <prvHeapInit+0xb8>)
 800c332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	4a09      	ldr	r2, [pc, #36]	; (800c360 <prvHeapInit+0xbc>)
 800c33a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c33c:	4b09      	ldr	r3, [pc, #36]	; (800c364 <prvHeapInit+0xc0>)
 800c33e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c342:	601a      	str	r2, [r3, #0]
}
 800c344:	bf00      	nop
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	20000830 	.word	0x20000830
 800c354:	20002f40 	.word	0x20002f40
 800c358:	20002f48 	.word	0x20002f48
 800c35c:	20002f50 	.word	0x20002f50
 800c360:	20002f4c 	.word	0x20002f4c
 800c364:	20002f54 	.word	0x20002f54

0800c368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c370:	4b28      	ldr	r3, [pc, #160]	; (800c414 <prvInsertBlockIntoFreeList+0xac>)
 800c372:	60fb      	str	r3, [r7, #12]
 800c374:	e002      	b.n	800c37c <prvInsertBlockIntoFreeList+0x14>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	429a      	cmp	r2, r3
 800c384:	d8f7      	bhi.n	800c376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	4413      	add	r3, r2
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	429a      	cmp	r2, r3
 800c396:	d108      	bne.n	800c3aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	441a      	add	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	441a      	add	r2, r3
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d118      	bne.n	800c3f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	4b15      	ldr	r3, [pc, #84]	; (800c418 <prvInsertBlockIntoFreeList+0xb0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d00d      	beq.n	800c3e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	441a      	add	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	601a      	str	r2, [r3, #0]
 800c3e4:	e008      	b.n	800c3f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3e6:	4b0c      	ldr	r3, [pc, #48]	; (800c418 <prvInsertBlockIntoFreeList+0xb0>)
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	e003      	b.n	800c3f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d002      	beq.n	800c406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c406:	bf00      	nop
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	20002f40 	.word	0x20002f40
 800c418:	20002f48 	.word	0x20002f48

0800c41c <__errno>:
 800c41c:	4b01      	ldr	r3, [pc, #4]	; (800c424 <__errno+0x8>)
 800c41e:	6818      	ldr	r0, [r3, #0]
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	200000f0 	.word	0x200000f0

0800c428 <__libc_init_array>:
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	4e0d      	ldr	r6, [pc, #52]	; (800c460 <__libc_init_array+0x38>)
 800c42c:	4c0d      	ldr	r4, [pc, #52]	; (800c464 <__libc_init_array+0x3c>)
 800c42e:	1ba4      	subs	r4, r4, r6
 800c430:	10a4      	asrs	r4, r4, #2
 800c432:	2500      	movs	r5, #0
 800c434:	42a5      	cmp	r5, r4
 800c436:	d109      	bne.n	800c44c <__libc_init_array+0x24>
 800c438:	4e0b      	ldr	r6, [pc, #44]	; (800c468 <__libc_init_array+0x40>)
 800c43a:	4c0c      	ldr	r4, [pc, #48]	; (800c46c <__libc_init_array+0x44>)
 800c43c:	f001 fb3a 	bl	800dab4 <_init>
 800c440:	1ba4      	subs	r4, r4, r6
 800c442:	10a4      	asrs	r4, r4, #2
 800c444:	2500      	movs	r5, #0
 800c446:	42a5      	cmp	r5, r4
 800c448:	d105      	bne.n	800c456 <__libc_init_array+0x2e>
 800c44a:	bd70      	pop	{r4, r5, r6, pc}
 800c44c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c450:	4798      	blx	r3
 800c452:	3501      	adds	r5, #1
 800c454:	e7ee      	b.n	800c434 <__libc_init_array+0xc>
 800c456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c45a:	4798      	blx	r3
 800c45c:	3501      	adds	r5, #1
 800c45e:	e7f2      	b.n	800c446 <__libc_init_array+0x1e>
 800c460:	0800fa7c 	.word	0x0800fa7c
 800c464:	0800fa7c 	.word	0x0800fa7c
 800c468:	0800fa7c 	.word	0x0800fa7c
 800c46c:	0800fa80 	.word	0x0800fa80

0800c470 <memcpy>:
 800c470:	b510      	push	{r4, lr}
 800c472:	1e43      	subs	r3, r0, #1
 800c474:	440a      	add	r2, r1
 800c476:	4291      	cmp	r1, r2
 800c478:	d100      	bne.n	800c47c <memcpy+0xc>
 800c47a:	bd10      	pop	{r4, pc}
 800c47c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c480:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c484:	e7f7      	b.n	800c476 <memcpy+0x6>

0800c486 <memset>:
 800c486:	4402      	add	r2, r0
 800c488:	4603      	mov	r3, r0
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d100      	bne.n	800c490 <memset+0xa>
 800c48e:	4770      	bx	lr
 800c490:	f803 1b01 	strb.w	r1, [r3], #1
 800c494:	e7f9      	b.n	800c48a <memset+0x4>
	...

0800c498 <iprintf>:
 800c498:	b40f      	push	{r0, r1, r2, r3}
 800c49a:	4b0a      	ldr	r3, [pc, #40]	; (800c4c4 <iprintf+0x2c>)
 800c49c:	b513      	push	{r0, r1, r4, lr}
 800c49e:	681c      	ldr	r4, [r3, #0]
 800c4a0:	b124      	cbz	r4, 800c4ac <iprintf+0x14>
 800c4a2:	69a3      	ldr	r3, [r4, #24]
 800c4a4:	b913      	cbnz	r3, 800c4ac <iprintf+0x14>
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f000 fc4e 	bl	800cd48 <__sinit>
 800c4ac:	ab05      	add	r3, sp, #20
 800c4ae:	9a04      	ldr	r2, [sp, #16]
 800c4b0:	68a1      	ldr	r1, [r4, #8]
 800c4b2:	9301      	str	r3, [sp, #4]
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f000 ff59 	bl	800d36c <_vfiprintf_r>
 800c4ba:	b002      	add	sp, #8
 800c4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4c0:	b004      	add	sp, #16
 800c4c2:	4770      	bx	lr
 800c4c4:	200000f0 	.word	0x200000f0

0800c4c8 <_puts_r>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	460e      	mov	r6, r1
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	b118      	cbz	r0, 800c4d8 <_puts_r+0x10>
 800c4d0:	6983      	ldr	r3, [r0, #24]
 800c4d2:	b90b      	cbnz	r3, 800c4d8 <_puts_r+0x10>
 800c4d4:	f000 fc38 	bl	800cd48 <__sinit>
 800c4d8:	69ab      	ldr	r3, [r5, #24]
 800c4da:	68ac      	ldr	r4, [r5, #8]
 800c4dc:	b913      	cbnz	r3, 800c4e4 <_puts_r+0x1c>
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f000 fc32 	bl	800cd48 <__sinit>
 800c4e4:	4b23      	ldr	r3, [pc, #140]	; (800c574 <_puts_r+0xac>)
 800c4e6:	429c      	cmp	r4, r3
 800c4e8:	d117      	bne.n	800c51a <_puts_r+0x52>
 800c4ea:	686c      	ldr	r4, [r5, #4]
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	071b      	lsls	r3, r3, #28
 800c4f0:	d51d      	bpl.n	800c52e <_puts_r+0x66>
 800c4f2:	6923      	ldr	r3, [r4, #16]
 800c4f4:	b1db      	cbz	r3, 800c52e <_puts_r+0x66>
 800c4f6:	3e01      	subs	r6, #1
 800c4f8:	68a3      	ldr	r3, [r4, #8]
 800c4fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c4fe:	3b01      	subs	r3, #1
 800c500:	60a3      	str	r3, [r4, #8]
 800c502:	b9e9      	cbnz	r1, 800c540 <_puts_r+0x78>
 800c504:	2b00      	cmp	r3, #0
 800c506:	da2e      	bge.n	800c566 <_puts_r+0x9e>
 800c508:	4622      	mov	r2, r4
 800c50a:	210a      	movs	r1, #10
 800c50c:	4628      	mov	r0, r5
 800c50e:	f000 fa6b 	bl	800c9e8 <__swbuf_r>
 800c512:	3001      	adds	r0, #1
 800c514:	d011      	beq.n	800c53a <_puts_r+0x72>
 800c516:	200a      	movs	r0, #10
 800c518:	e011      	b.n	800c53e <_puts_r+0x76>
 800c51a:	4b17      	ldr	r3, [pc, #92]	; (800c578 <_puts_r+0xb0>)
 800c51c:	429c      	cmp	r4, r3
 800c51e:	d101      	bne.n	800c524 <_puts_r+0x5c>
 800c520:	68ac      	ldr	r4, [r5, #8]
 800c522:	e7e3      	b.n	800c4ec <_puts_r+0x24>
 800c524:	4b15      	ldr	r3, [pc, #84]	; (800c57c <_puts_r+0xb4>)
 800c526:	429c      	cmp	r4, r3
 800c528:	bf08      	it	eq
 800c52a:	68ec      	ldreq	r4, [r5, #12]
 800c52c:	e7de      	b.n	800c4ec <_puts_r+0x24>
 800c52e:	4621      	mov	r1, r4
 800c530:	4628      	mov	r0, r5
 800c532:	f000 faab 	bl	800ca8c <__swsetup_r>
 800c536:	2800      	cmp	r0, #0
 800c538:	d0dd      	beq.n	800c4f6 <_puts_r+0x2e>
 800c53a:	f04f 30ff 	mov.w	r0, #4294967295
 800c53e:	bd70      	pop	{r4, r5, r6, pc}
 800c540:	2b00      	cmp	r3, #0
 800c542:	da04      	bge.n	800c54e <_puts_r+0x86>
 800c544:	69a2      	ldr	r2, [r4, #24]
 800c546:	429a      	cmp	r2, r3
 800c548:	dc06      	bgt.n	800c558 <_puts_r+0x90>
 800c54a:	290a      	cmp	r1, #10
 800c54c:	d004      	beq.n	800c558 <_puts_r+0x90>
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	1c5a      	adds	r2, r3, #1
 800c552:	6022      	str	r2, [r4, #0]
 800c554:	7019      	strb	r1, [r3, #0]
 800c556:	e7cf      	b.n	800c4f8 <_puts_r+0x30>
 800c558:	4622      	mov	r2, r4
 800c55a:	4628      	mov	r0, r5
 800c55c:	f000 fa44 	bl	800c9e8 <__swbuf_r>
 800c560:	3001      	adds	r0, #1
 800c562:	d1c9      	bne.n	800c4f8 <_puts_r+0x30>
 800c564:	e7e9      	b.n	800c53a <_puts_r+0x72>
 800c566:	6823      	ldr	r3, [r4, #0]
 800c568:	200a      	movs	r0, #10
 800c56a:	1c5a      	adds	r2, r3, #1
 800c56c:	6022      	str	r2, [r4, #0]
 800c56e:	7018      	strb	r0, [r3, #0]
 800c570:	e7e5      	b.n	800c53e <_puts_r+0x76>
 800c572:	bf00      	nop
 800c574:	0800fa00 	.word	0x0800fa00
 800c578:	0800fa20 	.word	0x0800fa20
 800c57c:	0800f9e0 	.word	0x0800f9e0

0800c580 <puts>:
 800c580:	4b02      	ldr	r3, [pc, #8]	; (800c58c <puts+0xc>)
 800c582:	4601      	mov	r1, r0
 800c584:	6818      	ldr	r0, [r3, #0]
 800c586:	f7ff bf9f 	b.w	800c4c8 <_puts_r>
 800c58a:	bf00      	nop
 800c58c:	200000f0 	.word	0x200000f0

0800c590 <_strerror_r>:
 800c590:	b510      	push	{r4, lr}
 800c592:	4604      	mov	r4, r0
 800c594:	4608      	mov	r0, r1
 800c596:	4611      	mov	r1, r2
 800c598:	288e      	cmp	r0, #142	; 0x8e
 800c59a:	f200 812f 	bhi.w	800c7fc <_strerror_r+0x26c>
 800c59e:	e8df f010 	tbh	[pc, r0, lsl #1]
 800c5a2:	0138      	.short	0x0138
 800c5a4:	0091008f 	.word	0x0091008f
 800c5a8:	00950093 	.word	0x00950093
 800c5ac:	00990097 	.word	0x00990097
 800c5b0:	009d009b 	.word	0x009d009b
 800c5b4:	00a300a1 	.word	0x00a300a1
 800c5b8:	00a900a7 	.word	0x00a900a7
 800c5bc:	00ad00ab 	.word	0x00ad00ab
 800c5c0:	00af012d 	.word	0x00af012d
 800c5c4:	00b300b1 	.word	0x00b300b1
 800c5c8:	00b700b5 	.word	0x00b700b5
 800c5cc:	00bf00bd 	.word	0x00bf00bd
 800c5d0:	00c700c5 	.word	0x00c700c5
 800c5d4:	00cb00c9 	.word	0x00cb00c9
 800c5d8:	00d100cd 	.word	0x00d100cd
 800c5dc:	00d700d5 	.word	0x00d700d5
 800c5e0:	00db00d9 	.word	0x00db00d9
 800c5e4:	00df00dd 	.word	0x00df00dd
 800c5e8:	00e300e1 	.word	0x00e300e1
 800c5ec:	012d012d 	.word	0x012d012d
 800c5f0:	012d012d 	.word	0x012d012d
 800c5f4:	012d012d 	.word	0x012d012d
 800c5f8:	012d012d 	.word	0x012d012d
 800c5fc:	00eb00e7 	.word	0x00eb00e7
 800c600:	012d012d 	.word	0x012d012d
 800c604:	012d012d 	.word	0x012d012d
 800c608:	012d012d 	.word	0x012d012d
 800c60c:	012d012d 	.word	0x012d012d
 800c610:	012d012d 	.word	0x012d012d
 800c614:	012d012d 	.word	0x012d012d
 800c618:	00ed012d 	.word	0x00ed012d
 800c61c:	00ef0107 	.word	0x00ef0107
 800c620:	012d00f1 	.word	0x012d00f1
 800c624:	012d012d 	.word	0x012d012d
 800c628:	012d00f3 	.word	0x012d00f3
 800c62c:	012d012d 	.word	0x012d012d
 800c630:	012d00f5 	.word	0x012d00f5
 800c634:	00f9012d 	.word	0x00f9012d
 800c638:	012d012d 	.word	0x012d012d
 800c63c:	012d00fb 	.word	0x012d00fb
 800c640:	012d012d 	.word	0x012d012d
 800c644:	012d012d 	.word	0x012d012d
 800c648:	012d012d 	.word	0x012d012d
 800c64c:	012d012d 	.word	0x012d012d
 800c650:	00fd012d 	.word	0x00fd012d
 800c654:	00ff012d 	.word	0x00ff012d
 800c658:	01030101 	.word	0x01030101
 800c65c:	012d012d 	.word	0x012d012d
 800c660:	012d0125 	.word	0x012d0125
 800c664:	012d012d 	.word	0x012d012d
 800c668:	012d012d 	.word	0x012d012d
 800c66c:	012d012d 	.word	0x012d012d
 800c670:	0113012d 	.word	0x0113012d
 800c674:	01090105 	.word	0x01090105
 800c678:	010d010b 	.word	0x010d010b
 800c67c:	012d010f 	.word	0x012d010f
 800c680:	01150111 	.word	0x01150111
 800c684:	00e90119 	.word	0x00e90119
 800c688:	012b00c1 	.word	0x012b00c1
 800c68c:	00cf00b9 	.word	0x00cf00b9
 800c690:	009f00bb 	.word	0x009f00bb
 800c694:	012900a5 	.word	0x012900a5
 800c698:	012d00f7 	.word	0x012d00f7
 800c69c:	00c30117 	.word	0x00c30117
 800c6a0:	011b011d 	.word	0x011b011d
 800c6a4:	012d012d 	.word	0x012d012d
 800c6a8:	012d012d 	.word	0x012d012d
 800c6ac:	00d3012d 	.word	0x00d3012d
 800c6b0:	012d012d 	.word	0x012d012d
 800c6b4:	00e5012d 	.word	0x00e5012d
 800c6b8:	011f0127 	.word	0x011f0127
 800c6bc:	01230121 	.word	0x01230121
 800c6c0:	4855      	ldr	r0, [pc, #340]	; (800c818 <_strerror_r+0x288>)
 800c6c2:	bd10      	pop	{r4, pc}
 800c6c4:	4855      	ldr	r0, [pc, #340]	; (800c81c <_strerror_r+0x28c>)
 800c6c6:	e7fc      	b.n	800c6c2 <_strerror_r+0x132>
 800c6c8:	4855      	ldr	r0, [pc, #340]	; (800c820 <_strerror_r+0x290>)
 800c6ca:	e7fa      	b.n	800c6c2 <_strerror_r+0x132>
 800c6cc:	4855      	ldr	r0, [pc, #340]	; (800c824 <_strerror_r+0x294>)
 800c6ce:	e7f8      	b.n	800c6c2 <_strerror_r+0x132>
 800c6d0:	4855      	ldr	r0, [pc, #340]	; (800c828 <_strerror_r+0x298>)
 800c6d2:	e7f6      	b.n	800c6c2 <_strerror_r+0x132>
 800c6d4:	4855      	ldr	r0, [pc, #340]	; (800c82c <_strerror_r+0x29c>)
 800c6d6:	e7f4      	b.n	800c6c2 <_strerror_r+0x132>
 800c6d8:	4855      	ldr	r0, [pc, #340]	; (800c830 <_strerror_r+0x2a0>)
 800c6da:	e7f2      	b.n	800c6c2 <_strerror_r+0x132>
 800c6dc:	4855      	ldr	r0, [pc, #340]	; (800c834 <_strerror_r+0x2a4>)
 800c6de:	e7f0      	b.n	800c6c2 <_strerror_r+0x132>
 800c6e0:	4855      	ldr	r0, [pc, #340]	; (800c838 <_strerror_r+0x2a8>)
 800c6e2:	e7ee      	b.n	800c6c2 <_strerror_r+0x132>
 800c6e4:	4855      	ldr	r0, [pc, #340]	; (800c83c <_strerror_r+0x2ac>)
 800c6e6:	e7ec      	b.n	800c6c2 <_strerror_r+0x132>
 800c6e8:	4855      	ldr	r0, [pc, #340]	; (800c840 <_strerror_r+0x2b0>)
 800c6ea:	e7ea      	b.n	800c6c2 <_strerror_r+0x132>
 800c6ec:	4855      	ldr	r0, [pc, #340]	; (800c844 <_strerror_r+0x2b4>)
 800c6ee:	e7e8      	b.n	800c6c2 <_strerror_r+0x132>
 800c6f0:	4855      	ldr	r0, [pc, #340]	; (800c848 <_strerror_r+0x2b8>)
 800c6f2:	e7e6      	b.n	800c6c2 <_strerror_r+0x132>
 800c6f4:	4855      	ldr	r0, [pc, #340]	; (800c84c <_strerror_r+0x2bc>)
 800c6f6:	e7e4      	b.n	800c6c2 <_strerror_r+0x132>
 800c6f8:	4855      	ldr	r0, [pc, #340]	; (800c850 <_strerror_r+0x2c0>)
 800c6fa:	e7e2      	b.n	800c6c2 <_strerror_r+0x132>
 800c6fc:	4855      	ldr	r0, [pc, #340]	; (800c854 <_strerror_r+0x2c4>)
 800c6fe:	e7e0      	b.n	800c6c2 <_strerror_r+0x132>
 800c700:	4855      	ldr	r0, [pc, #340]	; (800c858 <_strerror_r+0x2c8>)
 800c702:	e7de      	b.n	800c6c2 <_strerror_r+0x132>
 800c704:	4855      	ldr	r0, [pc, #340]	; (800c85c <_strerror_r+0x2cc>)
 800c706:	e7dc      	b.n	800c6c2 <_strerror_r+0x132>
 800c708:	4855      	ldr	r0, [pc, #340]	; (800c860 <_strerror_r+0x2d0>)
 800c70a:	e7da      	b.n	800c6c2 <_strerror_r+0x132>
 800c70c:	4855      	ldr	r0, [pc, #340]	; (800c864 <_strerror_r+0x2d4>)
 800c70e:	e7d8      	b.n	800c6c2 <_strerror_r+0x132>
 800c710:	4855      	ldr	r0, [pc, #340]	; (800c868 <_strerror_r+0x2d8>)
 800c712:	e7d6      	b.n	800c6c2 <_strerror_r+0x132>
 800c714:	4855      	ldr	r0, [pc, #340]	; (800c86c <_strerror_r+0x2dc>)
 800c716:	e7d4      	b.n	800c6c2 <_strerror_r+0x132>
 800c718:	4855      	ldr	r0, [pc, #340]	; (800c870 <_strerror_r+0x2e0>)
 800c71a:	e7d2      	b.n	800c6c2 <_strerror_r+0x132>
 800c71c:	4855      	ldr	r0, [pc, #340]	; (800c874 <_strerror_r+0x2e4>)
 800c71e:	e7d0      	b.n	800c6c2 <_strerror_r+0x132>
 800c720:	4855      	ldr	r0, [pc, #340]	; (800c878 <_strerror_r+0x2e8>)
 800c722:	e7ce      	b.n	800c6c2 <_strerror_r+0x132>
 800c724:	4855      	ldr	r0, [pc, #340]	; (800c87c <_strerror_r+0x2ec>)
 800c726:	e7cc      	b.n	800c6c2 <_strerror_r+0x132>
 800c728:	4855      	ldr	r0, [pc, #340]	; (800c880 <_strerror_r+0x2f0>)
 800c72a:	e7ca      	b.n	800c6c2 <_strerror_r+0x132>
 800c72c:	4855      	ldr	r0, [pc, #340]	; (800c884 <_strerror_r+0x2f4>)
 800c72e:	e7c8      	b.n	800c6c2 <_strerror_r+0x132>
 800c730:	4855      	ldr	r0, [pc, #340]	; (800c888 <_strerror_r+0x2f8>)
 800c732:	e7c6      	b.n	800c6c2 <_strerror_r+0x132>
 800c734:	4855      	ldr	r0, [pc, #340]	; (800c88c <_strerror_r+0x2fc>)
 800c736:	e7c4      	b.n	800c6c2 <_strerror_r+0x132>
 800c738:	4855      	ldr	r0, [pc, #340]	; (800c890 <_strerror_r+0x300>)
 800c73a:	e7c2      	b.n	800c6c2 <_strerror_r+0x132>
 800c73c:	4855      	ldr	r0, [pc, #340]	; (800c894 <_strerror_r+0x304>)
 800c73e:	e7c0      	b.n	800c6c2 <_strerror_r+0x132>
 800c740:	4855      	ldr	r0, [pc, #340]	; (800c898 <_strerror_r+0x308>)
 800c742:	e7be      	b.n	800c6c2 <_strerror_r+0x132>
 800c744:	4855      	ldr	r0, [pc, #340]	; (800c89c <_strerror_r+0x30c>)
 800c746:	e7bc      	b.n	800c6c2 <_strerror_r+0x132>
 800c748:	4855      	ldr	r0, [pc, #340]	; (800c8a0 <_strerror_r+0x310>)
 800c74a:	e7ba      	b.n	800c6c2 <_strerror_r+0x132>
 800c74c:	4855      	ldr	r0, [pc, #340]	; (800c8a4 <_strerror_r+0x314>)
 800c74e:	e7b8      	b.n	800c6c2 <_strerror_r+0x132>
 800c750:	4855      	ldr	r0, [pc, #340]	; (800c8a8 <_strerror_r+0x318>)
 800c752:	e7b6      	b.n	800c6c2 <_strerror_r+0x132>
 800c754:	4855      	ldr	r0, [pc, #340]	; (800c8ac <_strerror_r+0x31c>)
 800c756:	e7b4      	b.n	800c6c2 <_strerror_r+0x132>
 800c758:	4855      	ldr	r0, [pc, #340]	; (800c8b0 <_strerror_r+0x320>)
 800c75a:	e7b2      	b.n	800c6c2 <_strerror_r+0x132>
 800c75c:	4855      	ldr	r0, [pc, #340]	; (800c8b4 <_strerror_r+0x324>)
 800c75e:	e7b0      	b.n	800c6c2 <_strerror_r+0x132>
 800c760:	4855      	ldr	r0, [pc, #340]	; (800c8b8 <_strerror_r+0x328>)
 800c762:	e7ae      	b.n	800c6c2 <_strerror_r+0x132>
 800c764:	4855      	ldr	r0, [pc, #340]	; (800c8bc <_strerror_r+0x32c>)
 800c766:	e7ac      	b.n	800c6c2 <_strerror_r+0x132>
 800c768:	4855      	ldr	r0, [pc, #340]	; (800c8c0 <_strerror_r+0x330>)
 800c76a:	e7aa      	b.n	800c6c2 <_strerror_r+0x132>
 800c76c:	4855      	ldr	r0, [pc, #340]	; (800c8c4 <_strerror_r+0x334>)
 800c76e:	e7a8      	b.n	800c6c2 <_strerror_r+0x132>
 800c770:	4855      	ldr	r0, [pc, #340]	; (800c8c8 <_strerror_r+0x338>)
 800c772:	e7a6      	b.n	800c6c2 <_strerror_r+0x132>
 800c774:	4855      	ldr	r0, [pc, #340]	; (800c8cc <_strerror_r+0x33c>)
 800c776:	e7a4      	b.n	800c6c2 <_strerror_r+0x132>
 800c778:	4855      	ldr	r0, [pc, #340]	; (800c8d0 <_strerror_r+0x340>)
 800c77a:	e7a2      	b.n	800c6c2 <_strerror_r+0x132>
 800c77c:	4855      	ldr	r0, [pc, #340]	; (800c8d4 <_strerror_r+0x344>)
 800c77e:	e7a0      	b.n	800c6c2 <_strerror_r+0x132>
 800c780:	4855      	ldr	r0, [pc, #340]	; (800c8d8 <_strerror_r+0x348>)
 800c782:	e79e      	b.n	800c6c2 <_strerror_r+0x132>
 800c784:	4855      	ldr	r0, [pc, #340]	; (800c8dc <_strerror_r+0x34c>)
 800c786:	e79c      	b.n	800c6c2 <_strerror_r+0x132>
 800c788:	4855      	ldr	r0, [pc, #340]	; (800c8e0 <_strerror_r+0x350>)
 800c78a:	e79a      	b.n	800c6c2 <_strerror_r+0x132>
 800c78c:	4855      	ldr	r0, [pc, #340]	; (800c8e4 <_strerror_r+0x354>)
 800c78e:	e798      	b.n	800c6c2 <_strerror_r+0x132>
 800c790:	4855      	ldr	r0, [pc, #340]	; (800c8e8 <_strerror_r+0x358>)
 800c792:	e796      	b.n	800c6c2 <_strerror_r+0x132>
 800c794:	4855      	ldr	r0, [pc, #340]	; (800c8ec <_strerror_r+0x35c>)
 800c796:	e794      	b.n	800c6c2 <_strerror_r+0x132>
 800c798:	4855      	ldr	r0, [pc, #340]	; (800c8f0 <_strerror_r+0x360>)
 800c79a:	e792      	b.n	800c6c2 <_strerror_r+0x132>
 800c79c:	4855      	ldr	r0, [pc, #340]	; (800c8f4 <_strerror_r+0x364>)
 800c79e:	e790      	b.n	800c6c2 <_strerror_r+0x132>
 800c7a0:	4855      	ldr	r0, [pc, #340]	; (800c8f8 <_strerror_r+0x368>)
 800c7a2:	e78e      	b.n	800c6c2 <_strerror_r+0x132>
 800c7a4:	4855      	ldr	r0, [pc, #340]	; (800c8fc <_strerror_r+0x36c>)
 800c7a6:	e78c      	b.n	800c6c2 <_strerror_r+0x132>
 800c7a8:	4855      	ldr	r0, [pc, #340]	; (800c900 <_strerror_r+0x370>)
 800c7aa:	e78a      	b.n	800c6c2 <_strerror_r+0x132>
 800c7ac:	4855      	ldr	r0, [pc, #340]	; (800c904 <_strerror_r+0x374>)
 800c7ae:	e788      	b.n	800c6c2 <_strerror_r+0x132>
 800c7b0:	4855      	ldr	r0, [pc, #340]	; (800c908 <_strerror_r+0x378>)
 800c7b2:	e786      	b.n	800c6c2 <_strerror_r+0x132>
 800c7b4:	4855      	ldr	r0, [pc, #340]	; (800c90c <_strerror_r+0x37c>)
 800c7b6:	e784      	b.n	800c6c2 <_strerror_r+0x132>
 800c7b8:	4855      	ldr	r0, [pc, #340]	; (800c910 <_strerror_r+0x380>)
 800c7ba:	e782      	b.n	800c6c2 <_strerror_r+0x132>
 800c7bc:	4855      	ldr	r0, [pc, #340]	; (800c914 <_strerror_r+0x384>)
 800c7be:	e780      	b.n	800c6c2 <_strerror_r+0x132>
 800c7c0:	4855      	ldr	r0, [pc, #340]	; (800c918 <_strerror_r+0x388>)
 800c7c2:	e77e      	b.n	800c6c2 <_strerror_r+0x132>
 800c7c4:	4855      	ldr	r0, [pc, #340]	; (800c91c <_strerror_r+0x38c>)
 800c7c6:	e77c      	b.n	800c6c2 <_strerror_r+0x132>
 800c7c8:	4855      	ldr	r0, [pc, #340]	; (800c920 <_strerror_r+0x390>)
 800c7ca:	e77a      	b.n	800c6c2 <_strerror_r+0x132>
 800c7cc:	4855      	ldr	r0, [pc, #340]	; (800c924 <_strerror_r+0x394>)
 800c7ce:	e778      	b.n	800c6c2 <_strerror_r+0x132>
 800c7d0:	4855      	ldr	r0, [pc, #340]	; (800c928 <_strerror_r+0x398>)
 800c7d2:	e776      	b.n	800c6c2 <_strerror_r+0x132>
 800c7d4:	4855      	ldr	r0, [pc, #340]	; (800c92c <_strerror_r+0x39c>)
 800c7d6:	e774      	b.n	800c6c2 <_strerror_r+0x132>
 800c7d8:	4855      	ldr	r0, [pc, #340]	; (800c930 <_strerror_r+0x3a0>)
 800c7da:	e772      	b.n	800c6c2 <_strerror_r+0x132>
 800c7dc:	4855      	ldr	r0, [pc, #340]	; (800c934 <_strerror_r+0x3a4>)
 800c7de:	e770      	b.n	800c6c2 <_strerror_r+0x132>
 800c7e0:	4855      	ldr	r0, [pc, #340]	; (800c938 <_strerror_r+0x3a8>)
 800c7e2:	e76e      	b.n	800c6c2 <_strerror_r+0x132>
 800c7e4:	4855      	ldr	r0, [pc, #340]	; (800c93c <_strerror_r+0x3ac>)
 800c7e6:	e76c      	b.n	800c6c2 <_strerror_r+0x132>
 800c7e8:	4855      	ldr	r0, [pc, #340]	; (800c940 <_strerror_r+0x3b0>)
 800c7ea:	e76a      	b.n	800c6c2 <_strerror_r+0x132>
 800c7ec:	4855      	ldr	r0, [pc, #340]	; (800c944 <_strerror_r+0x3b4>)
 800c7ee:	e768      	b.n	800c6c2 <_strerror_r+0x132>
 800c7f0:	4855      	ldr	r0, [pc, #340]	; (800c948 <_strerror_r+0x3b8>)
 800c7f2:	e766      	b.n	800c6c2 <_strerror_r+0x132>
 800c7f4:	4855      	ldr	r0, [pc, #340]	; (800c94c <_strerror_r+0x3bc>)
 800c7f6:	e764      	b.n	800c6c2 <_strerror_r+0x132>
 800c7f8:	4855      	ldr	r0, [pc, #340]	; (800c950 <_strerror_r+0x3c0>)
 800c7fa:	e762      	b.n	800c6c2 <_strerror_r+0x132>
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	bf14      	ite	ne
 800c800:	461a      	movne	r2, r3
 800c802:	4622      	moveq	r2, r4
 800c804:	f000 f8b4 	bl	800c970 <_user_strerror>
 800c808:	4b52      	ldr	r3, [pc, #328]	; (800c954 <_strerror_r+0x3c4>)
 800c80a:	2800      	cmp	r0, #0
 800c80c:	bf08      	it	eq
 800c80e:	4618      	moveq	r0, r3
 800c810:	e757      	b.n	800c6c2 <_strerror_r+0x132>
 800c812:	4851      	ldr	r0, [pc, #324]	; (800c958 <_strerror_r+0x3c8>)
 800c814:	e755      	b.n	800c6c2 <_strerror_r+0x132>
 800c816:	bf00      	nop
 800c818:	0800f350 	.word	0x0800f350
 800c81c:	0800f35a 	.word	0x0800f35a
 800c820:	0800f374 	.word	0x0800f374
 800c824:	0800f384 	.word	0x0800f384
 800c828:	0800f39c 	.word	0x0800f39c
 800c82c:	0800f3a6 	.word	0x0800f3a6
 800c830:	0800f3c0 	.word	0x0800f3c0
 800c834:	0800f3d2 	.word	0x0800f3d2
 800c838:	0800f3e4 	.word	0x0800f3e4
 800c83c:	0800f3fd 	.word	0x0800f3fd
 800c840:	0800f40d 	.word	0x0800f40d
 800c844:	0800f419 	.word	0x0800f419
 800c848:	0800f436 	.word	0x0800f436
 800c84c:	0800f448 	.word	0x0800f448
 800c850:	0800f459 	.word	0x0800f459
 800c854:	0800f46b 	.word	0x0800f46b
 800c858:	0800f477 	.word	0x0800f477
 800c85c:	0800f48f 	.word	0x0800f48f
 800c860:	0800f49b 	.word	0x0800f49b
 800c864:	0800f4ad 	.word	0x0800f4ad
 800c868:	0800f4bc 	.word	0x0800f4bc
 800c86c:	0800f4cc 	.word	0x0800f4cc
 800c870:	0800f4d9 	.word	0x0800f4d9
 800c874:	0800f4f8 	.word	0x0800f4f8
 800c878:	0800f507 	.word	0x0800f507
 800c87c:	0800f518 	.word	0x0800f518
 800c880:	0800f53c 	.word	0x0800f53c
 800c884:	0800f55a 	.word	0x0800f55a
 800c888:	0800f578 	.word	0x0800f578
 800c88c:	0800f598 	.word	0x0800f598
 800c890:	0800f5af 	.word	0x0800f5af
 800c894:	0800f5be 	.word	0x0800f5be
 800c898:	0800f5cd 	.word	0x0800f5cd
 800c89c:	0800f5e1 	.word	0x0800f5e1
 800c8a0:	0800f5f9 	.word	0x0800f5f9
 800c8a4:	0800f607 	.word	0x0800f607
 800c8a8:	0800f614 	.word	0x0800f614
 800c8ac:	0800f62a 	.word	0x0800f62a
 800c8b0:	0800f639 	.word	0x0800f639
 800c8b4:	0800f645 	.word	0x0800f645
 800c8b8:	0800f674 	.word	0x0800f674
 800c8bc:	0800f685 	.word	0x0800f685
 800c8c0:	0800f6a0 	.word	0x0800f6a0
 800c8c4:	0800f6b3 	.word	0x0800f6b3
 800c8c8:	0800f6c9 	.word	0x0800f6c9
 800c8cc:	0800f6d2 	.word	0x0800f6d2
 800c8d0:	0800f6e9 	.word	0x0800f6e9
 800c8d4:	0800f6f1 	.word	0x0800f6f1
 800c8d8:	0800f6fe 	.word	0x0800f6fe
 800c8dc:	0800f713 	.word	0x0800f713
 800c8e0:	0800f727 	.word	0x0800f727
 800c8e4:	0800f73f 	.word	0x0800f73f
 800c8e8:	0800f74e 	.word	0x0800f74e
 800c8ec:	0800f75f 	.word	0x0800f75f
 800c8f0:	0800f772 	.word	0x0800f772
 800c8f4:	0800f77e 	.word	0x0800f77e
 800c8f8:	0800f797 	.word	0x0800f797
 800c8fc:	0800f7ab 	.word	0x0800f7ab
 800c900:	0800f7c6 	.word	0x0800f7c6
 800c904:	0800f7de 	.word	0x0800f7de
 800c908:	0800f7f8 	.word	0x0800f7f8
 800c90c:	0800f800 	.word	0x0800f800
 800c910:	0800f830 	.word	0x0800f830
 800c914:	0800f84f 	.word	0x0800f84f
 800c918:	0800f86e 	.word	0x0800f86e
 800c91c:	0800f885 	.word	0x0800f885
 800c920:	0800f898 	.word	0x0800f898
 800c924:	0800f8b1 	.word	0x0800f8b1
 800c928:	0800f8c8 	.word	0x0800f8c8
 800c92c:	0800f8de 	.word	0x0800f8de
 800c930:	0800f8ff 	.word	0x0800f8ff
 800c934:	0800f917 	.word	0x0800f917
 800c938:	0800f933 	.word	0x0800f933
 800c93c:	0800f946 	.word	0x0800f946
 800c940:	0800f95c 	.word	0x0800f95c
 800c944:	0800f970 	.word	0x0800f970
 800c948:	0800f992 	.word	0x0800f992
 800c94c:	0800f9b8 	.word	0x0800f9b8
 800c950:	0800f9c9 	.word	0x0800f9c9
 800c954:	0800fa45 	.word	0x0800fa45
 800c958:	0800f348 	.word	0x0800f348

0800c95c <strerror>:
 800c95c:	4601      	mov	r1, r0
 800c95e:	4803      	ldr	r0, [pc, #12]	; (800c96c <strerror+0x10>)
 800c960:	2300      	movs	r3, #0
 800c962:	461a      	mov	r2, r3
 800c964:	6800      	ldr	r0, [r0, #0]
 800c966:	f7ff be13 	b.w	800c590 <_strerror_r>
 800c96a:	bf00      	nop
 800c96c:	200000f0 	.word	0x200000f0

0800c970 <_user_strerror>:
 800c970:	2000      	movs	r0, #0
 800c972:	4770      	bx	lr

0800c974 <_vsniprintf_r>:
 800c974:	b530      	push	{r4, r5, lr}
 800c976:	1e14      	subs	r4, r2, #0
 800c978:	4605      	mov	r5, r0
 800c97a:	b09b      	sub	sp, #108	; 0x6c
 800c97c:	4618      	mov	r0, r3
 800c97e:	da05      	bge.n	800c98c <_vsniprintf_r+0x18>
 800c980:	238b      	movs	r3, #139	; 0x8b
 800c982:	602b      	str	r3, [r5, #0]
 800c984:	f04f 30ff 	mov.w	r0, #4294967295
 800c988:	b01b      	add	sp, #108	; 0x6c
 800c98a:	bd30      	pop	{r4, r5, pc}
 800c98c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c990:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c994:	bf14      	ite	ne
 800c996:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c99a:	4623      	moveq	r3, r4
 800c99c:	9302      	str	r3, [sp, #8]
 800c99e:	9305      	str	r3, [sp, #20]
 800c9a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9a4:	9100      	str	r1, [sp, #0]
 800c9a6:	9104      	str	r1, [sp, #16]
 800c9a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c9b0:	4669      	mov	r1, sp
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f000 fbb8 	bl	800d128 <_svfiprintf_r>
 800c9b8:	1c43      	adds	r3, r0, #1
 800c9ba:	bfbc      	itt	lt
 800c9bc:	238b      	movlt	r3, #139	; 0x8b
 800c9be:	602b      	strlt	r3, [r5, #0]
 800c9c0:	2c00      	cmp	r4, #0
 800c9c2:	d0e1      	beq.n	800c988 <_vsniprintf_r+0x14>
 800c9c4:	9b00      	ldr	r3, [sp, #0]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	701a      	strb	r2, [r3, #0]
 800c9ca:	e7dd      	b.n	800c988 <_vsniprintf_r+0x14>

0800c9cc <vsniprintf>:
 800c9cc:	b507      	push	{r0, r1, r2, lr}
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	460a      	mov	r2, r1
 800c9d4:	4601      	mov	r1, r0
 800c9d6:	4803      	ldr	r0, [pc, #12]	; (800c9e4 <vsniprintf+0x18>)
 800c9d8:	6800      	ldr	r0, [r0, #0]
 800c9da:	f7ff ffcb 	bl	800c974 <_vsniprintf_r>
 800c9de:	b003      	add	sp, #12
 800c9e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9e4:	200000f0 	.word	0x200000f0

0800c9e8 <__swbuf_r>:
 800c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ea:	460e      	mov	r6, r1
 800c9ec:	4614      	mov	r4, r2
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	b118      	cbz	r0, 800c9fa <__swbuf_r+0x12>
 800c9f2:	6983      	ldr	r3, [r0, #24]
 800c9f4:	b90b      	cbnz	r3, 800c9fa <__swbuf_r+0x12>
 800c9f6:	f000 f9a7 	bl	800cd48 <__sinit>
 800c9fa:	4b21      	ldr	r3, [pc, #132]	; (800ca80 <__swbuf_r+0x98>)
 800c9fc:	429c      	cmp	r4, r3
 800c9fe:	d12a      	bne.n	800ca56 <__swbuf_r+0x6e>
 800ca00:	686c      	ldr	r4, [r5, #4]
 800ca02:	69a3      	ldr	r3, [r4, #24]
 800ca04:	60a3      	str	r3, [r4, #8]
 800ca06:	89a3      	ldrh	r3, [r4, #12]
 800ca08:	071a      	lsls	r2, r3, #28
 800ca0a:	d52e      	bpl.n	800ca6a <__swbuf_r+0x82>
 800ca0c:	6923      	ldr	r3, [r4, #16]
 800ca0e:	b363      	cbz	r3, 800ca6a <__swbuf_r+0x82>
 800ca10:	6923      	ldr	r3, [r4, #16]
 800ca12:	6820      	ldr	r0, [r4, #0]
 800ca14:	1ac0      	subs	r0, r0, r3
 800ca16:	6963      	ldr	r3, [r4, #20]
 800ca18:	b2f6      	uxtb	r6, r6
 800ca1a:	4283      	cmp	r3, r0
 800ca1c:	4637      	mov	r7, r6
 800ca1e:	dc04      	bgt.n	800ca2a <__swbuf_r+0x42>
 800ca20:	4621      	mov	r1, r4
 800ca22:	4628      	mov	r0, r5
 800ca24:	f000 f926 	bl	800cc74 <_fflush_r>
 800ca28:	bb28      	cbnz	r0, 800ca76 <__swbuf_r+0x8e>
 800ca2a:	68a3      	ldr	r3, [r4, #8]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	60a3      	str	r3, [r4, #8]
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	1c5a      	adds	r2, r3, #1
 800ca34:	6022      	str	r2, [r4, #0]
 800ca36:	701e      	strb	r6, [r3, #0]
 800ca38:	6963      	ldr	r3, [r4, #20]
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	4283      	cmp	r3, r0
 800ca3e:	d004      	beq.n	800ca4a <__swbuf_r+0x62>
 800ca40:	89a3      	ldrh	r3, [r4, #12]
 800ca42:	07db      	lsls	r3, r3, #31
 800ca44:	d519      	bpl.n	800ca7a <__swbuf_r+0x92>
 800ca46:	2e0a      	cmp	r6, #10
 800ca48:	d117      	bne.n	800ca7a <__swbuf_r+0x92>
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	f000 f911 	bl	800cc74 <_fflush_r>
 800ca52:	b190      	cbz	r0, 800ca7a <__swbuf_r+0x92>
 800ca54:	e00f      	b.n	800ca76 <__swbuf_r+0x8e>
 800ca56:	4b0b      	ldr	r3, [pc, #44]	; (800ca84 <__swbuf_r+0x9c>)
 800ca58:	429c      	cmp	r4, r3
 800ca5a:	d101      	bne.n	800ca60 <__swbuf_r+0x78>
 800ca5c:	68ac      	ldr	r4, [r5, #8]
 800ca5e:	e7d0      	b.n	800ca02 <__swbuf_r+0x1a>
 800ca60:	4b09      	ldr	r3, [pc, #36]	; (800ca88 <__swbuf_r+0xa0>)
 800ca62:	429c      	cmp	r4, r3
 800ca64:	bf08      	it	eq
 800ca66:	68ec      	ldreq	r4, [r5, #12]
 800ca68:	e7cb      	b.n	800ca02 <__swbuf_r+0x1a>
 800ca6a:	4621      	mov	r1, r4
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	f000 f80d 	bl	800ca8c <__swsetup_r>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d0cc      	beq.n	800ca10 <__swbuf_r+0x28>
 800ca76:	f04f 37ff 	mov.w	r7, #4294967295
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	0800fa00 	.word	0x0800fa00
 800ca84:	0800fa20 	.word	0x0800fa20
 800ca88:	0800f9e0 	.word	0x0800f9e0

0800ca8c <__swsetup_r>:
 800ca8c:	4b32      	ldr	r3, [pc, #200]	; (800cb58 <__swsetup_r+0xcc>)
 800ca8e:	b570      	push	{r4, r5, r6, lr}
 800ca90:	681d      	ldr	r5, [r3, #0]
 800ca92:	4606      	mov	r6, r0
 800ca94:	460c      	mov	r4, r1
 800ca96:	b125      	cbz	r5, 800caa2 <__swsetup_r+0x16>
 800ca98:	69ab      	ldr	r3, [r5, #24]
 800ca9a:	b913      	cbnz	r3, 800caa2 <__swsetup_r+0x16>
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	f000 f953 	bl	800cd48 <__sinit>
 800caa2:	4b2e      	ldr	r3, [pc, #184]	; (800cb5c <__swsetup_r+0xd0>)
 800caa4:	429c      	cmp	r4, r3
 800caa6:	d10f      	bne.n	800cac8 <__swsetup_r+0x3c>
 800caa8:	686c      	ldr	r4, [r5, #4]
 800caaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caae:	b29a      	uxth	r2, r3
 800cab0:	0715      	lsls	r5, r2, #28
 800cab2:	d42c      	bmi.n	800cb0e <__swsetup_r+0x82>
 800cab4:	06d0      	lsls	r0, r2, #27
 800cab6:	d411      	bmi.n	800cadc <__swsetup_r+0x50>
 800cab8:	2209      	movs	r2, #9
 800caba:	6032      	str	r2, [r6, #0]
 800cabc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cac0:	81a3      	strh	r3, [r4, #12]
 800cac2:	f04f 30ff 	mov.w	r0, #4294967295
 800cac6:	e03e      	b.n	800cb46 <__swsetup_r+0xba>
 800cac8:	4b25      	ldr	r3, [pc, #148]	; (800cb60 <__swsetup_r+0xd4>)
 800caca:	429c      	cmp	r4, r3
 800cacc:	d101      	bne.n	800cad2 <__swsetup_r+0x46>
 800cace:	68ac      	ldr	r4, [r5, #8]
 800cad0:	e7eb      	b.n	800caaa <__swsetup_r+0x1e>
 800cad2:	4b24      	ldr	r3, [pc, #144]	; (800cb64 <__swsetup_r+0xd8>)
 800cad4:	429c      	cmp	r4, r3
 800cad6:	bf08      	it	eq
 800cad8:	68ec      	ldreq	r4, [r5, #12]
 800cada:	e7e6      	b.n	800caaa <__swsetup_r+0x1e>
 800cadc:	0751      	lsls	r1, r2, #29
 800cade:	d512      	bpl.n	800cb06 <__swsetup_r+0x7a>
 800cae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cae2:	b141      	cbz	r1, 800caf6 <__swsetup_r+0x6a>
 800cae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cae8:	4299      	cmp	r1, r3
 800caea:	d002      	beq.n	800caf2 <__swsetup_r+0x66>
 800caec:	4630      	mov	r0, r6
 800caee:	f000 fa19 	bl	800cf24 <_free_r>
 800caf2:	2300      	movs	r3, #0
 800caf4:	6363      	str	r3, [r4, #52]	; 0x34
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cafc:	81a3      	strh	r3, [r4, #12]
 800cafe:	2300      	movs	r3, #0
 800cb00:	6063      	str	r3, [r4, #4]
 800cb02:	6923      	ldr	r3, [r4, #16]
 800cb04:	6023      	str	r3, [r4, #0]
 800cb06:	89a3      	ldrh	r3, [r4, #12]
 800cb08:	f043 0308 	orr.w	r3, r3, #8
 800cb0c:	81a3      	strh	r3, [r4, #12]
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	b94b      	cbnz	r3, 800cb26 <__swsetup_r+0x9a>
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb1c:	d003      	beq.n	800cb26 <__swsetup_r+0x9a>
 800cb1e:	4621      	mov	r1, r4
 800cb20:	4630      	mov	r0, r6
 800cb22:	f000 f9bf 	bl	800cea4 <__smakebuf_r>
 800cb26:	89a2      	ldrh	r2, [r4, #12]
 800cb28:	f012 0301 	ands.w	r3, r2, #1
 800cb2c:	d00c      	beq.n	800cb48 <__swsetup_r+0xbc>
 800cb2e:	2300      	movs	r3, #0
 800cb30:	60a3      	str	r3, [r4, #8]
 800cb32:	6963      	ldr	r3, [r4, #20]
 800cb34:	425b      	negs	r3, r3
 800cb36:	61a3      	str	r3, [r4, #24]
 800cb38:	6923      	ldr	r3, [r4, #16]
 800cb3a:	b953      	cbnz	r3, 800cb52 <__swsetup_r+0xc6>
 800cb3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb40:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cb44:	d1ba      	bne.n	800cabc <__swsetup_r+0x30>
 800cb46:	bd70      	pop	{r4, r5, r6, pc}
 800cb48:	0792      	lsls	r2, r2, #30
 800cb4a:	bf58      	it	pl
 800cb4c:	6963      	ldrpl	r3, [r4, #20]
 800cb4e:	60a3      	str	r3, [r4, #8]
 800cb50:	e7f2      	b.n	800cb38 <__swsetup_r+0xac>
 800cb52:	2000      	movs	r0, #0
 800cb54:	e7f7      	b.n	800cb46 <__swsetup_r+0xba>
 800cb56:	bf00      	nop
 800cb58:	200000f0 	.word	0x200000f0
 800cb5c:	0800fa00 	.word	0x0800fa00
 800cb60:	0800fa20 	.word	0x0800fa20
 800cb64:	0800f9e0 	.word	0x0800f9e0

0800cb68 <__sflush_r>:
 800cb68:	898a      	ldrh	r2, [r1, #12]
 800cb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6e:	4605      	mov	r5, r0
 800cb70:	0710      	lsls	r0, r2, #28
 800cb72:	460c      	mov	r4, r1
 800cb74:	d458      	bmi.n	800cc28 <__sflush_r+0xc0>
 800cb76:	684b      	ldr	r3, [r1, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	dc05      	bgt.n	800cb88 <__sflush_r+0x20>
 800cb7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	dc02      	bgt.n	800cb88 <__sflush_r+0x20>
 800cb82:	2000      	movs	r0, #0
 800cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb8a:	2e00      	cmp	r6, #0
 800cb8c:	d0f9      	beq.n	800cb82 <__sflush_r+0x1a>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb94:	682f      	ldr	r7, [r5, #0]
 800cb96:	6a21      	ldr	r1, [r4, #32]
 800cb98:	602b      	str	r3, [r5, #0]
 800cb9a:	d032      	beq.n	800cc02 <__sflush_r+0x9a>
 800cb9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb9e:	89a3      	ldrh	r3, [r4, #12]
 800cba0:	075a      	lsls	r2, r3, #29
 800cba2:	d505      	bpl.n	800cbb0 <__sflush_r+0x48>
 800cba4:	6863      	ldr	r3, [r4, #4]
 800cba6:	1ac0      	subs	r0, r0, r3
 800cba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbaa:	b10b      	cbz	r3, 800cbb0 <__sflush_r+0x48>
 800cbac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbae:	1ac0      	subs	r0, r0, r3
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbb6:	6a21      	ldr	r1, [r4, #32]
 800cbb8:	4628      	mov	r0, r5
 800cbba:	47b0      	blx	r6
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	d106      	bne.n	800cbd0 <__sflush_r+0x68>
 800cbc2:	6829      	ldr	r1, [r5, #0]
 800cbc4:	291d      	cmp	r1, #29
 800cbc6:	d848      	bhi.n	800cc5a <__sflush_r+0xf2>
 800cbc8:	4a29      	ldr	r2, [pc, #164]	; (800cc70 <__sflush_r+0x108>)
 800cbca:	40ca      	lsrs	r2, r1
 800cbcc:	07d6      	lsls	r6, r2, #31
 800cbce:	d544      	bpl.n	800cc5a <__sflush_r+0xf2>
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	6062      	str	r2, [r4, #4]
 800cbd4:	04d9      	lsls	r1, r3, #19
 800cbd6:	6922      	ldr	r2, [r4, #16]
 800cbd8:	6022      	str	r2, [r4, #0]
 800cbda:	d504      	bpl.n	800cbe6 <__sflush_r+0x7e>
 800cbdc:	1c42      	adds	r2, r0, #1
 800cbde:	d101      	bne.n	800cbe4 <__sflush_r+0x7c>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	b903      	cbnz	r3, 800cbe6 <__sflush_r+0x7e>
 800cbe4:	6560      	str	r0, [r4, #84]	; 0x54
 800cbe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbe8:	602f      	str	r7, [r5, #0]
 800cbea:	2900      	cmp	r1, #0
 800cbec:	d0c9      	beq.n	800cb82 <__sflush_r+0x1a>
 800cbee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbf2:	4299      	cmp	r1, r3
 800cbf4:	d002      	beq.n	800cbfc <__sflush_r+0x94>
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f000 f994 	bl	800cf24 <_free_r>
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	6360      	str	r0, [r4, #52]	; 0x34
 800cc00:	e7c0      	b.n	800cb84 <__sflush_r+0x1c>
 800cc02:	2301      	movs	r3, #1
 800cc04:	4628      	mov	r0, r5
 800cc06:	47b0      	blx	r6
 800cc08:	1c41      	adds	r1, r0, #1
 800cc0a:	d1c8      	bne.n	800cb9e <__sflush_r+0x36>
 800cc0c:	682b      	ldr	r3, [r5, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d0c5      	beq.n	800cb9e <__sflush_r+0x36>
 800cc12:	2b1d      	cmp	r3, #29
 800cc14:	d001      	beq.n	800cc1a <__sflush_r+0xb2>
 800cc16:	2b16      	cmp	r3, #22
 800cc18:	d101      	bne.n	800cc1e <__sflush_r+0xb6>
 800cc1a:	602f      	str	r7, [r5, #0]
 800cc1c:	e7b1      	b.n	800cb82 <__sflush_r+0x1a>
 800cc1e:	89a3      	ldrh	r3, [r4, #12]
 800cc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc24:	81a3      	strh	r3, [r4, #12]
 800cc26:	e7ad      	b.n	800cb84 <__sflush_r+0x1c>
 800cc28:	690f      	ldr	r7, [r1, #16]
 800cc2a:	2f00      	cmp	r7, #0
 800cc2c:	d0a9      	beq.n	800cb82 <__sflush_r+0x1a>
 800cc2e:	0793      	lsls	r3, r2, #30
 800cc30:	680e      	ldr	r6, [r1, #0]
 800cc32:	bf08      	it	eq
 800cc34:	694b      	ldreq	r3, [r1, #20]
 800cc36:	600f      	str	r7, [r1, #0]
 800cc38:	bf18      	it	ne
 800cc3a:	2300      	movne	r3, #0
 800cc3c:	eba6 0807 	sub.w	r8, r6, r7
 800cc40:	608b      	str	r3, [r1, #8]
 800cc42:	f1b8 0f00 	cmp.w	r8, #0
 800cc46:	dd9c      	ble.n	800cb82 <__sflush_r+0x1a>
 800cc48:	4643      	mov	r3, r8
 800cc4a:	463a      	mov	r2, r7
 800cc4c:	6a21      	ldr	r1, [r4, #32]
 800cc4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc50:	4628      	mov	r0, r5
 800cc52:	47b0      	blx	r6
 800cc54:	2800      	cmp	r0, #0
 800cc56:	dc06      	bgt.n	800cc66 <__sflush_r+0xfe>
 800cc58:	89a3      	ldrh	r3, [r4, #12]
 800cc5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc5e:	81a3      	strh	r3, [r4, #12]
 800cc60:	f04f 30ff 	mov.w	r0, #4294967295
 800cc64:	e78e      	b.n	800cb84 <__sflush_r+0x1c>
 800cc66:	4407      	add	r7, r0
 800cc68:	eba8 0800 	sub.w	r8, r8, r0
 800cc6c:	e7e9      	b.n	800cc42 <__sflush_r+0xda>
 800cc6e:	bf00      	nop
 800cc70:	20400001 	.word	0x20400001

0800cc74 <_fflush_r>:
 800cc74:	b538      	push	{r3, r4, r5, lr}
 800cc76:	690b      	ldr	r3, [r1, #16]
 800cc78:	4605      	mov	r5, r0
 800cc7a:	460c      	mov	r4, r1
 800cc7c:	b1db      	cbz	r3, 800ccb6 <_fflush_r+0x42>
 800cc7e:	b118      	cbz	r0, 800cc88 <_fflush_r+0x14>
 800cc80:	6983      	ldr	r3, [r0, #24]
 800cc82:	b90b      	cbnz	r3, 800cc88 <_fflush_r+0x14>
 800cc84:	f000 f860 	bl	800cd48 <__sinit>
 800cc88:	4b0c      	ldr	r3, [pc, #48]	; (800ccbc <_fflush_r+0x48>)
 800cc8a:	429c      	cmp	r4, r3
 800cc8c:	d109      	bne.n	800cca2 <_fflush_r+0x2e>
 800cc8e:	686c      	ldr	r4, [r5, #4]
 800cc90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc94:	b17b      	cbz	r3, 800ccb6 <_fflush_r+0x42>
 800cc96:	4621      	mov	r1, r4
 800cc98:	4628      	mov	r0, r5
 800cc9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc9e:	f7ff bf63 	b.w	800cb68 <__sflush_r>
 800cca2:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <_fflush_r+0x4c>)
 800cca4:	429c      	cmp	r4, r3
 800cca6:	d101      	bne.n	800ccac <_fflush_r+0x38>
 800cca8:	68ac      	ldr	r4, [r5, #8]
 800ccaa:	e7f1      	b.n	800cc90 <_fflush_r+0x1c>
 800ccac:	4b05      	ldr	r3, [pc, #20]	; (800ccc4 <_fflush_r+0x50>)
 800ccae:	429c      	cmp	r4, r3
 800ccb0:	bf08      	it	eq
 800ccb2:	68ec      	ldreq	r4, [r5, #12]
 800ccb4:	e7ec      	b.n	800cc90 <_fflush_r+0x1c>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	bd38      	pop	{r3, r4, r5, pc}
 800ccba:	bf00      	nop
 800ccbc:	0800fa00 	.word	0x0800fa00
 800ccc0:	0800fa20 	.word	0x0800fa20
 800ccc4:	0800f9e0 	.word	0x0800f9e0

0800ccc8 <std>:
 800ccc8:	2300      	movs	r3, #0
 800ccca:	b510      	push	{r4, lr}
 800cccc:	4604      	mov	r4, r0
 800ccce:	e9c0 3300 	strd	r3, r3, [r0]
 800ccd2:	6083      	str	r3, [r0, #8]
 800ccd4:	8181      	strh	r1, [r0, #12]
 800ccd6:	6643      	str	r3, [r0, #100]	; 0x64
 800ccd8:	81c2      	strh	r2, [r0, #14]
 800ccda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccde:	6183      	str	r3, [r0, #24]
 800cce0:	4619      	mov	r1, r3
 800cce2:	2208      	movs	r2, #8
 800cce4:	305c      	adds	r0, #92	; 0x5c
 800cce6:	f7ff fbce 	bl	800c486 <memset>
 800ccea:	4b05      	ldr	r3, [pc, #20]	; (800cd00 <std+0x38>)
 800ccec:	6263      	str	r3, [r4, #36]	; 0x24
 800ccee:	4b05      	ldr	r3, [pc, #20]	; (800cd04 <std+0x3c>)
 800ccf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccf2:	4b05      	ldr	r3, [pc, #20]	; (800cd08 <std+0x40>)
 800ccf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ccf6:	4b05      	ldr	r3, [pc, #20]	; (800cd0c <std+0x44>)
 800ccf8:	6224      	str	r4, [r4, #32]
 800ccfa:	6323      	str	r3, [r4, #48]	; 0x30
 800ccfc:	bd10      	pop	{r4, pc}
 800ccfe:	bf00      	nop
 800cd00:	0800d8c9 	.word	0x0800d8c9
 800cd04:	0800d8eb 	.word	0x0800d8eb
 800cd08:	0800d923 	.word	0x0800d923
 800cd0c:	0800d947 	.word	0x0800d947

0800cd10 <_cleanup_r>:
 800cd10:	4901      	ldr	r1, [pc, #4]	; (800cd18 <_cleanup_r+0x8>)
 800cd12:	f000 b885 	b.w	800ce20 <_fwalk_reent>
 800cd16:	bf00      	nop
 800cd18:	0800cc75 	.word	0x0800cc75

0800cd1c <__sfmoreglue>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	1e4a      	subs	r2, r1, #1
 800cd20:	2568      	movs	r5, #104	; 0x68
 800cd22:	4355      	muls	r5, r2
 800cd24:	460e      	mov	r6, r1
 800cd26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd2a:	f000 f949 	bl	800cfc0 <_malloc_r>
 800cd2e:	4604      	mov	r4, r0
 800cd30:	b140      	cbz	r0, 800cd44 <__sfmoreglue+0x28>
 800cd32:	2100      	movs	r1, #0
 800cd34:	e9c0 1600 	strd	r1, r6, [r0]
 800cd38:	300c      	adds	r0, #12
 800cd3a:	60a0      	str	r0, [r4, #8]
 800cd3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd40:	f7ff fba1 	bl	800c486 <memset>
 800cd44:	4620      	mov	r0, r4
 800cd46:	bd70      	pop	{r4, r5, r6, pc}

0800cd48 <__sinit>:
 800cd48:	6983      	ldr	r3, [r0, #24]
 800cd4a:	b510      	push	{r4, lr}
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	bb33      	cbnz	r3, 800cd9e <__sinit+0x56>
 800cd50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cd54:	6503      	str	r3, [r0, #80]	; 0x50
 800cd56:	4b12      	ldr	r3, [pc, #72]	; (800cda0 <__sinit+0x58>)
 800cd58:	4a12      	ldr	r2, [pc, #72]	; (800cda4 <__sinit+0x5c>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	6282      	str	r2, [r0, #40]	; 0x28
 800cd5e:	4298      	cmp	r0, r3
 800cd60:	bf04      	itt	eq
 800cd62:	2301      	moveq	r3, #1
 800cd64:	6183      	streq	r3, [r0, #24]
 800cd66:	f000 f81f 	bl	800cda8 <__sfp>
 800cd6a:	6060      	str	r0, [r4, #4]
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f000 f81b 	bl	800cda8 <__sfp>
 800cd72:	60a0      	str	r0, [r4, #8]
 800cd74:	4620      	mov	r0, r4
 800cd76:	f000 f817 	bl	800cda8 <__sfp>
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	60e0      	str	r0, [r4, #12]
 800cd7e:	2104      	movs	r1, #4
 800cd80:	6860      	ldr	r0, [r4, #4]
 800cd82:	f7ff ffa1 	bl	800ccc8 <std>
 800cd86:	2201      	movs	r2, #1
 800cd88:	2109      	movs	r1, #9
 800cd8a:	68a0      	ldr	r0, [r4, #8]
 800cd8c:	f7ff ff9c 	bl	800ccc8 <std>
 800cd90:	2202      	movs	r2, #2
 800cd92:	2112      	movs	r1, #18
 800cd94:	68e0      	ldr	r0, [r4, #12]
 800cd96:	f7ff ff97 	bl	800ccc8 <std>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	61a3      	str	r3, [r4, #24]
 800cd9e:	bd10      	pop	{r4, pc}
 800cda0:	0800f344 	.word	0x0800f344
 800cda4:	0800cd11 	.word	0x0800cd11

0800cda8 <__sfp>:
 800cda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdaa:	4b1b      	ldr	r3, [pc, #108]	; (800ce18 <__sfp+0x70>)
 800cdac:	681e      	ldr	r6, [r3, #0]
 800cdae:	69b3      	ldr	r3, [r6, #24]
 800cdb0:	4607      	mov	r7, r0
 800cdb2:	b913      	cbnz	r3, 800cdba <__sfp+0x12>
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f7ff ffc7 	bl	800cd48 <__sinit>
 800cdba:	3648      	adds	r6, #72	; 0x48
 800cdbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	d503      	bpl.n	800cdcc <__sfp+0x24>
 800cdc4:	6833      	ldr	r3, [r6, #0]
 800cdc6:	b133      	cbz	r3, 800cdd6 <__sfp+0x2e>
 800cdc8:	6836      	ldr	r6, [r6, #0]
 800cdca:	e7f7      	b.n	800cdbc <__sfp+0x14>
 800cdcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cdd0:	b16d      	cbz	r5, 800cdee <__sfp+0x46>
 800cdd2:	3468      	adds	r4, #104	; 0x68
 800cdd4:	e7f4      	b.n	800cdc0 <__sfp+0x18>
 800cdd6:	2104      	movs	r1, #4
 800cdd8:	4638      	mov	r0, r7
 800cdda:	f7ff ff9f 	bl	800cd1c <__sfmoreglue>
 800cdde:	6030      	str	r0, [r6, #0]
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d1f1      	bne.n	800cdc8 <__sfp+0x20>
 800cde4:	230c      	movs	r3, #12
 800cde6:	603b      	str	r3, [r7, #0]
 800cde8:	4604      	mov	r4, r0
 800cdea:	4620      	mov	r0, r4
 800cdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdee:	4b0b      	ldr	r3, [pc, #44]	; (800ce1c <__sfp+0x74>)
 800cdf0:	6665      	str	r5, [r4, #100]	; 0x64
 800cdf2:	e9c4 5500 	strd	r5, r5, [r4]
 800cdf6:	60a5      	str	r5, [r4, #8]
 800cdf8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cdfc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ce00:	2208      	movs	r2, #8
 800ce02:	4629      	mov	r1, r5
 800ce04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce08:	f7ff fb3d 	bl	800c486 <memset>
 800ce0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce14:	e7e9      	b.n	800cdea <__sfp+0x42>
 800ce16:	bf00      	nop
 800ce18:	0800f344 	.word	0x0800f344
 800ce1c:	ffff0001 	.word	0xffff0001

0800ce20 <_fwalk_reent>:
 800ce20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce24:	4680      	mov	r8, r0
 800ce26:	4689      	mov	r9, r1
 800ce28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce2c:	2600      	movs	r6, #0
 800ce2e:	b914      	cbnz	r4, 800ce36 <_fwalk_reent+0x16>
 800ce30:	4630      	mov	r0, r6
 800ce32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce36:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ce3a:	3f01      	subs	r7, #1
 800ce3c:	d501      	bpl.n	800ce42 <_fwalk_reent+0x22>
 800ce3e:	6824      	ldr	r4, [r4, #0]
 800ce40:	e7f5      	b.n	800ce2e <_fwalk_reent+0xe>
 800ce42:	89ab      	ldrh	r3, [r5, #12]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d907      	bls.n	800ce58 <_fwalk_reent+0x38>
 800ce48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	d003      	beq.n	800ce58 <_fwalk_reent+0x38>
 800ce50:	4629      	mov	r1, r5
 800ce52:	4640      	mov	r0, r8
 800ce54:	47c8      	blx	r9
 800ce56:	4306      	orrs	r6, r0
 800ce58:	3568      	adds	r5, #104	; 0x68
 800ce5a:	e7ee      	b.n	800ce3a <_fwalk_reent+0x1a>

0800ce5c <__swhatbuf_r>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	460e      	mov	r6, r1
 800ce60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce64:	2900      	cmp	r1, #0
 800ce66:	b096      	sub	sp, #88	; 0x58
 800ce68:	4614      	mov	r4, r2
 800ce6a:	461d      	mov	r5, r3
 800ce6c:	da07      	bge.n	800ce7e <__swhatbuf_r+0x22>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	602b      	str	r3, [r5, #0]
 800ce72:	89b3      	ldrh	r3, [r6, #12]
 800ce74:	061a      	lsls	r2, r3, #24
 800ce76:	d410      	bmi.n	800ce9a <__swhatbuf_r+0x3e>
 800ce78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce7c:	e00e      	b.n	800ce9c <__swhatbuf_r+0x40>
 800ce7e:	466a      	mov	r2, sp
 800ce80:	f000 fd88 	bl	800d994 <_fstat_r>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	dbf2      	blt.n	800ce6e <__swhatbuf_r+0x12>
 800ce88:	9a01      	ldr	r2, [sp, #4]
 800ce8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce92:	425a      	negs	r2, r3
 800ce94:	415a      	adcs	r2, r3
 800ce96:	602a      	str	r2, [r5, #0]
 800ce98:	e7ee      	b.n	800ce78 <__swhatbuf_r+0x1c>
 800ce9a:	2340      	movs	r3, #64	; 0x40
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	6023      	str	r3, [r4, #0]
 800cea0:	b016      	add	sp, #88	; 0x58
 800cea2:	bd70      	pop	{r4, r5, r6, pc}

0800cea4 <__smakebuf_r>:
 800cea4:	898b      	ldrh	r3, [r1, #12]
 800cea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cea8:	079d      	lsls	r5, r3, #30
 800ceaa:	4606      	mov	r6, r0
 800ceac:	460c      	mov	r4, r1
 800ceae:	d507      	bpl.n	800cec0 <__smakebuf_r+0x1c>
 800ceb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	6123      	str	r3, [r4, #16]
 800ceb8:	2301      	movs	r3, #1
 800ceba:	6163      	str	r3, [r4, #20]
 800cebc:	b002      	add	sp, #8
 800cebe:	bd70      	pop	{r4, r5, r6, pc}
 800cec0:	ab01      	add	r3, sp, #4
 800cec2:	466a      	mov	r2, sp
 800cec4:	f7ff ffca 	bl	800ce5c <__swhatbuf_r>
 800cec8:	9900      	ldr	r1, [sp, #0]
 800ceca:	4605      	mov	r5, r0
 800cecc:	4630      	mov	r0, r6
 800cece:	f000 f877 	bl	800cfc0 <_malloc_r>
 800ced2:	b948      	cbnz	r0, 800cee8 <__smakebuf_r+0x44>
 800ced4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ced8:	059a      	lsls	r2, r3, #22
 800ceda:	d4ef      	bmi.n	800cebc <__smakebuf_r+0x18>
 800cedc:	f023 0303 	bic.w	r3, r3, #3
 800cee0:	f043 0302 	orr.w	r3, r3, #2
 800cee4:	81a3      	strh	r3, [r4, #12]
 800cee6:	e7e3      	b.n	800ceb0 <__smakebuf_r+0xc>
 800cee8:	4b0d      	ldr	r3, [pc, #52]	; (800cf20 <__smakebuf_r+0x7c>)
 800ceea:	62b3      	str	r3, [r6, #40]	; 0x28
 800ceec:	89a3      	ldrh	r3, [r4, #12]
 800ceee:	6020      	str	r0, [r4, #0]
 800cef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef4:	81a3      	strh	r3, [r4, #12]
 800cef6:	9b00      	ldr	r3, [sp, #0]
 800cef8:	6163      	str	r3, [r4, #20]
 800cefa:	9b01      	ldr	r3, [sp, #4]
 800cefc:	6120      	str	r0, [r4, #16]
 800cefe:	b15b      	cbz	r3, 800cf18 <__smakebuf_r+0x74>
 800cf00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf04:	4630      	mov	r0, r6
 800cf06:	f000 fd57 	bl	800d9b8 <_isatty_r>
 800cf0a:	b128      	cbz	r0, 800cf18 <__smakebuf_r+0x74>
 800cf0c:	89a3      	ldrh	r3, [r4, #12]
 800cf0e:	f023 0303 	bic.w	r3, r3, #3
 800cf12:	f043 0301 	orr.w	r3, r3, #1
 800cf16:	81a3      	strh	r3, [r4, #12]
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	431d      	orrs	r5, r3
 800cf1c:	81a5      	strh	r5, [r4, #12]
 800cf1e:	e7cd      	b.n	800cebc <__smakebuf_r+0x18>
 800cf20:	0800cd11 	.word	0x0800cd11

0800cf24 <_free_r>:
 800cf24:	b538      	push	{r3, r4, r5, lr}
 800cf26:	4605      	mov	r5, r0
 800cf28:	2900      	cmp	r1, #0
 800cf2a:	d045      	beq.n	800cfb8 <_free_r+0x94>
 800cf2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf30:	1f0c      	subs	r4, r1, #4
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	bfb8      	it	lt
 800cf36:	18e4      	addlt	r4, r4, r3
 800cf38:	f000 fd79 	bl	800da2e <__malloc_lock>
 800cf3c:	4a1f      	ldr	r2, [pc, #124]	; (800cfbc <_free_r+0x98>)
 800cf3e:	6813      	ldr	r3, [r2, #0]
 800cf40:	4610      	mov	r0, r2
 800cf42:	b933      	cbnz	r3, 800cf52 <_free_r+0x2e>
 800cf44:	6063      	str	r3, [r4, #4]
 800cf46:	6014      	str	r4, [r2, #0]
 800cf48:	4628      	mov	r0, r5
 800cf4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf4e:	f000 bd6f 	b.w	800da30 <__malloc_unlock>
 800cf52:	42a3      	cmp	r3, r4
 800cf54:	d90c      	bls.n	800cf70 <_free_r+0x4c>
 800cf56:	6821      	ldr	r1, [r4, #0]
 800cf58:	1862      	adds	r2, r4, r1
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	bf04      	itt	eq
 800cf5e:	681a      	ldreq	r2, [r3, #0]
 800cf60:	685b      	ldreq	r3, [r3, #4]
 800cf62:	6063      	str	r3, [r4, #4]
 800cf64:	bf04      	itt	eq
 800cf66:	1852      	addeq	r2, r2, r1
 800cf68:	6022      	streq	r2, [r4, #0]
 800cf6a:	6004      	str	r4, [r0, #0]
 800cf6c:	e7ec      	b.n	800cf48 <_free_r+0x24>
 800cf6e:	4613      	mov	r3, r2
 800cf70:	685a      	ldr	r2, [r3, #4]
 800cf72:	b10a      	cbz	r2, 800cf78 <_free_r+0x54>
 800cf74:	42a2      	cmp	r2, r4
 800cf76:	d9fa      	bls.n	800cf6e <_free_r+0x4a>
 800cf78:	6819      	ldr	r1, [r3, #0]
 800cf7a:	1858      	adds	r0, r3, r1
 800cf7c:	42a0      	cmp	r0, r4
 800cf7e:	d10b      	bne.n	800cf98 <_free_r+0x74>
 800cf80:	6820      	ldr	r0, [r4, #0]
 800cf82:	4401      	add	r1, r0
 800cf84:	1858      	adds	r0, r3, r1
 800cf86:	4282      	cmp	r2, r0
 800cf88:	6019      	str	r1, [r3, #0]
 800cf8a:	d1dd      	bne.n	800cf48 <_free_r+0x24>
 800cf8c:	6810      	ldr	r0, [r2, #0]
 800cf8e:	6852      	ldr	r2, [r2, #4]
 800cf90:	605a      	str	r2, [r3, #4]
 800cf92:	4401      	add	r1, r0
 800cf94:	6019      	str	r1, [r3, #0]
 800cf96:	e7d7      	b.n	800cf48 <_free_r+0x24>
 800cf98:	d902      	bls.n	800cfa0 <_free_r+0x7c>
 800cf9a:	230c      	movs	r3, #12
 800cf9c:	602b      	str	r3, [r5, #0]
 800cf9e:	e7d3      	b.n	800cf48 <_free_r+0x24>
 800cfa0:	6820      	ldr	r0, [r4, #0]
 800cfa2:	1821      	adds	r1, r4, r0
 800cfa4:	428a      	cmp	r2, r1
 800cfa6:	bf04      	itt	eq
 800cfa8:	6811      	ldreq	r1, [r2, #0]
 800cfaa:	6852      	ldreq	r2, [r2, #4]
 800cfac:	6062      	str	r2, [r4, #4]
 800cfae:	bf04      	itt	eq
 800cfb0:	1809      	addeq	r1, r1, r0
 800cfb2:	6021      	streq	r1, [r4, #0]
 800cfb4:	605c      	str	r4, [r3, #4]
 800cfb6:	e7c7      	b.n	800cf48 <_free_r+0x24>
 800cfb8:	bd38      	pop	{r3, r4, r5, pc}
 800cfba:	bf00      	nop
 800cfbc:	20002f58 	.word	0x20002f58

0800cfc0 <_malloc_r>:
 800cfc0:	b570      	push	{r4, r5, r6, lr}
 800cfc2:	1ccd      	adds	r5, r1, #3
 800cfc4:	f025 0503 	bic.w	r5, r5, #3
 800cfc8:	3508      	adds	r5, #8
 800cfca:	2d0c      	cmp	r5, #12
 800cfcc:	bf38      	it	cc
 800cfce:	250c      	movcc	r5, #12
 800cfd0:	2d00      	cmp	r5, #0
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	db01      	blt.n	800cfda <_malloc_r+0x1a>
 800cfd6:	42a9      	cmp	r1, r5
 800cfd8:	d903      	bls.n	800cfe2 <_malloc_r+0x22>
 800cfda:	230c      	movs	r3, #12
 800cfdc:	6033      	str	r3, [r6, #0]
 800cfde:	2000      	movs	r0, #0
 800cfe0:	bd70      	pop	{r4, r5, r6, pc}
 800cfe2:	f000 fd24 	bl	800da2e <__malloc_lock>
 800cfe6:	4a21      	ldr	r2, [pc, #132]	; (800d06c <_malloc_r+0xac>)
 800cfe8:	6814      	ldr	r4, [r2, #0]
 800cfea:	4621      	mov	r1, r4
 800cfec:	b991      	cbnz	r1, 800d014 <_malloc_r+0x54>
 800cfee:	4c20      	ldr	r4, [pc, #128]	; (800d070 <_malloc_r+0xb0>)
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	b91b      	cbnz	r3, 800cffc <_malloc_r+0x3c>
 800cff4:	4630      	mov	r0, r6
 800cff6:	f000 fc57 	bl	800d8a8 <_sbrk_r>
 800cffa:	6020      	str	r0, [r4, #0]
 800cffc:	4629      	mov	r1, r5
 800cffe:	4630      	mov	r0, r6
 800d000:	f000 fc52 	bl	800d8a8 <_sbrk_r>
 800d004:	1c43      	adds	r3, r0, #1
 800d006:	d124      	bne.n	800d052 <_malloc_r+0x92>
 800d008:	230c      	movs	r3, #12
 800d00a:	6033      	str	r3, [r6, #0]
 800d00c:	4630      	mov	r0, r6
 800d00e:	f000 fd0f 	bl	800da30 <__malloc_unlock>
 800d012:	e7e4      	b.n	800cfde <_malloc_r+0x1e>
 800d014:	680b      	ldr	r3, [r1, #0]
 800d016:	1b5b      	subs	r3, r3, r5
 800d018:	d418      	bmi.n	800d04c <_malloc_r+0x8c>
 800d01a:	2b0b      	cmp	r3, #11
 800d01c:	d90f      	bls.n	800d03e <_malloc_r+0x7e>
 800d01e:	600b      	str	r3, [r1, #0]
 800d020:	50cd      	str	r5, [r1, r3]
 800d022:	18cc      	adds	r4, r1, r3
 800d024:	4630      	mov	r0, r6
 800d026:	f000 fd03 	bl	800da30 <__malloc_unlock>
 800d02a:	f104 000b 	add.w	r0, r4, #11
 800d02e:	1d23      	adds	r3, r4, #4
 800d030:	f020 0007 	bic.w	r0, r0, #7
 800d034:	1ac3      	subs	r3, r0, r3
 800d036:	d0d3      	beq.n	800cfe0 <_malloc_r+0x20>
 800d038:	425a      	negs	r2, r3
 800d03a:	50e2      	str	r2, [r4, r3]
 800d03c:	e7d0      	b.n	800cfe0 <_malloc_r+0x20>
 800d03e:	428c      	cmp	r4, r1
 800d040:	684b      	ldr	r3, [r1, #4]
 800d042:	bf16      	itet	ne
 800d044:	6063      	strne	r3, [r4, #4]
 800d046:	6013      	streq	r3, [r2, #0]
 800d048:	460c      	movne	r4, r1
 800d04a:	e7eb      	b.n	800d024 <_malloc_r+0x64>
 800d04c:	460c      	mov	r4, r1
 800d04e:	6849      	ldr	r1, [r1, #4]
 800d050:	e7cc      	b.n	800cfec <_malloc_r+0x2c>
 800d052:	1cc4      	adds	r4, r0, #3
 800d054:	f024 0403 	bic.w	r4, r4, #3
 800d058:	42a0      	cmp	r0, r4
 800d05a:	d005      	beq.n	800d068 <_malloc_r+0xa8>
 800d05c:	1a21      	subs	r1, r4, r0
 800d05e:	4630      	mov	r0, r6
 800d060:	f000 fc22 	bl	800d8a8 <_sbrk_r>
 800d064:	3001      	adds	r0, #1
 800d066:	d0cf      	beq.n	800d008 <_malloc_r+0x48>
 800d068:	6025      	str	r5, [r4, #0]
 800d06a:	e7db      	b.n	800d024 <_malloc_r+0x64>
 800d06c:	20002f58 	.word	0x20002f58
 800d070:	20002f5c 	.word	0x20002f5c

0800d074 <__ssputs_r>:
 800d074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d078:	688e      	ldr	r6, [r1, #8]
 800d07a:	429e      	cmp	r6, r3
 800d07c:	4682      	mov	sl, r0
 800d07e:	460c      	mov	r4, r1
 800d080:	4690      	mov	r8, r2
 800d082:	4699      	mov	r9, r3
 800d084:	d837      	bhi.n	800d0f6 <__ssputs_r+0x82>
 800d086:	898a      	ldrh	r2, [r1, #12]
 800d088:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d08c:	d031      	beq.n	800d0f2 <__ssputs_r+0x7e>
 800d08e:	6825      	ldr	r5, [r4, #0]
 800d090:	6909      	ldr	r1, [r1, #16]
 800d092:	1a6f      	subs	r7, r5, r1
 800d094:	6965      	ldr	r5, [r4, #20]
 800d096:	2302      	movs	r3, #2
 800d098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d09c:	fb95 f5f3 	sdiv	r5, r5, r3
 800d0a0:	f109 0301 	add.w	r3, r9, #1
 800d0a4:	443b      	add	r3, r7
 800d0a6:	429d      	cmp	r5, r3
 800d0a8:	bf38      	it	cc
 800d0aa:	461d      	movcc	r5, r3
 800d0ac:	0553      	lsls	r3, r2, #21
 800d0ae:	d530      	bpl.n	800d112 <__ssputs_r+0x9e>
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	f7ff ff85 	bl	800cfc0 <_malloc_r>
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	b950      	cbnz	r0, 800d0d0 <__ssputs_r+0x5c>
 800d0ba:	230c      	movs	r3, #12
 800d0bc:	f8ca 3000 	str.w	r3, [sl]
 800d0c0:	89a3      	ldrh	r3, [r4, #12]
 800d0c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0c6:	81a3      	strh	r3, [r4, #12]
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d0:	463a      	mov	r2, r7
 800d0d2:	6921      	ldr	r1, [r4, #16]
 800d0d4:	f7ff f9cc 	bl	800c470 <memcpy>
 800d0d8:	89a3      	ldrh	r3, [r4, #12]
 800d0da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0e2:	81a3      	strh	r3, [r4, #12]
 800d0e4:	6126      	str	r6, [r4, #16]
 800d0e6:	6165      	str	r5, [r4, #20]
 800d0e8:	443e      	add	r6, r7
 800d0ea:	1bed      	subs	r5, r5, r7
 800d0ec:	6026      	str	r6, [r4, #0]
 800d0ee:	60a5      	str	r5, [r4, #8]
 800d0f0:	464e      	mov	r6, r9
 800d0f2:	454e      	cmp	r6, r9
 800d0f4:	d900      	bls.n	800d0f8 <__ssputs_r+0x84>
 800d0f6:	464e      	mov	r6, r9
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	4641      	mov	r1, r8
 800d0fc:	6820      	ldr	r0, [r4, #0]
 800d0fe:	f000 fc7d 	bl	800d9fc <memmove>
 800d102:	68a3      	ldr	r3, [r4, #8]
 800d104:	1b9b      	subs	r3, r3, r6
 800d106:	60a3      	str	r3, [r4, #8]
 800d108:	6823      	ldr	r3, [r4, #0]
 800d10a:	441e      	add	r6, r3
 800d10c:	6026      	str	r6, [r4, #0]
 800d10e:	2000      	movs	r0, #0
 800d110:	e7dc      	b.n	800d0cc <__ssputs_r+0x58>
 800d112:	462a      	mov	r2, r5
 800d114:	f000 fc8d 	bl	800da32 <_realloc_r>
 800d118:	4606      	mov	r6, r0
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d1e2      	bne.n	800d0e4 <__ssputs_r+0x70>
 800d11e:	6921      	ldr	r1, [r4, #16]
 800d120:	4650      	mov	r0, sl
 800d122:	f7ff feff 	bl	800cf24 <_free_r>
 800d126:	e7c8      	b.n	800d0ba <__ssputs_r+0x46>

0800d128 <_svfiprintf_r>:
 800d128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12c:	461d      	mov	r5, r3
 800d12e:	898b      	ldrh	r3, [r1, #12]
 800d130:	061f      	lsls	r7, r3, #24
 800d132:	b09d      	sub	sp, #116	; 0x74
 800d134:	4680      	mov	r8, r0
 800d136:	460c      	mov	r4, r1
 800d138:	4616      	mov	r6, r2
 800d13a:	d50f      	bpl.n	800d15c <_svfiprintf_r+0x34>
 800d13c:	690b      	ldr	r3, [r1, #16]
 800d13e:	b96b      	cbnz	r3, 800d15c <_svfiprintf_r+0x34>
 800d140:	2140      	movs	r1, #64	; 0x40
 800d142:	f7ff ff3d 	bl	800cfc0 <_malloc_r>
 800d146:	6020      	str	r0, [r4, #0]
 800d148:	6120      	str	r0, [r4, #16]
 800d14a:	b928      	cbnz	r0, 800d158 <_svfiprintf_r+0x30>
 800d14c:	230c      	movs	r3, #12
 800d14e:	f8c8 3000 	str.w	r3, [r8]
 800d152:	f04f 30ff 	mov.w	r0, #4294967295
 800d156:	e0c8      	b.n	800d2ea <_svfiprintf_r+0x1c2>
 800d158:	2340      	movs	r3, #64	; 0x40
 800d15a:	6163      	str	r3, [r4, #20]
 800d15c:	2300      	movs	r3, #0
 800d15e:	9309      	str	r3, [sp, #36]	; 0x24
 800d160:	2320      	movs	r3, #32
 800d162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d166:	2330      	movs	r3, #48	; 0x30
 800d168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d16c:	9503      	str	r5, [sp, #12]
 800d16e:	f04f 0b01 	mov.w	fp, #1
 800d172:	4637      	mov	r7, r6
 800d174:	463d      	mov	r5, r7
 800d176:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d17a:	b10b      	cbz	r3, 800d180 <_svfiprintf_r+0x58>
 800d17c:	2b25      	cmp	r3, #37	; 0x25
 800d17e:	d13e      	bne.n	800d1fe <_svfiprintf_r+0xd6>
 800d180:	ebb7 0a06 	subs.w	sl, r7, r6
 800d184:	d00b      	beq.n	800d19e <_svfiprintf_r+0x76>
 800d186:	4653      	mov	r3, sl
 800d188:	4632      	mov	r2, r6
 800d18a:	4621      	mov	r1, r4
 800d18c:	4640      	mov	r0, r8
 800d18e:	f7ff ff71 	bl	800d074 <__ssputs_r>
 800d192:	3001      	adds	r0, #1
 800d194:	f000 80a4 	beq.w	800d2e0 <_svfiprintf_r+0x1b8>
 800d198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d19a:	4453      	add	r3, sl
 800d19c:	9309      	str	r3, [sp, #36]	; 0x24
 800d19e:	783b      	ldrb	r3, [r7, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 809d 	beq.w	800d2e0 <_svfiprintf_r+0x1b8>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1b0:	9304      	str	r3, [sp, #16]
 800d1b2:	9307      	str	r3, [sp, #28]
 800d1b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1b8:	931a      	str	r3, [sp, #104]	; 0x68
 800d1ba:	462f      	mov	r7, r5
 800d1bc:	2205      	movs	r2, #5
 800d1be:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d1c2:	4850      	ldr	r0, [pc, #320]	; (800d304 <_svfiprintf_r+0x1dc>)
 800d1c4:	f7f3 f81c 	bl	8000200 <memchr>
 800d1c8:	9b04      	ldr	r3, [sp, #16]
 800d1ca:	b9d0      	cbnz	r0, 800d202 <_svfiprintf_r+0xda>
 800d1cc:	06d9      	lsls	r1, r3, #27
 800d1ce:	bf44      	itt	mi
 800d1d0:	2220      	movmi	r2, #32
 800d1d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d1d6:	071a      	lsls	r2, r3, #28
 800d1d8:	bf44      	itt	mi
 800d1da:	222b      	movmi	r2, #43	; 0x2b
 800d1dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d1e0:	782a      	ldrb	r2, [r5, #0]
 800d1e2:	2a2a      	cmp	r2, #42	; 0x2a
 800d1e4:	d015      	beq.n	800d212 <_svfiprintf_r+0xea>
 800d1e6:	9a07      	ldr	r2, [sp, #28]
 800d1e8:	462f      	mov	r7, r5
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	250a      	movs	r5, #10
 800d1ee:	4639      	mov	r1, r7
 800d1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1f4:	3b30      	subs	r3, #48	; 0x30
 800d1f6:	2b09      	cmp	r3, #9
 800d1f8:	d94d      	bls.n	800d296 <_svfiprintf_r+0x16e>
 800d1fa:	b1b8      	cbz	r0, 800d22c <_svfiprintf_r+0x104>
 800d1fc:	e00f      	b.n	800d21e <_svfiprintf_r+0xf6>
 800d1fe:	462f      	mov	r7, r5
 800d200:	e7b8      	b.n	800d174 <_svfiprintf_r+0x4c>
 800d202:	4a40      	ldr	r2, [pc, #256]	; (800d304 <_svfiprintf_r+0x1dc>)
 800d204:	1a80      	subs	r0, r0, r2
 800d206:	fa0b f000 	lsl.w	r0, fp, r0
 800d20a:	4318      	orrs	r0, r3
 800d20c:	9004      	str	r0, [sp, #16]
 800d20e:	463d      	mov	r5, r7
 800d210:	e7d3      	b.n	800d1ba <_svfiprintf_r+0x92>
 800d212:	9a03      	ldr	r2, [sp, #12]
 800d214:	1d11      	adds	r1, r2, #4
 800d216:	6812      	ldr	r2, [r2, #0]
 800d218:	9103      	str	r1, [sp, #12]
 800d21a:	2a00      	cmp	r2, #0
 800d21c:	db01      	blt.n	800d222 <_svfiprintf_r+0xfa>
 800d21e:	9207      	str	r2, [sp, #28]
 800d220:	e004      	b.n	800d22c <_svfiprintf_r+0x104>
 800d222:	4252      	negs	r2, r2
 800d224:	f043 0302 	orr.w	r3, r3, #2
 800d228:	9207      	str	r2, [sp, #28]
 800d22a:	9304      	str	r3, [sp, #16]
 800d22c:	783b      	ldrb	r3, [r7, #0]
 800d22e:	2b2e      	cmp	r3, #46	; 0x2e
 800d230:	d10c      	bne.n	800d24c <_svfiprintf_r+0x124>
 800d232:	787b      	ldrb	r3, [r7, #1]
 800d234:	2b2a      	cmp	r3, #42	; 0x2a
 800d236:	d133      	bne.n	800d2a0 <_svfiprintf_r+0x178>
 800d238:	9b03      	ldr	r3, [sp, #12]
 800d23a:	1d1a      	adds	r2, r3, #4
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	9203      	str	r2, [sp, #12]
 800d240:	2b00      	cmp	r3, #0
 800d242:	bfb8      	it	lt
 800d244:	f04f 33ff 	movlt.w	r3, #4294967295
 800d248:	3702      	adds	r7, #2
 800d24a:	9305      	str	r3, [sp, #20]
 800d24c:	4d2e      	ldr	r5, [pc, #184]	; (800d308 <_svfiprintf_r+0x1e0>)
 800d24e:	7839      	ldrb	r1, [r7, #0]
 800d250:	2203      	movs	r2, #3
 800d252:	4628      	mov	r0, r5
 800d254:	f7f2 ffd4 	bl	8000200 <memchr>
 800d258:	b138      	cbz	r0, 800d26a <_svfiprintf_r+0x142>
 800d25a:	2340      	movs	r3, #64	; 0x40
 800d25c:	1b40      	subs	r0, r0, r5
 800d25e:	fa03 f000 	lsl.w	r0, r3, r0
 800d262:	9b04      	ldr	r3, [sp, #16]
 800d264:	4303      	orrs	r3, r0
 800d266:	3701      	adds	r7, #1
 800d268:	9304      	str	r3, [sp, #16]
 800d26a:	7839      	ldrb	r1, [r7, #0]
 800d26c:	4827      	ldr	r0, [pc, #156]	; (800d30c <_svfiprintf_r+0x1e4>)
 800d26e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d272:	2206      	movs	r2, #6
 800d274:	1c7e      	adds	r6, r7, #1
 800d276:	f7f2 ffc3 	bl	8000200 <memchr>
 800d27a:	2800      	cmp	r0, #0
 800d27c:	d038      	beq.n	800d2f0 <_svfiprintf_r+0x1c8>
 800d27e:	4b24      	ldr	r3, [pc, #144]	; (800d310 <_svfiprintf_r+0x1e8>)
 800d280:	bb13      	cbnz	r3, 800d2c8 <_svfiprintf_r+0x1a0>
 800d282:	9b03      	ldr	r3, [sp, #12]
 800d284:	3307      	adds	r3, #7
 800d286:	f023 0307 	bic.w	r3, r3, #7
 800d28a:	3308      	adds	r3, #8
 800d28c:	9303      	str	r3, [sp, #12]
 800d28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d290:	444b      	add	r3, r9
 800d292:	9309      	str	r3, [sp, #36]	; 0x24
 800d294:	e76d      	b.n	800d172 <_svfiprintf_r+0x4a>
 800d296:	fb05 3202 	mla	r2, r5, r2, r3
 800d29a:	2001      	movs	r0, #1
 800d29c:	460f      	mov	r7, r1
 800d29e:	e7a6      	b.n	800d1ee <_svfiprintf_r+0xc6>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	3701      	adds	r7, #1
 800d2a4:	9305      	str	r3, [sp, #20]
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	250a      	movs	r5, #10
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2b0:	3a30      	subs	r2, #48	; 0x30
 800d2b2:	2a09      	cmp	r2, #9
 800d2b4:	d903      	bls.n	800d2be <_svfiprintf_r+0x196>
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d0c8      	beq.n	800d24c <_svfiprintf_r+0x124>
 800d2ba:	9105      	str	r1, [sp, #20]
 800d2bc:	e7c6      	b.n	800d24c <_svfiprintf_r+0x124>
 800d2be:	fb05 2101 	mla	r1, r5, r1, r2
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	4607      	mov	r7, r0
 800d2c6:	e7f0      	b.n	800d2aa <_svfiprintf_r+0x182>
 800d2c8:	ab03      	add	r3, sp, #12
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	4622      	mov	r2, r4
 800d2ce:	4b11      	ldr	r3, [pc, #68]	; (800d314 <_svfiprintf_r+0x1ec>)
 800d2d0:	a904      	add	r1, sp, #16
 800d2d2:	4640      	mov	r0, r8
 800d2d4:	f3af 8000 	nop.w
 800d2d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d2dc:	4681      	mov	r9, r0
 800d2de:	d1d6      	bne.n	800d28e <_svfiprintf_r+0x166>
 800d2e0:	89a3      	ldrh	r3, [r4, #12]
 800d2e2:	065b      	lsls	r3, r3, #25
 800d2e4:	f53f af35 	bmi.w	800d152 <_svfiprintf_r+0x2a>
 800d2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2ea:	b01d      	add	sp, #116	; 0x74
 800d2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f0:	ab03      	add	r3, sp, #12
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	4b07      	ldr	r3, [pc, #28]	; (800d314 <_svfiprintf_r+0x1ec>)
 800d2f8:	a904      	add	r1, sp, #16
 800d2fa:	4640      	mov	r0, r8
 800d2fc:	f000 f9c2 	bl	800d684 <_printf_i>
 800d300:	e7ea      	b.n	800d2d8 <_svfiprintf_r+0x1b0>
 800d302:	bf00      	nop
 800d304:	0800fa40 	.word	0x0800fa40
 800d308:	0800fa46 	.word	0x0800fa46
 800d30c:	0800fa4a 	.word	0x0800fa4a
 800d310:	00000000 	.word	0x00000000
 800d314:	0800d075 	.word	0x0800d075

0800d318 <__sfputc_r>:
 800d318:	6893      	ldr	r3, [r2, #8]
 800d31a:	3b01      	subs	r3, #1
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	b410      	push	{r4}
 800d320:	6093      	str	r3, [r2, #8]
 800d322:	da08      	bge.n	800d336 <__sfputc_r+0x1e>
 800d324:	6994      	ldr	r4, [r2, #24]
 800d326:	42a3      	cmp	r3, r4
 800d328:	db01      	blt.n	800d32e <__sfputc_r+0x16>
 800d32a:	290a      	cmp	r1, #10
 800d32c:	d103      	bne.n	800d336 <__sfputc_r+0x1e>
 800d32e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d332:	f7ff bb59 	b.w	800c9e8 <__swbuf_r>
 800d336:	6813      	ldr	r3, [r2, #0]
 800d338:	1c58      	adds	r0, r3, #1
 800d33a:	6010      	str	r0, [r2, #0]
 800d33c:	7019      	strb	r1, [r3, #0]
 800d33e:	4608      	mov	r0, r1
 800d340:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d344:	4770      	bx	lr

0800d346 <__sfputs_r>:
 800d346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d348:	4606      	mov	r6, r0
 800d34a:	460f      	mov	r7, r1
 800d34c:	4614      	mov	r4, r2
 800d34e:	18d5      	adds	r5, r2, r3
 800d350:	42ac      	cmp	r4, r5
 800d352:	d101      	bne.n	800d358 <__sfputs_r+0x12>
 800d354:	2000      	movs	r0, #0
 800d356:	e007      	b.n	800d368 <__sfputs_r+0x22>
 800d358:	463a      	mov	r2, r7
 800d35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d35e:	4630      	mov	r0, r6
 800d360:	f7ff ffda 	bl	800d318 <__sfputc_r>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d1f3      	bne.n	800d350 <__sfputs_r+0xa>
 800d368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d36c <_vfiprintf_r>:
 800d36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d370:	460c      	mov	r4, r1
 800d372:	b09d      	sub	sp, #116	; 0x74
 800d374:	4617      	mov	r7, r2
 800d376:	461d      	mov	r5, r3
 800d378:	4606      	mov	r6, r0
 800d37a:	b118      	cbz	r0, 800d384 <_vfiprintf_r+0x18>
 800d37c:	6983      	ldr	r3, [r0, #24]
 800d37e:	b90b      	cbnz	r3, 800d384 <_vfiprintf_r+0x18>
 800d380:	f7ff fce2 	bl	800cd48 <__sinit>
 800d384:	4b7c      	ldr	r3, [pc, #496]	; (800d578 <_vfiprintf_r+0x20c>)
 800d386:	429c      	cmp	r4, r3
 800d388:	d158      	bne.n	800d43c <_vfiprintf_r+0xd0>
 800d38a:	6874      	ldr	r4, [r6, #4]
 800d38c:	89a3      	ldrh	r3, [r4, #12]
 800d38e:	0718      	lsls	r0, r3, #28
 800d390:	d55e      	bpl.n	800d450 <_vfiprintf_r+0xe4>
 800d392:	6923      	ldr	r3, [r4, #16]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d05b      	beq.n	800d450 <_vfiprintf_r+0xe4>
 800d398:	2300      	movs	r3, #0
 800d39a:	9309      	str	r3, [sp, #36]	; 0x24
 800d39c:	2320      	movs	r3, #32
 800d39e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3a2:	2330      	movs	r3, #48	; 0x30
 800d3a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3a8:	9503      	str	r5, [sp, #12]
 800d3aa:	f04f 0b01 	mov.w	fp, #1
 800d3ae:	46b8      	mov	r8, r7
 800d3b0:	4645      	mov	r5, r8
 800d3b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d3b6:	b10b      	cbz	r3, 800d3bc <_vfiprintf_r+0x50>
 800d3b8:	2b25      	cmp	r3, #37	; 0x25
 800d3ba:	d154      	bne.n	800d466 <_vfiprintf_r+0xfa>
 800d3bc:	ebb8 0a07 	subs.w	sl, r8, r7
 800d3c0:	d00b      	beq.n	800d3da <_vfiprintf_r+0x6e>
 800d3c2:	4653      	mov	r3, sl
 800d3c4:	463a      	mov	r2, r7
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f7ff ffbc 	bl	800d346 <__sfputs_r>
 800d3ce:	3001      	adds	r0, #1
 800d3d0:	f000 80c2 	beq.w	800d558 <_vfiprintf_r+0x1ec>
 800d3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d6:	4453      	add	r3, sl
 800d3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3da:	f898 3000 	ldrb.w	r3, [r8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f000 80ba 	beq.w	800d558 <_vfiprintf_r+0x1ec>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3ee:	9304      	str	r3, [sp, #16]
 800d3f0:	9307      	str	r3, [sp, #28]
 800d3f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3f6:	931a      	str	r3, [sp, #104]	; 0x68
 800d3f8:	46a8      	mov	r8, r5
 800d3fa:	2205      	movs	r2, #5
 800d3fc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d400:	485e      	ldr	r0, [pc, #376]	; (800d57c <_vfiprintf_r+0x210>)
 800d402:	f7f2 fefd 	bl	8000200 <memchr>
 800d406:	9b04      	ldr	r3, [sp, #16]
 800d408:	bb78      	cbnz	r0, 800d46a <_vfiprintf_r+0xfe>
 800d40a:	06d9      	lsls	r1, r3, #27
 800d40c:	bf44      	itt	mi
 800d40e:	2220      	movmi	r2, #32
 800d410:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d414:	071a      	lsls	r2, r3, #28
 800d416:	bf44      	itt	mi
 800d418:	222b      	movmi	r2, #43	; 0x2b
 800d41a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d41e:	782a      	ldrb	r2, [r5, #0]
 800d420:	2a2a      	cmp	r2, #42	; 0x2a
 800d422:	d02a      	beq.n	800d47a <_vfiprintf_r+0x10e>
 800d424:	9a07      	ldr	r2, [sp, #28]
 800d426:	46a8      	mov	r8, r5
 800d428:	2000      	movs	r0, #0
 800d42a:	250a      	movs	r5, #10
 800d42c:	4641      	mov	r1, r8
 800d42e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d432:	3b30      	subs	r3, #48	; 0x30
 800d434:	2b09      	cmp	r3, #9
 800d436:	d969      	bls.n	800d50c <_vfiprintf_r+0x1a0>
 800d438:	b360      	cbz	r0, 800d494 <_vfiprintf_r+0x128>
 800d43a:	e024      	b.n	800d486 <_vfiprintf_r+0x11a>
 800d43c:	4b50      	ldr	r3, [pc, #320]	; (800d580 <_vfiprintf_r+0x214>)
 800d43e:	429c      	cmp	r4, r3
 800d440:	d101      	bne.n	800d446 <_vfiprintf_r+0xda>
 800d442:	68b4      	ldr	r4, [r6, #8]
 800d444:	e7a2      	b.n	800d38c <_vfiprintf_r+0x20>
 800d446:	4b4f      	ldr	r3, [pc, #316]	; (800d584 <_vfiprintf_r+0x218>)
 800d448:	429c      	cmp	r4, r3
 800d44a:	bf08      	it	eq
 800d44c:	68f4      	ldreq	r4, [r6, #12]
 800d44e:	e79d      	b.n	800d38c <_vfiprintf_r+0x20>
 800d450:	4621      	mov	r1, r4
 800d452:	4630      	mov	r0, r6
 800d454:	f7ff fb1a 	bl	800ca8c <__swsetup_r>
 800d458:	2800      	cmp	r0, #0
 800d45a:	d09d      	beq.n	800d398 <_vfiprintf_r+0x2c>
 800d45c:	f04f 30ff 	mov.w	r0, #4294967295
 800d460:	b01d      	add	sp, #116	; 0x74
 800d462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d466:	46a8      	mov	r8, r5
 800d468:	e7a2      	b.n	800d3b0 <_vfiprintf_r+0x44>
 800d46a:	4a44      	ldr	r2, [pc, #272]	; (800d57c <_vfiprintf_r+0x210>)
 800d46c:	1a80      	subs	r0, r0, r2
 800d46e:	fa0b f000 	lsl.w	r0, fp, r0
 800d472:	4318      	orrs	r0, r3
 800d474:	9004      	str	r0, [sp, #16]
 800d476:	4645      	mov	r5, r8
 800d478:	e7be      	b.n	800d3f8 <_vfiprintf_r+0x8c>
 800d47a:	9a03      	ldr	r2, [sp, #12]
 800d47c:	1d11      	adds	r1, r2, #4
 800d47e:	6812      	ldr	r2, [r2, #0]
 800d480:	9103      	str	r1, [sp, #12]
 800d482:	2a00      	cmp	r2, #0
 800d484:	db01      	blt.n	800d48a <_vfiprintf_r+0x11e>
 800d486:	9207      	str	r2, [sp, #28]
 800d488:	e004      	b.n	800d494 <_vfiprintf_r+0x128>
 800d48a:	4252      	negs	r2, r2
 800d48c:	f043 0302 	orr.w	r3, r3, #2
 800d490:	9207      	str	r2, [sp, #28]
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	f898 3000 	ldrb.w	r3, [r8]
 800d498:	2b2e      	cmp	r3, #46	; 0x2e
 800d49a:	d10e      	bne.n	800d4ba <_vfiprintf_r+0x14e>
 800d49c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d4a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d4a2:	d138      	bne.n	800d516 <_vfiprintf_r+0x1aa>
 800d4a4:	9b03      	ldr	r3, [sp, #12]
 800d4a6:	1d1a      	adds	r2, r3, #4
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	9203      	str	r2, [sp, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	bfb8      	it	lt
 800d4b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4b4:	f108 0802 	add.w	r8, r8, #2
 800d4b8:	9305      	str	r3, [sp, #20]
 800d4ba:	4d33      	ldr	r5, [pc, #204]	; (800d588 <_vfiprintf_r+0x21c>)
 800d4bc:	f898 1000 	ldrb.w	r1, [r8]
 800d4c0:	2203      	movs	r2, #3
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	f7f2 fe9c 	bl	8000200 <memchr>
 800d4c8:	b140      	cbz	r0, 800d4dc <_vfiprintf_r+0x170>
 800d4ca:	2340      	movs	r3, #64	; 0x40
 800d4cc:	1b40      	subs	r0, r0, r5
 800d4ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d4d2:	9b04      	ldr	r3, [sp, #16]
 800d4d4:	4303      	orrs	r3, r0
 800d4d6:	f108 0801 	add.w	r8, r8, #1
 800d4da:	9304      	str	r3, [sp, #16]
 800d4dc:	f898 1000 	ldrb.w	r1, [r8]
 800d4e0:	482a      	ldr	r0, [pc, #168]	; (800d58c <_vfiprintf_r+0x220>)
 800d4e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4e6:	2206      	movs	r2, #6
 800d4e8:	f108 0701 	add.w	r7, r8, #1
 800d4ec:	f7f2 fe88 	bl	8000200 <memchr>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d037      	beq.n	800d564 <_vfiprintf_r+0x1f8>
 800d4f4:	4b26      	ldr	r3, [pc, #152]	; (800d590 <_vfiprintf_r+0x224>)
 800d4f6:	bb1b      	cbnz	r3, 800d540 <_vfiprintf_r+0x1d4>
 800d4f8:	9b03      	ldr	r3, [sp, #12]
 800d4fa:	3307      	adds	r3, #7
 800d4fc:	f023 0307 	bic.w	r3, r3, #7
 800d500:	3308      	adds	r3, #8
 800d502:	9303      	str	r3, [sp, #12]
 800d504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d506:	444b      	add	r3, r9
 800d508:	9309      	str	r3, [sp, #36]	; 0x24
 800d50a:	e750      	b.n	800d3ae <_vfiprintf_r+0x42>
 800d50c:	fb05 3202 	mla	r2, r5, r2, r3
 800d510:	2001      	movs	r0, #1
 800d512:	4688      	mov	r8, r1
 800d514:	e78a      	b.n	800d42c <_vfiprintf_r+0xc0>
 800d516:	2300      	movs	r3, #0
 800d518:	f108 0801 	add.w	r8, r8, #1
 800d51c:	9305      	str	r3, [sp, #20]
 800d51e:	4619      	mov	r1, r3
 800d520:	250a      	movs	r5, #10
 800d522:	4640      	mov	r0, r8
 800d524:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d528:	3a30      	subs	r2, #48	; 0x30
 800d52a:	2a09      	cmp	r2, #9
 800d52c:	d903      	bls.n	800d536 <_vfiprintf_r+0x1ca>
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d0c3      	beq.n	800d4ba <_vfiprintf_r+0x14e>
 800d532:	9105      	str	r1, [sp, #20]
 800d534:	e7c1      	b.n	800d4ba <_vfiprintf_r+0x14e>
 800d536:	fb05 2101 	mla	r1, r5, r1, r2
 800d53a:	2301      	movs	r3, #1
 800d53c:	4680      	mov	r8, r0
 800d53e:	e7f0      	b.n	800d522 <_vfiprintf_r+0x1b6>
 800d540:	ab03      	add	r3, sp, #12
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	4622      	mov	r2, r4
 800d546:	4b13      	ldr	r3, [pc, #76]	; (800d594 <_vfiprintf_r+0x228>)
 800d548:	a904      	add	r1, sp, #16
 800d54a:	4630      	mov	r0, r6
 800d54c:	f3af 8000 	nop.w
 800d550:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d554:	4681      	mov	r9, r0
 800d556:	d1d5      	bne.n	800d504 <_vfiprintf_r+0x198>
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	065b      	lsls	r3, r3, #25
 800d55c:	f53f af7e 	bmi.w	800d45c <_vfiprintf_r+0xf0>
 800d560:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d562:	e77d      	b.n	800d460 <_vfiprintf_r+0xf4>
 800d564:	ab03      	add	r3, sp, #12
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	4622      	mov	r2, r4
 800d56a:	4b0a      	ldr	r3, [pc, #40]	; (800d594 <_vfiprintf_r+0x228>)
 800d56c:	a904      	add	r1, sp, #16
 800d56e:	4630      	mov	r0, r6
 800d570:	f000 f888 	bl	800d684 <_printf_i>
 800d574:	e7ec      	b.n	800d550 <_vfiprintf_r+0x1e4>
 800d576:	bf00      	nop
 800d578:	0800fa00 	.word	0x0800fa00
 800d57c:	0800fa40 	.word	0x0800fa40
 800d580:	0800fa20 	.word	0x0800fa20
 800d584:	0800f9e0 	.word	0x0800f9e0
 800d588:	0800fa46 	.word	0x0800fa46
 800d58c:	0800fa4a 	.word	0x0800fa4a
 800d590:	00000000 	.word	0x00000000
 800d594:	0800d347 	.word	0x0800d347

0800d598 <_printf_common>:
 800d598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d59c:	4691      	mov	r9, r2
 800d59e:	461f      	mov	r7, r3
 800d5a0:	688a      	ldr	r2, [r1, #8]
 800d5a2:	690b      	ldr	r3, [r1, #16]
 800d5a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	bfb8      	it	lt
 800d5ac:	4613      	movlt	r3, r2
 800d5ae:	f8c9 3000 	str.w	r3, [r9]
 800d5b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	b112      	cbz	r2, 800d5c2 <_printf_common+0x2a>
 800d5bc:	3301      	adds	r3, #1
 800d5be:	f8c9 3000 	str.w	r3, [r9]
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	0699      	lsls	r1, r3, #26
 800d5c6:	bf42      	ittt	mi
 800d5c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d5cc:	3302      	addmi	r3, #2
 800d5ce:	f8c9 3000 	strmi.w	r3, [r9]
 800d5d2:	6825      	ldr	r5, [r4, #0]
 800d5d4:	f015 0506 	ands.w	r5, r5, #6
 800d5d8:	d107      	bne.n	800d5ea <_printf_common+0x52>
 800d5da:	f104 0a19 	add.w	sl, r4, #25
 800d5de:	68e3      	ldr	r3, [r4, #12]
 800d5e0:	f8d9 2000 	ldr.w	r2, [r9]
 800d5e4:	1a9b      	subs	r3, r3, r2
 800d5e6:	42ab      	cmp	r3, r5
 800d5e8:	dc28      	bgt.n	800d63c <_printf_common+0xa4>
 800d5ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d5ee:	6822      	ldr	r2, [r4, #0]
 800d5f0:	3300      	adds	r3, #0
 800d5f2:	bf18      	it	ne
 800d5f4:	2301      	movne	r3, #1
 800d5f6:	0692      	lsls	r2, r2, #26
 800d5f8:	d42d      	bmi.n	800d656 <_printf_common+0xbe>
 800d5fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5fe:	4639      	mov	r1, r7
 800d600:	4630      	mov	r0, r6
 800d602:	47c0      	blx	r8
 800d604:	3001      	adds	r0, #1
 800d606:	d020      	beq.n	800d64a <_printf_common+0xb2>
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	68e5      	ldr	r5, [r4, #12]
 800d60c:	f8d9 2000 	ldr.w	r2, [r9]
 800d610:	f003 0306 	and.w	r3, r3, #6
 800d614:	2b04      	cmp	r3, #4
 800d616:	bf08      	it	eq
 800d618:	1aad      	subeq	r5, r5, r2
 800d61a:	68a3      	ldr	r3, [r4, #8]
 800d61c:	6922      	ldr	r2, [r4, #16]
 800d61e:	bf0c      	ite	eq
 800d620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d624:	2500      	movne	r5, #0
 800d626:	4293      	cmp	r3, r2
 800d628:	bfc4      	itt	gt
 800d62a:	1a9b      	subgt	r3, r3, r2
 800d62c:	18ed      	addgt	r5, r5, r3
 800d62e:	f04f 0900 	mov.w	r9, #0
 800d632:	341a      	adds	r4, #26
 800d634:	454d      	cmp	r5, r9
 800d636:	d11a      	bne.n	800d66e <_printf_common+0xd6>
 800d638:	2000      	movs	r0, #0
 800d63a:	e008      	b.n	800d64e <_printf_common+0xb6>
 800d63c:	2301      	movs	r3, #1
 800d63e:	4652      	mov	r2, sl
 800d640:	4639      	mov	r1, r7
 800d642:	4630      	mov	r0, r6
 800d644:	47c0      	blx	r8
 800d646:	3001      	adds	r0, #1
 800d648:	d103      	bne.n	800d652 <_printf_common+0xba>
 800d64a:	f04f 30ff 	mov.w	r0, #4294967295
 800d64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d652:	3501      	adds	r5, #1
 800d654:	e7c3      	b.n	800d5de <_printf_common+0x46>
 800d656:	18e1      	adds	r1, r4, r3
 800d658:	1c5a      	adds	r2, r3, #1
 800d65a:	2030      	movs	r0, #48	; 0x30
 800d65c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d660:	4422      	add	r2, r4
 800d662:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d666:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d66a:	3302      	adds	r3, #2
 800d66c:	e7c5      	b.n	800d5fa <_printf_common+0x62>
 800d66e:	2301      	movs	r3, #1
 800d670:	4622      	mov	r2, r4
 800d672:	4639      	mov	r1, r7
 800d674:	4630      	mov	r0, r6
 800d676:	47c0      	blx	r8
 800d678:	3001      	adds	r0, #1
 800d67a:	d0e6      	beq.n	800d64a <_printf_common+0xb2>
 800d67c:	f109 0901 	add.w	r9, r9, #1
 800d680:	e7d8      	b.n	800d634 <_printf_common+0x9c>
	...

0800d684 <_printf_i>:
 800d684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d688:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d68c:	460c      	mov	r4, r1
 800d68e:	7e09      	ldrb	r1, [r1, #24]
 800d690:	b085      	sub	sp, #20
 800d692:	296e      	cmp	r1, #110	; 0x6e
 800d694:	4617      	mov	r7, r2
 800d696:	4606      	mov	r6, r0
 800d698:	4698      	mov	r8, r3
 800d69a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d69c:	f000 80b3 	beq.w	800d806 <_printf_i+0x182>
 800d6a0:	d822      	bhi.n	800d6e8 <_printf_i+0x64>
 800d6a2:	2963      	cmp	r1, #99	; 0x63
 800d6a4:	d036      	beq.n	800d714 <_printf_i+0x90>
 800d6a6:	d80a      	bhi.n	800d6be <_printf_i+0x3a>
 800d6a8:	2900      	cmp	r1, #0
 800d6aa:	f000 80b9 	beq.w	800d820 <_printf_i+0x19c>
 800d6ae:	2958      	cmp	r1, #88	; 0x58
 800d6b0:	f000 8083 	beq.w	800d7ba <_printf_i+0x136>
 800d6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d6bc:	e032      	b.n	800d724 <_printf_i+0xa0>
 800d6be:	2964      	cmp	r1, #100	; 0x64
 800d6c0:	d001      	beq.n	800d6c6 <_printf_i+0x42>
 800d6c2:	2969      	cmp	r1, #105	; 0x69
 800d6c4:	d1f6      	bne.n	800d6b4 <_printf_i+0x30>
 800d6c6:	6820      	ldr	r0, [r4, #0]
 800d6c8:	6813      	ldr	r3, [r2, #0]
 800d6ca:	0605      	lsls	r5, r0, #24
 800d6cc:	f103 0104 	add.w	r1, r3, #4
 800d6d0:	d52a      	bpl.n	800d728 <_printf_i+0xa4>
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6011      	str	r1, [r2, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	da03      	bge.n	800d6e2 <_printf_i+0x5e>
 800d6da:	222d      	movs	r2, #45	; 0x2d
 800d6dc:	425b      	negs	r3, r3
 800d6de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d6e2:	486f      	ldr	r0, [pc, #444]	; (800d8a0 <_printf_i+0x21c>)
 800d6e4:	220a      	movs	r2, #10
 800d6e6:	e039      	b.n	800d75c <_printf_i+0xd8>
 800d6e8:	2973      	cmp	r1, #115	; 0x73
 800d6ea:	f000 809d 	beq.w	800d828 <_printf_i+0x1a4>
 800d6ee:	d808      	bhi.n	800d702 <_printf_i+0x7e>
 800d6f0:	296f      	cmp	r1, #111	; 0x6f
 800d6f2:	d020      	beq.n	800d736 <_printf_i+0xb2>
 800d6f4:	2970      	cmp	r1, #112	; 0x70
 800d6f6:	d1dd      	bne.n	800d6b4 <_printf_i+0x30>
 800d6f8:	6823      	ldr	r3, [r4, #0]
 800d6fa:	f043 0320 	orr.w	r3, r3, #32
 800d6fe:	6023      	str	r3, [r4, #0]
 800d700:	e003      	b.n	800d70a <_printf_i+0x86>
 800d702:	2975      	cmp	r1, #117	; 0x75
 800d704:	d017      	beq.n	800d736 <_printf_i+0xb2>
 800d706:	2978      	cmp	r1, #120	; 0x78
 800d708:	d1d4      	bne.n	800d6b4 <_printf_i+0x30>
 800d70a:	2378      	movs	r3, #120	; 0x78
 800d70c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d710:	4864      	ldr	r0, [pc, #400]	; (800d8a4 <_printf_i+0x220>)
 800d712:	e055      	b.n	800d7c0 <_printf_i+0x13c>
 800d714:	6813      	ldr	r3, [r2, #0]
 800d716:	1d19      	adds	r1, r3, #4
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	6011      	str	r1, [r2, #0]
 800d71c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d724:	2301      	movs	r3, #1
 800d726:	e08c      	b.n	800d842 <_printf_i+0x1be>
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6011      	str	r1, [r2, #0]
 800d72c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d730:	bf18      	it	ne
 800d732:	b21b      	sxthne	r3, r3
 800d734:	e7cf      	b.n	800d6d6 <_printf_i+0x52>
 800d736:	6813      	ldr	r3, [r2, #0]
 800d738:	6825      	ldr	r5, [r4, #0]
 800d73a:	1d18      	adds	r0, r3, #4
 800d73c:	6010      	str	r0, [r2, #0]
 800d73e:	0628      	lsls	r0, r5, #24
 800d740:	d501      	bpl.n	800d746 <_printf_i+0xc2>
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	e002      	b.n	800d74c <_printf_i+0xc8>
 800d746:	0668      	lsls	r0, r5, #25
 800d748:	d5fb      	bpl.n	800d742 <_printf_i+0xbe>
 800d74a:	881b      	ldrh	r3, [r3, #0]
 800d74c:	4854      	ldr	r0, [pc, #336]	; (800d8a0 <_printf_i+0x21c>)
 800d74e:	296f      	cmp	r1, #111	; 0x6f
 800d750:	bf14      	ite	ne
 800d752:	220a      	movne	r2, #10
 800d754:	2208      	moveq	r2, #8
 800d756:	2100      	movs	r1, #0
 800d758:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d75c:	6865      	ldr	r5, [r4, #4]
 800d75e:	60a5      	str	r5, [r4, #8]
 800d760:	2d00      	cmp	r5, #0
 800d762:	f2c0 8095 	blt.w	800d890 <_printf_i+0x20c>
 800d766:	6821      	ldr	r1, [r4, #0]
 800d768:	f021 0104 	bic.w	r1, r1, #4
 800d76c:	6021      	str	r1, [r4, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d13d      	bne.n	800d7ee <_printf_i+0x16a>
 800d772:	2d00      	cmp	r5, #0
 800d774:	f040 808e 	bne.w	800d894 <_printf_i+0x210>
 800d778:	4665      	mov	r5, ip
 800d77a:	2a08      	cmp	r2, #8
 800d77c:	d10b      	bne.n	800d796 <_printf_i+0x112>
 800d77e:	6823      	ldr	r3, [r4, #0]
 800d780:	07db      	lsls	r3, r3, #31
 800d782:	d508      	bpl.n	800d796 <_printf_i+0x112>
 800d784:	6923      	ldr	r3, [r4, #16]
 800d786:	6862      	ldr	r2, [r4, #4]
 800d788:	429a      	cmp	r2, r3
 800d78a:	bfde      	ittt	le
 800d78c:	2330      	movle	r3, #48	; 0x30
 800d78e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d792:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d796:	ebac 0305 	sub.w	r3, ip, r5
 800d79a:	6123      	str	r3, [r4, #16]
 800d79c:	f8cd 8000 	str.w	r8, [sp]
 800d7a0:	463b      	mov	r3, r7
 800d7a2:	aa03      	add	r2, sp, #12
 800d7a4:	4621      	mov	r1, r4
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	f7ff fef6 	bl	800d598 <_printf_common>
 800d7ac:	3001      	adds	r0, #1
 800d7ae:	d14d      	bne.n	800d84c <_printf_i+0x1c8>
 800d7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b4:	b005      	add	sp, #20
 800d7b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ba:	4839      	ldr	r0, [pc, #228]	; (800d8a0 <_printf_i+0x21c>)
 800d7bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d7c0:	6813      	ldr	r3, [r2, #0]
 800d7c2:	6821      	ldr	r1, [r4, #0]
 800d7c4:	1d1d      	adds	r5, r3, #4
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6015      	str	r5, [r2, #0]
 800d7ca:	060a      	lsls	r2, r1, #24
 800d7cc:	d50b      	bpl.n	800d7e6 <_printf_i+0x162>
 800d7ce:	07ca      	lsls	r2, r1, #31
 800d7d0:	bf44      	itt	mi
 800d7d2:	f041 0120 	orrmi.w	r1, r1, #32
 800d7d6:	6021      	strmi	r1, [r4, #0]
 800d7d8:	b91b      	cbnz	r3, 800d7e2 <_printf_i+0x15e>
 800d7da:	6822      	ldr	r2, [r4, #0]
 800d7dc:	f022 0220 	bic.w	r2, r2, #32
 800d7e0:	6022      	str	r2, [r4, #0]
 800d7e2:	2210      	movs	r2, #16
 800d7e4:	e7b7      	b.n	800d756 <_printf_i+0xd2>
 800d7e6:	064d      	lsls	r5, r1, #25
 800d7e8:	bf48      	it	mi
 800d7ea:	b29b      	uxthmi	r3, r3
 800d7ec:	e7ef      	b.n	800d7ce <_printf_i+0x14a>
 800d7ee:	4665      	mov	r5, ip
 800d7f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7f4:	fb02 3311 	mls	r3, r2, r1, r3
 800d7f8:	5cc3      	ldrb	r3, [r0, r3]
 800d7fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d7fe:	460b      	mov	r3, r1
 800d800:	2900      	cmp	r1, #0
 800d802:	d1f5      	bne.n	800d7f0 <_printf_i+0x16c>
 800d804:	e7b9      	b.n	800d77a <_printf_i+0xf6>
 800d806:	6813      	ldr	r3, [r2, #0]
 800d808:	6825      	ldr	r5, [r4, #0]
 800d80a:	6961      	ldr	r1, [r4, #20]
 800d80c:	1d18      	adds	r0, r3, #4
 800d80e:	6010      	str	r0, [r2, #0]
 800d810:	0628      	lsls	r0, r5, #24
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	d501      	bpl.n	800d81a <_printf_i+0x196>
 800d816:	6019      	str	r1, [r3, #0]
 800d818:	e002      	b.n	800d820 <_printf_i+0x19c>
 800d81a:	066a      	lsls	r2, r5, #25
 800d81c:	d5fb      	bpl.n	800d816 <_printf_i+0x192>
 800d81e:	8019      	strh	r1, [r3, #0]
 800d820:	2300      	movs	r3, #0
 800d822:	6123      	str	r3, [r4, #16]
 800d824:	4665      	mov	r5, ip
 800d826:	e7b9      	b.n	800d79c <_printf_i+0x118>
 800d828:	6813      	ldr	r3, [r2, #0]
 800d82a:	1d19      	adds	r1, r3, #4
 800d82c:	6011      	str	r1, [r2, #0]
 800d82e:	681d      	ldr	r5, [r3, #0]
 800d830:	6862      	ldr	r2, [r4, #4]
 800d832:	2100      	movs	r1, #0
 800d834:	4628      	mov	r0, r5
 800d836:	f7f2 fce3 	bl	8000200 <memchr>
 800d83a:	b108      	cbz	r0, 800d840 <_printf_i+0x1bc>
 800d83c:	1b40      	subs	r0, r0, r5
 800d83e:	6060      	str	r0, [r4, #4]
 800d840:	6863      	ldr	r3, [r4, #4]
 800d842:	6123      	str	r3, [r4, #16]
 800d844:	2300      	movs	r3, #0
 800d846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d84a:	e7a7      	b.n	800d79c <_printf_i+0x118>
 800d84c:	6923      	ldr	r3, [r4, #16]
 800d84e:	462a      	mov	r2, r5
 800d850:	4639      	mov	r1, r7
 800d852:	4630      	mov	r0, r6
 800d854:	47c0      	blx	r8
 800d856:	3001      	adds	r0, #1
 800d858:	d0aa      	beq.n	800d7b0 <_printf_i+0x12c>
 800d85a:	6823      	ldr	r3, [r4, #0]
 800d85c:	079b      	lsls	r3, r3, #30
 800d85e:	d413      	bmi.n	800d888 <_printf_i+0x204>
 800d860:	68e0      	ldr	r0, [r4, #12]
 800d862:	9b03      	ldr	r3, [sp, #12]
 800d864:	4298      	cmp	r0, r3
 800d866:	bfb8      	it	lt
 800d868:	4618      	movlt	r0, r3
 800d86a:	e7a3      	b.n	800d7b4 <_printf_i+0x130>
 800d86c:	2301      	movs	r3, #1
 800d86e:	464a      	mov	r2, r9
 800d870:	4639      	mov	r1, r7
 800d872:	4630      	mov	r0, r6
 800d874:	47c0      	blx	r8
 800d876:	3001      	adds	r0, #1
 800d878:	d09a      	beq.n	800d7b0 <_printf_i+0x12c>
 800d87a:	3501      	adds	r5, #1
 800d87c:	68e3      	ldr	r3, [r4, #12]
 800d87e:	9a03      	ldr	r2, [sp, #12]
 800d880:	1a9b      	subs	r3, r3, r2
 800d882:	42ab      	cmp	r3, r5
 800d884:	dcf2      	bgt.n	800d86c <_printf_i+0x1e8>
 800d886:	e7eb      	b.n	800d860 <_printf_i+0x1dc>
 800d888:	2500      	movs	r5, #0
 800d88a:	f104 0919 	add.w	r9, r4, #25
 800d88e:	e7f5      	b.n	800d87c <_printf_i+0x1f8>
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1ac      	bne.n	800d7ee <_printf_i+0x16a>
 800d894:	7803      	ldrb	r3, [r0, #0]
 800d896:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d89a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d89e:	e76c      	b.n	800d77a <_printf_i+0xf6>
 800d8a0:	0800fa51 	.word	0x0800fa51
 800d8a4:	0800fa62 	.word	0x0800fa62

0800d8a8 <_sbrk_r>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	4c06      	ldr	r4, [pc, #24]	; (800d8c4 <_sbrk_r+0x1c>)
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	4605      	mov	r5, r0
 800d8b0:	4608      	mov	r0, r1
 800d8b2:	6023      	str	r3, [r4, #0]
 800d8b4:	f7f3 fde4 	bl	8001480 <_sbrk>
 800d8b8:	1c43      	adds	r3, r0, #1
 800d8ba:	d102      	bne.n	800d8c2 <_sbrk_r+0x1a>
 800d8bc:	6823      	ldr	r3, [r4, #0]
 800d8be:	b103      	cbz	r3, 800d8c2 <_sbrk_r+0x1a>
 800d8c0:	602b      	str	r3, [r5, #0]
 800d8c2:	bd38      	pop	{r3, r4, r5, pc}
 800d8c4:	200031a8 	.word	0x200031a8

0800d8c8 <__sread>:
 800d8c8:	b510      	push	{r4, lr}
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d0:	f000 f8d6 	bl	800da80 <_read_r>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	bfab      	itete	ge
 800d8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8da:	89a3      	ldrhlt	r3, [r4, #12]
 800d8dc:	181b      	addge	r3, r3, r0
 800d8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8e2:	bfac      	ite	ge
 800d8e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8e6:	81a3      	strhlt	r3, [r4, #12]
 800d8e8:	bd10      	pop	{r4, pc}

0800d8ea <__swrite>:
 800d8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ee:	461f      	mov	r7, r3
 800d8f0:	898b      	ldrh	r3, [r1, #12]
 800d8f2:	05db      	lsls	r3, r3, #23
 800d8f4:	4605      	mov	r5, r0
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	4616      	mov	r6, r2
 800d8fa:	d505      	bpl.n	800d908 <__swrite+0x1e>
 800d8fc:	2302      	movs	r3, #2
 800d8fe:	2200      	movs	r2, #0
 800d900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d904:	f000 f868 	bl	800d9d8 <_lseek_r>
 800d908:	89a3      	ldrh	r3, [r4, #12]
 800d90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d90e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d912:	81a3      	strh	r3, [r4, #12]
 800d914:	4632      	mov	r2, r6
 800d916:	463b      	mov	r3, r7
 800d918:	4628      	mov	r0, r5
 800d91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d91e:	f000 b817 	b.w	800d950 <_write_r>

0800d922 <__sseek>:
 800d922:	b510      	push	{r4, lr}
 800d924:	460c      	mov	r4, r1
 800d926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d92a:	f000 f855 	bl	800d9d8 <_lseek_r>
 800d92e:	1c43      	adds	r3, r0, #1
 800d930:	89a3      	ldrh	r3, [r4, #12]
 800d932:	bf15      	itete	ne
 800d934:	6560      	strne	r0, [r4, #84]	; 0x54
 800d936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d93e:	81a3      	strheq	r3, [r4, #12]
 800d940:	bf18      	it	ne
 800d942:	81a3      	strhne	r3, [r4, #12]
 800d944:	bd10      	pop	{r4, pc}

0800d946 <__sclose>:
 800d946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d94a:	f000 b813 	b.w	800d974 <_close_r>
	...

0800d950 <_write_r>:
 800d950:	b538      	push	{r3, r4, r5, lr}
 800d952:	4c07      	ldr	r4, [pc, #28]	; (800d970 <_write_r+0x20>)
 800d954:	4605      	mov	r5, r0
 800d956:	4608      	mov	r0, r1
 800d958:	4611      	mov	r1, r2
 800d95a:	2200      	movs	r2, #0
 800d95c:	6022      	str	r2, [r4, #0]
 800d95e:	461a      	mov	r2, r3
 800d960:	f7f3 fd3d 	bl	80013de <_write>
 800d964:	1c43      	adds	r3, r0, #1
 800d966:	d102      	bne.n	800d96e <_write_r+0x1e>
 800d968:	6823      	ldr	r3, [r4, #0]
 800d96a:	b103      	cbz	r3, 800d96e <_write_r+0x1e>
 800d96c:	602b      	str	r3, [r5, #0]
 800d96e:	bd38      	pop	{r3, r4, r5, pc}
 800d970:	200031a8 	.word	0x200031a8

0800d974 <_close_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	4c06      	ldr	r4, [pc, #24]	; (800d990 <_close_r+0x1c>)
 800d978:	2300      	movs	r3, #0
 800d97a:	4605      	mov	r5, r0
 800d97c:	4608      	mov	r0, r1
 800d97e:	6023      	str	r3, [r4, #0]
 800d980:	f7f3 fd49 	bl	8001416 <_close>
 800d984:	1c43      	adds	r3, r0, #1
 800d986:	d102      	bne.n	800d98e <_close_r+0x1a>
 800d988:	6823      	ldr	r3, [r4, #0]
 800d98a:	b103      	cbz	r3, 800d98e <_close_r+0x1a>
 800d98c:	602b      	str	r3, [r5, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	200031a8 	.word	0x200031a8

0800d994 <_fstat_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	4c07      	ldr	r4, [pc, #28]	; (800d9b4 <_fstat_r+0x20>)
 800d998:	2300      	movs	r3, #0
 800d99a:	4605      	mov	r5, r0
 800d99c:	4608      	mov	r0, r1
 800d99e:	4611      	mov	r1, r2
 800d9a0:	6023      	str	r3, [r4, #0]
 800d9a2:	f7f3 fd44 	bl	800142e <_fstat>
 800d9a6:	1c43      	adds	r3, r0, #1
 800d9a8:	d102      	bne.n	800d9b0 <_fstat_r+0x1c>
 800d9aa:	6823      	ldr	r3, [r4, #0]
 800d9ac:	b103      	cbz	r3, 800d9b0 <_fstat_r+0x1c>
 800d9ae:	602b      	str	r3, [r5, #0]
 800d9b0:	bd38      	pop	{r3, r4, r5, pc}
 800d9b2:	bf00      	nop
 800d9b4:	200031a8 	.word	0x200031a8

0800d9b8 <_isatty_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4c06      	ldr	r4, [pc, #24]	; (800d9d4 <_isatty_r+0x1c>)
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4605      	mov	r5, r0
 800d9c0:	4608      	mov	r0, r1
 800d9c2:	6023      	str	r3, [r4, #0]
 800d9c4:	f7f3 fd43 	bl	800144e <_isatty>
 800d9c8:	1c43      	adds	r3, r0, #1
 800d9ca:	d102      	bne.n	800d9d2 <_isatty_r+0x1a>
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	b103      	cbz	r3, 800d9d2 <_isatty_r+0x1a>
 800d9d0:	602b      	str	r3, [r5, #0]
 800d9d2:	bd38      	pop	{r3, r4, r5, pc}
 800d9d4:	200031a8 	.word	0x200031a8

0800d9d8 <_lseek_r>:
 800d9d8:	b538      	push	{r3, r4, r5, lr}
 800d9da:	4c07      	ldr	r4, [pc, #28]	; (800d9f8 <_lseek_r+0x20>)
 800d9dc:	4605      	mov	r5, r0
 800d9de:	4608      	mov	r0, r1
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	6022      	str	r2, [r4, #0]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	f7f3 fd3c 	bl	8001464 <_lseek>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d102      	bne.n	800d9f6 <_lseek_r+0x1e>
 800d9f0:	6823      	ldr	r3, [r4, #0]
 800d9f2:	b103      	cbz	r3, 800d9f6 <_lseek_r+0x1e>
 800d9f4:	602b      	str	r3, [r5, #0]
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	200031a8 	.word	0x200031a8

0800d9fc <memmove>:
 800d9fc:	4288      	cmp	r0, r1
 800d9fe:	b510      	push	{r4, lr}
 800da00:	eb01 0302 	add.w	r3, r1, r2
 800da04:	d807      	bhi.n	800da16 <memmove+0x1a>
 800da06:	1e42      	subs	r2, r0, #1
 800da08:	4299      	cmp	r1, r3
 800da0a:	d00a      	beq.n	800da22 <memmove+0x26>
 800da0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da10:	f802 4f01 	strb.w	r4, [r2, #1]!
 800da14:	e7f8      	b.n	800da08 <memmove+0xc>
 800da16:	4283      	cmp	r3, r0
 800da18:	d9f5      	bls.n	800da06 <memmove+0xa>
 800da1a:	1881      	adds	r1, r0, r2
 800da1c:	1ad2      	subs	r2, r2, r3
 800da1e:	42d3      	cmn	r3, r2
 800da20:	d100      	bne.n	800da24 <memmove+0x28>
 800da22:	bd10      	pop	{r4, pc}
 800da24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da28:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800da2c:	e7f7      	b.n	800da1e <memmove+0x22>

0800da2e <__malloc_lock>:
 800da2e:	4770      	bx	lr

0800da30 <__malloc_unlock>:
 800da30:	4770      	bx	lr

0800da32 <_realloc_r>:
 800da32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da34:	4607      	mov	r7, r0
 800da36:	4614      	mov	r4, r2
 800da38:	460e      	mov	r6, r1
 800da3a:	b921      	cbnz	r1, 800da46 <_realloc_r+0x14>
 800da3c:	4611      	mov	r1, r2
 800da3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da42:	f7ff babd 	b.w	800cfc0 <_malloc_r>
 800da46:	b922      	cbnz	r2, 800da52 <_realloc_r+0x20>
 800da48:	f7ff fa6c 	bl	800cf24 <_free_r>
 800da4c:	4625      	mov	r5, r4
 800da4e:	4628      	mov	r0, r5
 800da50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da52:	f000 f827 	bl	800daa4 <_malloc_usable_size_r>
 800da56:	42a0      	cmp	r0, r4
 800da58:	d20f      	bcs.n	800da7a <_realloc_r+0x48>
 800da5a:	4621      	mov	r1, r4
 800da5c:	4638      	mov	r0, r7
 800da5e:	f7ff faaf 	bl	800cfc0 <_malloc_r>
 800da62:	4605      	mov	r5, r0
 800da64:	2800      	cmp	r0, #0
 800da66:	d0f2      	beq.n	800da4e <_realloc_r+0x1c>
 800da68:	4631      	mov	r1, r6
 800da6a:	4622      	mov	r2, r4
 800da6c:	f7fe fd00 	bl	800c470 <memcpy>
 800da70:	4631      	mov	r1, r6
 800da72:	4638      	mov	r0, r7
 800da74:	f7ff fa56 	bl	800cf24 <_free_r>
 800da78:	e7e9      	b.n	800da4e <_realloc_r+0x1c>
 800da7a:	4635      	mov	r5, r6
 800da7c:	e7e7      	b.n	800da4e <_realloc_r+0x1c>
	...

0800da80 <_read_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4c07      	ldr	r4, [pc, #28]	; (800daa0 <_read_r+0x20>)
 800da84:	4605      	mov	r5, r0
 800da86:	4608      	mov	r0, r1
 800da88:	4611      	mov	r1, r2
 800da8a:	2200      	movs	r2, #0
 800da8c:	6022      	str	r2, [r4, #0]
 800da8e:	461a      	mov	r2, r3
 800da90:	f7f3 fc88 	bl	80013a4 <_read>
 800da94:	1c43      	adds	r3, r0, #1
 800da96:	d102      	bne.n	800da9e <_read_r+0x1e>
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	b103      	cbz	r3, 800da9e <_read_r+0x1e>
 800da9c:	602b      	str	r3, [r5, #0]
 800da9e:	bd38      	pop	{r3, r4, r5, pc}
 800daa0:	200031a8 	.word	0x200031a8

0800daa4 <_malloc_usable_size_r>:
 800daa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daa8:	1f18      	subs	r0, r3, #4
 800daaa:	2b00      	cmp	r3, #0
 800daac:	bfbc      	itt	lt
 800daae:	580b      	ldrlt	r3, [r1, r0]
 800dab0:	18c0      	addlt	r0, r0, r3
 800dab2:	4770      	bx	lr

0800dab4 <_init>:
 800dab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab6:	bf00      	nop
 800dab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daba:	bc08      	pop	{r3}
 800dabc:	469e      	mov	lr, r3
 800dabe:	4770      	bx	lr

0800dac0 <_fini>:
 800dac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dac2:	bf00      	nop
 800dac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dac6:	bc08      	pop	{r3}
 800dac8:	469e      	mov	lr, r3
 800daca:	4770      	bx	lr
