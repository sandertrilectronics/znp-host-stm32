
zigbee_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f338  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001728  0800f4e8  0800f4e8  0001f4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c10  08010c10  0003015c  2**0
                  CONTENTS
  4 .ARM          00000008  08010c10  08010c10  00020c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c18  08010c18  0003015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c18  08010c18  00020c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c1c  08010c1c  00020c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08010c20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005090  2000015c  08010d7c  0003015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051ec  08010d7c  000351ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e207  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a73  00000000  00000000  0005e393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d80  00000000  00000000  00063e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b50  00000000  00000000  00065b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030482  00000000  00000000  000676d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021abb  00000000  00000000  00097b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113097  00000000  00000000  000b9615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cc6ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083a4  00000000  00000000  001cc700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f4d0 	.word	0x0800f4d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000160 	.word	0x20000160
 80001ec:	0800f4d0 	.word	0x0800f4d0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
return 0;
 80005aa:	2300      	movs	r3, #0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000178 	.word	0x20000178
 80005e8:	200001d8 	.word	0x200001d8

080005ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_FREERTOS_Init+0x30>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f00a ffea 	bl	800b5e2 <osThreadCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <MX_FREERTOS_Init+0x34>)
 8000612:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bdb0      	pop	{r4, r5, r7, pc}
 800061c:	0800f4f4 	.word	0x0800f4f4
 8000620:	20004f90 	.word	0x20004f90

08000624 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f00b f824 	bl	800b67a <osDelay>
 8000632:	e7fb      	b.n	800062c <StartDefaultTask+0x8>

08000634 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_GPIO_Init+0x5c>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800066a:	f008 fc3d 	bl	8008ee8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <MX_GPIO_Init+0x5c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <MX_GPIO_Init+0x5c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <log_init>:
static SemaphoreHandle_t dbg_sem;

// small local working buffer
static char working_buffer[256];

void log_init(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    dbg_sem = xSemaphoreCreateBinary();
 8000698:	2203      	movs	r2, #3
 800069a:	2100      	movs	r1, #0
 800069c:	2001      	movs	r0, #1
 800069e:	f00b f91d 	bl	800b8dc <xQueueGenericCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a05      	ldr	r2, [pc, #20]	; (80006bc <log_init+0x28>)
 80006a6:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(dbg_sem);
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <log_init+0x28>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	2300      	movs	r3, #0
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	f00b f977 	bl	800b9a4 <xQueueGenericSend>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200003d8 	.word	0x200003d8

080006c0 <log_print>:

void log_print(const char *fmt, ...) {
 80006c0:	b40f      	push	{r0, r1, r2, r3}
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80006c8:	f00c fcbe 	bl	800d048 <xTaskGetSchedulerState>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d025      	beq.n	800071e <log_print+0x5e>
        // take semaphore
        if (xSemaphoreTake(dbg_sem, 1000) == pdFALSE)
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <log_print+0x98>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006da:	4618      	mov	r0, r3
 80006dc:	f00b fbd8 	bl	800be90 <xQueueSemaphoreTake>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d030      	beq.n	8000748 <log_print+0x88>
            return;

        // append parameters
        va_list args;
        va_start(args, fmt);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	607b      	str	r3, [r7, #4]
        vsnprintf(working_buffer, 256, fmt, args);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	4819      	ldr	r0, [pc, #100]	; (800075c <log_print+0x9c>)
 80006f6:	f00d fdfb 	bl	800e2f0 <vsniprintf>
        va_end(args);

        // send data
        HAL_UART_Transmit(&huart2, (char *)working_buffer, strlen(working_buffer), 100);
 80006fa:	4818      	ldr	r0, [pc, #96]	; (800075c <log_print+0x9c>)
 80006fc:	f7ff fd78 	bl	80001f0 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	4915      	ldr	r1, [pc, #84]	; (800075c <log_print+0x9c>)
 8000708:	4815      	ldr	r0, [pc, #84]	; (8000760 <log_print+0xa0>)
 800070a:	f00a f9d3 	bl	800aab4 <HAL_UART_Transmit>

        // Give semaphore back
        xSemaphoreGive(dbg_sem);
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <log_print+0x98>)
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	f00b f944 	bl	800b9a4 <xQueueGenericSend>
 800071c:	e015      	b.n	800074a <log_print+0x8a>
    } 
    else {
        // append parameters
        va_list args;
        va_start(args, fmt);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	603b      	str	r3, [r7, #0]
        vsnprintf(working_buffer, 256, fmt, args);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <log_print+0x9c>)
 800072e:	f00d fddf 	bl	800e2f0 <vsniprintf>
        va_end(args);

        // send data
        HAL_UART_Transmit(&huart2, (char *)working_buffer, strlen(working_buffer), 100);
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <log_print+0x9c>)
 8000734:	f7ff fd5c 	bl	80001f0 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	4907      	ldr	r1, [pc, #28]	; (800075c <log_print+0x9c>)
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <log_print+0xa0>)
 8000742:	f00a f9b7 	bl	800aab4 <HAL_UART_Transmit>
 8000746:	e000      	b.n	800074a <log_print+0x8a>
            return;
 8000748:	bf00      	nop
    }
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000752:	b004      	add	sp, #16
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200003d8 	.word	0x200003d8
 800075c:	200003dc 	.word	0x200003dc
 8000760:	20005054 	.word	0x20005054

08000764 <znp_init_coordinator>:
    sysResetReq(&rst);
}

// init coordinator
// taken from https://sunmaysky.blogspot.com/2017/02/use-ztool-z-stack-30-znp-to-set-up.html
int znp_init_coordinator(uint8_t enable_commissioning) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b0c6      	sub	sp, #280	; 0x118
 8000768:	af00      	add	r7, sp, #0
 800076a:	4602      	mov	r2, r0
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	701a      	strb	r2, [r3, #0]
    setChannelFormat_t chn;
    startCommissioningFormat_t strt;
    ResetReqFormat_t rst;

    // wait a second
    vTaskDelay(1000);
 8000770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000774:	f00b ffe2 	bl	800c73c <vTaskDelay>
    log_print("1 ----------------------\r\n");
 8000778:	484a      	ldr	r0, [pc, #296]	; (80008a4 <znp_init_coordinator+0x140>)
 800077a:	f7ff ffa1 	bl	80006c0 <log_print>

    // soft reset
    rst.Type = 0x01;
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
    sysResetReq(&rst);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f003 ffe4 	bl	8004758 <sysResetReq>

    vTaskDelay(4000);
 8000790:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000794:	f00b ffd2 	bl	800c73c <vTaskDelay>
    log_print("2 ----------------------\r\n");
 8000798:	4843      	ldr	r0, [pc, #268]	; (80008a8 <znp_init_coordinator+0x144>)
 800079a:	f7ff ff91 	bl	80006c0 <log_print>

    // Write ZCD_NV_LOGICAL_TYPE to 0 which means coordinator
    req.Id = 0x0087;
 800079e:	2387      	movs	r3, #135	; 0x87
 80007a0:	83bb      	strh	r3, [r7, #28]
    req.Offset = 0x00;
 80007a2:	2300      	movs	r3, #0
 80007a4:	77bb      	strb	r3, [r7, #30]
    req.Len = 0x01;
 80007a6:	2301      	movs	r3, #1
 80007a8:	77fb      	strb	r3, [r7, #31]
    req.Value[0] = 0x00;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f887 3020 	strb.w	r3, [r7, #32]
    sysOsalNvWrite(&req);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 f92d 	bl	8004a14 <sysOsalNvWrite>

    vTaskDelay(1000);
 80007ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007be:	f00b ffbd 	bl	800c73c <vTaskDelay>
    log_print("3 ----------------------\r\n");
 80007c2:	483a      	ldr	r0, [pc, #232]	; (80008ac <znp_init_coordinator+0x148>)
 80007c4:	f7ff ff7c 	bl	80006c0 <log_print>

    // set primary channel to 13
    chn.primaryChannel = 1;
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
    chn.channel = CFG_CHANNEL_0x00002000;
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d8:	605a      	str	r2, [r3, #4]
    appCfgSetChannel(&chn);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 fba4 	bl	8003f2c <appCfgSetChannel>

    vTaskDelay(1000);
 80007e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e8:	f00b ffa8 	bl	800c73c <vTaskDelay>
    log_print("4 ----------------------\r\n");
 80007ec:	4830      	ldr	r0, [pc, #192]	; (80008b0 <znp_init_coordinator+0x14c>)
 80007ee:	f7ff ff67 	bl	80006c0 <log_print>

    // disable secondary channel
    chn.primaryChannel = 0;
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
    chn.channel = CFG_CHANNEL_NONE;
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
    appCfgSetChannel(&chn);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fb90 	bl	8003f2c <appCfgSetChannel>

    vTaskDelay(1000);
 800080c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000810:	f00b ff94 	bl	800c73c <vTaskDelay>
    log_print("5 ----------------------\r\n");
 8000814:	4827      	ldr	r0, [pc, #156]	; (80008b4 <znp_init_coordinator+0x150>)
 8000816:	f7ff ff53 	bl	80006c0 <log_print>

    // start commissioning using network formation
    strt.commissioningMode = CFG_COMM_MODE_NWK_FORMATION;
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	2204      	movs	r2, #4
 8000820:	701a      	strb	r2, [r3, #0]
    appCfgStartCommissioning(&strt);
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fbb3 	bl	8003f92 <appCfgStartCommissioning>

    vTaskDelay(10000);
 800082c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000830:	f00b ff84 	bl	800c73c <vTaskDelay>
    log_print("6 ----------------------\r\n");
 8000834:	4820      	ldr	r0, [pc, #128]	; (80008b8 <znp_init_coordinator+0x154>)
 8000836:	f7ff ff43 	bl	80006c0 <log_print>

    if (enable_commissioning) {
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d027      	beq.n	8000892 <znp_init_coordinator+0x12e>
        // get device info
        utilGetDeviceInfo();
 8000842:	f004 fd3d 	bl	80052c0 <utilGetDeviceInfo>

        vTaskDelay(1000);
 8000846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084a:	f00b ff77 	bl	800c73c <vTaskDelay>
        log_print("7 ----------------------\r\n");
 800084e:	481b      	ldr	r0, [pc, #108]	; (80008bc <znp_init_coordinator+0x158>)
 8000850:	f7ff ff36 	bl	80006c0 <log_print>

        // Write ZCD_NV_LOGICAL_TYPE to 0 which means coordinator
        req.Id = 0x008F;
 8000854:	238f      	movs	r3, #143	; 0x8f
 8000856:	83bb      	strh	r3, [r7, #28]
        req.Offset = 0x00;
 8000858:	2300      	movs	r3, #0
 800085a:	77bb      	strb	r3, [r7, #30]
        req.Len = 0x01;
 800085c:	2301      	movs	r3, #1
 800085e:	77fb      	strb	r3, [r7, #31]
        req.Value[0] = 0x01;
 8000860:	2301      	movs	r3, #1
 8000862:	f887 3020 	strb.w	r3, [r7, #32]
        sysOsalNvWrite(&req);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4618      	mov	r0, r3
 800086c:	f004 f8d2 	bl	8004a14 <sysOsalNvWrite>

        vTaskDelay(1000);
 8000870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000874:	f00b ff62 	bl	800c73c <vTaskDelay>
        log_print("8 ----------------------\r\n");
 8000878:	4811      	ldr	r0, [pc, #68]	; (80008c0 <znp_init_coordinator+0x15c>)
 800087a:	f7ff ff21 	bl	80006c0 <log_print>

        // start commissioning using network steering
        strt.commissioningMode = CFG_COMM_MODE_NWK_STEERING;
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	2202      	movs	r2, #2
 8000884:	701a      	strb	r2, [r3, #0]
        appCfgStartCommissioning(&strt);
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4618      	mov	r0, r3
 800088c:	f003 fb81 	bl	8003f92 <appCfgStartCommissioning>
 8000890:	e001      	b.n	8000896 <znp_init_coordinator+0x132>
    } else {
        // get device info
        utilGetDeviceInfo();
 8000892:	f004 fd15 	bl	80052c0 <utilGetDeviceInfo>
    }

    //
    return 0;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	0800f510 	.word	0x0800f510
 80008a8:	0800f52c 	.word	0x0800f52c
 80008ac:	0800f548 	.word	0x0800f548
 80008b0:	0800f564 	.word	0x0800f564
 80008b4:	0800f580 	.word	0x0800f580
 80008b8:	0800f59c 	.word	0x0800f59c
 80008bc:	0800f5b8 	.word	0x0800f5b8
 80008c0:	0800f5d4 	.word	0x0800f5d4

080008c4 <register_clusters>:

void register_clusters(uint16_t addr) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(20000);
 80008ce:	f644 6020 	movw	r0, #20000	; 0x4e20
 80008d2:	f00b ff33 	bl	800c73c <vTaskDelay>

    // check registration
    if (!znp_if_dev_exists(addr)) {
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 fc19 	bl	8003110 <znp_if_dev_exists>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d103      	bne.n	80008ec <register_clusters+0x28>
        log_print("-> !!! Device not registered!\r\n");
 80008e4:	4840      	ldr	r0, [pc, #256]	; (80009e8 <register_clusters+0x124>)
 80008e6:	f7ff feeb 	bl	80006c0 <log_print>
 80008ea:	e079      	b.n	80009e0 <register_clusters+0x11c>
        return;
    }

    log_print("9 ----------------------\r\n");
 80008ec:	483f      	ldr	r0, [pc, #252]	; (80009ec <register_clusters+0x128>)
 80008ee:	f7ff fee7 	bl	80006c0 <log_print>

    while (1) {
        int ret = znp_cmd_dev_is_active(addr);
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 f8bc 	bl	8001a72 <znp_cmd_dev_is_active>
 80008fa:	6378      	str	r0, [r7, #52]	; 0x34
        log_print("znp_if_dev_is_active %d\r\n", ret);
 80008fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80008fe:	483c      	ldr	r0, [pc, #240]	; (80009f0 <register_clusters+0x12c>)
 8000900:	f7ff fede 	bl	80006c0 <log_print>
        if (ret == 0)
 8000904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <register_clusters+0x50>
            break;
        vTaskDelay(1000);
 800090a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090e:	f00b ff15 	bl	800c73c <vTaskDelay>
    while (1) {
 8000912:	e7ee      	b.n	80008f2 <register_clusters+0x2e>
            break;
 8000914:	bf00      	nop
    }
    log_print("10 ----------------------\r\n");
 8000916:	4837      	ldr	r0, [pc, #220]	; (80009f4 <register_clusters+0x130>)
 8000918:	f7ff fed2 	bl	80006c0 <log_print>

    log_print("znp_if_dev_refresh_info %d\r\n", znp_cmd_dev_refresh_info(addr));
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	4618      	mov	r0, r3
 8000920:	f001 f8d5 	bl	8001ace <znp_cmd_dev_refresh_info>
 8000924:	4603      	mov	r3, r0
 8000926:	4619      	mov	r1, r3
 8000928:	4833      	ldr	r0, [pc, #204]	; (80009f8 <register_clusters+0x134>)
 800092a:	f7ff fec9 	bl	80006c0 <log_print>
    vTaskDelay(1000);
 800092e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000932:	f00b ff03 	bl	800c73c <vTaskDelay>
    log_print("11 ----------------------\r\n");
 8000936:	4831      	ldr	r0, [pc, #196]	; (80009fc <register_clusters+0x138>)
 8000938:	f7ff fec2 	bl	80006c0 <log_print>

    log_print("znp_if_dev_register %d\r\n", znp_cmd_dev_register(addr));
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f8f5 	bl	8001b2e <znp_cmd_dev_register>
 8000944:	4603      	mov	r3, r0
 8000946:	4619      	mov	r1, r3
 8000948:	482d      	ldr	r0, [pc, #180]	; (8000a00 <register_clusters+0x13c>)
 800094a:	f7ff feb9 	bl	80006c0 <log_print>
    vTaskDelay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000952:	f00b fef3 	bl	800c73c <vTaskDelay>
    log_print("12 ----------------------\r\n");
 8000956:	482b      	ldr	r0, [pc, #172]	; (8000a04 <register_clusters+0x140>)
 8000958:	f7ff feb2 	bl	80006c0 <log_print>

    // read device name cluster
    zcl_cluster_record_t wr;

    log_print("znp_cmd_cluster_in_read %d\r\n", znp_cmd_cluster_in_read(addr, 0, 4, &wr));
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	88f8      	ldrh	r0, [r7, #6]
 8000962:	2204      	movs	r2, #4
 8000964:	2100      	movs	r1, #0
 8000966:	f001 f975 	bl	8001c54 <znp_cmd_cluster_in_read>
 800096a:	4603      	mov	r3, r0
 800096c:	4619      	mov	r1, r3
 800096e:	4826      	ldr	r0, [pc, #152]	; (8000a08 <register_clusters+0x144>)
 8000970:	f7ff fea6 	bl	80006c0 <log_print>
    log_print("Type: %d\r\n", wr.type);
 8000974:	7a3b      	ldrb	r3, [r7, #8]
 8000976:	4619      	mov	r1, r3
 8000978:	4824      	ldr	r0, [pc, #144]	; (8000a0c <register_clusters+0x148>)
 800097a:	f7ff fea1 	bl	80006c0 <log_print>
    log_print("Str: %s\r\n", wr.data_arr);
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	3308      	adds	r3, #8
 8000984:	4619      	mov	r1, r3
 8000986:	4822      	ldr	r0, [pc, #136]	; (8000a10 <register_clusters+0x14c>)
 8000988:	f7ff fe9a 	bl	80006c0 <log_print>

    // write thermostat to 19 degree
    wr.type = ZCL_SIGNED_16BITS;
 800098c:	2329      	movs	r3, #41	; 0x29
 800098e:	723b      	strb	r3, [r7, #8]
    wr.data_i16 = 1900;
 8000990:	f240 736c 	movw	r3, #1900	; 0x76c
 8000994:	823b      	strh	r3, [r7, #16]
    log_print("znp_cmd_cluster_in_write %d\r\n", znp_cmd_cluster_in_write(addr, 0x0201, 0x0012, &wr));
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	88f8      	ldrh	r0, [r7, #6]
 800099c:	2212      	movs	r2, #18
 800099e:	f240 2101 	movw	r1, #513	; 0x201
 80009a2:	f001 fd35 	bl	8002410 <znp_cmd_cluster_in_write>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4619      	mov	r1, r3
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <register_clusters+0x150>)
 80009ac:	f7ff fe88 	bl	80006c0 <log_print>

    // read thermostat value
    log_print("znp_cmd_cluster_in_read %d\r\n", znp_cmd_cluster_in_read(addr, 0x0201, 0x0012, &wr));
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	88f8      	ldrh	r0, [r7, #6]
 80009b6:	2212      	movs	r2, #18
 80009b8:	f240 2101 	movw	r1, #513	; 0x201
 80009bc:	f001 f94a 	bl	8001c54 <znp_cmd_cluster_in_read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4619      	mov	r1, r3
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <register_clusters+0x144>)
 80009c6:	f7ff fe7b 	bl	80006c0 <log_print>
    log_print("Type: %d\r\n", wr.type);
 80009ca:	7a3b      	ldrb	r3, [r7, #8]
 80009cc:	4619      	mov	r1, r3
 80009ce:	480f      	ldr	r0, [pc, #60]	; (8000a0c <register_clusters+0x148>)
 80009d0:	f7ff fe76 	bl	80006c0 <log_print>
    log_print("Data: %d\r\n", wr.data_i16);
 80009d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009d8:	4619      	mov	r1, r3
 80009da:	480f      	ldr	r0, [pc, #60]	; (8000a18 <register_clusters+0x154>)
 80009dc:	f7ff fe70 	bl	80006c0 <log_print>
}
 80009e0:	3738      	adds	r7, #56	; 0x38
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	0800f5f0 	.word	0x0800f5f0
 80009ec:	0800f610 	.word	0x0800f610
 80009f0:	0800f62c 	.word	0x0800f62c
 80009f4:	0800f648 	.word	0x0800f648
 80009f8:	0800f664 	.word	0x0800f664
 80009fc:	0800f684 	.word	0x0800f684
 8000a00:	0800f6a0 	.word	0x0800f6a0
 8000a04:	0800f6bc 	.word	0x0800f6bc
 8000a08:	0800f6d8 	.word	0x0800f6d8
 8000a0c:	0800f6f8 	.word	0x0800f6f8
 8000a10:	0800f704 	.word	0x0800f704
 8000a14:	0800f710 	.word	0x0800f710
 8000a18:	0800f730 	.word	0x0800f730

08000a1c <vAppTask>:

/////////////////////////////////////////////////
void vAppTask(void *pvParameters) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    log_print("System started\r\n");
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <vAppTask+0x40>)
 8000a26:	f7ff fe4b 	bl	80006c0 <log_print>

    // initiailze application interface
    znp_if_init();
 8000a2a:	f002 fad3 	bl	8002fd4 <znp_if_init>

    // Register callbacks
    znp_cb_register();
 8000a2e:	f000 ffbd 	bl	80019ac <znp_cb_register>

    // startup delay
    vTaskDelay(1000);
 8000a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a36:	f00b fe81 	bl	800c73c <vTaskDelay>

    // ping ok?
    if (sysVersion() == 0) {
 8000a3a:	f003 ff27 	bl	800488c <sysVersion>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d106      	bne.n	8000a52 <vAppTask+0x36>
        // initialize coordinator
        znp_init_coordinator(0);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fe8d 	bl	8000764 <znp_init_coordinator>

        // register cluster
        register_clusters(0x82bc);
 8000a4a:	f248 20bc 	movw	r0, #33468	; 0x82bc
 8000a4e:	f7ff ff39 	bl	80008c4 <register_clusters>
    }

    // endless loop, handle CC2530 packets
    while (1) {
        vTaskDelay(1000);
 8000a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a56:	f00b fe71 	bl	800c73c <vTaskDelay>
 8000a5a:	e7fa      	b.n	8000a52 <vAppTask+0x36>
 8000a5c:	0800f73c 	.word	0x0800f73c

08000a60 <vPollTask>:
    }
}

void vPollTask(void *pvParameters) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
    // endless loop, handle CC2530 packets
    while (1) {
        rpcWaitMqClientMsg(portMAX_DELAY);
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f007 fc1a 	bl	80082a4 <rpcWaitMqClientMsg>
 8000a70:	e7fa      	b.n	8000a68 <vPollTask+0x8>
	...

08000a74 <vComTask>:
    }
}

void vComTask(void *pvParameters) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	6078      	str	r0, [r7, #4]
    // init queues
    rpcInitMq();
 8000a7c:	f007 fc08 	bl	8008290 <rpcInitMq>

    // initialize serial port
    rpcOpen();
 8000a80:	f007 fbe8 	bl	8008254 <rpcOpen>

    // start poll task
    xTaskCreate(vPollTask, "POLL", 512, NULL, 5, NULL);
 8000a84:	2300      	movs	r3, #0
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	2305      	movs	r3, #5
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a92:	4905      	ldr	r1, [pc, #20]	; (8000aa8 <vComTask+0x34>)
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <vComTask+0x38>)
 8000a96:	f00b fd0c 	bl	800c4b2 <xTaskCreate>

    // loop
    while (1) {
        // keep procesing packets
        rpcProcess();
 8000a9a:	f007 fc49 	bl	8008330 <rpcProcess>

        // give other tasks time to run
        vTaskDelay(0);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f00b fe4c 	bl	800c73c <vTaskDelay>
        rpcProcess();
 8000aa4:	e7f9      	b.n	8000a9a <vComTask+0x26>
 8000aa6:	bf00      	nop
 8000aa8:	0800f750 	.word	0x0800f750
 8000aac:	08000a61 	.word	0x08000a61

08000ab0 <vApplicationStackOverflowHook>:
    }
}

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
    /* Run time stack overflow checking is performed if
    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
    called if a stack overflow is detected. */
    log_print("-> !!! Stack overflow in %s\r\n", pcTaskName);
 8000aba:	6839      	ldr	r1, [r7, #0]
 8000abc:	4801      	ldr	r0, [pc, #4]	; (8000ac4 <vApplicationStackOverflowHook+0x14>)
 8000abe:	f7ff fdff 	bl	80006c0 <log_print>
    while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <vApplicationStackOverflowHook+0x12>
 8000ac4:	0800f758 	.word	0x0800f758

08000ac8 <vApplicationMallocFailedHook>:
        ;
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    demo application. If heap_1.c or heap_2.c are used, then the size of the
    heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
    FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
    to query the size of free heap space that remains (although it does not
    provide information on how the remaining heap might be fragmented). */
    log_print("-> !!! Malloc failed\r\n");
 8000acc:	4801      	ldr	r0, [pc, #4]	; (8000ad4 <vApplicationMallocFailedHook+0xc>)
 8000ace:	f7ff fdf7 	bl	80006c0 <log_print>
    while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <vApplicationMallocFailedHook+0xa>
 8000ad4:	0800f778 	.word	0x0800f778

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ade:	f007 fef4 	bl	80088ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae2:	f000 f82b 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae6:	f7ff fda5 	bl	8000634 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000aea:	f000 fa31 	bl	8000f50 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000aee:	f000 fa63 	bl	8000fb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    log_init();
 8000af2:	f7ff fdcf 	bl	8000694 <log_init>

    xTaskCreate(vAppTask, "APP", 1500, NULL, 6, NULL);
 8000af6:	2300      	movs	r3, #0
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	2306      	movs	r3, #6
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2300      	movs	r3, #0
 8000b00:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b04:	4909      	ldr	r1, [pc, #36]	; (8000b2c <main+0x54>)
 8000b06:	480a      	ldr	r0, [pc, #40]	; (8000b30 <main+0x58>)
 8000b08:	f00b fcd3 	bl	800c4b2 <xTaskCreate>
    xTaskCreate(vComTask, "COM", 512, NULL, 5, NULL);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	2305      	movs	r3, #5
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2300      	movs	r3, #0
 8000b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1a:	4906      	ldr	r1, [pc, #24]	; (8000b34 <main+0x5c>)
 8000b1c:	4806      	ldr	r0, [pc, #24]	; (8000b38 <main+0x60>)
 8000b1e:	f00b fcc8 	bl	800c4b2 <xTaskCreate>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b22:	f7ff fd63 	bl	80005ec <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b26:	f00a fd55 	bl	800b5d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8000b2a:	e7fe      	b.n	8000b2a <main+0x52>
 8000b2c:	0800f790 	.word	0x0800f790
 8000b30:	08000a1d 	.word	0x08000a1d
 8000b34:	0800f794 	.word	0x0800f794
 8000b38:	08000a75 	.word	0x08000a75

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0ba      	sub	sp, #232	; 0xe8
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b46:	2244      	movs	r2, #68	; 0x44
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f00d f91c 	bl	800dd88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	228c      	movs	r2, #140	; 0x8c
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f00d f90e 	bl	800dd88 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7a:	2340      	movs	r3, #64	; 0x40
 8000b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b80:	2302      	movs	r3, #2
 8000b82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b86:	2302      	movs	r3, #2
 8000b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000b92:	2314      	movs	r3, #20
 8000b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f008 f9aa 	bl	8008f08 <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bba:	f000 f849 	bl	8000c50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bdc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000be0:	2104      	movs	r1, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f008 fdb6 	bl	8009754 <HAL_RCC_ClockConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bee:	f000 f82f 	bl	8000c50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 8000bf2:	2322      	movs	r3, #34	; 0x22
 8000bf4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f008 ffdf 	bl	8009bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c0c:	f000 f820 	bl	8000c50 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c14:	f008 f912 	bl	8008e3c <HAL_PWREx_ControlVoltageScaling>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000c1e:	f000 f817 	bl	8000c50 <Error_Handler>
  }
}
 8000c22:	bf00      	nop
 8000c24:	37e8      	adds	r7, #232	; 0xe8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d101      	bne.n	8000c42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3e:	f007 fe5d 	bl	80088fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40012c00 	.word	0x40012c00

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_MspInit+0x4c>)
 8000c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_MspInit+0x4c>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6613      	str	r3, [r2, #96]	; 0x60
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_MspInit+0x4c>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_MspInit+0x4c>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_MspInit+0x4c>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	210f      	movs	r1, #15
 8000c9a:	f06f 0001 	mvn.w	r0, #1
 8000c9e:	f007 ff03 	bl	8008aa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	2019      	movs	r0, #25
 8000cc6:	f007 feef 	bl	8008aa8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cca:	2019      	movs	r0, #25
 8000ccc:	f007 ff08 	bl	8008ae0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <HAL_InitTick+0x9c>)
 8000cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd4:	4a1d      	ldr	r2, [pc, #116]	; (8000d4c <HAL_InitTick+0x9c>)
 8000cd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cda:	6613      	str	r3, [r2, #96]	; 0x60
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <HAL_InitTick+0x9c>)
 8000cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce8:	f107 0210 	add.w	r2, r7, #16
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f008 fed4 	bl	8009aa0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cf8:	f008 febc 	bl	8009a74 <HAL_RCC_GetPCLK2Freq>
 8000cfc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d00:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <HAL_InitTick+0xa0>)
 8000d02:	fba2 2303 	umull	r2, r3, r2, r3
 8000d06:	0c9b      	lsrs	r3, r3, #18
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d2e:	f009 fc13 	bl	800a558 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d104      	bne.n	8000d42 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d3a:	f009 fc43 	bl	800a5c4 <HAL_TIM_Base_Start_IT>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3730      	adds	r7, #48	; 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	431bde83 	.word	0x431bde83
 8000d54:	20004f94 	.word	0x20004f94
 8000d58:	40012c00 	.word	0x40012c00

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d96:	f009 fc3f 	bl	800a618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20004f94 	.word	0x20004f94

08000da4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */
#endif
  rpcTransportISR();
 8000da8:	f007 f9a6 	bl	80080f8 <rpcTransportISR>
  /* USER CODE END LPUART1_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
	}

return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e009      	b.n	8000e10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <_write+0x12>
	}
	return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_isatty>:

int _isatty(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	return 1;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_sbrk+0x50>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x16>
		heap_end = &end;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <_sbrk+0x50>)
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <_sbrk+0x54>)
 8000ea0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <_sbrk+0x50>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <_sbrk+0x50>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	466a      	mov	r2, sp
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d907      	bls.n	8000ec6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000eb6:	f00c ff2f 	bl	800dd18 <__errno>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	e006      	b.n	8000ed4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <_sbrk+0x50>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a03      	ldr	r2, [pc, #12]	; (8000edc <_sbrk+0x50>)
 8000ed0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200004dc 	.word	0x200004dc
 8000ee0:	200051f0 	.word	0x200051f0

08000ee4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <SystemInit+0x64>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <SystemInit+0x64>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <SystemInit+0x68>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <SystemInit+0x68>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <SystemInit+0x68>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <SystemInit+0x68>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <SystemInit+0x68>)
 8000f10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <SystemInit+0x68>)
 8000f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <SystemInit+0x68>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <SystemInit+0x68>)
 8000f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <SystemInit+0x68>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SystemInit+0x64>)
 8000f36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	40021000 	.word	0x40021000

08000f50 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <MX_LPUART1_UART_Init+0x64>)
 8000f58:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f88:	2230      	movs	r2, #48	; 0x30
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_LPUART1_UART_Init+0x60>)
 8000f9e:	f009 fd3b 	bl	800aa18 <HAL_UART_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000fa8:	f7ff fe52 	bl	8000c50 <Error_Handler>
  }

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20004fd4 	.word	0x20004fd4
 8000fb4:	40008000 	.word	0x40008000

08000fb8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <MX_USART2_UART_Init+0x6c>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000ff6:	2230      	movs	r2, #48	; 0x30
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8000ffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001000:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <MX_USART2_UART_Init+0x68>)
 8001004:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001008:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USART2_UART_Init+0x68>)
 800100c:	f009 fd04 	bl	800aa18 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 8001016:	f7ff fe1b 	bl	8000c50 <Error_Handler>
  }

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20005054 	.word	0x20005054
 8001024:	40004400 	.word	0x40004400

08001028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a42      	ldr	r2, [pc, #264]	; (8001150 <HAL_UART_MspInit+0x128>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d133      	bne.n	80010b2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800104a:	4b42      	ldr	r3, [pc, #264]	; (8001154 <HAL_UART_MspInit+0x12c>)
 800104c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800104e:	4a41      	ldr	r2, [pc, #260]	; (8001154 <HAL_UART_MspInit+0x12c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001056:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <HAL_UART_MspInit+0x12c>)
 8001058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <HAL_UART_MspInit+0x12c>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a3b      	ldr	r2, [pc, #236]	; (8001154 <HAL_UART_MspInit+0x12c>)
 8001068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <HAL_UART_MspInit+0x12c>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800107a:	f007 ff35 	bl	8008ee8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800107e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001090:	2308      	movs	r3, #8
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	482f      	ldr	r0, [pc, #188]	; (8001158 <HAL_UART_MspInit+0x130>)
 800109c:	f007 fd2e 	bl	8008afc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2105      	movs	r1, #5
 80010a4:	2046      	movs	r0, #70	; 0x46
 80010a6:	f007 fcff 	bl	8008aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80010aa:	2046      	movs	r0, #70	; 0x46
 80010ac:	f007 fd18 	bl	8008ae0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010b0:	e049      	b.n	8001146 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART2)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a29      	ldr	r2, [pc, #164]	; (800115c <HAL_UART_MspInit+0x134>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d144      	bne.n	8001146 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_UART_MspInit+0x12c>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	4a24      	ldr	r2, [pc, #144]	; (8001154 <HAL_UART_MspInit+0x12c>)
 80010c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c6:	6593      	str	r3, [r2, #88]	; 0x58
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <HAL_UART_MspInit+0x12c>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_UART_MspInit+0x12c>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_UART_MspInit+0x12c>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_UART_MspInit+0x12c>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_UART_MspInit+0x12c>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a18      	ldr	r2, [pc, #96]	; (8001154 <HAL_UART_MspInit+0x12c>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_UART_MspInit+0x12c>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001104:	2340      	movs	r3, #64	; 0x40
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001114:	2307      	movs	r3, #7
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4810      	ldr	r0, [pc, #64]	; (8001160 <HAL_UART_MspInit+0x138>)
 8001120:	f007 fcec 	bl	8008afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001124:	2304      	movs	r3, #4
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001134:	2307      	movs	r3, #7
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f007 fcdb 	bl	8008afc <HAL_GPIO_Init>
}
 8001146:	bf00      	nop
 8001148:	3730      	adds	r7, #48	; 0x30
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40008000 	.word	0x40008000
 8001154:	40021000 	.word	0x40021000
 8001158:	48001800 	.word	0x48001800
 800115c:	40004400 	.word	0x40004400
 8001160:	48000c00 	.word	0x48000c00

08001164 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001168:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800116a:	e003      	b.n	8001174 <LoopCopyDataInit>

0800116c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800116e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001170:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001172:	3104      	adds	r1, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001178:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800117a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800117c:	d3f6      	bcc.n	800116c <CopyDataInit>
	ldr	r2, =_sbss
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8001180:	e002      	b.n	8001188 <LoopFillZerobss>

08001182 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001182:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001184:	f842 3b04 	str.w	r3, [r2], #4

08001188 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <LoopForever+0x16>)
	cmp	r2, r3
 800118a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800118c:	d3f9      	bcc.n	8001182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800118e:	f7ff fea9 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001192:	f00c fdc7 	bl	800dd24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001196:	f7ff fc9f 	bl	8000ad8 <main>

0800119a <LoopForever>:

LoopForever:
    b LoopForever
 800119a:	e7fe      	b.n	800119a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800119c:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 80011a0:	08010c20 	.word	0x08010c20
	ldr	r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011a8:	2000015c 	.word	0x2000015c
	ldr	r2, =_sbss
 80011ac:	2000015c 	.word	0x2000015c
	ldr	r3, = _ebss
 80011b0:	200051ec 	.word	0x200051ec

080011b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_2_IRQHandler>
	...

080011b8 <mtSysResetIndCb>:
#include <stddef.h>

/********************************************************************
 * START OF SYS CALL BACK FUNCTIONS
 */
static uint8_t mtSysResetIndCb(ResetIndFormat_t *msg) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    log_print("ZNP Version: %d.%d.%d\n", msg->MajorRel, msg->MinorRel, msg->HwRev);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	78db      	ldrb	r3, [r3, #3]
 80011c4:	4619      	mov	r1, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	791b      	ldrb	r3, [r3, #4]
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	795b      	ldrb	r3, [r3, #5]
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <mtSysResetIndCb+0x28>)
 80011d2:	f7ff fa75 	bl	80006c0 <log_print>
    return 0;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	0800f798 	.word	0x0800f798

080011e4 <mtVersionIndCb>:

static uint8_t mtVersionIndCb(VersionSrspFormat_t *msg) {
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	6078      	str	r0, [r7, #4]
    log_print("Version: %d %d %d %d %d %d\n", msg->MaintRel, msg->MajorRel, msg->MinorRel, msg->Product,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	791b      	ldrb	r3, [r3, #4]
 80011f0:	4619      	mov	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	4618      	mov	r0, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	78db      	ldrb	r3, [r3, #3]
 80011fc:	461c      	mov	r4, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	461a      	mov	r2, r3
              msg->TransportRev);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	781b      	ldrb	r3, [r3, #0]
    log_print("Version: %d %d %d %d %d %d\n", msg->MaintRel, msg->MajorRel, msg->MinorRel, msg->Product,
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	9200      	str	r2, [sp, #0]
 800120c:	4623      	mov	r3, r4
 800120e:	4602      	mov	r2, r0
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <mtVersionIndCb+0x3c>)
 8001212:	f7ff fa55 	bl	80006c0 <log_print>
    return 0;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	0800f7b0 	.word	0x0800f7b0

08001224 <mtZdoStateChangeIndCb>:
 *
 * @param  uint8 zdoState
 *
 * @return SUCCESS or FAILURE
 */
static uint8_t mtZdoStateChangeIndCb(uint8_t newDevState) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
    switch (newDevState) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b0a      	cmp	r3, #10
 8001232:	d860      	bhi.n	80012f6 <mtZdoStateChangeIndCb+0xd2>
 8001234:	a201      	add	r2, pc, #4	; (adr r2, 800123c <mtZdoStateChangeIndCb+0x18>)
 8001236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123a:	bf00      	nop
 800123c:	08001269 	.word	0x08001269
 8001240:	08001271 	.word	0x08001271
 8001244:	08001279 	.word	0x08001279
 8001248:	08001287 	.word	0x08001287
 800124c:	08001295 	.word	0x08001295
 8001250:	080012a3 	.word	0x080012a3
 8001254:	080012b1 	.word	0x080012b1
 8001258:	080012bf 	.word	0x080012bf
 800125c:	080012cd 	.word	0x080012cd
 8001260:	080012db 	.word	0x080012db
 8001264:	080012e9 	.word	0x080012e9
        case DEV_HOLD:
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Initialized - not started automatically\n");
 8001268:	4827      	ldr	r0, [pc, #156]	; (8001308 <mtZdoStateChangeIndCb+0xe4>)
 800126a:	f7ff fa29 	bl	80006c0 <log_print>
            break;
 800126e:	e046      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        case DEV_INIT:
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Initialized - not connected to anything\n");
 8001270:	4826      	ldr	r0, [pc, #152]	; (800130c <mtZdoStateChangeIndCb+0xe8>)
 8001272:	f7ff fa25 	bl	80006c0 <log_print>
            break;
 8001276:	e042      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        case DEV_NWK_DISC:
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Discovering PAN's to join\n");
 8001278:	4825      	ldr	r0, [pc, #148]	; (8001310 <mtZdoStateChangeIndCb+0xec>)
 800127a:	f7ff fa21 	bl	80006c0 <log_print>
            log_print("Network Discovering\n");
 800127e:	4825      	ldr	r0, [pc, #148]	; (8001314 <mtZdoStateChangeIndCb+0xf0>)
 8001280:	f7ff fa1e 	bl	80006c0 <log_print>
            break;
 8001284:	e03b      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        case DEV_NWK_JOINING:
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Joining a PAN\n");
 8001286:	4824      	ldr	r0, [pc, #144]	; (8001318 <mtZdoStateChangeIndCb+0xf4>)
 8001288:	f7ff fa1a 	bl	80006c0 <log_print>
            log_print("Network Joining\n");
 800128c:	4823      	ldr	r0, [pc, #140]	; (800131c <mtZdoStateChangeIndCb+0xf8>)
 800128e:	f7ff fa17 	bl	80006c0 <log_print>
            break;
 8001292:	e034      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        case DEV_NWK_REJOIN:
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: ReJoining a PAN, only for end devices\n");
 8001294:	4822      	ldr	r0, [pc, #136]	; (8001320 <mtZdoStateChangeIndCb+0xfc>)
 8001296:	f7ff fa13 	bl	80006c0 <log_print>
            log_print("Network Rejoining\n");
 800129a:	4822      	ldr	r0, [pc, #136]	; (8001324 <mtZdoStateChangeIndCb+0x100>)
 800129c:	f7ff fa10 	bl	80006c0 <log_print>
            break;
 80012a0:	e02d      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        case DEV_END_DEVICE_UNAUTH:
            log_print("Network Authenticating\n");
 80012a2:	4821      	ldr	r0, [pc, #132]	; (8001328 <mtZdoStateChangeIndCb+0x104>)
 80012a4:	f7ff fa0c 	bl	80006c0 <log_print>
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Joined but not yet authenticated by trust center\n");
 80012a8:	4820      	ldr	r0, [pc, #128]	; (800132c <mtZdoStateChangeIndCb+0x108>)
 80012aa:	f7ff fa09 	bl	80006c0 <log_print>
            break;
 80012ae:	e026      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        case DEV_END_DEVICE:
            log_print("Network Joined\n");
 80012b0:	481f      	ldr	r0, [pc, #124]	; (8001330 <mtZdoStateChangeIndCb+0x10c>)
 80012b2:	f7ff fa05 	bl	80006c0 <log_print>
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Started as device after authentication\n");
 80012b6:	481f      	ldr	r0, [pc, #124]	; (8001334 <mtZdoStateChangeIndCb+0x110>)
 80012b8:	f7ff fa02 	bl	80006c0 <log_print>
            break;
 80012bc:	e01f      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        case DEV_ROUTER:
            log_print("Network Joined\n");
 80012be:	481c      	ldr	r0, [pc, #112]	; (8001330 <mtZdoStateChangeIndCb+0x10c>)
 80012c0:	f7ff f9fe 	bl	80006c0 <log_print>
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Device joined, authenticated and is a router\n");
 80012c4:	481c      	ldr	r0, [pc, #112]	; (8001338 <mtZdoStateChangeIndCb+0x114>)
 80012c6:	f7ff f9fb 	bl	80006c0 <log_print>
            break;
 80012ca:	e018      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        case DEV_COORD_STARTING:
            log_print("Network Starting\n");
 80012cc:	481b      	ldr	r0, [pc, #108]	; (800133c <mtZdoStateChangeIndCb+0x118>)
 80012ce:	f7ff f9f7 	bl	80006c0 <log_print>
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Starting as Zigbee Coordinator...\n");
 80012d2:	481b      	ldr	r0, [pc, #108]	; (8001340 <mtZdoStateChangeIndCb+0x11c>)
 80012d4:	f7ff f9f4 	bl	80006c0 <log_print>
            break;
 80012d8:	e011      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        case DEV_ZB_COORD:
            log_print("Network Started\n");
 80012da:	481a      	ldr	r0, [pc, #104]	; (8001344 <mtZdoStateChangeIndCb+0x120>)
 80012dc:	f7ff f9f0 	bl	80006c0 <log_print>
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Started as Zigbee Coordinator\n");
 80012e0:	4819      	ldr	r0, [pc, #100]	; (8001348 <mtZdoStateChangeIndCb+0x124>)
 80012e2:	f7ff f9ed 	bl	80006c0 <log_print>
            break;
 80012e6:	e00a      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        case DEV_NWK_ORPHAN:
            log_print("Network Orphaned\n");
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <mtZdoStateChangeIndCb+0x128>)
 80012ea:	f7ff f9e9 	bl	80006c0 <log_print>
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: Device has lost information about its parent\n");
 80012ee:	4818      	ldr	r0, [pc, #96]	; (8001350 <mtZdoStateChangeIndCb+0x12c>)
 80012f0:	f7ff f9e6 	bl	80006c0 <log_print>
            break;
 80012f4:	e003      	b.n	80012fe <mtZdoStateChangeIndCb+0xda>
        default:
            dbg_print(PRINT_LEVEL_INFO, "mtZdoStateChangeIndCb: unknown state\n");
 80012f6:	4817      	ldr	r0, [pc, #92]	; (8001354 <mtZdoStateChangeIndCb+0x130>)
 80012f8:	f7ff f9e2 	bl	80006c0 <log_print>
            break;
 80012fc:	bf00      	nop
    }

    // devState = (devStates_t) newDevState;

    return SUCCESS;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	0800f7cc 	.word	0x0800f7cc
 800130c:	0800f80c 	.word	0x0800f80c
 8001310:	0800f84c 	.word	0x0800f84c
 8001314:	0800f880 	.word	0x0800f880
 8001318:	0800f898 	.word	0x0800f898
 800131c:	0800f8c0 	.word	0x0800f8c0
 8001320:	0800f8d4 	.word	0x0800f8d4
 8001324:	0800f914 	.word	0x0800f914
 8001328:	0800f928 	.word	0x0800f928
 800132c:	0800f940 	.word	0x0800f940
 8001330:	0800f98c 	.word	0x0800f98c
 8001334:	0800f99c 	.word	0x0800f99c
 8001338:	0800f9dc 	.word	0x0800f9dc
 800133c:	0800fa24 	.word	0x0800fa24
 8001340:	0800fa38 	.word	0x0800fa38
 8001344:	0800fa74 	.word	0x0800fa74
 8001348:	0800fa88 	.word	0x0800fa88
 800134c:	0800fac0 	.word	0x0800fac0
 8001350:	0800fad4 	.word	0x0800fad4
 8001354:	0800fb1c 	.word	0x0800fb1c

08001358 <mtZdoSimpleDescRspCb>:

static uint8_t mtZdoSimpleDescRspCb(SimpleDescRspFormat_t *msg) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b092      	sub	sp, #72	; 0x48
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    // send event
    event_result_t res;
    res.type = EVT_RSP_SIMPLE_DESC;
 8001360:	2302      	movs	r3, #2
 8001362:	733b      	strb	r3, [r7, #12]
    res.adr = msg->SrcAddr;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	81fb      	strh	r3, [r7, #14]
    res.result = msg->Status;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	789b      	ldrb	r3, [r3, #2]
 800136e:	743b      	strb	r3, [r7, #16]
    znp_if_evt_send(&res);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fe3b 	bl	8002ff0 <znp_if_evt_send>

    // print info
    if (msg->Status == MT_RPC_SUCCESS) {
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 80b2 	bne.w	80014e8 <mtZdoSimpleDescRspCb+0x190>
        log_print("SrcAddr: %04x\n", msg->SrcAddr);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	485d      	ldr	r0, [pc, #372]	; (8001500 <mtZdoSimpleDescRspCb+0x1a8>)
 800138c:	f7ff f998 	bl	80006c0 <log_print>
        log_print("NwkAddr: %04x\n", msg->NwkAddr);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	4619      	mov	r1, r3
 8001396:	485b      	ldr	r0, [pc, #364]	; (8001504 <mtZdoSimpleDescRspCb+0x1ac>)
 8001398:	f7ff f992 	bl	80006c0 <log_print>
        log_print("\tEndpoint: 0x%02X\n", msg->Endpoint);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	79db      	ldrb	r3, [r3, #7]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4859      	ldr	r0, [pc, #356]	; (8001508 <mtZdoSimpleDescRspCb+0x1b0>)
 80013a4:	f7ff f98c 	bl	80006c0 <log_print>
        log_print("\tProfileID: 0x%04X\n", msg->ProfileID);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	891b      	ldrh	r3, [r3, #8]
 80013ac:	4619      	mov	r1, r3
 80013ae:	4857      	ldr	r0, [pc, #348]	; (800150c <mtZdoSimpleDescRspCb+0x1b4>)
 80013b0:	f7ff f986 	bl	80006c0 <log_print>
        log_print("\tDeviceID: 0x%04X\n", msg->DeviceID);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	895b      	ldrh	r3, [r3, #10]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4855      	ldr	r0, [pc, #340]	; (8001510 <mtZdoSimpleDescRspCb+0x1b8>)
 80013bc:	f7ff f980 	bl	80006c0 <log_print>
        log_print("\tDeviceVersion: 0x%02X\n", msg->DeviceVersion);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7b1b      	ldrb	r3, [r3, #12]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4853      	ldr	r0, [pc, #332]	; (8001514 <mtZdoSimpleDescRspCb+0x1bc>)
 80013c8:	f7ff f97a 	bl	80006c0 <log_print>
        log_print("\tNumInClusters: %d\n", msg->NumInClusters);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7b5b      	ldrb	r3, [r3, #13]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4851      	ldr	r0, [pc, #324]	; (8001518 <mtZdoSimpleDescRspCb+0x1c0>)
 80013d4:	f7ff f974 	bl	80006c0 <log_print>
        for (uint32_t i = 0; i < msg->NumInClusters; i++) {
 80013d8:	2300      	movs	r3, #0
 80013da:	647b      	str	r3, [r7, #68]	; 0x44
 80013dc:	e00d      	b.n	80013fa <mtZdoSimpleDescRspCb+0xa2>
            log_print("\t\tInClusterList[%d]: 0x%04X\n", i, msg->InClusterList[i]);
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e2:	3304      	adds	r3, #4
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	88db      	ldrh	r3, [r3, #6]
 80013ea:	461a      	mov	r2, r3
 80013ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80013ee:	484b      	ldr	r0, [pc, #300]	; (800151c <mtZdoSimpleDescRspCb+0x1c4>)
 80013f0:	f7ff f966 	bl	80006c0 <log_print>
        for (uint32_t i = 0; i < msg->NumInClusters; i++) {
 80013f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f6:	3301      	adds	r3, #1
 80013f8:	647b      	str	r3, [r7, #68]	; 0x44
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7b5b      	ldrb	r3, [r3, #13]
 80013fe:	461a      	mov	r2, r3
 8001400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001402:	4293      	cmp	r3, r2
 8001404:	d3eb      	bcc.n	80013de <mtZdoSimpleDescRspCb+0x86>
        }
        log_print("\tNumOutClusters: %d\n", msg->NumOutClusters);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800140c:	4619      	mov	r1, r3
 800140e:	4844      	ldr	r0, [pc, #272]	; (8001520 <mtZdoSimpleDescRspCb+0x1c8>)
 8001410:	f7ff f956 	bl	80006c0 <log_print>
        for (uint32_t i = 0; i < msg->NumOutClusters; i++) {
 8001414:	2300      	movs	r3, #0
 8001416:	643b      	str	r3, [r7, #64]	; 0x40
 8001418:	e00c      	b.n	8001434 <mtZdoSimpleDescRspCb+0xdc>
            log_print("\t\tOutClusterList[%d]: 0x%04X\n", i, msg->OutClusterList[i]);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800141e:	3218      	adds	r2, #24
 8001420:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001424:	461a      	mov	r2, r3
 8001426:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001428:	483e      	ldr	r0, [pc, #248]	; (8001524 <mtZdoSimpleDescRspCb+0x1cc>)
 800142a:	f7ff f949 	bl	80006c0 <log_print>
        for (uint32_t i = 0; i < msg->NumOutClusters; i++) {
 800142e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001430:	3301      	adds	r3, #1
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800143a:	461a      	mov	r2, r3
 800143c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800143e:	4293      	cmp	r3, r2
 8001440:	d3eb      	bcc.n	800141a <mtZdoSimpleDescRspCb+0xc2>
        }

        // copy all data to device to register it
        znp_device_t *dev = znp_if_dev_get(msg->SrcAddr);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fe30 	bl	80030ac <znp_if_dev_get>
 800144c:	6378      	str	r0, [r7, #52]	; 0x34
        dev->profile_id = msg->ProfileID;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	891a      	ldrh	r2, [r3, #8]
 8001452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001454:	809a      	strh	r2, [r3, #4]
        dev->device_id = msg->DeviceID;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	895a      	ldrh	r2, [r3, #10]
 800145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145c:	80da      	strh	r2, [r3, #6]
        dev->clstr_in_cnt = MIN(msg->NumInClusters, CLSTR_LIST_MAX);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7b5b      	ldrb	r3, [r3, #13]
 8001462:	2b10      	cmp	r3, #16
 8001464:	bf28      	it	cs
 8001466:	2310      	movcs	r3, #16
 8001468:	b2da      	uxtb	r2, r3
 800146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146c:	721a      	strb	r2, [r3, #8]
        for (uint32_t i = 0; i < msg->NumInClusters; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001472:	e00f      	b.n	8001494 <mtZdoSimpleDescRspCb+0x13c>
            dev->clstr_in_list[i] = msg->InClusterList[i];
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001478:	3304      	adds	r3, #4
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	88d9      	ldrh	r1, [r3, #6]
 8001480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001484:	3304      	adds	r3, #4
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	460a      	mov	r2, r1
 800148c:	805a      	strh	r2, [r3, #2]
        for (uint32_t i = 0; i < msg->NumInClusters; i++) {
 800148e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001490:	3301      	adds	r3, #1
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7b5b      	ldrb	r3, [r3, #13]
 8001498:	461a      	mov	r2, r3
 800149a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800149c:	4293      	cmp	r3, r2
 800149e:	d3e9      	bcc.n	8001474 <mtZdoSimpleDescRspCb+0x11c>
        }
        dev->clstr_out_cnt = MIN(msg->NumOutClusters, CLSTR_LIST_MAX);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80014a6:	2b10      	cmp	r3, #16
 80014a8:	bf28      	it	cs
 80014aa:	2310      	movcs	r3, #16
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        for (uint32_t i = 0; i < msg->NumOutClusters; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80014b8:	e00e      	b.n	80014d8 <mtZdoSimpleDescRspCb+0x180>
            dev->clstr_out_list[i] = msg->OutClusterList[i];
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014be:	3218      	adds	r2, #24
 80014c0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80014c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c8:	3314      	adds	r3, #20
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	460a      	mov	r2, r1
 80014d0:	809a      	strh	r2, [r3, #4]
        for (uint32_t i = 0; i < msg->NumOutClusters; i++) {
 80014d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d4:	3301      	adds	r3, #1
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80014de:	461a      	mov	r2, r3
 80014e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d3e9      	bcc.n	80014ba <mtZdoSimpleDescRspCb+0x162>
 80014e6:	e005      	b.n	80014f4 <mtZdoSimpleDescRspCb+0x19c>
        }
    } else {
        log_print("SimpleDescRsp Status: FAIL 0x%02X\n", msg->Status);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	789b      	ldrb	r3, [r3, #2]
 80014ec:	4619      	mov	r1, r3
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <mtZdoSimpleDescRspCb+0x1d0>)
 80014f0:	f7ff f8e6 	bl	80006c0 <log_print>
    }

    return msg->Status;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	789b      	ldrb	r3, [r3, #2]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3748      	adds	r7, #72	; 0x48
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	0800fb44 	.word	0x0800fb44
 8001504:	0800fb54 	.word	0x0800fb54
 8001508:	0800fb64 	.word	0x0800fb64
 800150c:	0800fb78 	.word	0x0800fb78
 8001510:	0800fb8c 	.word	0x0800fb8c
 8001514:	0800fba0 	.word	0x0800fba0
 8001518:	0800fbb8 	.word	0x0800fbb8
 800151c:	0800fbcc 	.word	0x0800fbcc
 8001520:	0800fbec 	.word	0x0800fbec
 8001524:	0800fc04 	.word	0x0800fc04
 8001528:	0800fc24 	.word	0x0800fc24

0800152c <mtZdoMgmtLqiRspCb>:

static uint8_t mtZdoMgmtLqiRspCb(MgmtLqiRspFormat_t *msg) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
     else {
     log_print("MgmtLqiRsp Status: FAIL 0x%02X\n", msg->Status);
     }

     return msg->Status;*/
    return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <mtZdoActiveEpRspCb>:

static uint8_t mtZdoActiveEpRspCb(ActiveEpRspFormat_t *msg) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	; 0x38
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    // send event
    event_result_t res;
    res.type = EVT_RSP_IS_ACTIVE;
 800154c:	2301      	movs	r3, #1
 800154e:	733b      	strb	r3, [r7, #12]
    res.adr = msg->SrcAddr;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	81fb      	strh	r3, [r7, #14]
    res.result = msg->Status;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	789b      	ldrb	r3, [r3, #2]
 800155a:	743b      	strb	r3, [r7, #16]
    znp_if_evt_send(&res);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4618      	mov	r0, r3
 8001562:	f001 fd45 	bl	8002ff0 <znp_if_evt_send>

    // add device
    znp_if_dev_add(msg->SrcAddr);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f001 fde4 	bl	8003138 <znp_if_dev_add>

    // print command info
    log_print("NwkAddr: 0x%04X\n", msg->NwkAddr);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	889b      	ldrh	r3, [r3, #4]
 8001574:	4619      	mov	r1, r3
 8001576:	4819      	ldr	r0, [pc, #100]	; (80015dc <mtZdoActiveEpRspCb+0x98>)
 8001578:	f7ff f8a2 	bl	80006c0 <log_print>
    if (msg->Status == MT_RPC_SUCCESS) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	789b      	ldrb	r3, [r3, #2]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d11e      	bne.n	80015c2 <mtZdoActiveEpRspCb+0x7e>
        log_print("Number of Endpoints: %d\nActive Endpoints: ", msg->ActiveEPCount);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	799b      	ldrb	r3, [r3, #6]
 8001588:	4619      	mov	r1, r3
 800158a:	4815      	ldr	r0, [pc, #84]	; (80015e0 <mtZdoActiveEpRspCb+0x9c>)
 800158c:	f7ff f898 	bl	80006c0 <log_print>
        for (uint32_t i = 0; i < msg->ActiveEPCount; i++) {
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
 8001594:	e00b      	b.n	80015ae <mtZdoActiveEpRspCb+0x6a>
            log_print("0x%02X\t", msg->ActiveEPList[i]);
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159a:	4413      	add	r3, r2
 800159c:	3307      	adds	r3, #7
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4810      	ldr	r0, [pc, #64]	; (80015e4 <mtZdoActiveEpRspCb+0xa0>)
 80015a4:	f7ff f88c 	bl	80006c0 <log_print>
        for (uint32_t i = 0; i < msg->ActiveEPCount; i++) {
 80015a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015aa:	3301      	adds	r3, #1
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	799b      	ldrb	r3, [r3, #6]
 80015b2:	461a      	mov	r2, r3
 80015b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d3ed      	bcc.n	8001596 <mtZdoActiveEpRspCb+0x52>
        }
        log_print("\n");
 80015ba:	480b      	ldr	r0, [pc, #44]	; (80015e8 <mtZdoActiveEpRspCb+0xa4>)
 80015bc:	f7ff f880 	bl	80006c0 <log_print>
 80015c0:	e005      	b.n	80015ce <mtZdoActiveEpRspCb+0x8a>
    } else {
        log_print("ActiveEpRsp Status: FAIL 0x%02X\n", msg->Status);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	789b      	ldrb	r3, [r3, #2]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <mtZdoActiveEpRspCb+0xa8>)
 80015ca:	f7ff f879 	bl	80006c0 <log_print>
    }

    // return status
    return msg->Status;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	789b      	ldrb	r3, [r3, #2]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3738      	adds	r7, #56	; 0x38
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	0800fc48 	.word	0x0800fc48
 80015e0:	0800fc5c 	.word	0x0800fc5c
 80015e4:	0800fc88 	.word	0x0800fc88
 80015e8:	0800fc90 	.word	0x0800fc90
 80015ec:	0800fc94 	.word	0x0800fc94

080015f0 <mtZdoEndDeviceAnnceIndCb>:

static uint8_t mtZdoEndDeviceAnnceIndCb(EndDeviceAnnceIndFormat_t *msg) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    // new device
    log_print("New device joined network:\n");
 80015f8:	4823      	ldr	r0, [pc, #140]	; (8001688 <mtZdoEndDeviceAnnceIndCb+0x98>)
 80015fa:	f7ff f861 	bl	80006c0 <log_print>
    log_print("SrcAddr: %04x\n", msg->SrcAddr);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	4619      	mov	r1, r3
 8001604:	4821      	ldr	r0, [pc, #132]	; (800168c <mtZdoEndDeviceAnnceIndCb+0x9c>)
 8001606:	f7ff f85b 	bl	80006c0 <log_print>
    log_print("NwkAddr: %04x\n", msg->NwkAddr);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	885b      	ldrh	r3, [r3, #2]
 800160e:	4619      	mov	r1, r3
 8001610:	481f      	ldr	r0, [pc, #124]	; (8001690 <mtZdoEndDeviceAnnceIndCb+0xa0>)
 8001612:	f7ff f855 	bl	80006c0 <log_print>
    uint32_t top = msg->IEEEAddr >> 32;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	000a      	movs	r2, r1
 8001626:	2300      	movs	r3, #0
 8001628:	4613      	mov	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
    uint32_t bot = msg->IEEEAddr & 0xffffffff;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001632:	4613      	mov	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
    log_print("IEEEAddr: %08x%08x\r\n", top, bot);
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	6979      	ldr	r1, [r7, #20]
 800163a:	4816      	ldr	r0, [pc, #88]	; (8001694 <mtZdoEndDeviceAnnceIndCb+0xa4>)
 800163c:	f7ff f840 	bl	80006c0 <log_print>
    log_print("Capabilities: %02x\n", msg->Capabilities);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7c1b      	ldrb	r3, [r3, #16]
 8001644:	4619      	mov	r1, r3
 8001646:	4814      	ldr	r0, [pc, #80]	; (8001698 <mtZdoEndDeviceAnnceIndCb+0xa8>)
 8001648:	f7ff f83a 	bl	80006c0 <log_print>

    // register device
    znp_if_dev_add(msg->SrcAddr);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f001 fd71 	bl	8003138 <znp_if_dev_add>
    znp_if_dev_set_ieee(msg->SrcAddr, msg->IEEEAddr);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	8819      	ldrh	r1, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001660:	4608      	mov	r0, r1
 8001662:	f001 fda1 	bl	80031a8 <znp_if_dev_set_ieee>

    // check if the endpoint is active
    ActiveEpReqFormat_t actReq;
    actReq.DstAddr = msg->SrcAddr;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	81bb      	strh	r3, [r7, #12]
    actReq.NwkAddrOfInterest = msg->SrcAddr;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	81fb      	strh	r3, [r7, #14]
    zdoActiveEpReq(&actReq);
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4618      	mov	r0, r3
 8001678:	f003 fec6 	bl	8005408 <zdoActiveEpReq>

    //
    return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	0800fcb8 	.word	0x0800fcb8
 800168c:	0800fb44 	.word	0x0800fb44
 8001690:	0800fb54 	.word	0x0800fb54
 8001694:	0800fcd4 	.word	0x0800fcd4
 8001698:	0800fcec 	.word	0x0800fcec

0800169c <mtAfDataConfirmCb>:
};
/********************************************************************
 * AF CALL BACK FUNCTIONS
 */

static uint8_t mtAfDataConfirmCb(DataConfirmFormat_t *msg) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    if (msg->Status == MT_RPC_SUCCESS) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d103      	bne.n	80016b4 <mtAfDataConfirmCb+0x18>
        log_print("Message transmited Succesfully!\n");
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <mtAfDataConfirmCb+0x2c>)
 80016ae:	f7ff f807 	bl	80006c0 <log_print>
 80016b2:	e002      	b.n	80016ba <mtAfDataConfirmCb+0x1e>
    } else {
        log_print("Message failed to transmit\n");
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <mtAfDataConfirmCb+0x30>)
 80016b6:	f7ff f803 	bl	80006c0 <log_print>
    }
    return msg->Status;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	781b      	ldrb	r3, [r3, #0]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	0800fd00 	.word	0x0800fd00
 80016cc:	0800fd24 	.word	0x0800fd24

080016d0 <mtAfIncomingMsgCb>:

static uint8_t mtAfIncomingMsgCb(IncomingMsgFormat_t *msg) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08e      	sub	sp, #56	; 0x38
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
    log_print("\nIncoming Message from Endpoint 0x%02X and Address 0x%04X:\n", msg->SrcEndpoint, msg->SrcAddr);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	799b      	ldrb	r3, [r3, #6]
 80016dc:	4619      	mov	r1, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	889b      	ldrh	r3, [r3, #4]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4821      	ldr	r0, [pc, #132]	; (800176c <mtAfIncomingMsgCb+0x9c>)
 80016e6:	f7fe ffeb 	bl	80006c0 <log_print>
    for (uint8_t i = 0; i < msg->Len; i++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80016f0:	e00d      	b.n	800170e <mtAfIncomingMsgCb+0x3e>
        log_print("%02x ", msg->Data[i]);
 80016f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	7c9b      	ldrb	r3, [r3, #18]
 80016fc:	4619      	mov	r1, r3
 80016fe:	481c      	ldr	r0, [pc, #112]	; (8001770 <mtAfIncomingMsgCb+0xa0>)
 8001700:	f7fe ffde 	bl	80006c0 <log_print>
    for (uint8_t i = 0; i < msg->Len; i++) {
 8001704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001708:	3301      	adds	r3, #1
 800170a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7c5b      	ldrb	r3, [r3, #17]
 8001712:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001716:	429a      	cmp	r2, r3
 8001718:	d3eb      	bcc.n	80016f2 <mtAfIncomingMsgCb+0x22>
    }
    log_print("\n");
 800171a:	4816      	ldr	r0, [pc, #88]	; (8001774 <mtAfIncomingMsgCb+0xa4>)
 800171c:	f7fe ffd0 	bl	80006c0 <log_print>

    // send event
    event_result_t res;
    res.type = EVT_RSP_DATA_REQUEST;
 8001720:	2304      	movs	r3, #4
 8001722:	723b      	strb	r3, [r7, #8]
    res.adr = msg->SrcAddr;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	889b      	ldrh	r3, [r3, #4]
 8001728:	817b      	strh	r3, [r7, #10]
    res.result = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	733b      	strb	r3, [r7, #12]
    int len = MIN(EV_DATA_LEN_MAX, msg->Len);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7c5b      	ldrb	r3, [r3, #17]
 8001732:	2b20      	cmp	r3, #32
 8001734:	bf28      	it	cs
 8001736:	2320      	movcs	r3, #32
 8001738:	b2db      	uxtb	r3, r3
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
    res.data_len = len;
 800173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173e:	b2db      	uxtb	r3, r3
 8001740:	737b      	strb	r3, [r7, #13]
    memcpy(res.data, msg->Data, len);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f103 0112 	add.w	r1, r3, #18
 8001748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	3306      	adds	r3, #6
 8001750:	4618      	mov	r0, r3
 8001752:	f00c fb0b 	bl	800dd6c <memcpy>
    znp_if_evt_send(&res);
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fc48 	bl	8002ff0 <znp_if_evt_send>

    // all good
    return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3738      	adds	r7, #56	; 0x38
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	0800fd40 	.word	0x0800fd40
 8001770:	0800fd7c 	.word	0x0800fd7c
 8001774:	0800fc90 	.word	0x0800fc90

08001778 <mtAfRegisterCb>:

static uint8_t mtAfRegisterCb(RegisterSrspFormat_t *msg) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    // send event
    event_result_t res;
    res.type = EVT_RSP_REGISTER;
 8001780:	2303      	movs	r3, #3
 8001782:	723b      	strb	r3, [r7, #8]
    res.adr = 0xFFFF;  // dont know address
 8001784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001788:	817b      	strh	r3, [r7, #10]
    res.result = msg->success;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	733b      	strb	r3, [r7, #12]
    znp_if_evt_send(&res);
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4618      	mov	r0, r3
 8001796:	f001 fc2b 	bl	8002ff0 <znp_if_evt_send>

    if (msg->success == 0) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <mtAfRegisterCb+0x32>
        log_print("Register OK\n");
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <mtAfRegisterCb+0x44>)
 80017a4:	f7fe ff8c 	bl	80006c0 <log_print>
 80017a8:	e002      	b.n	80017b0 <mtAfRegisterCb+0x38>
    } else {
        log_print("Register Error\n");
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <mtAfRegisterCb+0x48>)
 80017ac:	f7fe ff88 	bl	80006c0 <log_print>
    }

    return msg->success;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	781b      	ldrb	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3730      	adds	r7, #48	; 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	0800fd84 	.word	0x0800fd84
 80017c0:	0800fd94 	.word	0x0800fd94

080017c4 <mtAfDataRequestCb>:

static uint8_t mtAfDataRequestCb(DataRequestSrspFormat_t *msg) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    if (msg->success == 0) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <mtAfDataRequestCb+0x18>
        log_print("Data request OK\n");
 80017d4:	4806      	ldr	r0, [pc, #24]	; (80017f0 <mtAfDataRequestCb+0x2c>)
 80017d6:	f7fe ff73 	bl	80006c0 <log_print>
 80017da:	e002      	b.n	80017e2 <mtAfDataRequestCb+0x1e>
    } else {
        log_print("Data request Error\n");
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <mtAfDataRequestCb+0x30>)
 80017de:	f7fe ff6f 	bl	80006c0 <log_print>
    }

    return msg->success;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	781b      	ldrb	r3, [r3, #0]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0800fda4 	.word	0x0800fda4
 80017f4:	0800fdb8 	.word	0x0800fdb8

080017f8 <mtAppCfgCommissioningNotifyCb>:
    NULL,  // MT_AF_REFLECT_ERROR
};

////////////////////////////////////////////////////

uint8_t mtAppCfgCommissioningNotifyCb(appCfgCommissioningNotifyFormat_t *msg) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
    log_print("Commissioning notify\r\n");
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <mtAppCfgCommissioningNotifyCb+0x3c>)
 8001802:	f7fe ff5d 	bl	80006c0 <log_print>
    log_print("Status: %02x\r\n", msg->status);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4619      	mov	r1, r3
 800180c:	480a      	ldr	r0, [pc, #40]	; (8001838 <mtAppCfgCommissioningNotifyCb+0x40>)
 800180e:	f7fe ff57 	bl	80006c0 <log_print>
    log_print("Mode: %02x\r\n", msg->commissioningMode1);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	785b      	ldrb	r3, [r3, #1]
 8001816:	4619      	mov	r1, r3
 8001818:	4808      	ldr	r0, [pc, #32]	; (800183c <mtAppCfgCommissioningNotifyCb+0x44>)
 800181a:	f7fe ff51 	bl	80006c0 <log_print>
    log_print("Mode: %02x\r\n", msg->commissioningMode2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	789b      	ldrb	r3, [r3, #2]
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <mtAppCfgCommissioningNotifyCb+0x44>)
 8001826:	f7fe ff4b 	bl	80006c0 <log_print>
    return 0;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	0800fdcc 	.word	0x0800fdcc
 8001838:	0800fde4 	.word	0x0800fde4
 800183c:	0800fdf4 	.word	0x0800fdf4

08001840 <mtAppCfgSetChannelCb>:

uint8_t mtAppCfgSetChannelCb(appCfgSetChannelFormat_t *msg) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    log_print("Set channel response: %02x (%s)\r\n", msg->success, (msg->success) ? "ERROR" : "SUCCESS");
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <mtAppCfgSetChannelCb+0x1a>
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <mtAppCfgSetChannelCb+0x30>)
 8001858:	e000      	b.n	800185c <mtAppCfgSetChannelCb+0x1c>
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <mtAppCfgSetChannelCb+0x34>)
 800185c:	461a      	mov	r2, r3
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <mtAppCfgSetChannelCb+0x38>)
 8001860:	f7fe ff2e 	bl	80006c0 <log_print>
    return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	0800fe04 	.word	0x0800fe04
 8001874:	0800fe0c 	.word	0x0800fe0c
 8001878:	0800fe14 	.word	0x0800fe14

0800187c <mtAppCfgCommissioningStartCb>:

uint8_t mtAppCfgCommissioningStartCb(appCfgStartCommissioningStart_t *msg) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    log_print("Commissioning start response: %02x (%s)\r\n", msg->success, (msg->success) ? "ERROR" : "SUCCESS");
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <mtAppCfgCommissioningStartCb+0x1a>
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <mtAppCfgCommissioningStartCb+0x30>)
 8001894:	e000      	b.n	8001898 <mtAppCfgCommissioningStartCb+0x1c>
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <mtAppCfgCommissioningStartCb+0x34>)
 8001898:	461a      	mov	r2, r3
 800189a:	4806      	ldr	r0, [pc, #24]	; (80018b4 <mtAppCfgCommissioningStartCb+0x38>)
 800189c:	f7fe ff10 	bl	80006c0 <log_print>
    return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	0800fe04 	.word	0x0800fe04
 80018b0:	0800fe0c 	.word	0x0800fe0c
 80018b4:	0800fe38 	.word	0x0800fe38

080018b8 <mtUtilGetDeviceInfoCb>:
};

/********************************************************************
 * START OF UTIL CALL BACK FUNCTIONS
 */
static uint8_t mtUtilGetDeviceInfoCb(utilGetDeviceInfoFormat_t *msg) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
    log_print("Get Info Response\r\n");
 80018c0:	4832      	ldr	r0, [pc, #200]	; (800198c <mtUtilGetDeviceInfoCb+0xd4>)
 80018c2:	f7fe fefd 	bl	80006c0 <log_print>
    log_print("Success: %02x\r\n", msg->success);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4830      	ldr	r0, [pc, #192]	; (8001990 <mtUtilGetDeviceInfoCb+0xd8>)
 80018ce:	f7fe fef7 	bl	80006c0 <log_print>
    uint32_t top = msg->ieee_addr >> 32;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	000a      	movs	r2, r1
 80018e2:	2300      	movs	r3, #0
 80018e4:	4613      	mov	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
    uint32_t bot = msg->ieee_addr & 0xffffffff;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
    log_print("IEEE Addr: %08x%08x\r\n", top, bot);
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	6939      	ldr	r1, [r7, #16]
 80018f6:	4827      	ldr	r0, [pc, #156]	; (8001994 <mtUtilGetDeviceInfoCb+0xdc>)
 80018f8:	f7fe fee2 	bl	80006c0 <log_print>
    log_print("Short Addr: %04x\r\n", msg->short_addr);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	8a1b      	ldrh	r3, [r3, #16]
 8001900:	4619      	mov	r1, r3
 8001902:	4825      	ldr	r0, [pc, #148]	; (8001998 <mtUtilGetDeviceInfoCb+0xe0>)
 8001904:	f7fe fedc 	bl	80006c0 <log_print>
    log_print("Device Type: %02x\r\n", msg->device_type);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7c9b      	ldrb	r3, [r3, #18]
 800190c:	4619      	mov	r1, r3
 800190e:	4823      	ldr	r0, [pc, #140]	; (800199c <mtUtilGetDeviceInfoCb+0xe4>)
 8001910:	f7fe fed6 	bl	80006c0 <log_print>
    log_print("Device state: %02x\r\n", msg->device_state);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7cdb      	ldrb	r3, [r3, #19]
 8001918:	4619      	mov	r1, r3
 800191a:	4821      	ldr	r0, [pc, #132]	; (80019a0 <mtUtilGetDeviceInfoCb+0xe8>)
 800191c:	f7fe fed0 	bl	80006c0 <log_print>
    log_print("Ass Dev Cnt: %02x\r\n", msg->ass_device_cnt);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7d1b      	ldrb	r3, [r3, #20]
 8001924:	4619      	mov	r1, r3
 8001926:	481f      	ldr	r0, [pc, #124]	; (80019a4 <mtUtilGetDeviceInfoCb+0xec>)
 8001928:	f7fe feca 	bl	80006c0 <log_print>
    for (uint8_t i = 0; i < msg->ass_device_cnt; i++) {
 800192c:	2300      	movs	r3, #0
 800192e:	75fb      	strb	r3, [r7, #23]
 8001930:	e020      	b.n	8001974 <mtUtilGetDeviceInfoCb+0xbc>
        // print info
        log_print("Ass Dev %d: %04x\r\n", i, msg->ass_device_list[i]);
 8001932:	7df9      	ldrb	r1, [r7, #23]
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	3308      	adds	r3, #8
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	88db      	ldrh	r3, [r3, #6]
 8001940:	461a      	mov	r2, r3
 8001942:	4819      	ldr	r0, [pc, #100]	; (80019a8 <mtUtilGetDeviceInfoCb+0xf0>)
 8001944:	f7fe febc 	bl	80006c0 <log_print>

        // check if the endpoint is active
        ActiveEpReqFormat_t act_req;
        act_req.DstAddr = msg->ass_device_list[i];
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	3308      	adds	r3, #8
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	88db      	ldrh	r3, [r3, #6]
 8001954:	813b      	strh	r3, [r7, #8]
        act_req.NwkAddrOfInterest = msg->ass_device_list[i];
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	3308      	adds	r3, #8
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	88db      	ldrh	r3, [r3, #6]
 8001962:	817b      	strh	r3, [r7, #10]
        zdoActiveEpReq(&act_req);
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fd4d 	bl	8005408 <zdoActiveEpReq>
    for (uint8_t i = 0; i < msg->ass_device_cnt; i++) {
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	3301      	adds	r3, #1
 8001972:	75fb      	strb	r3, [r7, #23]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7d1b      	ldrb	r3, [r3, #20]
 8001978:	7dfa      	ldrb	r2, [r7, #23]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3d9      	bcc.n	8001932 <mtUtilGetDeviceInfoCb+0x7a>
    }

    // return resultcode
    return msg->success;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	781b      	ldrb	r3, [r3, #0]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	0800fe64 	.word	0x0800fe64
 8001990:	0800fe78 	.word	0x0800fe78
 8001994:	0800fe88 	.word	0x0800fe88
 8001998:	0800fea0 	.word	0x0800fea0
 800199c:	0800feb4 	.word	0x0800feb4
 80019a0:	0800fec8 	.word	0x0800fec8
 80019a4:	0800fee0 	.word	0x0800fee0
 80019a8:	0800fef4 	.word	0x0800fef4

080019ac <znp_cb_register>:
static mtUtilCb_t mtUtilCb = {
    //
    mtUtilGetDeviceInfoCb  //
};

void znp_cb_register(void) {
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	b09f      	sub	sp, #124	; 0x7c
 80019b0:	af1e      	add	r7, sp, #120	; 0x78
    // Register callbacks
    sysRegisterCallbacks(mtSysCb);
 80019b2:	4e19      	ldr	r6, [pc, #100]	; (8001a18 <znp_cb_register+0x6c>)
 80019b4:	466d      	mov	r5, sp
 80019b6:	f106 0410 	add.w	r4, r6, #16
 80019ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019ce:	f003 fa4f 	bl	8004e70 <sysRegisterCallbacks>
    zdoRegisterCallbacks(mtZdoCb);
 80019d2:	4c12      	ldr	r4, [pc, #72]	; (8001a1c <znp_cb_register+0x70>)
 80019d4:	4668      	mov	r0, sp
 80019d6:	f104 0310 	add.w	r3, r4, #16
 80019da:	2274      	movs	r2, #116	; 0x74
 80019dc:	4619      	mov	r1, r3
 80019de:	f00c f9c5 	bl	800dd6c <memcpy>
 80019e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019e6:	f006 fae7 	bl	8007fb8 <zdoRegisterCallbacks>
    afRegisterCallbacks(mtAfCb);
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <znp_cb_register+0x74>)
 80019ec:	466c      	mov	r4, sp
 80019ee:	f103 0210 	add.w	r2, r3, #16
 80019f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019fa:	f002 f8ff 	bl	8003bfc <afRegisterCallbacks>
    appCfgRegisterCallbacks(mtAppCfgCb);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <znp_cb_register+0x78>)
 8001a00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a04:	f002 f99e 	bl	8003d44 <appCfgRegisterCallbacks>
    utilRegisterCallbacks(mtUtilCb);
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <znp_cb_register+0x7c>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	f003 fb18 	bl	8005040 <utilRegisterCallbacks>
 8001a10:	bf00      	nop
 8001a12:	3704      	adds	r7, #4
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	2000003c 	.word	0x2000003c
 8001a20:	200000c0 	.word	0x200000c0
 8001a24:	200000dc 	.word	0x200000dc
 8001a28:	200000e8 	.word	0x200000e8

08001a2c <znp_dev_has_in_cluster>:
#include "mtZdo.h"
#include <stddef.h>

static uint8_t _znp_cmd_sequence_num = 0;

static uint8_t znp_dev_has_in_cluster(znp_device_t* dev, uint16_t cluster) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
    for (uint8_t i = 0; i < dev->clstr_in_cnt; i++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e00d      	b.n	8001a5a <znp_dev_has_in_cluster+0x2e>
        if (dev->clstr_in_list[i] == cluster)
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	885b      	ldrh	r3, [r3, #2]
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d101      	bne.n	8001a54 <znp_dev_has_in_cluster+0x28>
            return 1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e008      	b.n	8001a66 <znp_dev_has_in_cluster+0x3a>
    for (uint8_t i = 0; i < dev->clstr_in_cnt; i++) {
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	3301      	adds	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7a1b      	ldrb	r3, [r3, #8]
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3ec      	bcc.n	8001a3e <znp_dev_has_in_cluster+0x12>
    }
    return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <znp_cmd_dev_is_active>:
            return 1;
    }
    return 0;
}

int znp_cmd_dev_is_active(uint16_t address) {
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b084      	sub	sp, #16
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	80fb      	strh	r3, [r7, #6]
    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 fb14 	bl	80030ac <znp_if_dev_get>
 8001a84:	60f8      	str	r0, [r7, #12]

    // invalid handle?
    if (dev == NULL)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <znp_cmd_dev_is_active+0x20>
        return -1;
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a90:	e019      	b.n	8001ac6 <znp_cmd_dev_is_active+0x54>

    // check if the endpoint is active
    ActiveEpReqFormat_t act_req;
    act_req.DstAddr = dev->adr_short;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	813b      	strh	r3, [r7, #8]
    act_req.NwkAddrOfInterest = dev->adr_short;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	817b      	strh	r3, [r7, #10]
    zdoActiveEpReq(&act_req);
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fcb0 	bl	8005408 <zdoActiveEpReq>

    // wait for response
    if (znp_if_wait_for_event(EVT_RSP_IS_ACTIVE, dev->adr_short, 10000) != NULL)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f001 faae 	bl	8003014 <znp_if_wait_for_event>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <znp_cmd_dev_is_active+0x50>
        return 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e001      	b.n	8001ac6 <znp_cmd_dev_is_active+0x54>
    else
        return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <znp_cmd_dev_refresh_info>:

int znp_cmd_dev_refresh_info(uint16_t address) {
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	80fb      	strh	r3, [r7, #6]
    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 fae6 	bl	80030ac <znp_if_dev_get>
 8001ae0:	6178      	str	r0, [r7, #20]

    // invalid handle?
    if (dev == NULL)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <znp_cmd_dev_refresh_info+0x20>
        return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	e01b      	b.n	8001b26 <znp_cmd_dev_refresh_info+0x58>

    // request descriptors
    SimpleDescReqFormat_t desc_req;
    desc_req.DstAddr = dev->adr_short;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	81bb      	strh	r3, [r7, #12]
    desc_req.NwkAddrOfInterest = dev->adr_short;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	81fb      	strh	r3, [r7, #14]
    desc_req.Endpoint = 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	743b      	strb	r3, [r7, #16]
    zdoSimpleDescReq(&desc_req);
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 fc0a 	bl	800531c <zdoSimpleDescReq>

    // wait for response
    if (znp_if_wait_for_event(EVT_RSP_SIMPLE_DESC, dev->adr_short, 10000) != NULL)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b10:	4619      	mov	r1, r3
 8001b12:	2002      	movs	r0, #2
 8001b14:	f001 fa7e 	bl	8003014 <znp_if_wait_for_event>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <znp_cmd_dev_refresh_info+0x54>
        return 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e001      	b.n	8001b26 <znp_cmd_dev_refresh_info+0x58>
    else
        return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <znp_cmd_dev_register>:

int znp_cmd_dev_register(uint16_t address) {
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b098      	sub	sp, #96	; 0x60
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	80fb      	strh	r3, [r7, #6]
    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 fab6 	bl	80030ac <znp_if_dev_get>
 8001b40:	65b8      	str	r0, [r7, #88]	; 0x58

    // invalid handle?
    if (dev == NULL)
 8001b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <znp_cmd_dev_register+0x20>
        return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4c:	e07d      	b.n	8001c4a <znp_cmd_dev_register+0x11c>

    // sanity check if data is ok
    if (dev->clstr_in_cnt == 0 || dev->clstr_out_cnt == 0 || dev->device_id == 0 || dev->profile_id == 0)
 8001b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b50:	7a1b      	ldrb	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00c      	beq.n	8001b70 <znp_cmd_dev_register+0x42>
 8001b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <znp_cmd_dev_register+0x42>
 8001b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b62:	88db      	ldrh	r3, [r3, #6]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <znp_cmd_dev_register+0x42>
 8001b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b6a:	889b      	ldrh	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <znp_cmd_dev_register+0x48>
        return -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	e069      	b.n	8001c4a <znp_cmd_dev_register+0x11c>

    // register device
    RegisterFormat_t reg_req;
    reg_req.EndPoint = 0x01;
 8001b76:	2301      	movs	r3, #1
 8001b78:	733b      	strb	r3, [r7, #12]
    reg_req.AppProfId = dev->profile_id;
 8001b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b7c:	889b      	ldrh	r3, [r3, #4]
 8001b7e:	81fb      	strh	r3, [r7, #14]
    reg_req.AppDeviceId = dev->device_id;
 8001b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b82:	88db      	ldrh	r3, [r3, #6]
 8001b84:	823b      	strh	r3, [r7, #16]
    reg_req.AppDevVer = 0x01;
 8001b86:	2301      	movs	r3, #1
 8001b88:	74bb      	strb	r3, [r7, #18]
    reg_req.LatencyReq = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	74fb      	strb	r3, [r7, #19]
    reg_req.AppNumInClusters = dev->clstr_in_cnt;
 8001b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b90:	7a1b      	ldrb	r3, [r3, #8]
 8001b92:	753b      	strb	r3, [r7, #20]
    for (uint8_t i = 0; i < dev->clstr_in_cnt; i++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001b9a:	e015      	b.n	8001bc8 <znp_cmd_dev_register+0x9a>
        reg_req.AppInClusterList[i] = dev->clstr_in_list[i];
 8001b9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ba0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001ba4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	440b      	add	r3, r1
 8001bac:	8859      	ldrh	r1, [r3, #2]
 8001bae:	1d13      	adds	r3, r2, #4
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bb6:	4413      	add	r3, r2
 8001bb8:	460a      	mov	r2, r1
 8001bba:	f823 2c52 	strh.w	r2, [r3, #-82]
    for (uint8_t i = 0; i < dev->clstr_in_cnt; i++)
 8001bbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bca:	7a1b      	ldrb	r3, [r3, #8]
 8001bcc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3e3      	bcc.n	8001b9c <znp_cmd_dev_register+0x6e>
    reg_req.AppNumOutClusters = dev->clstr_out_cnt;
 8001bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bd6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001bda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    for (uint8_t i = 0; i < dev->clstr_out_cnt; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001be4:	e016      	b.n	8001c14 <znp_cmd_dev_register+0xe6>
        reg_req.AppOutClusterList[i] = dev->clstr_out_list[i];
 8001be6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001bea:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001bee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001bf0:	3314      	adds	r3, #20
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	440b      	add	r3, r1
 8001bf6:	8899      	ldrh	r1, [r3, #4]
 8001bf8:	f102 0314 	add.w	r3, r2, #20
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c02:	4413      	add	r3, r2
 8001c04:	460a      	mov	r2, r1
 8001c06:	f823 2c50 	strh.w	r2, [r3, #-80]
    for (uint8_t i = 0; i < dev->clstr_out_cnt; i++)
 8001c0a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c16:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c1a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d3e1      	bcc.n	8001be6 <znp_cmd_dev_register+0xb8>
    afRegister(&reg_req);
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 fad9 	bl	80031de <afRegister>

    // wait for response
    if (znp_if_wait_for_event(EVT_RSP_REGISTER, dev->adr_short, 10000) != NULL)
 8001c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c34:	4619      	mov	r1, r3
 8001c36:	2003      	movs	r0, #3
 8001c38:	f001 f9ec 	bl	8003014 <znp_if_wait_for_event>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <znp_cmd_dev_register+0x118>
        return 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e001      	b.n	8001c4a <znp_cmd_dev_register+0x11c>
    else
        return -1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3760      	adds	r7, #96	; 0x60
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <znp_cmd_cluster_in_read>:

int znp_cmd_cluster_in_read(uint16_t address, uint16_t cluster, uint16_t attribute, zcl_cluster_record_t* record) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0aa      	sub	sp, #168	; 0xa8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	81fb      	strh	r3, [r7, #14]
 8001c60:	460b      	mov	r3, r1
 8001c62:	81bb      	strh	r3, [r7, #12]
 8001c64:	4613      	mov	r3, r2
 8001c66:	817b      	strh	r3, [r7, #10]
    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 8001c68:	89fb      	ldrh	r3, [r7, #14]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 fa1e 	bl	80030ac <znp_if_dev_get>
 8001c70:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    // invalid handle?
    if (dev == NULL)
 8001c74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <znp_cmd_cluster_in_read+0x2e>
        return -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	e3c1      	b.n	8002406 <znp_cmd_cluster_in_read+0x7b2>

    // sanity check if data is ok
    if (!znp_dev_has_in_cluster(dev, cluster))
 8001c82:	89bb      	ldrh	r3, [r7, #12]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001c8a:	f7ff fecf 	bl	8001a2c <znp_dev_has_in_cluster>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <znp_cmd_cluster_in_read+0x46>
        return -1;
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295
 8001c98:	e3b5      	b.n	8002406 <znp_cmd_cluster_in_read+0x7b2>

    // increase number
    _znp_cmd_sequence_num++;
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <znp_cmd_cluster_in_read+0x130>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <znp_cmd_cluster_in_read+0x130>)
 8001ca4:	701a      	strb	r2, [r3, #0]

    // read a cluster
    DataRequestFormat_t data_req;
    data_req.DstAddr = dev->adr_short;
 8001ca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	823b      	strh	r3, [r7, #16]
    data_req.DstEndpoint = 0x01;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	74bb      	strb	r3, [r7, #18]
    data_req.SrcEndpoint = 0x01;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	74fb      	strb	r3, [r7, #19]
    data_req.ClusterID = cluster;
 8001cb6:	89bb      	ldrh	r3, [r7, #12]
 8001cb8:	82bb      	strh	r3, [r7, #20]
    data_req.TransID = 0x05;
 8001cba:	2305      	movs	r3, #5
 8001cbc:	75bb      	strb	r3, [r7, #22]
    data_req.Options = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	75fb      	strb	r3, [r7, #23]
    data_req.Radius = 0x07;
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	763b      	strb	r3, [r7, #24]
    data_req.Len = 5;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	767b      	strb	r3, [r7, #25]
    data_req.Data[0] = 0x00;                   // ZCL Header: frame control
 8001cca:	2300      	movs	r3, #0
 8001ccc:	76bb      	strb	r3, [r7, #26]
    data_req.Data[1] = _znp_cmd_sequence_num;  // ZCL Header: transaction sequence num
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <znp_cmd_cluster_in_read+0x130>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	76fb      	strb	r3, [r7, #27]
    data_req.Data[2] = ZCL_CMD_READ_ATTR;      // ZCL Header: Command ID
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	773b      	strb	r3, [r7, #28]
    data_req.Data[3] = attribute & 0xFF;       // Cluster 16bit low
 8001cd8:	897b      	ldrh	r3, [r7, #10]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	777b      	strb	r3, [r7, #29]
    data_req.Data[4] = attribute >> 8;         // Cluster 16bit high
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	77bb      	strb	r3, [r7, #30]
    afDataRequest(&data_req);
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 fb62 	bl	80033b6 <afDataRequest>

    // wait for response
    event_result_t* event = znp_if_wait_for_event(EVT_RSP_DATA_REQUEST, dev->adr_short, 10000);
 8001cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2004      	movs	r0, #4
 8001d00:	f001 f988 	bl	8003014 <znp_if_wait_for_event>
 8001d04:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    if (event == NULL)
 8001d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <znp_cmd_cluster_in_read+0xc2>
        return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	e377      	b.n	8002406 <znp_cmd_cluster_in_read+0x7b2>

    // check length
    if (event->data_len < 6)
 8001d16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d1a:	795b      	ldrb	r3, [r3, #5]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d802      	bhi.n	8001d26 <znp_cmd_cluster_in_read+0xd2>
        return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	e36f      	b.n	8002406 <znp_cmd_cluster_in_read+0x7b2>

    // ZCL Header: check transaction sequence number
    if (event->data[1] != _znp_cmd_sequence_num)
 8001d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d2a:	79da      	ldrb	r2, [r3, #7]
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <znp_cmd_cluster_in_read+0x130>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d002      	beq.n	8001d3a <znp_cmd_cluster_in_read+0xe6>
        return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e365      	b.n	8002406 <znp_cmd_cluster_in_read+0x7b2>

    // ZCL Header: check command ID
    if (event->data[2] != ZCL_CMD_READ_ATTR_RSP)
 8001d3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d3e:	7a1b      	ldrb	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d002      	beq.n	8001d4a <znp_cmd_cluster_in_read+0xf6>
        return -1;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	e35d      	b.n	8002406 <znp_cmd_cluster_in_read+0x7b2>

    // Data: which attribute is in this response?
    uint16_t read_attribute = (event->data[3] | (event->data[4] << 8));
 8001d4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d4e:	7a5b      	ldrb	r3, [r3, #9]
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d56:	7a9b      	ldrb	r3, [r3, #10]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    if (read_attribute != attribute)
 8001d64:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8001d68:	897b      	ldrh	r3, [r7, #10]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d002      	beq.n	8001d74 <znp_cmd_cluster_in_read+0x120>
        return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	e348      	b.n	8002406 <znp_cmd_cluster_in_read+0x7b2>

    // Data: status not ok?
    if (event->data[5] != 0)
 8001d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d78:	7adb      	ldrb	r3, [r3, #11]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d004      	beq.n	8001d88 <znp_cmd_cluster_in_read+0x134>
        return -1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e340      	b.n	8002406 <znp_cmd_cluster_in_read+0x7b2>
 8001d84:	200004e0 	.word	0x200004e0

    // save type
    record->type = event->data[6];
 8001d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d8c:	7b1a      	ldrb	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	701a      	strb	r2, [r3, #0]

    uint8_t parse_valid = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    // Data: parse type and data
    switch (record->type) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2bff      	cmp	r3, #255	; 0xff
 8001d9e:	f200 832a 	bhi.w	80023f6 <znp_cmd_cluster_in_read+0x7a2>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <znp_cmd_cluster_in_read+0x154>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	080021a9 	.word	0x080021a9
 8001dac:	080023f7 	.word	0x080023f7
 8001db0:	080023f7 	.word	0x080023f7
 8001db4:	080023f7 	.word	0x080023f7
 8001db8:	080023f7 	.word	0x080023f7
 8001dbc:	080023f7 	.word	0x080023f7
 8001dc0:	080023f7 	.word	0x080023f7
 8001dc4:	080023f7 	.word	0x080023f7
 8001dc8:	080021a9 	.word	0x080021a9
 8001dcc:	080021bb 	.word	0x080021bb
 8001dd0:	080021df 	.word	0x080021df
 8001dd4:	08002209 	.word	0x08002209
 8001dd8:	0800223d 	.word	0x0800223d
 8001ddc:	08002287 	.word	0x08002287
 8001de0:	080022e1 	.word	0x080022e1
 8001de4:	0800234b 	.word	0x0800234b
 8001de8:	080021a9 	.word	0x080021a9
 8001dec:	080023f7 	.word	0x080023f7
 8001df0:	080023f7 	.word	0x080023f7
 8001df4:	080023f7 	.word	0x080023f7
 8001df8:	080023f7 	.word	0x080023f7
 8001dfc:	080023f7 	.word	0x080023f7
 8001e00:	080023f7 	.word	0x080023f7
 8001e04:	080023f7 	.word	0x080023f7
 8001e08:	080021a9 	.word	0x080021a9
 8001e0c:	080021bb 	.word	0x080021bb
 8001e10:	080021df 	.word	0x080021df
 8001e14:	08002209 	.word	0x08002209
 8001e18:	0800223d 	.word	0x0800223d
 8001e1c:	08002287 	.word	0x08002287
 8001e20:	080022e1 	.word	0x080022e1
 8001e24:	0800234b 	.word	0x0800234b
 8001e28:	080021a9 	.word	0x080021a9
 8001e2c:	080021bb 	.word	0x080021bb
 8001e30:	080021df 	.word	0x080021df
 8001e34:	08002209 	.word	0x08002209
 8001e38:	0800223d 	.word	0x0800223d
 8001e3c:	08002287 	.word	0x08002287
 8001e40:	080022e1 	.word	0x080022e1
 8001e44:	0800234b 	.word	0x0800234b
 8001e48:	080021a9 	.word	0x080021a9
 8001e4c:	080021bb 	.word	0x080021bb
 8001e50:	080023f7 	.word	0x080023f7
 8001e54:	08002209 	.word	0x08002209
 8001e58:	080023f7 	.word	0x080023f7
 8001e5c:	080023f7 	.word	0x080023f7
 8001e60:	080023f7 	.word	0x080023f7
 8001e64:	0800234b 	.word	0x0800234b
 8001e68:	080021a9 	.word	0x080021a9
 8001e6c:	080021bb 	.word	0x080021bb
 8001e70:	080023f7 	.word	0x080023f7
 8001e74:	080023f7 	.word	0x080023f7
 8001e78:	080023f7 	.word	0x080023f7
 8001e7c:	080023f7 	.word	0x080023f7
 8001e80:	080023f7 	.word	0x080023f7
 8001e84:	080023f7 	.word	0x080023f7
 8001e88:	080023f7 	.word	0x080023f7
 8001e8c:	080023f7 	.word	0x080023f7
 8001e90:	080023f7 	.word	0x080023f7
 8001e94:	080023f7 	.word	0x080023f7
 8001e98:	080023f7 	.word	0x080023f7
 8001e9c:	080023f7 	.word	0x080023f7
 8001ea0:	080023f7 	.word	0x080023f7
 8001ea4:	080023f7 	.word	0x080023f7
 8001ea8:	080023f7 	.word	0x080023f7
 8001eac:	080023c5 	.word	0x080023c5
 8001eb0:	080023c5 	.word	0x080023c5
 8001eb4:	080023f7 	.word	0x080023f7
 8001eb8:	080023f7 	.word	0x080023f7
 8001ebc:	080023f7 	.word	0x080023f7
 8001ec0:	080023f7 	.word	0x080023f7
 8001ec4:	080023f7 	.word	0x080023f7
 8001ec8:	080023f7 	.word	0x080023f7
 8001ecc:	080023f7 	.word	0x080023f7
 8001ed0:	080023f7 	.word	0x080023f7
 8001ed4:	080023f7 	.word	0x080023f7
 8001ed8:	080023f7 	.word	0x080023f7
 8001edc:	080023f7 	.word	0x080023f7
 8001ee0:	080023f7 	.word	0x080023f7
 8001ee4:	080023f7 	.word	0x080023f7
 8001ee8:	080023f7 	.word	0x080023f7
 8001eec:	080023f7 	.word	0x080023f7
 8001ef0:	080023f7 	.word	0x080023f7
 8001ef4:	080023f7 	.word	0x080023f7
 8001ef8:	080023f7 	.word	0x080023f7
 8001efc:	080023f7 	.word	0x080023f7
 8001f00:	080023f7 	.word	0x080023f7
 8001f04:	080023f7 	.word	0x080023f7
 8001f08:	080023f7 	.word	0x080023f7
 8001f0c:	080023f7 	.word	0x080023f7
 8001f10:	080023f7 	.word	0x080023f7
 8001f14:	080023f7 	.word	0x080023f7
 8001f18:	080023f7 	.word	0x080023f7
 8001f1c:	080023f7 	.word	0x080023f7
 8001f20:	080023f7 	.word	0x080023f7
 8001f24:	080023f7 	.word	0x080023f7
 8001f28:	080023f7 	.word	0x080023f7
 8001f2c:	080023f7 	.word	0x080023f7
 8001f30:	080023f7 	.word	0x080023f7
 8001f34:	080023f7 	.word	0x080023f7
 8001f38:	080023f7 	.word	0x080023f7
 8001f3c:	080023f7 	.word	0x080023f7
 8001f40:	080023f7 	.word	0x080023f7
 8001f44:	080023f7 	.word	0x080023f7
 8001f48:	080023f7 	.word	0x080023f7
 8001f4c:	080023f7 	.word	0x080023f7
 8001f50:	080023f7 	.word	0x080023f7
 8001f54:	080023f7 	.word	0x080023f7
 8001f58:	080023f7 	.word	0x080023f7
 8001f5c:	080023f7 	.word	0x080023f7
 8001f60:	080023f7 	.word	0x080023f7
 8001f64:	080023f7 	.word	0x080023f7
 8001f68:	080023f7 	.word	0x080023f7
 8001f6c:	080023f7 	.word	0x080023f7
 8001f70:	080023f7 	.word	0x080023f7
 8001f74:	080023f7 	.word	0x080023f7
 8001f78:	080023f7 	.word	0x080023f7
 8001f7c:	080023f7 	.word	0x080023f7
 8001f80:	080023f7 	.word	0x080023f7
 8001f84:	080023f7 	.word	0x080023f7
 8001f88:	080023f7 	.word	0x080023f7
 8001f8c:	080023f7 	.word	0x080023f7
 8001f90:	080023f7 	.word	0x080023f7
 8001f94:	080023f7 	.word	0x080023f7
 8001f98:	080023f7 	.word	0x080023f7
 8001f9c:	080023f7 	.word	0x080023f7
 8001fa0:	080023f7 	.word	0x080023f7
 8001fa4:	080023f7 	.word	0x080023f7
 8001fa8:	080023f7 	.word	0x080023f7
 8001fac:	080023f7 	.word	0x080023f7
 8001fb0:	080023f7 	.word	0x080023f7
 8001fb4:	080023f7 	.word	0x080023f7
 8001fb8:	080023f7 	.word	0x080023f7
 8001fbc:	080023f7 	.word	0x080023f7
 8001fc0:	080023f7 	.word	0x080023f7
 8001fc4:	080023f7 	.word	0x080023f7
 8001fc8:	080023f7 	.word	0x080023f7
 8001fcc:	080023f7 	.word	0x080023f7
 8001fd0:	080023f7 	.word	0x080023f7
 8001fd4:	080023f7 	.word	0x080023f7
 8001fd8:	080023f7 	.word	0x080023f7
 8001fdc:	080023f7 	.word	0x080023f7
 8001fe0:	080023f7 	.word	0x080023f7
 8001fe4:	080023f7 	.word	0x080023f7
 8001fe8:	080023f7 	.word	0x080023f7
 8001fec:	080023f7 	.word	0x080023f7
 8001ff0:	080023f7 	.word	0x080023f7
 8001ff4:	080023f7 	.word	0x080023f7
 8001ff8:	080023f7 	.word	0x080023f7
 8001ffc:	080023f7 	.word	0x080023f7
 8002000:	080023f7 	.word	0x080023f7
 8002004:	080023f7 	.word	0x080023f7
 8002008:	080023f7 	.word	0x080023f7
 800200c:	080023f7 	.word	0x080023f7
 8002010:	080023f7 	.word	0x080023f7
 8002014:	080023f7 	.word	0x080023f7
 8002018:	080023f7 	.word	0x080023f7
 800201c:	080023f7 	.word	0x080023f7
 8002020:	080023f7 	.word	0x080023f7
 8002024:	080023f7 	.word	0x080023f7
 8002028:	080023f7 	.word	0x080023f7
 800202c:	080023f7 	.word	0x080023f7
 8002030:	080023f7 	.word	0x080023f7
 8002034:	080023f7 	.word	0x080023f7
 8002038:	080023f7 	.word	0x080023f7
 800203c:	080023f7 	.word	0x080023f7
 8002040:	080023f7 	.word	0x080023f7
 8002044:	080023f7 	.word	0x080023f7
 8002048:	080023f7 	.word	0x080023f7
 800204c:	080023f7 	.word	0x080023f7
 8002050:	080023f7 	.word	0x080023f7
 8002054:	080023f7 	.word	0x080023f7
 8002058:	080023f7 	.word	0x080023f7
 800205c:	080023f7 	.word	0x080023f7
 8002060:	080023f7 	.word	0x080023f7
 8002064:	080023f7 	.word	0x080023f7
 8002068:	080023f7 	.word	0x080023f7
 800206c:	080023f7 	.word	0x080023f7
 8002070:	080023f7 	.word	0x080023f7
 8002074:	080023f7 	.word	0x080023f7
 8002078:	080023f7 	.word	0x080023f7
 800207c:	080023f7 	.word	0x080023f7
 8002080:	080023f7 	.word	0x080023f7
 8002084:	080023f7 	.word	0x080023f7
 8002088:	080023f7 	.word	0x080023f7
 800208c:	080023f7 	.word	0x080023f7
 8002090:	080023f7 	.word	0x080023f7
 8002094:	080023f7 	.word	0x080023f7
 8002098:	080023f7 	.word	0x080023f7
 800209c:	080023f7 	.word	0x080023f7
 80020a0:	080023f7 	.word	0x080023f7
 80020a4:	080023f7 	.word	0x080023f7
 80020a8:	080023f7 	.word	0x080023f7
 80020ac:	080023f7 	.word	0x080023f7
 80020b0:	080023f7 	.word	0x080023f7
 80020b4:	080023f7 	.word	0x080023f7
 80020b8:	080023f7 	.word	0x080023f7
 80020bc:	080023f7 	.word	0x080023f7
 80020c0:	080023f7 	.word	0x080023f7
 80020c4:	080023f7 	.word	0x080023f7
 80020c8:	080023f7 	.word	0x080023f7
 80020cc:	080023f7 	.word	0x080023f7
 80020d0:	080023f7 	.word	0x080023f7
 80020d4:	080023f7 	.word	0x080023f7
 80020d8:	080023f7 	.word	0x080023f7
 80020dc:	080023f7 	.word	0x080023f7
 80020e0:	080023f7 	.word	0x080023f7
 80020e4:	080023f7 	.word	0x080023f7
 80020e8:	080023f7 	.word	0x080023f7
 80020ec:	080023f7 	.word	0x080023f7
 80020f0:	080023f7 	.word	0x080023f7
 80020f4:	080023f7 	.word	0x080023f7
 80020f8:	080023f7 	.word	0x080023f7
 80020fc:	080023f7 	.word	0x080023f7
 8002100:	080023f7 	.word	0x080023f7
 8002104:	080023f7 	.word	0x080023f7
 8002108:	080023f7 	.word	0x080023f7
 800210c:	080023f7 	.word	0x080023f7
 8002110:	080023f7 	.word	0x080023f7
 8002114:	080023f7 	.word	0x080023f7
 8002118:	080023f7 	.word	0x080023f7
 800211c:	080023f7 	.word	0x080023f7
 8002120:	080023f7 	.word	0x080023f7
 8002124:	080023f7 	.word	0x080023f7
 8002128:	080023f7 	.word	0x080023f7
 800212c:	080023f7 	.word	0x080023f7
 8002130:	080023f7 	.word	0x080023f7
 8002134:	080023f7 	.word	0x080023f7
 8002138:	080023f7 	.word	0x080023f7
 800213c:	080023f7 	.word	0x080023f7
 8002140:	080023f7 	.word	0x080023f7
 8002144:	080023f7 	.word	0x080023f7
 8002148:	080023f7 	.word	0x080023f7
 800214c:	080023f7 	.word	0x080023f7
 8002150:	080023f7 	.word	0x080023f7
 8002154:	080023f7 	.word	0x080023f7
 8002158:	080023f7 	.word	0x080023f7
 800215c:	080023f7 	.word	0x080023f7
 8002160:	080023f7 	.word	0x080023f7
 8002164:	080023f7 	.word	0x080023f7
 8002168:	080023f7 	.word	0x080023f7
 800216c:	080023f7 	.word	0x080023f7
 8002170:	080023f7 	.word	0x080023f7
 8002174:	080023f7 	.word	0x080023f7
 8002178:	080023f7 	.word	0x080023f7
 800217c:	080023f7 	.word	0x080023f7
 8002180:	080023f7 	.word	0x080023f7
 8002184:	080023f7 	.word	0x080023f7
 8002188:	080023f7 	.word	0x080023f7
 800218c:	080023f7 	.word	0x080023f7
 8002190:	080023f7 	.word	0x080023f7
 8002194:	080023f7 	.word	0x080023f7
 8002198:	080023f7 	.word	0x080023f7
 800219c:	080023f7 	.word	0x080023f7
 80021a0:	080023f7 	.word	0x080023f7
 80021a4:	080023f7 	.word	0x080023f7
        case ZCL_BITMAP_8BITS:
        case ZCL_UNSIGNED_8BITS:
        case ZCL_ENUMERATION_8BITS:
        case ZCL_BOOLEAN_8BITS:
        case ZCL_SIGNED_8BITS:
            record->data_u8 = event->data[7];
 80021a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021ac:	7b5a      	ldrb	r2, [r3, #13]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	721a      	strb	r2, [r3, #8]
            parse_valid = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 80021b8:	e11d      	b.n	80023f6 <znp_cmd_cluster_in_read+0x7a2>
        case ZCL_DATA_16BITS:
        case ZCL_BITMAP_16BITS:
        case ZCL_UNSIGNED_16BITS:
        case ZCL_ENUMERATION_16BITS:
        case ZCL_SIGNED_16BITS:
            record->data_u16 = (event->data[7] | (event->data[8] << 8));
 80021ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021be:	7b5b      	ldrb	r3, [r3, #13]
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021c6:	7b9b      	ldrb	r3, [r3, #14]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	811a      	strh	r2, [r3, #8]
            parse_valid = 1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 80021dc:	e10b      	b.n	80023f6 <znp_cmd_cluster_in_read+0x7a2>

        case ZCL_DATA_24BITS:
        case ZCL_BITMAP_24BITS:
        case ZCL_UNSIGNED_24BITS:
            record->data_u32 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16));
 80021de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021e2:	7b5b      	ldrb	r3, [r3, #13]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021ea:	7b9b      	ldrb	r3, [r3, #14]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	431a      	orrs	r2, r3
 80021f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021f4:	7bdb      	ldrb	r3, [r3, #15]
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	4313      	orrs	r3, r2
 80021fa:	461a      	mov	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
            parse_valid = 1;
 8002200:	2301      	movs	r3, #1
 8002202:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8002206:	e0f6      	b.n	80023f6 <znp_cmd_cluster_in_read+0x7a2>

        case ZCL_DATA_32BITS:
        case ZCL_BITMAP_32BITS:
        case ZCL_UNSIGNED_32BITS:
        case ZCL_SIGNED_32BITS:
            record->data_u32 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24));
 8002208:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800220c:	7b5b      	ldrb	r3, [r3, #13]
 800220e:	461a      	mov	r2, r3
 8002210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002214:	7b9b      	ldrb	r3, [r3, #14]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	431a      	orrs	r2, r3
 800221a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800221e:	7bdb      	ldrb	r3, [r3, #15]
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002228:	7c1b      	ldrb	r3, [r3, #16]
 800222a:	061b      	lsls	r3, r3, #24
 800222c:	4313      	orrs	r3, r2
 800222e:	461a      	mov	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]
            parse_valid = 1;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 800223a:	e0dc      	b.n	80023f6 <znp_cmd_cluster_in_read+0x7a2>

        case ZCL_DATA_40BITS:
        case ZCL_BITMAP_40BITS:
        case ZCL_UNSIGNED_40BITS:
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 800223c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002240:	7b5b      	ldrb	r3, [r3, #13]
 8002242:	461a      	mov	r2, r3
 8002244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002248:	7b9b      	ldrb	r3, [r3, #14]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	431a      	orrs	r2, r3
 800224e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002252:	7bdb      	ldrb	r3, [r3, #15]
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	431a      	orrs	r2, r3
 8002258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800225c:	7c1b      	ldrb	r3, [r3, #16]
 800225e:	061b      	lsls	r3, r3, #24
 8002260:	431a      	orrs	r2, r3
                            (event->data[11] << 32));
 8002262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002266:	7c5b      	ldrb	r3, [r3, #17]
 8002268:	4619      	mov	r1, r3
 800226a:	2320      	movs	r3, #32
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 8002270:	4313      	orrs	r3, r2
 8002272:	461a      	mov	r2, r3
 8002274:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	e9c1 2302 	strd	r2, r3, [r1, #8]
            parse_valid = 1;
 800227e:	2301      	movs	r3, #1
 8002280:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8002284:	e0b7      	b.n	80023f6 <znp_cmd_cluster_in_read+0x7a2>
            break;

        case ZCL_DATA_48BITS:
        case ZCL_BITMAP_48BITS:
        case ZCL_UNSIGNED_48BITS:
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 8002286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800228a:	7b5b      	ldrb	r3, [r3, #13]
 800228c:	461a      	mov	r2, r3
 800228e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002292:	7b9b      	ldrb	r3, [r3, #14]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	431a      	orrs	r2, r3
 8002298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800229c:	7bdb      	ldrb	r3, [r3, #15]
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	431a      	orrs	r2, r3
 80022a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a6:	7c1b      	ldrb	r3, [r3, #16]
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	431a      	orrs	r2, r3
                            (event->data[11] << 32) | (event->data[12] << 40));
 80022ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022b0:	7c5b      	ldrb	r3, [r3, #17]
 80022b2:	4619      	mov	r1, r3
 80022b4:	2320      	movs	r3, #32
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 80022ba:	431a      	orrs	r2, r3
                            (event->data[11] << 32) | (event->data[12] << 40));
 80022bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022c0:	7c9b      	ldrb	r3, [r3, #18]
 80022c2:	4619      	mov	r1, r3
 80022c4:	2328      	movs	r3, #40	; 0x28
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            parse_valid = 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 80022de:	e08a      	b.n	80023f6 <znp_cmd_cluster_in_read+0x7a2>
            break;

        case ZCL_DATA_56BITS:
        case ZCL_BITMAP_56BITS:
        case ZCL_UNSIGNED_56BITS:
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 80022e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022e4:	7b5b      	ldrb	r3, [r3, #13]
 80022e6:	461a      	mov	r2, r3
 80022e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ec:	7b9b      	ldrb	r3, [r3, #14]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	431a      	orrs	r2, r3
 80022f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022f6:	7bdb      	ldrb	r3, [r3, #15]
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002300:	7c1b      	ldrb	r3, [r3, #16]
 8002302:	061b      	lsls	r3, r3, #24
 8002304:	431a      	orrs	r2, r3
                            (event->data[11] << 32) | (event->data[12] << 40) | (event->data[13] << 48));
 8002306:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800230a:	7c5b      	ldrb	r3, [r3, #17]
 800230c:	4619      	mov	r1, r3
 800230e:	2320      	movs	r3, #32
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 8002314:	431a      	orrs	r2, r3
                            (event->data[11] << 32) | (event->data[12] << 40) | (event->data[13] << 48));
 8002316:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800231a:	7c9b      	ldrb	r3, [r3, #18]
 800231c:	4619      	mov	r1, r3
 800231e:	2328      	movs	r3, #40	; 0x28
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	431a      	orrs	r2, r3
 8002326:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800232a:	7cdb      	ldrb	r3, [r3, #19]
 800232c:	4619      	mov	r1, r3
 800232e:	2330      	movs	r3, #48	; 0x30
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	4313      	orrs	r3, r2
 8002336:	461a      	mov	r2, r3
 8002338:	ea4f 73e2 	mov.w	r3, r2, asr #31
            record->data_u64 = (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            parse_valid = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 8002348:	e055      	b.n	80023f6 <znp_cmd_cluster_in_read+0x7a2>
        case ZCL_DATA_64BITS:
        case ZCL_BITMAP_64BITS:
        case ZCL_UNSIGNED_64BITS:
        case ZCL_SIGNED_64BITS:
            record->data_u64 =
                (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 800234a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800234e:	7b5b      	ldrb	r3, [r3, #13]
 8002350:	461a      	mov	r2, r3
 8002352:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002356:	7b9b      	ldrb	r3, [r3, #14]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	431a      	orrs	r2, r3
 800235c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002360:	7bdb      	ldrb	r3, [r3, #15]
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	431a      	orrs	r2, r3
 8002366:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800236a:	7c1b      	ldrb	r3, [r3, #16]
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	431a      	orrs	r2, r3
                 (event->data[11] << 32) | (event->data[12] << 40) | (event->data[13] << 48) | (event->data[14] << 56));
 8002370:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002374:	7c5b      	ldrb	r3, [r3, #17]
 8002376:	4619      	mov	r1, r3
 8002378:	2320      	movs	r3, #32
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
                (event->data[7] | (event->data[8] << 8) | (event->data[9] << 16) | (event->data[10] << 24) |
 800237e:	431a      	orrs	r2, r3
                 (event->data[11] << 32) | (event->data[12] << 40) | (event->data[13] << 48) | (event->data[14] << 56));
 8002380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002384:	7c9b      	ldrb	r3, [r3, #18]
 8002386:	4619      	mov	r1, r3
 8002388:	2328      	movs	r3, #40	; 0x28
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	431a      	orrs	r2, r3
 8002390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002394:	7cdb      	ldrb	r3, [r3, #19]
 8002396:	4619      	mov	r1, r3
 8002398:	2330      	movs	r3, #48	; 0x30
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	431a      	orrs	r2, r3
 80023a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023a4:	7d1b      	ldrb	r3, [r3, #20]
 80023a6:	4619      	mov	r1, r3
 80023a8:	2338      	movs	r3, #56	; 0x38
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
            record->data_u64 =
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            parse_valid = 1;
 80023bc:	2301      	movs	r3, #1
 80023be:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 80023c2:	e018      	b.n	80023f6 <znp_cmd_cluster_in_read+0x7a2>
        case ZCL_DOUBLE_PRECISION:
            break;

        case ZCL_OCTET_STRING:
        case ZCL_CHARACTER_STRING:
            record->data_arr_len = MIN(ZNP_DATA_LEN_MAX, event->data[7]);
 80023c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023c8:	7b5b      	ldrb	r3, [r3, #13]
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	bf28      	it	cs
 80023ce:	2320      	movcs	r3, #32
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	721a      	strb	r2, [r3, #8]
            memcpy(record->data_arr, &event->data[8], record->data_arr_len);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f103 0008 	add.w	r0, r3, #8
 80023dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023e0:	f103 010e 	add.w	r1, r3, #14
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7a1b      	ldrb	r3, [r3, #8]
 80023e8:	461a      	mov	r2, r3
 80023ea:	f00b fcbf 	bl	800dd6c <memcpy>
            parse_valid = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            break;
 80023f4:	bf00      	nop
        case ZCL_UNKNOWN:
            break;
    }

    // check
    if (parse_valid)
 80023f6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <znp_cmd_cluster_in_read+0x7ae>
        return 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	e001      	b.n	8002406 <znp_cmd_cluster_in_read+0x7b2>
    else
        return -1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002406:	4618      	mov	r0, r3
 8002408:	37a8      	adds	r7, #168	; 0xa8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop

08002410 <znp_cmd_cluster_in_write>:

int znp_cmd_cluster_in_write(uint16_t address, uint16_t cluster, uint16_t attribute, zcl_cluster_record_t* record) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b0ac      	sub	sp, #176	; 0xb0
 8002414:	af00      	add	r7, sp, #0
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	4603      	mov	r3, r0
 800241a:	81fb      	strh	r3, [r7, #14]
 800241c:	460b      	mov	r3, r1
 800241e:	81bb      	strh	r3, [r7, #12]
 8002420:	4613      	mov	r3, r2
 8002422:	817b      	strh	r3, [r7, #10]
    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 8002424:	89fb      	ldrh	r3, [r7, #14]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fe40 	bl	80030ac <znp_if_dev_get>
 800242c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

    // invalid handle?
    if (dev == NULL)
 8002430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <znp_cmd_cluster_in_write+0x30>
        return -1;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	f000 bdc4 	b.w	8002fc8 <znp_cmd_cluster_in_write+0xbb8>

    // sanity check if data is ok
    if (!znp_dev_has_in_cluster(dev, cluster))
 8002440:	89bb      	ldrh	r3, [r7, #12]
 8002442:	4619      	mov	r1, r3
 8002444:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002448:	f7ff faf0 	bl	8001a2c <znp_dev_has_in_cluster>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <znp_cmd_cluster_in_write+0x4a>
        return -1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	f000 bdb7 	b.w	8002fc8 <znp_cmd_cluster_in_write+0xbb8>

    // increase number
    _znp_cmd_sequence_num++;
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <znp_cmd_cluster_in_write+0xf8>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b29      	ldr	r3, [pc, #164]	; (8002508 <znp_cmd_cluster_in_write+0xf8>)
 8002464:	701a      	strb	r2, [r3, #0]

    // read a cluster
    DataRequestFormat_t data_req;
    data_req.DstAddr = dev->adr_short;
 8002466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	82bb      	strh	r3, [r7, #20]
    data_req.DstEndpoint = 0x01;
 800246e:	2301      	movs	r3, #1
 8002470:	75bb      	strb	r3, [r7, #22]
    data_req.SrcEndpoint = 0x01;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    data_req.ClusterID = cluster;
 8002476:	89bb      	ldrh	r3, [r7, #12]
 8002478:	833b      	strh	r3, [r7, #24]
    data_req.TransID = 0x05;
 800247a:	2305      	movs	r3, #5
 800247c:	76bb      	strb	r3, [r7, #26]
    data_req.Options = 0x00;
 800247e:	2300      	movs	r3, #0
 8002480:	76fb      	strb	r3, [r7, #27]
    data_req.Radius = 0x07;
 8002482:	2307      	movs	r3, #7
 8002484:	773b      	strb	r3, [r7, #28]
    data_req.Len = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	777b      	strb	r3, [r7, #29]
    data_req.Data[data_req.Len++] = 0x00;                   // ZCL Header: frame control
 800248a:	7f7b      	ldrb	r3, [r7, #29]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	777a      	strb	r2, [r7, #29]
 8002492:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002496:	4413      	add	r3, r2
 8002498:	2200      	movs	r2, #0
 800249a:	f803 2c92 	strb.w	r2, [r3, #-146]
    data_req.Data[data_req.Len++] = _znp_cmd_sequence_num;  // ZCL Header: transaction sequence num
 800249e:	7f7b      	ldrb	r3, [r7, #29]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	777a      	strb	r2, [r7, #29]
 80024a6:	4619      	mov	r1, r3
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <znp_cmd_cluster_in_write+0xf8>)
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024b0:	440b      	add	r3, r1
 80024b2:	f803 2c92 	strb.w	r2, [r3, #-146]
    data_req.Data[data_req.Len++] = ZCL_CMD_WRITE_ATTR;     // ZCL Header: Command ID
 80024b6:	7f7b      	ldrb	r3, [r7, #29]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	777a      	strb	r2, [r7, #29]
 80024be:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80024c2:	4413      	add	r3, r2
 80024c4:	2202      	movs	r2, #2
 80024c6:	f803 2c92 	strb.w	r2, [r3, #-146]
    data_req.Data[data_req.Len++] = attribute & 0xFF;       // Data: Cluster 16bit low
 80024ca:	7f7b      	ldrb	r3, [r7, #29]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	777a      	strb	r2, [r7, #29]
 80024d2:	897a      	ldrh	r2, [r7, #10]
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80024da:	440b      	add	r3, r1
 80024dc:	f803 2c92 	strb.w	r2, [r3, #-146]
    data_req.Data[data_req.Len++] = attribute >> 8;         // Data: Cluster 16bit high
 80024e0:	897b      	ldrh	r3, [r7, #10]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	7f7b      	ldrb	r3, [r7, #29]
 80024e8:	1c59      	adds	r1, r3, #1
 80024ea:	b2c9      	uxtb	r1, r1
 80024ec:	7779      	strb	r1, [r7, #29]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80024f4:	440b      	add	r3, r1
 80024f6:	f803 2c92 	strb.w	r2, [r3, #-146]

    uint8_t parse_valid = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    // Data: parse type and data
    switch (record->type) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	e002      	b.n	800250c <znp_cmd_cluster_in_write+0xfc>
 8002506:	bf00      	nop
 8002508:	200004e0 	.word	0x200004e0
 800250c:	2bff      	cmp	r3, #255	; 0xff
 800250e:	f200 851a 	bhi.w	8002f46 <znp_cmd_cluster_in_write+0xb36>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <znp_cmd_cluster_in_write+0x108>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002919 	.word	0x08002919
 800251c:	08002f47 	.word	0x08002f47
 8002520:	08002f47 	.word	0x08002f47
 8002524:	08002f47 	.word	0x08002f47
 8002528:	08002f47 	.word	0x08002f47
 800252c:	08002f47 	.word	0x08002f47
 8002530:	08002f47 	.word	0x08002f47
 8002534:	08002f47 	.word	0x08002f47
 8002538:	08002919 	.word	0x08002919
 800253c:	08002951 	.word	0x08002951
 8002540:	080029a5 	.word	0x080029a5
 8002544:	08002a11 	.word	0x08002a11
 8002548:	08002a97 	.word	0x08002a97
 800254c:	08002b75 	.word	0x08002b75
 8002550:	08002c79 	.word	0x08002c79
 8002554:	08002da3 	.word	0x08002da3
 8002558:	08002919 	.word	0x08002919
 800255c:	08002f47 	.word	0x08002f47
 8002560:	08002f47 	.word	0x08002f47
 8002564:	08002f47 	.word	0x08002f47
 8002568:	08002f47 	.word	0x08002f47
 800256c:	08002f47 	.word	0x08002f47
 8002570:	08002f47 	.word	0x08002f47
 8002574:	08002f47 	.word	0x08002f47
 8002578:	08002919 	.word	0x08002919
 800257c:	08002951 	.word	0x08002951
 8002580:	080029a5 	.word	0x080029a5
 8002584:	08002a11 	.word	0x08002a11
 8002588:	08002a97 	.word	0x08002a97
 800258c:	08002b75 	.word	0x08002b75
 8002590:	08002c79 	.word	0x08002c79
 8002594:	08002da3 	.word	0x08002da3
 8002598:	08002919 	.word	0x08002919
 800259c:	08002951 	.word	0x08002951
 80025a0:	080029a5 	.word	0x080029a5
 80025a4:	08002a11 	.word	0x08002a11
 80025a8:	08002a97 	.word	0x08002a97
 80025ac:	08002b75 	.word	0x08002b75
 80025b0:	08002c79 	.word	0x08002c79
 80025b4:	08002da3 	.word	0x08002da3
 80025b8:	08002919 	.word	0x08002919
 80025bc:	08002951 	.word	0x08002951
 80025c0:	08002f47 	.word	0x08002f47
 80025c4:	08002a11 	.word	0x08002a11
 80025c8:	08002f47 	.word	0x08002f47
 80025cc:	08002f47 	.word	0x08002f47
 80025d0:	08002f47 	.word	0x08002f47
 80025d4:	08002da3 	.word	0x08002da3
 80025d8:	08002919 	.word	0x08002919
 80025dc:	08002951 	.word	0x08002951
 80025e0:	08002f47 	.word	0x08002f47
 80025e4:	08002f47 	.word	0x08002f47
 80025e8:	08002f47 	.word	0x08002f47
 80025ec:	08002f47 	.word	0x08002f47
 80025f0:	08002f47 	.word	0x08002f47
 80025f4:	08002f47 	.word	0x08002f47
 80025f8:	08002f47 	.word	0x08002f47
 80025fc:	08002f47 	.word	0x08002f47
 8002600:	08002f47 	.word	0x08002f47
 8002604:	08002f47 	.word	0x08002f47
 8002608:	08002f47 	.word	0x08002f47
 800260c:	08002f47 	.word	0x08002f47
 8002610:	08002f47 	.word	0x08002f47
 8002614:	08002f47 	.word	0x08002f47
 8002618:	08002f47 	.word	0x08002f47
 800261c:	08002ef3 	.word	0x08002ef3
 8002620:	08002ef3 	.word	0x08002ef3
 8002624:	08002f47 	.word	0x08002f47
 8002628:	08002f47 	.word	0x08002f47
 800262c:	08002f47 	.word	0x08002f47
 8002630:	08002f47 	.word	0x08002f47
 8002634:	08002f47 	.word	0x08002f47
 8002638:	08002f47 	.word	0x08002f47
 800263c:	08002f47 	.word	0x08002f47
 8002640:	08002f47 	.word	0x08002f47
 8002644:	08002f47 	.word	0x08002f47
 8002648:	08002f47 	.word	0x08002f47
 800264c:	08002f47 	.word	0x08002f47
 8002650:	08002f47 	.word	0x08002f47
 8002654:	08002f47 	.word	0x08002f47
 8002658:	08002f47 	.word	0x08002f47
 800265c:	08002f47 	.word	0x08002f47
 8002660:	08002f47 	.word	0x08002f47
 8002664:	08002f47 	.word	0x08002f47
 8002668:	08002f47 	.word	0x08002f47
 800266c:	08002f47 	.word	0x08002f47
 8002670:	08002f47 	.word	0x08002f47
 8002674:	08002f47 	.word	0x08002f47
 8002678:	08002f47 	.word	0x08002f47
 800267c:	08002f47 	.word	0x08002f47
 8002680:	08002f47 	.word	0x08002f47
 8002684:	08002f47 	.word	0x08002f47
 8002688:	08002f47 	.word	0x08002f47
 800268c:	08002f47 	.word	0x08002f47
 8002690:	08002f47 	.word	0x08002f47
 8002694:	08002f47 	.word	0x08002f47
 8002698:	08002f47 	.word	0x08002f47
 800269c:	08002f47 	.word	0x08002f47
 80026a0:	08002f47 	.word	0x08002f47
 80026a4:	08002f47 	.word	0x08002f47
 80026a8:	08002f47 	.word	0x08002f47
 80026ac:	08002f47 	.word	0x08002f47
 80026b0:	08002f47 	.word	0x08002f47
 80026b4:	08002f47 	.word	0x08002f47
 80026b8:	08002f47 	.word	0x08002f47
 80026bc:	08002f47 	.word	0x08002f47
 80026c0:	08002f47 	.word	0x08002f47
 80026c4:	08002f47 	.word	0x08002f47
 80026c8:	08002f47 	.word	0x08002f47
 80026cc:	08002f47 	.word	0x08002f47
 80026d0:	08002f47 	.word	0x08002f47
 80026d4:	08002f47 	.word	0x08002f47
 80026d8:	08002f47 	.word	0x08002f47
 80026dc:	08002f47 	.word	0x08002f47
 80026e0:	08002f47 	.word	0x08002f47
 80026e4:	08002f47 	.word	0x08002f47
 80026e8:	08002f47 	.word	0x08002f47
 80026ec:	08002f47 	.word	0x08002f47
 80026f0:	08002f47 	.word	0x08002f47
 80026f4:	08002f47 	.word	0x08002f47
 80026f8:	08002f47 	.word	0x08002f47
 80026fc:	08002f47 	.word	0x08002f47
 8002700:	08002f47 	.word	0x08002f47
 8002704:	08002f47 	.word	0x08002f47
 8002708:	08002f47 	.word	0x08002f47
 800270c:	08002f47 	.word	0x08002f47
 8002710:	08002f47 	.word	0x08002f47
 8002714:	08002f47 	.word	0x08002f47
 8002718:	08002f47 	.word	0x08002f47
 800271c:	08002f47 	.word	0x08002f47
 8002720:	08002f47 	.word	0x08002f47
 8002724:	08002f47 	.word	0x08002f47
 8002728:	08002f47 	.word	0x08002f47
 800272c:	08002f47 	.word	0x08002f47
 8002730:	08002f47 	.word	0x08002f47
 8002734:	08002f47 	.word	0x08002f47
 8002738:	08002f47 	.word	0x08002f47
 800273c:	08002f47 	.word	0x08002f47
 8002740:	08002f47 	.word	0x08002f47
 8002744:	08002f47 	.word	0x08002f47
 8002748:	08002f47 	.word	0x08002f47
 800274c:	08002f47 	.word	0x08002f47
 8002750:	08002f47 	.word	0x08002f47
 8002754:	08002f47 	.word	0x08002f47
 8002758:	08002f47 	.word	0x08002f47
 800275c:	08002f47 	.word	0x08002f47
 8002760:	08002f47 	.word	0x08002f47
 8002764:	08002f47 	.word	0x08002f47
 8002768:	08002f47 	.word	0x08002f47
 800276c:	08002f47 	.word	0x08002f47
 8002770:	08002f47 	.word	0x08002f47
 8002774:	08002f47 	.word	0x08002f47
 8002778:	08002f47 	.word	0x08002f47
 800277c:	08002f47 	.word	0x08002f47
 8002780:	08002f47 	.word	0x08002f47
 8002784:	08002f47 	.word	0x08002f47
 8002788:	08002f47 	.word	0x08002f47
 800278c:	08002f47 	.word	0x08002f47
 8002790:	08002f47 	.word	0x08002f47
 8002794:	08002f47 	.word	0x08002f47
 8002798:	08002f47 	.word	0x08002f47
 800279c:	08002f47 	.word	0x08002f47
 80027a0:	08002f47 	.word	0x08002f47
 80027a4:	08002f47 	.word	0x08002f47
 80027a8:	08002f47 	.word	0x08002f47
 80027ac:	08002f47 	.word	0x08002f47
 80027b0:	08002f47 	.word	0x08002f47
 80027b4:	08002f47 	.word	0x08002f47
 80027b8:	08002f47 	.word	0x08002f47
 80027bc:	08002f47 	.word	0x08002f47
 80027c0:	08002f47 	.word	0x08002f47
 80027c4:	08002f47 	.word	0x08002f47
 80027c8:	08002f47 	.word	0x08002f47
 80027cc:	08002f47 	.word	0x08002f47
 80027d0:	08002f47 	.word	0x08002f47
 80027d4:	08002f47 	.word	0x08002f47
 80027d8:	08002f47 	.word	0x08002f47
 80027dc:	08002f47 	.word	0x08002f47
 80027e0:	08002f47 	.word	0x08002f47
 80027e4:	08002f47 	.word	0x08002f47
 80027e8:	08002f47 	.word	0x08002f47
 80027ec:	08002f47 	.word	0x08002f47
 80027f0:	08002f47 	.word	0x08002f47
 80027f4:	08002f47 	.word	0x08002f47
 80027f8:	08002f47 	.word	0x08002f47
 80027fc:	08002f47 	.word	0x08002f47
 8002800:	08002f47 	.word	0x08002f47
 8002804:	08002f47 	.word	0x08002f47
 8002808:	08002f47 	.word	0x08002f47
 800280c:	08002f47 	.word	0x08002f47
 8002810:	08002f47 	.word	0x08002f47
 8002814:	08002f47 	.word	0x08002f47
 8002818:	08002f47 	.word	0x08002f47
 800281c:	08002f47 	.word	0x08002f47
 8002820:	08002f47 	.word	0x08002f47
 8002824:	08002f47 	.word	0x08002f47
 8002828:	08002f47 	.word	0x08002f47
 800282c:	08002f47 	.word	0x08002f47
 8002830:	08002f47 	.word	0x08002f47
 8002834:	08002f47 	.word	0x08002f47
 8002838:	08002f47 	.word	0x08002f47
 800283c:	08002f47 	.word	0x08002f47
 8002840:	08002f47 	.word	0x08002f47
 8002844:	08002f47 	.word	0x08002f47
 8002848:	08002f47 	.word	0x08002f47
 800284c:	08002f47 	.word	0x08002f47
 8002850:	08002f47 	.word	0x08002f47
 8002854:	08002f47 	.word	0x08002f47
 8002858:	08002f47 	.word	0x08002f47
 800285c:	08002f47 	.word	0x08002f47
 8002860:	08002f47 	.word	0x08002f47
 8002864:	08002f47 	.word	0x08002f47
 8002868:	08002f47 	.word	0x08002f47
 800286c:	08002f47 	.word	0x08002f47
 8002870:	08002f47 	.word	0x08002f47
 8002874:	08002f47 	.word	0x08002f47
 8002878:	08002f47 	.word	0x08002f47
 800287c:	08002f47 	.word	0x08002f47
 8002880:	08002f47 	.word	0x08002f47
 8002884:	08002f47 	.word	0x08002f47
 8002888:	08002f47 	.word	0x08002f47
 800288c:	08002f47 	.word	0x08002f47
 8002890:	08002f47 	.word	0x08002f47
 8002894:	08002f47 	.word	0x08002f47
 8002898:	08002f47 	.word	0x08002f47
 800289c:	08002f47 	.word	0x08002f47
 80028a0:	08002f47 	.word	0x08002f47
 80028a4:	08002f47 	.word	0x08002f47
 80028a8:	08002f47 	.word	0x08002f47
 80028ac:	08002f47 	.word	0x08002f47
 80028b0:	08002f47 	.word	0x08002f47
 80028b4:	08002f47 	.word	0x08002f47
 80028b8:	08002f47 	.word	0x08002f47
 80028bc:	08002f47 	.word	0x08002f47
 80028c0:	08002f47 	.word	0x08002f47
 80028c4:	08002f47 	.word	0x08002f47
 80028c8:	08002f47 	.word	0x08002f47
 80028cc:	08002f47 	.word	0x08002f47
 80028d0:	08002f47 	.word	0x08002f47
 80028d4:	08002f47 	.word	0x08002f47
 80028d8:	08002f47 	.word	0x08002f47
 80028dc:	08002f47 	.word	0x08002f47
 80028e0:	08002f47 	.word	0x08002f47
 80028e4:	08002f47 	.word	0x08002f47
 80028e8:	08002f47 	.word	0x08002f47
 80028ec:	08002f47 	.word	0x08002f47
 80028f0:	08002f47 	.word	0x08002f47
 80028f4:	08002f47 	.word	0x08002f47
 80028f8:	08002f47 	.word	0x08002f47
 80028fc:	08002f47 	.word	0x08002f47
 8002900:	08002f47 	.word	0x08002f47
 8002904:	08002f47 	.word	0x08002f47
 8002908:	08002f47 	.word	0x08002f47
 800290c:	08002f47 	.word	0x08002f47
 8002910:	08002f47 	.word	0x08002f47
 8002914:	08002f47 	.word	0x08002f47
        case ZCL_BITMAP_8BITS:
        case ZCL_UNSIGNED_8BITS:
        case ZCL_ENUMERATION_8BITS:
        case ZCL_BOOLEAN_8BITS:
        case ZCL_SIGNED_8BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002918:	7f7b      	ldrb	r3, [r7, #29]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	777a      	strb	r2, [r7, #29]
 8002920:	4619      	mov	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800292a:	440b      	add	r3, r1
 800292c:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u8;
 8002930:	7f7b      	ldrb	r3, [r7, #29]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	777a      	strb	r2, [r7, #29]
 8002938:	4619      	mov	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7a1a      	ldrb	r2, [r3, #8]
 800293e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002942:	440b      	add	r3, r1
 8002944:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 800294e:	e2fa      	b.n	8002f46 <znp_cmd_cluster_in_write+0xb36>
        case ZCL_DATA_16BITS:
        case ZCL_BITMAP_16BITS:
        case ZCL_UNSIGNED_16BITS:
        case ZCL_ENUMERATION_16BITS:
        case ZCL_SIGNED_16BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002950:	7f7b      	ldrb	r3, [r7, #29]
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	777a      	strb	r2, [r7, #29]
 8002958:	4619      	mov	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002962:	440b      	add	r3, r1
 8002964:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u16 & 0xFF;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	891a      	ldrh	r2, [r3, #8]
 800296c:	7f7b      	ldrb	r3, [r7, #29]
 800296e:	1c59      	adds	r1, r3, #1
 8002970:	b2c9      	uxtb	r1, r1
 8002972:	7779      	strb	r1, [r7, #29]
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800297a:	440b      	add	r3, r1
 800297c:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u16 >> 8) & 0xFF;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	891b      	ldrh	r3, [r3, #8]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	b29a      	uxth	r2, r3
 8002988:	7f7b      	ldrb	r3, [r7, #29]
 800298a:	1c59      	adds	r1, r3, #1
 800298c:	b2c9      	uxtb	r1, r1
 800298e:	7779      	strb	r1, [r7, #29]
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002996:	440b      	add	r3, r1
 8002998:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 80029a2:	e2d0      	b.n	8002f46 <znp_cmd_cluster_in_write+0xb36>

        case ZCL_DATA_24BITS:
        case ZCL_BITMAP_24BITS:
        case ZCL_UNSIGNED_24BITS:
            data_req.Data[data_req.Len++] = record->type;
 80029a4:	7f7b      	ldrb	r3, [r7, #29]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	777a      	strb	r2, [r7, #29]
 80029ac:	4619      	mov	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029b6:	440b      	add	r3, r1
 80029b8:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u32 & 0xFF;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	7f7b      	ldrb	r3, [r7, #29]
 80029c2:	1c59      	adds	r1, r3, #1
 80029c4:	b2c9      	uxtb	r1, r1
 80029c6:	7779      	strb	r1, [r7, #29]
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80029ce:	440b      	add	r3, r1
 80029d0:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u32 >> 8) & 0xFF;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	0a1a      	lsrs	r2, r3, #8
 80029da:	7f7b      	ldrb	r3, [r7, #29]
 80029dc:	1c59      	adds	r1, r3, #1
 80029de:	b2c9      	uxtb	r1, r1
 80029e0:	7779      	strb	r1, [r7, #29]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80029e8:	440b      	add	r3, r1
 80029ea:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u32 >> 16) & 0xFF;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0c1a      	lsrs	r2, r3, #16
 80029f4:	7f7b      	ldrb	r3, [r7, #29]
 80029f6:	1c59      	adds	r1, r3, #1
 80029f8:	b2c9      	uxtb	r1, r1
 80029fa:	7779      	strb	r1, [r7, #29]
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002a02:	440b      	add	r3, r1
 8002a04:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 8002a0e:	e29a      	b.n	8002f46 <znp_cmd_cluster_in_write+0xb36>

        case ZCL_DATA_32BITS:
        case ZCL_BITMAP_32BITS:
        case ZCL_UNSIGNED_32BITS:
        case ZCL_SIGNED_32BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002a10:	7f7b      	ldrb	r3, [r7, #29]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	777a      	strb	r2, [r7, #29]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002a22:	440b      	add	r3, r1
 8002a24:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u32 & 0xFF;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	7f7b      	ldrb	r3, [r7, #29]
 8002a2e:	1c59      	adds	r1, r3, #1
 8002a30:	b2c9      	uxtb	r1, r1
 8002a32:	7779      	strb	r1, [r7, #29]
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u32 >> 8) & 0xFF;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	0a1a      	lsrs	r2, r3, #8
 8002a46:	7f7b      	ldrb	r3, [r7, #29]
 8002a48:	1c59      	adds	r1, r3, #1
 8002a4a:	b2c9      	uxtb	r1, r1
 8002a4c:	7779      	strb	r1, [r7, #29]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002a54:	440b      	add	r3, r1
 8002a56:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u32 >> 16) & 0xFF;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	0c1a      	lsrs	r2, r3, #16
 8002a60:	7f7b      	ldrb	r3, [r7, #29]
 8002a62:	1c59      	adds	r1, r3, #1
 8002a64:	b2c9      	uxtb	r1, r1
 8002a66:	7779      	strb	r1, [r7, #29]
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002a6e:	440b      	add	r3, r1
 8002a70:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u32 >> 24) & 0xFF;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	0e1a      	lsrs	r2, r3, #24
 8002a7a:	7f7b      	ldrb	r3, [r7, #29]
 8002a7c:	1c59      	adds	r1, r3, #1
 8002a7e:	b2c9      	uxtb	r1, r1
 8002a80:	7779      	strb	r1, [r7, #29]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002a88:	440b      	add	r3, r1
 8002a8a:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 8002a94:	e257      	b.n	8002f46 <znp_cmd_cluster_in_write+0xb36>

        case ZCL_DATA_40BITS:
        case ZCL_BITMAP_40BITS:
        case ZCL_UNSIGNED_40BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002a96:	7f7b      	ldrb	r3, [r7, #29]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	777a      	strb	r2, [r7, #29]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u64 & 0xFF;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ab4:	7f79      	ldrb	r1, [r7, #29]
 8002ab6:	1c48      	adds	r0, r1, #1
 8002ab8:	b2c0      	uxtb	r0, r0
 8002aba:	7778      	strb	r0, [r7, #29]
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 8) & 0xFF;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	0a02      	lsrs	r2, r0, #8
 8002ad8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002adc:	0a0b      	lsrs	r3, r1, #8
 8002ade:	7f79      	ldrb	r1, [r7, #29]
 8002ae0:	1c48      	adds	r0, r1, #1
 8002ae2:	b2c0      	uxtb	r0, r0
 8002ae4:	7778      	strb	r0, [r7, #29]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002aec:	440b      	add	r3, r1
 8002aee:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 16) & 0xFF;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	0c02      	lsrs	r2, r0, #16
 8002b02:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b06:	0c0b      	lsrs	r3, r1, #16
 8002b08:	7f79      	ldrb	r1, [r7, #29]
 8002b0a:	1c48      	adds	r0, r1, #1
 8002b0c:	b2c0      	uxtb	r0, r0
 8002b0e:	7778      	strb	r0, [r7, #29]
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b16:	440b      	add	r3, r1
 8002b18:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 24) & 0xFF;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	0e02      	lsrs	r2, r0, #24
 8002b2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b30:	0e0b      	lsrs	r3, r1, #24
 8002b32:	7f79      	ldrb	r1, [r7, #29]
 8002b34:	1c48      	adds	r0, r1, #1
 8002b36:	b2c0      	uxtb	r0, r0
 8002b38:	7778      	strb	r0, [r7, #29]
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b40:	440b      	add	r3, r1
 8002b42:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 32) & 0xFF;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	000a      	movs	r2, r1
 8002b56:	2300      	movs	r3, #0
 8002b58:	7f79      	ldrb	r1, [r7, #29]
 8002b5a:	1c48      	adds	r0, r1, #1
 8002b5c:	b2c0      	uxtb	r0, r0
 8002b5e:	7778      	strb	r0, [r7, #29]
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b66:	440b      	add	r3, r1
 8002b68:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 8002b72:	e1e8      	b.n	8002f46 <znp_cmd_cluster_in_write+0xb36>
            break;

        case ZCL_DATA_48BITS:
        case ZCL_BITMAP_48BITS:
        case ZCL_UNSIGNED_48BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002b74:	7f7b      	ldrb	r3, [r7, #29]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	777a      	strb	r2, [r7, #29]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b86:	440b      	add	r3, r1
 8002b88:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u64 & 0xFF;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b92:	7f79      	ldrb	r1, [r7, #29]
 8002b94:	1c48      	adds	r0, r1, #1
 8002b96:	b2c0      	uxtb	r0, r0
 8002b98:	7778      	strb	r0, [r7, #29]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 8) & 0xFF;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	0a02      	lsrs	r2, r0, #8
 8002bb6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002bba:	0a0b      	lsrs	r3, r1, #8
 8002bbc:	7f79      	ldrb	r1, [r7, #29]
 8002bbe:	1c48      	adds	r0, r1, #1
 8002bc0:	b2c0      	uxtb	r0, r0
 8002bc2:	7778      	strb	r0, [r7, #29]
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bca:	440b      	add	r3, r1
 8002bcc:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 16) & 0xFF;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	0c02      	lsrs	r2, r0, #16
 8002be0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002be4:	0c0b      	lsrs	r3, r1, #16
 8002be6:	7f79      	ldrb	r1, [r7, #29]
 8002be8:	1c48      	adds	r0, r1, #1
 8002bea:	b2c0      	uxtb	r0, r0
 8002bec:	7778      	strb	r0, [r7, #29]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 24) & 0xFF;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	0e02      	lsrs	r2, r0, #24
 8002c0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c0e:	0e0b      	lsrs	r3, r1, #24
 8002c10:	7f79      	ldrb	r1, [r7, #29]
 8002c12:	1c48      	adds	r0, r1, #1
 8002c14:	b2c0      	uxtb	r0, r0
 8002c16:	7778      	strb	r0, [r7, #29]
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c1e:	440b      	add	r3, r1
 8002c20:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 32) & 0xFF;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	000a      	movs	r2, r1
 8002c34:	2300      	movs	r3, #0
 8002c36:	7f79      	ldrb	r1, [r7, #29]
 8002c38:	1c48      	adds	r0, r1, #1
 8002c3a:	b2c0      	uxtb	r0, r0
 8002c3c:	7778      	strb	r0, [r7, #29]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c44:	440b      	add	r3, r1
 8002c46:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 40) & 0xFF;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	0a0a      	lsrs	r2, r1, #8
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	7f79      	ldrb	r1, [r7, #29]
 8002c5e:	1c48      	adds	r0, r1, #1
 8002c60:	b2c0      	uxtb	r0, r0
 8002c62:	7778      	strb	r0, [r7, #29]
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 8002c76:	e166      	b.n	8002f46 <znp_cmd_cluster_in_write+0xb36>
            break;

        case ZCL_DATA_56BITS:
        case ZCL_BITMAP_56BITS:
        case ZCL_UNSIGNED_56BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002c78:	7f7b      	ldrb	r3, [r7, #29]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	777a      	strb	r2, [r7, #29]
 8002c80:	4619      	mov	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u64 & 0xFF;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c96:	7f79      	ldrb	r1, [r7, #29]
 8002c98:	1c48      	adds	r0, r1, #1
 8002c9a:	b2c0      	uxtb	r0, r0
 8002c9c:	7778      	strb	r0, [r7, #29]
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 8) & 0xFF;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	0a02      	lsrs	r2, r0, #8
 8002cba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002cbe:	0a0b      	lsrs	r3, r1, #8
 8002cc0:	7f79      	ldrb	r1, [r7, #29]
 8002cc2:	1c48      	adds	r0, r1, #1
 8002cc4:	b2c0      	uxtb	r0, r0
 8002cc6:	7778      	strb	r0, [r7, #29]
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002cce:	440b      	add	r3, r1
 8002cd0:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 16) & 0xFF;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	0c02      	lsrs	r2, r0, #16
 8002ce4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ce8:	0c0b      	lsrs	r3, r1, #16
 8002cea:	7f79      	ldrb	r1, [r7, #29]
 8002cec:	1c48      	adds	r0, r1, #1
 8002cee:	b2c0      	uxtb	r0, r0
 8002cf0:	7778      	strb	r0, [r7, #29]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 24) & 0xFF;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	0e02      	lsrs	r2, r0, #24
 8002d0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d12:	0e0b      	lsrs	r3, r1, #24
 8002d14:	7f79      	ldrb	r1, [r7, #29]
 8002d16:	1c48      	adds	r0, r1, #1
 8002d18:	b2c0      	uxtb	r0, r0
 8002d1a:	7778      	strb	r0, [r7, #29]
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d22:	440b      	add	r3, r1
 8002d24:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 32) & 0xFF;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	000a      	movs	r2, r1
 8002d38:	2300      	movs	r3, #0
 8002d3a:	7f79      	ldrb	r1, [r7, #29]
 8002d3c:	1c48      	adds	r0, r1, #1
 8002d3e:	b2c0      	uxtb	r0, r0
 8002d40:	7778      	strb	r0, [r7, #29]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d48:	440b      	add	r3, r1
 8002d4a:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 40) & 0xFF;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	0a0a      	lsrs	r2, r1, #8
 8002d5e:	2300      	movs	r3, #0
 8002d60:	7f79      	ldrb	r1, [r7, #29]
 8002d62:	1c48      	adds	r0, r1, #1
 8002d64:	b2c0      	uxtb	r0, r0
 8002d66:	7778      	strb	r0, [r7, #29]
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d6e:	440b      	add	r3, r1
 8002d70:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 48) & 0xFF;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	0c0a      	lsrs	r2, r1, #16
 8002d84:	2300      	movs	r3, #0
 8002d86:	7f79      	ldrb	r1, [r7, #29]
 8002d88:	1c48      	adds	r0, r1, #1
 8002d8a:	b2c0      	uxtb	r0, r0
 8002d8c:	7778      	strb	r0, [r7, #29]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d94:	440b      	add	r3, r1
 8002d96:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 8002da0:	e0d1      	b.n	8002f46 <znp_cmd_cluster_in_write+0xb36>

        case ZCL_DATA_64BITS:
        case ZCL_BITMAP_64BITS:
        case ZCL_UNSIGNED_64BITS:
        case ZCL_SIGNED_64BITS:
            data_req.Data[data_req.Len++] = record->type;
 8002da2:	7f7b      	ldrb	r3, [r7, #29]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	777a      	strb	r2, [r7, #29]
 8002daa:	4619      	mov	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002db4:	440b      	add	r3, r1
 8002db6:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = record->data_u64 & 0xFF;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002dc0:	7f79      	ldrb	r1, [r7, #29]
 8002dc2:	1c48      	adds	r0, r1, #1
 8002dc4:	b2c0      	uxtb	r0, r0
 8002dc6:	7778      	strb	r0, [r7, #29]
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002dce:	440b      	add	r3, r1
 8002dd0:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 8) & 0xFF;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	0a02      	lsrs	r2, r0, #8
 8002de4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002de8:	0a0b      	lsrs	r3, r1, #8
 8002dea:	7f79      	ldrb	r1, [r7, #29]
 8002dec:	1c48      	adds	r0, r1, #1
 8002dee:	b2c0      	uxtb	r0, r0
 8002df0:	7778      	strb	r0, [r7, #29]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002df8:	440b      	add	r3, r1
 8002dfa:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 16) & 0xFF;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	0c02      	lsrs	r2, r0, #16
 8002e0e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e12:	0c0b      	lsrs	r3, r1, #16
 8002e14:	7f79      	ldrb	r1, [r7, #29]
 8002e16:	1c48      	adds	r0, r1, #1
 8002e18:	b2c0      	uxtb	r0, r0
 8002e1a:	7778      	strb	r0, [r7, #29]
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e22:	440b      	add	r3, r1
 8002e24:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 24) & 0xFF;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	0e02      	lsrs	r2, r0, #24
 8002e38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e3c:	0e0b      	lsrs	r3, r1, #24
 8002e3e:	7f79      	ldrb	r1, [r7, #29]
 8002e40:	1c48      	adds	r0, r1, #1
 8002e42:	b2c0      	uxtb	r0, r0
 8002e44:	7778      	strb	r0, [r7, #29]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e4c:	440b      	add	r3, r1
 8002e4e:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 32) & 0xFF;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	000a      	movs	r2, r1
 8002e62:	2300      	movs	r3, #0
 8002e64:	7f79      	ldrb	r1, [r7, #29]
 8002e66:	1c48      	adds	r0, r1, #1
 8002e68:	b2c0      	uxtb	r0, r0
 8002e6a:	7778      	strb	r0, [r7, #29]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e72:	440b      	add	r3, r1
 8002e74:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 40) & 0xFF;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	0a0a      	lsrs	r2, r1, #8
 8002e88:	2300      	movs	r3, #0
 8002e8a:	7f79      	ldrb	r1, [r7, #29]
 8002e8c:	1c48      	adds	r0, r1, #1
 8002e8e:	b2c0      	uxtb	r0, r0
 8002e90:	7778      	strb	r0, [r7, #29]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e98:	440b      	add	r3, r1
 8002e9a:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 48) & 0xFF;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	0c0a      	lsrs	r2, r1, #16
 8002eae:	2300      	movs	r3, #0
 8002eb0:	7f79      	ldrb	r1, [r7, #29]
 8002eb2:	1c48      	adds	r0, r1, #1
 8002eb4:	b2c0      	uxtb	r0, r0
 8002eb6:	7778      	strb	r0, [r7, #29]
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f803 2c92 	strb.w	r2, [r3, #-146]
            data_req.Data[data_req.Len++] = (record->data_u64 >> 56) & 0xFF;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	0e0a      	lsrs	r2, r1, #24
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	7f79      	ldrb	r1, [r7, #29]
 8002ed8:	1c48      	adds	r0, r1, #1
 8002eda:	b2c0      	uxtb	r0, r0
 8002edc:	7778      	strb	r0, [r7, #29]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f803 2c92 	strb.w	r2, [r3, #-146]
            parse_valid = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 8002ef0:	e029      	b.n	8002f46 <znp_cmd_cluster_in_write+0xb36>
        case ZCL_DOUBLE_PRECISION:
            break;

        case ZCL_OCTET_STRING:
        case ZCL_CHARACTER_STRING:
            data_req.Data[data_req.Len++] = record->type;
 8002ef2:	7f7b      	ldrb	r3, [r7, #29]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	777a      	strb	r2, [r7, #29]
 8002efa:	4619      	mov	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f04:	440b      	add	r3, r1
 8002f06:	f803 2c92 	strb.w	r2, [r3, #-146]
            uint8_t len = MIN(record->data_arr_len, sizeof(data_req.Data) - 6);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7a1b      	ldrb	r3, [r3, #8]
 8002f0e:	2b7a      	cmp	r3, #122	; 0x7a
 8002f10:	bf28      	it	cs
 8002f12:	237a      	movcs	r3, #122	; 0x7a
 8002f14:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            memcpy(&data_req.Data[data_req.Len], record->data_arr, len);
 8002f18:	7f7b      	ldrb	r3, [r7, #29]
 8002f1a:	f107 0214 	add.w	r2, r7, #20
 8002f1e:	3308      	adds	r3, #8
 8002f20:	4413      	add	r3, r2
 8002f22:	1c98      	adds	r0, r3, #2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3308      	adds	r3, #8
 8002f28:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f00a ff1d 	bl	800dd6c <memcpy>
            data_req.Len += len;
 8002f32:	7f7a      	ldrb	r2, [r7, #29]
 8002f34:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002f38:	4413      	add	r3, r2
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	777b      	strb	r3, [r7, #29]
            parse_valid = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            break;
 8002f44:	bf00      	nop
        case ZCL_UNKNOWN:
            break;
    }

    // unsupported data given?
    if (!parse_valid)
 8002f46:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <znp_cmd_cluster_in_write+0xb44>
        return -1;
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f52:	e039      	b.n	8002fc8 <znp_cmd_cluster_in_write+0xbb8>

    // do the request
    afDataRequest(&data_req);
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fa2c 	bl	80033b6 <afDataRequest>

    // wait for response
    event_result_t* event = znp_if_wait_for_event(EVT_RSP_DATA_REQUEST, dev->adr_short, 10000);
 8002f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f68:	4619      	mov	r1, r3
 8002f6a:	2004      	movs	r0, #4
 8002f6c:	f000 f852 	bl	8003014 <znp_if_wait_for_event>
 8002f70:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (event == NULL)
 8002f74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <znp_cmd_cluster_in_write+0xb72>
        return -1;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f80:	e022      	b.n	8002fc8 <znp_cmd_cluster_in_write+0xbb8>

    // check response length
    if (event->data_len < 4)
 8002f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f86:	795b      	ldrb	r3, [r3, #5]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d802      	bhi.n	8002f92 <znp_cmd_cluster_in_write+0xb82>
        return -1;
 8002f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f90:	e01a      	b.n	8002fc8 <znp_cmd_cluster_in_write+0xbb8>

    // ZCL Header: parse
    if (event->data[1] != _znp_cmd_sequence_num)
 8002f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f96:	79da      	ldrb	r2, [r3, #7]
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <znp_cmd_cluster_in_write+0xbc0>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d002      	beq.n	8002fa6 <znp_cmd_cluster_in_write+0xb96>
        return -1;
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa4:	e010      	b.n	8002fc8 <znp_cmd_cluster_in_write+0xbb8>

    // ZCL Header: parse
    if (event->data[2] != ZCL_CMD_WRITE_ATTR_RSP)
 8002fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002faa:	7a1b      	ldrb	r3, [r3, #8]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d002      	beq.n	8002fb6 <znp_cmd_cluster_in_write+0xba6>
        return -1;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	e008      	b.n	8002fc8 <znp_cmd_cluster_in_write+0xbb8>

    // result was ok?
    if (event->data[3] == 0x00)
 8002fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fba:	7a5b      	ldrb	r3, [r3, #9]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <znp_cmd_cluster_in_write+0xbb4>
        return 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e001      	b.n	8002fc8 <znp_cmd_cluster_in_write+0xbb8>
    else
        return -1;
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc8:	4618      	mov	r0, r3
 8002fca:	37b0      	adds	r7, #176	; 0xb0
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	200004e0 	.word	0x200004e0

08002fd4 <znp_if_init>:
#include "queue.h"

static znp_device_t _dev_mem[DEVICE_MEM_MAX];
static QueueHandle_t _znp_ev_queue;

void znp_if_init(void) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
    _znp_ev_queue = xQueueCreate(EV_QUEUE_SIZE, sizeof(event_result_t));
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2126      	movs	r1, #38	; 0x26
 8002fdc:	2004      	movs	r0, #4
 8002fde:	f008 fc7d 	bl	800b8dc <xQueueGenericCreate>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4a01      	ldr	r2, [pc, #4]	; (8002fec <znp_if_init+0x18>)
 8002fe6:	6013      	str	r3, [r2, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000e64 	.word	0x20000e64

08002ff0 <znp_if_evt_send>:

void znp_if_evt_send(event_result_t* res) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    xQueueSendToBack(_znp_ev_queue, res, 100);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <znp_if_evt_send+0x20>)
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2264      	movs	r2, #100	; 0x64
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	f008 fccf 	bl	800b9a4 <xQueueGenericSend>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000e64 	.word	0x20000e64

08003014 <znp_if_wait_for_event>:

event_result_t *znp_if_wait_for_event(event_type_t event_to_wait_for, uint16_t address, uint32_t timeout) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	603a      	str	r2, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
 8003020:	460b      	mov	r3, r1
 8003022:	80bb      	strh	r3, [r7, #4]
    uint32_t waittime = timeout;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	617b      	str	r3, [r7, #20]
    uint32_t start = xTaskGetTickCount();
 8003028:	f009 fcc8 	bl	800c9bc <xTaskGetTickCount>
 800302c:	6138      	str	r0, [r7, #16]
    static event_result_t event = { 0 };

    // loop
    while (1) {
        // calculate new timeout
        uint32_t passed_time = start - xTaskGetTickCount();
 800302e:	f009 fcc5 	bl	800c9bc <xTaskGetTickCount>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
        waittime -= passed_time;
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	617b      	str	r3, [r7, #20]
        start = xTaskGetTickCount();
 8003042:	f009 fcbb 	bl	800c9bc <xTaskGetTickCount>
 8003046:	6138      	str	r0, [r7, #16]

        // event was given?
        if (xQueueReceive(_znp_ev_queue, &event, waittime) == pdTRUE) {
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <znp_if_wait_for_event+0x90>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4916      	ldr	r1, [pc, #88]	; (80030a8 <znp_if_wait_for_event+0x94>)
 8003050:	4618      	mov	r0, r3
 8003052:	f008 fe3d 	bl	800bcd0 <xQueueReceive>
 8003056:	4603      	mov	r3, r0
 8003058:	2b01      	cmp	r3, #1
 800305a:	d1e8      	bne.n	800302e <znp_if_wait_for_event+0x1a>
            if ((event.adr == address || event.adr == 0xFFFF) && event.type == event_to_wait_for) {
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <znp_if_wait_for_event+0x94>)
 800305e:	885b      	ldrh	r3, [r3, #2]
 8003060:	88ba      	ldrh	r2, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d005      	beq.n	8003072 <znp_if_wait_for_event+0x5e>
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <znp_if_wait_for_event+0x94>)
 8003068:	885b      	ldrh	r3, [r3, #2]
 800306a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800306e:	4293      	cmp	r3, r2
 8003070:	d1dd      	bne.n	800302e <znp_if_wait_for_event+0x1a>
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <znp_if_wait_for_event+0x94>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	79fa      	ldrb	r2, [r7, #7]
 8003078:	429a      	cmp	r2, r3
 800307a:	d000      	beq.n	800307e <znp_if_wait_for_event+0x6a>
    while (1) {
 800307c:	e7d7      	b.n	800302e <znp_if_wait_for_event+0x1a>
                break;
 800307e:	bf00      	nop
            }
        }
    }

    // did we get the right event type?
    if (event.type == event_to_wait_for) {
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <znp_if_wait_for_event+0x94>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	79fa      	ldrb	r2, [r7, #7]
 8003086:	429a      	cmp	r2, r3
 8003088:	d107      	bne.n	800309a <znp_if_wait_for_event+0x86>
        if (event.result == 0)
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <znp_if_wait_for_event+0x94>)
 800308c:	791b      	ldrb	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <znp_if_wait_for_event+0x82>
            return &event;
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <znp_if_wait_for_event+0x94>)
 8003094:	e002      	b.n	800309c <znp_if_wait_for_event+0x88>
        else
            return NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <znp_if_wait_for_event+0x88>
    }
    // bit not set, timeout
    else {
        return NULL;
 800309a:	2300      	movs	r3, #0
    }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000e64 	.word	0x20000e64
 80030a8:	20000e68 	.word	0x20000e68

080030ac <znp_if_dev_get>:

znp_device_t* znp_if_dev_get(uint16_t address) {
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
    // invalid address?
    if (address == 0x0000 || address == 0xFFFF)
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <znp_if_dev_get+0x1a>
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <znp_if_dev_get+0x1e>
        return NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e01a      	b.n	8003100 <znp_if_dev_get+0x54>

    // check if device already exists
    for (uint8_t i = 0; i < DEVICE_MEM_MAX; i++) {
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	e013      	b.n	80030f8 <znp_if_dev_get+0x4c>
        if (_dev_mem[i].adr_short == address) {
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <znp_if_dev_get+0x60>)
 80030d4:	214c      	movs	r1, #76	; 0x4c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d106      	bne.n	80030f2 <znp_if_dev_get+0x46>
            return &_dev_mem[i];
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	224c      	movs	r2, #76	; 0x4c
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <znp_if_dev_get+0x60>)
 80030ee:	4413      	add	r3, r2
 80030f0:	e006      	b.n	8003100 <znp_if_dev_get+0x54>
    for (uint8_t i = 0; i < DEVICE_MEM_MAX; i++) {
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	3301      	adds	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b1f      	cmp	r3, #31
 80030fc:	d9e8      	bls.n	80030d0 <znp_if_dev_get+0x24>
        }
    }
    return NULL;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	200004e4 	.word	0x200004e4

08003110 <znp_if_dev_exists>:

uint8_t znp_if_dev_exists(uint16_t address) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	80fb      	strh	r3, [r7, #6]
    // check if device already exists
    if (znp_if_dev_get(address) == NULL)
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ffc5 	bl	80030ac <znp_if_dev_get>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <znp_if_dev_exists+0x1c>
        return 0;
 8003128:	2300      	movs	r3, #0
 800312a:	e000      	b.n	800312e <znp_if_dev_exists+0x1e>
    else
        return 1;
 800312c:	2301      	movs	r3, #1
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <znp_if_dev_add>:

int znp_if_dev_add(uint16_t address) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]
    // check if device already exists
    if (znp_if_dev_exists(address))
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ffe3 	bl	8003110 <znp_if_dev_exists>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <znp_if_dev_add+0x1c>
        return 0;
 8003150:	2300      	movs	r3, #0
 8003152:	e022      	b.n	800319a <znp_if_dev_add+0x62>

    // search for a free spot
    uint8_t index;
    for (index = 0; index < DEVICE_MEM_MAX; index++) {
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e00b      	b.n	8003172 <znp_if_dev_add+0x3a>
        if (_dev_mem[index].adr_short == 0x0000) {
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <znp_if_dev_add+0x6c>)
 800315e:	214c      	movs	r1, #76	; 0x4c
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <znp_if_dev_add+0x42>
    for (index = 0; index < DEVICE_MEM_MAX; index++) {
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	3301      	adds	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b1f      	cmp	r3, #31
 8003176:	d9f0      	bls.n	800315a <znp_if_dev_add+0x22>
 8003178:	e000      	b.n	800317c <znp_if_dev_add+0x44>
            break;
 800317a:	bf00      	nop
        }
    }

    // no free spot found?
    if (index >= DEVICE_MEM_MAX)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b1f      	cmp	r3, #31
 8003180:	d902      	bls.n	8003188 <znp_if_dev_add+0x50>
        return -1;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	e008      	b.n	800319a <znp_if_dev_add+0x62>

    // free spot, remember address
    _dev_mem[index].adr_short = address;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	4a06      	ldr	r2, [pc, #24]	; (80031a4 <znp_if_dev_add+0x6c>)
 800318c:	214c      	movs	r1, #76	; 0x4c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	801a      	strh	r2, [r3, #0]

    // all good
    return 0;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200004e4 	.word	0x200004e4

080031a8 <znp_if_dev_set_ieee>:

int znp_if_dev_set_ieee(uint16_t address, uint64_t ieee_adr) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4601      	mov	r1, r0
 80031b0:	e9c7 2300 	strd	r2, r3, [r7]
 80031b4:	460b      	mov	r3, r1
 80031b6:	81fb      	strh	r3, [r7, #14]
    // get device handle
    znp_device_t* dev = znp_if_dev_get(address);
 80031b8:	89fb      	ldrh	r3, [r7, #14]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff76 	bl	80030ac <znp_if_dev_get>
 80031c0:	6178      	str	r0, [r7, #20]

    // invalid handle?
    if (dev == NULL)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <znp_if_dev_set_ieee+0x26>
        return -1;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	e003      	b.n	80031d6 <znp_if_dev_set_ieee+0x2e>

    // save ieee
    dev->adr_ieee = ieee_adr;
 80031ce:	883a      	ldrh	r2, [r7, #0]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	805a      	strh	r2, [r3, #2]

    // all good
    return 0;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <afRegister>:
/*********************************************************************
 * LOCAL FUNCTIONS
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen);

uint8_t afRegister(RegisterFormat_t *req) {
 80031de:	b5b0      	push	{r4, r5, r7, lr}
 80031e0:	b088      	sub	sp, #32
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	466b      	mov	r3, sp
 80031e8:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	76fb      	strb	r3, [r7, #27]
	uint32_t cmdLen = 9 + (req->AppNumInClusters * 2) + (req->AppNumOutClusters * 2);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7a1b      	ldrb	r3, [r3, #8]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	f103 0209 	add.w	r2, r3, #9
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
	uint8_t cmd[cmdLen];
 8003204:	697c      	ldr	r4, [r7, #20]
 8003206:	4623      	mov	r3, r4
 8003208:	3b01      	subs	r3, #1
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	4620      	mov	r0, r4
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	00cb      	lsls	r3, r1, #3
 800321c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003220:	00c2      	lsls	r2, r0, #3
 8003222:	4620      	mov	r0, r4
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	00cb      	lsls	r3, r1, #3
 8003232:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003236:	00c2      	lsls	r2, r0, #3
 8003238:	1de3      	adds	r3, r4, #7
 800323a:	08db      	lsrs	r3, r3, #3
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	ebad 0d03 	sub.w	sp, sp, r3
 8003242:	466b      	mov	r3, sp
 8003244:	3300      	adds	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]

	int idx;

	cmd[cmInd++] = req->EndPoint;
 8003248:	7efb      	ldrb	r3, [r7, #27]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	76fa      	strb	r2, [r7, #27]
 800324e:	461a      	mov	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7819      	ldrb	r1, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->AppProfId & 0xFF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8859      	ldrh	r1, [r3, #2]
 800325c:	7efb      	ldrb	r3, [r7, #27]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	76fa      	strb	r2, [r7, #27]
 8003262:	461a      	mov	r2, r3
 8003264:	b2c9      	uxtb	r1, r1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->AppProfId >> 8) & 0xFF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	885b      	ldrh	r3, [r3, #2]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	b299      	uxth	r1, r3
 8003272:	7efb      	ldrb	r3, [r7, #27]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	76fa      	strb	r2, [r7, #27]
 8003278:	461a      	mov	r2, r3
 800327a:	b2c9      	uxtb	r1, r1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->AppDeviceId & 0xFF);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8899      	ldrh	r1, [r3, #4]
 8003284:	7efb      	ldrb	r3, [r7, #27]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	76fa      	strb	r2, [r7, #27]
 800328a:	461a      	mov	r2, r3
 800328c:	b2c9      	uxtb	r1, r1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->AppDeviceId >> 8) & 0xFF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	889b      	ldrh	r3, [r3, #4]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	b299      	uxth	r1, r3
 800329a:	7efb      	ldrb	r3, [r7, #27]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	76fa      	strb	r2, [r7, #27]
 80032a0:	461a      	mov	r2, r3
 80032a2:	b2c9      	uxtb	r1, r1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->AppDevVer;
 80032a8:	7efb      	ldrb	r3, [r7, #27]
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	76fa      	strb	r2, [r7, #27]
 80032ae:	461a      	mov	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7999      	ldrb	r1, [r3, #6]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->LatencyReq;
 80032b8:	7efb      	ldrb	r3, [r7, #27]
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	76fa      	strb	r2, [r7, #27]
 80032be:	461a      	mov	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	79d9      	ldrb	r1, [r3, #7]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->AppNumInClusters;
 80032c8:	7efb      	ldrb	r3, [r7, #27]
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	76fa      	strb	r2, [r7, #27]
 80032ce:	461a      	mov	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7a19      	ldrb	r1, [r3, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumInClusters; idx++) {
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	e01e      	b.n	800331c <afRegister+0x13e>
		cmd[cmInd++] = (uint8_t) (req->AppInClusterList[idx] & 0xFF);
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	3304      	adds	r3, #4
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	8859      	ldrh	r1, [r3, #2]
 80032ea:	7efb      	ldrb	r3, [r7, #27]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	76fa      	strb	r2, [r7, #27]
 80032f0:	461a      	mov	r2, r3
 80032f2:	b2c9      	uxtb	r1, r1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = (uint8_t) ((req->AppInClusterList[idx] >> 8) & 0xFF);
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3304      	adds	r3, #4
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	885b      	ldrh	r3, [r3, #2]
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	b299      	uxth	r1, r3
 8003308:	7efb      	ldrb	r3, [r7, #27]
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	76fa      	strb	r2, [r7, #27]
 800330e:	461a      	mov	r2, r3
 8003310:	b2c9      	uxtb	r1, r1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumInClusters; idx++) {
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3301      	adds	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7a1b      	ldrb	r3, [r3, #8]
 8003320:	461a      	mov	r2, r3
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4293      	cmp	r3, r2
 8003326:	dbda      	blt.n	80032de <afRegister+0x100>
	}
	cmd[cmInd++] = req->AppNumOutClusters;
 8003328:	7efb      	ldrb	r3, [r7, #27]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	76fa      	strb	r2, [r7, #27]
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumOutClusters; idx++) {
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e01e      	b.n	800337e <afRegister+0x1a0>
		cmd[cmInd++] = (uint8_t) (req->AppOutClusterList[idx] & 0xFF);
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3314      	adds	r3, #20
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	8899      	ldrh	r1, [r3, #4]
 800334c:	7efb      	ldrb	r3, [r7, #27]
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	76fa      	strb	r2, [r7, #27]
 8003352:	461a      	mov	r2, r3
 8003354:	b2c9      	uxtb	r1, r1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	5499      	strb	r1, [r3, r2]
		cmd[cmInd++] = (uint8_t) ((req->AppOutClusterList[idx] >> 8) & 0xFF);
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	3314      	adds	r3, #20
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	889b      	ldrh	r3, [r3, #4]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	b299      	uxth	r1, r3
 800336a:	7efb      	ldrb	r3, [r7, #27]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	76fa      	strb	r2, [r7, #27]
 8003370:	461a      	mov	r2, r3
 8003372:	b2c9      	uxtb	r1, r1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->AppNumOutClusters; idx++) {
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	3301      	adds	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003384:	461a      	mov	r2, r3
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4293      	cmp	r3, r2
 800338a:	dbd9      	blt.n	8003340 <afRegister+0x162>
	}
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_AF),
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2100      	movs	r1, #0
 8003394:	2024      	movs	r0, #36	; 0x24
 8003396:	f005 f8fb 	bl	8008590 <rpcSendFrame>
 800339a:	4603      	mov	r3, r0
 800339c:	72fb      	strb	r3, [r7, #11]
	MT_AF_REGISTER, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 800339e:	7afb      	ldrb	r3, [r7, #11]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <afRegister+0x1cc>
		rpcWaitMqClientMsg(50);
 80033a4:	2032      	movs	r0, #50	; 0x32
 80033a6:	f004 ff7d 	bl	80082a4 <rpcWaitMqClientMsg>
	}

	return status;
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	46ad      	mov	sp, r5
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bdb0      	pop	{r4, r5, r7, pc}

080033b6 <afDataRequest>:

uint8_t afDataRequest(DataRequestFormat_t *req) {
 80033b6:	b5b0      	push	{r4, r5, r7, lr}
 80033b8:	b088      	sub	sp, #32
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	466b      	mov	r3, sp
 80033c0:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	76fb      	strb	r3, [r7, #27]
	uint32_t cmdLen = 10 + req->Len;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7a5b      	ldrb	r3, [r3, #9]
 80033ca:	330a      	adds	r3, #10
 80033cc:	617b      	str	r3, [r7, #20]
	uint8_t cmd[cmdLen];
 80033ce:	697c      	ldr	r4, [r7, #20]
 80033d0:	4623      	mov	r3, r4
 80033d2:	3b01      	subs	r3, #1
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	4620      	mov	r0, r4
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	00cb      	lsls	r3, r1, #3
 80033e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80033ea:	00c2      	lsls	r2, r0, #3
 80033ec:	4620      	mov	r0, r4
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	00cb      	lsls	r3, r1, #3
 80033fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003400:	00c2      	lsls	r2, r0, #3
 8003402:	1de3      	adds	r3, r4, #7
 8003404:	08db      	lsrs	r3, r3, #3
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	ebad 0d03 	sub.w	sp, sp, r3
 800340c:	466b      	mov	r3, sp
 800340e:	3300      	adds	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]

	int idx;

	cmd[cmInd++] = (uint8_t) (req->DstAddr & 0xFF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8819      	ldrh	r1, [r3, #0]
 8003416:	7efb      	ldrb	r3, [r7, #27]
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	76fa      	strb	r2, [r7, #27]
 800341c:	461a      	mov	r2, r3
 800341e:	b2c9      	uxtb	r1, r1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->DstAddr >> 8) & 0xFF);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	b299      	uxth	r1, r3
 800342c:	7efb      	ldrb	r3, [r7, #27]
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	76fa      	strb	r2, [r7, #27]
 8003432:	461a      	mov	r2, r3
 8003434:	b2c9      	uxtb	r1, r1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->DstEndpoint;
 800343a:	7efb      	ldrb	r3, [r7, #27]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	76fa      	strb	r2, [r7, #27]
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7899      	ldrb	r1, [r3, #2]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->SrcEndpoint;
 800344a:	7efb      	ldrb	r3, [r7, #27]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	76fa      	strb	r2, [r7, #27]
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	78d9      	ldrb	r1, [r3, #3]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->ClusterID & 0xFF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	8899      	ldrh	r1, [r3, #4]
 800345e:	7efb      	ldrb	r3, [r7, #27]
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	76fa      	strb	r2, [r7, #27]
 8003464:	461a      	mov	r2, r3
 8003466:	b2c9      	uxtb	r1, r1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->ClusterID >> 8) & 0xFF);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	889b      	ldrh	r3, [r3, #4]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	b299      	uxth	r1, r3
 8003474:	7efb      	ldrb	r3, [r7, #27]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	76fa      	strb	r2, [r7, #27]
 800347a:	461a      	mov	r2, r3
 800347c:	b2c9      	uxtb	r1, r1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->TransID;
 8003482:	7efb      	ldrb	r3, [r7, #27]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	76fa      	strb	r2, [r7, #27]
 8003488:	461a      	mov	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7999      	ldrb	r1, [r3, #6]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Options;
 8003492:	7efb      	ldrb	r3, [r7, #27]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	76fa      	strb	r2, [r7, #27]
 8003498:	461a      	mov	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	79d9      	ldrb	r1, [r3, #7]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Radius;
 80034a2:	7efb      	ldrb	r3, [r7, #27]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	76fa      	strb	r2, [r7, #27]
 80034a8:	461a      	mov	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7a19      	ldrb	r1, [r3, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Len;
 80034b2:	7efb      	ldrb	r3, [r7, #27]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	76fa      	strb	r2, [r7, #27]
 80034b8:	461a      	mov	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7a59      	ldrb	r1, [r3, #9]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->Len; idx++) {
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	e00d      	b.n	80034e4 <afDataRequest+0x12e>
		cmd[cmInd++] = req->Data[idx];
 80034c8:	7efb      	ldrb	r3, [r7, #27]
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	76fa      	strb	r2, [r7, #27]
 80034ce:	4619      	mov	r1, r3
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	330a      	adds	r3, #10
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	545a      	strb	r2, [r3, r1]
	for (idx = 0; idx < req->Len; idx++) {
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3301      	adds	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	7a5b      	ldrb	r3, [r3, #9]
 80034e8:	461a      	mov	r2, r3
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4293      	cmp	r3, r2
 80034ee:	dbeb      	blt.n	80034c8 <afDataRequest+0x112>

	}

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_AF),
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2101      	movs	r1, #1
 80034f8:	2024      	movs	r0, #36	; 0x24
 80034fa:	f005 f849 	bl	8008590 <rpcSendFrame>
 80034fe:	4603      	mov	r3, r0
 8003500:	72fb      	strb	r3, [r7, #11]
	MT_AF_DATA_REQUEST, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 8003502:	7afb      	ldrb	r3, [r7, #11]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <afDataRequest+0x158>
		rpcWaitMqClientMsg(50);
 8003508:	2032      	movs	r0, #50	; 0x32
 800350a:	f004 fecb 	bl	80082a4 <rpcWaitMqClientMsg>
	}

	return status;
 800350e:	7afb      	ldrb	r3, [r7, #11]
 8003510:	46ad      	mov	sp, r5
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800351c <processDataConfirm>:
	}

	return status;
}

static void processDataConfirm(uint8_t *rpcBuff, uint8_t rpcLen) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfDataConfirm) {
 8003528:	4b16      	ldr	r3, [pc, #88]	; (8003584 <processDataConfirm+0x68>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d025      	beq.n	800357c <processDataConfirm+0x60>
		uint8_t msgIdx = 2;
 8003530:	2302      	movs	r3, #2
 8003532:	73fb      	strb	r3, [r7, #15]
		DataConfirmFormat_t rsp;
		if (rpcLen < 3) {
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d802      	bhi.n	8003540 <processDataConfirm+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800353a:	4813      	ldr	r0, [pc, #76]	; (8003588 <processDataConfirm+0x6c>)
 800353c:	f00a fcb2 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	73fa      	strb	r2, [r7, #15]
 8003546:	461a      	mov	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	733b      	strb	r3, [r7, #12]
		rsp.Endpoint = rpcBuff[msgIdx++];
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	73fa      	strb	r2, [r7, #15]
 8003556:	461a      	mov	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	737b      	strb	r3, [r7, #13]
		rsp.TransId = rpcBuff[msgIdx++];
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	73fa      	strb	r2, [r7, #15]
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4413      	add	r3, r2
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	73bb      	strb	r3, [r7, #14]

		mtAfCbs.pfnAfDataConfirm(&rsp);
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <processDataConfirm+0x68>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f107 020c 	add.w	r2, r7, #12
 8003578:	4610      	mov	r0, r2
 800357a:	4798      	blx	r3
	}
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000e90 	.word	0x20000e90
 8003588:	0800ff08 	.word	0x0800ff08

0800358c <processIncomingMsg>:

static void processIncomingMsg(uint8_t *rpcBuff, uint8_t rpcLen) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b0a2      	sub	sp, #136	; 0x88
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfIncomingMsg) {
 8003598:	4b72      	ldr	r3, [pc, #456]	; (8003764 <processIncomingMsg+0x1d8>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80dc 	beq.w	800375a <processIncomingMsg+0x1ce>
		uint8_t msgIdx = 2;
 80035a2:	2302      	movs	r3, #2
 80035a4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		IncomingMsgFormat_t rsp;
		if (rpcLen < 17) {
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d802      	bhi.n	80035b4 <processIncomingMsg+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 80035ae:	486e      	ldr	r0, [pc, #440]	; (8003768 <processIncomingMsg+0x1dc>)
 80035b0:	f00a fc78 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.GroupId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80035b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b29a      	uxth	r2, r3
 80035c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80035c4:	3301      	adds	r3, #1
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	440b      	add	r3, r1
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80035d8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80035dc:	3302      	adds	r3, #2
 80035de:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.ClusterId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80035e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80035f2:	3301      	adds	r3, #1
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	440b      	add	r3, r1
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4413      	add	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 8003606:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800360a:	3302      	adds	r3, #2
 800360c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003610:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	b29a      	uxth	r2, r3
 800361c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003620:	3301      	adds	r3, #1
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	440b      	add	r3, r1
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	b29b      	uxth	r3, r3
 800362e:	4413      	add	r3, r2
 8003630:	b29b      	uxth	r3, r3
 8003632:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003634:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003638:	3302      	adds	r3, #2
 800363a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		rsp.SrcEndpoint = rpcBuff[msgIdx++];
 800363e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003648:	461a      	mov	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	73bb      	strb	r3, [r7, #14]
		rsp.DstEndpoint = rpcBuff[msgIdx++];
 8003652:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	73fb      	strb	r3, [r7, #15]
		rsp.WasVroadcast = rpcBuff[msgIdx++];
 8003666:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003670:	461a      	mov	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	743b      	strb	r3, [r7, #16]
		rsp.LinkQuality = rpcBuff[msgIdx++];
 800367a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003684:	461a      	mov	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	747b      	strb	r3, [r7, #17]
		rsp.SecurityUse = rpcBuff[msgIdx++];
 800368e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003698:	461a      	mov	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	74bb      	strb	r3, [r7, #18]
		rsp.TimeStamp = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
		uint8_t i;
		for (i = 0; i < 4; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80036ac:	e015      	b.n	80036da <processIncomingMsg+0x14e>
			rsp.TimeStamp |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 80036ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80036b8:	461a      	mov	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	409a      	lsls	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 4; i++)
 80036d0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80036d4:	3301      	adds	r3, #1
 80036d6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80036da:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d9e5      	bls.n	80036ae <processIncomingMsg+0x122>
		rsp.TransSeqNum = rpcBuff[msgIdx++];
 80036e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	763b      	strb	r3, [r7, #24]
		rsp.Len = rpcBuff[msgIdx++];
 80036f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003700:	461a      	mov	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	767b      	strb	r3, [r7, #25]
		if (rpcLen > 17) {
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	2b11      	cmp	r3, #17
 800370e:	d91e      	bls.n	800374e <processIncomingMsg+0x1c2>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8003710:	2300      	movs	r3, #0
 8003712:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003716:	e014      	b.n	8003742 <processIncomingMsg+0x1b6>
				rsp.Data[i] = rpcBuff[msgIdx++];
 8003718:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8003722:	461a      	mov	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	7819      	ldrb	r1, [r3, #0]
 800372a:	f107 021a 	add.w	r2, r7, #26
 800372e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003732:	4413      	add	r3, r2
 8003734:	460a      	mov	r2, r1
 8003736:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8003738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800373c:	3301      	adds	r3, #1
 800373e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003742:	7e7b      	ldrb	r3, [r7, #25]
 8003744:	461a      	mov	r2, r3
 8003746:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800374a:	4293      	cmp	r3, r2
 800374c:	d3e4      	bcc.n	8003718 <processIncomingMsg+0x18c>
			}
		}
		mtAfCbs.pfnAfIncomingMsg(&rsp);
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <processIncomingMsg+0x1d8>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f107 0208 	add.w	r2, r7, #8
 8003756:	4610      	mov	r0, r2
 8003758:	4798      	blx	r3
	}
}
 800375a:	bf00      	nop
 800375c:	3788      	adds	r7, #136	; 0x88
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000e90 	.word	0x20000e90
 8003768:	0800ff08 	.word	0x0800ff08

0800376c <processIncomingMsgExt>:

static void processIncomingMsgExt(uint8_t *rpcBuff, uint8_t rpcLen) {
 800376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003770:	b0a7      	sub	sp, #156	; 0x9c
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfIncomingMsgExt) {
 800377a:	4b99      	ldr	r3, [pc, #612]	; (80039e0 <processIncomingMsgExt+0x274>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8129 	beq.w	80039d6 <processIncomingMsgExt+0x26a>
		uint8_t msgIdx = 2;
 8003784:	2302      	movs	r3, #2
 8003786:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		IncomingMsgExtFormat_t rsp;
		if (rpcLen < 27) {
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	2b1a      	cmp	r3, #26
 800378e:	d802      	bhi.n	8003796 <processIncomingMsgExt+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 8003790:	4894      	ldr	r0, [pc, #592]	; (80039e4 <processIncomingMsgExt+0x278>)
 8003792:	f00a fb87 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.GroupId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003796:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80037a6:	3301      	adds	r3, #1
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	440b      	add	r3, r1
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80037ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80037be:	3302      	adds	r3, #2
 80037c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.ClusterId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80037c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80037d4:	3301      	adds	r3, #1
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	440b      	add	r3, r1
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 80037e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80037ec:	3302      	adds	r3, #2
 80037ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.SrcAddrMode = rpcBuff[msgIdx++];
 80037f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80037fc:	461a      	mov	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	733b      	strb	r3, [r7, #12]
		rsp.SrcAddr = 0;
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 8003812:	2300      	movs	r3, #0
 8003814:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003818:	e034      	b.n	8003884 <processIncomingMsgExt+0x118>
			if ((rsp.SrcAddrMode == 2 && i < 2) || rsp.SrcAddrMode == 3) {
 800381a:	7b3b      	ldrb	r3, [r7, #12]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d103      	bne.n	8003828 <processIncomingMsgExt+0xbc>
 8003820:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003824:	2b01      	cmp	r3, #1
 8003826:	d902      	bls.n	800382e <processIncomingMsgExt+0xc2>
 8003828:	7b3b      	ldrb	r3, [r7, #12]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d120      	bne.n	8003870 <processIncomingMsgExt+0x104>
				rsp.SrcAddr |= ((uint64_t) rpcBuff[msgIdx]) << (i * 8);
 800382e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003832:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	f897 1096 	ldrb.w	r1, [r7, #150]	; 0x96
 8003846:	00c9      	lsls	r1, r1, #3
 8003848:	f1a1 0620 	sub.w	r6, r1, #32
 800384c:	f1c1 0020 	rsb	r0, r1, #32
 8003850:	fa03 f501 	lsl.w	r5, r3, r1
 8003854:	fa02 f606 	lsl.w	r6, r2, r6
 8003858:	4335      	orrs	r5, r6
 800385a:	fa22 f000 	lsr.w	r0, r2, r0
 800385e:	4305      	orrs	r5, r0
 8003860:	fa02 f401 	lsl.w	r4, r2, r1
 8003864:	ea4a 0804 	orr.w	r8, sl, r4
 8003868:	ea4b 0905 	orr.w	r9, fp, r5
 800386c:	e9c7 8904 	strd	r8, r9, [r7, #16]
			}
			msgIdx++;
 8003870:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003874:	3301      	adds	r3, #1
 8003876:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		for (i = 0; i < 8; i++) {
 800387a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800387e:	3301      	adds	r3, #1
 8003880:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003884:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003888:	2b07      	cmp	r3, #7
 800388a:	d9c6      	bls.n	800381a <processIncomingMsgExt+0xae>
		}

		rsp.SrcEndpoint = rpcBuff[msgIdx++];
 800388c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003896:	461a      	mov	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4413      	add	r3, r2
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	763b      	strb	r3, [r7, #24]
		rsp.SrcPanId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80038a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	4413      	add	r3, r2
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038b0:	3301      	adds	r3, #1
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	440b      	add	r3, r1
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	b29b      	uxth	r3, r3
 80038be:	4413      	add	r3, r2
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	837b      	strh	r3, [r7, #26]
		msgIdx += 2;
 80038c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038c8:	3302      	adds	r3, #2
 80038ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		rsp.DstEndpoint = rpcBuff[msgIdx++];
 80038ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80038d8:	461a      	mov	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	773b      	strb	r3, [r7, #28]
		rsp.WasVroadcast = rpcBuff[msgIdx++];
 80038e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80038ec:	461a      	mov	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	777b      	strb	r3, [r7, #29]
		rsp.LinkQuality = rpcBuff[msgIdx++];
 80038f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003900:	461a      	mov	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	77bb      	strb	r3, [r7, #30]
		rsp.SecurityUse = rpcBuff[msgIdx++];
 800390a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003914:	461a      	mov	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	77fb      	strb	r3, [r7, #31]
		rsp.TimeStamp = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	623b      	str	r3, [r7, #32]
		for (i = 0; i < 4; i++)
 8003922:	2300      	movs	r3, #0
 8003924:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003928:	e015      	b.n	8003956 <processIncomingMsgExt+0x1ea>
			rsp.TimeStamp |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 800392a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003934:	461a      	mov	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	409a      	lsls	r2, r3
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	4313      	orrs	r3, r2
 800394a:	623b      	str	r3, [r7, #32]
		for (i = 0; i < 4; i++)
 800394c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003950:	3301      	adds	r3, #1
 8003952:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003956:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800395a:	2b03      	cmp	r3, #3
 800395c:	d9e5      	bls.n	800392a <processIncomingMsgExt+0x1be>
		rsp.TransSeqNum = rpcBuff[msgIdx++];
 800395e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003968:	461a      	mov	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rsp.Len = rpcBuff[msgIdx++];
 8003974:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800397e:	461a      	mov	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint32_t ind;
		for (ind = 0; ind < rsp.Len; ind++) {
 800398a:	2300      	movs	r3, #0
 800398c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003990:	e014      	b.n	80039bc <processIncomingMsgExt+0x250>
			rsp.Data[ind] = rpcBuff[msgIdx++];
 8003992:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800399c:	461a      	mov	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	7819      	ldrb	r1, [r3, #0]
 80039a4:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80039a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039ac:	4413      	add	r3, r2
 80039ae:	460a      	mov	r2, r1
 80039b0:	701a      	strb	r2, [r3, #0]
		for (ind = 0; ind < rsp.Len; ind++) {
 80039b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039b6:	3301      	adds	r3, #1
 80039b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039c0:	461a      	mov	r2, r3
 80039c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d3e3      	bcc.n	8003992 <processIncomingMsgExt+0x226>
		}

		mtAfCbs.pfnAfIncomingMsgExt(&rsp);
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <processIncomingMsgExt+0x274>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f107 0208 	add.w	r2, r7, #8
 80039d2:	4610      	mov	r0, r2
 80039d4:	4798      	blx	r3
	}
}
 80039d6:	bf00      	nop
 80039d8:	379c      	adds	r7, #156	; 0x9c
 80039da:	46bd      	mov	sp, r7
 80039dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e0:	20000e90 	.word	0x20000e90
 80039e4:	0800ff08 	.word	0x0800ff08

080039e8 <processRegisterSrsp>:
	}

	return status;
}

static void processRegisterSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfRegisterSrsp) {
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <processRegisterSrsp+0x48>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <processRegisterSrsp+0x40>
		uint8_t msgIdx = 2;
 80039fc:	2302      	movs	r3, #2
 80039fe:	73fb      	strb	r3, [r7, #15]
		RegisterSrspFormat_t rsp;
		if (rpcLen < 1) {
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <processRegisterSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003a06:	480b      	ldr	r0, [pc, #44]	; (8003a34 <processRegisterSrsp+0x4c>)
 8003a08:	f00a fa4c 	bl	800dea4 <puts>
		}
		rsp.success = rpcBuff[msgIdx++];
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	73fa      	strb	r2, [r7, #15]
 8003a12:	461a      	mov	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	733b      	strb	r3, [r7, #12]
		mtAfCbs.pfnAfRegisterSrsp(&rsp);
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <processRegisterSrsp+0x48>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f107 020c 	add.w	r2, r7, #12
 8003a24:	4610      	mov	r0, r2
 8003a26:	4798      	blx	r3
	}
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20000e90 	.word	0x20000e90
 8003a34:	0800ff08 	.word	0x0800ff08

08003a38 <processDataRequestSrsp>:

static void processDataRequestSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfDataReqeuestSrsp) {
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <processDataRequestSrsp+0x48>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <processDataRequestSrsp+0x40>
		uint8_t msgIdx = 2;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	73fb      	strb	r3, [r7, #15]
		DataRequestSrspFormat_t rsp;
		if (rpcLen < 1) {
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <processDataRequestSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003a56:	480b      	ldr	r0, [pc, #44]	; (8003a84 <processDataRequestSrsp+0x4c>)
 8003a58:	f00a fa24 	bl	800dea4 <puts>
		}
		rsp.success = rpcBuff[msgIdx++];
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	73fa      	strb	r2, [r7, #15]
 8003a62:	461a      	mov	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	733b      	strb	r3, [r7, #12]
		mtAfCbs.pfnAfDataReqeuestSrsp(&rsp);
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <processDataRequestSrsp+0x48>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f107 020c 	add.w	r2, r7, #12
 8003a74:	4610      	mov	r0, r2
 8003a76:	4798      	blx	r3
	}
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000e90 	.word	0x20000e90
 8003a84:	0800ff08 	.word	0x0800ff08

08003a88 <processDataRetrieveSrsp>:

static void processDataRetrieveSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b0c4      	sub	sp, #272	; 0x110
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	6018      	str	r0, [r3, #0]
 8003a92:	460a      	mov	r2, r1
 8003a94:	1cfb      	adds	r3, r7, #3
 8003a96:	701a      	strb	r2, [r3, #0]
	if (mtAfCbs.pfnAfDataRetrieveSrsp) {
 8003a98:	4b2c      	ldr	r3, [pc, #176]	; (8003b4c <processDataRetrieveSrsp+0xc4>)
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d050      	beq.n	8003b42 <processDataRetrieveSrsp+0xba>
		uint8_t msgIdx = 2;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		DataRetrieveSrspFormat_t rsp;
		if (rpcLen < 2) {
 8003aa6:	1cfb      	adds	r3, r7, #3
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d802      	bhi.n	8003ab4 <processDataRetrieveSrsp+0x2c>
			printf("MT_RPC_ERR_LENGTH\n");
 8003aae:	4828      	ldr	r0, [pc, #160]	; (8003b50 <processDataRetrieveSrsp+0xc8>)
 8003ab0:	f00a f9f8 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003ab4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8003abe:	461a      	mov	r2, r3
 8003ac0:	1d3b      	adds	r3, r7, #4
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	701a      	strb	r2, [r3, #0]
		rsp.Length = rpcBuff[msgIdx++];
 8003ace:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8003ad8:	461a      	mov	r2, r3
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4413      	add	r3, r2
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	f107 030c 	add.w	r3, r7, #12
 8003ae6:	705a      	strb	r2, [r3, #1]
		if (rpcLen > 2) {
 8003ae8:	1cfb      	adds	r3, r7, #3
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d922      	bls.n	8003b36 <processDataRetrieveSrsp+0xae>
			uint32_t i;
			for (i = 0; i < rsp.Length; i++) {
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003af6:	e016      	b.n	8003b26 <processDataRetrieveSrsp+0x9e>
				rsp.Data[i] = rpcBuff[msgIdx++];
 8003af8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8003b02:	461a      	mov	r2, r3
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4413      	add	r3, r2
 8003b0a:	7819      	ldrb	r1, [r3, #0]
 8003b0c:	f107 020c 	add.w	r2, r7, #12
 8003b10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b14:	4413      	add	r3, r2
 8003b16:	3302      	adds	r3, #2
 8003b18:	460a      	mov	r2, r1
 8003b1a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Length; i++) {
 8003b1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b20:	3301      	adds	r3, #1
 8003b22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d3e0      	bcc.n	8003af8 <processDataRetrieveSrsp+0x70>
			}
		}
		mtAfCbs.pfnAfDataRetrieveSrsp(&rsp);
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <processDataRetrieveSrsp+0xc4>)
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f107 020c 	add.w	r2, r7, #12
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4798      	blx	r3
	}
}
 8003b42:	bf00      	nop
 8003b44:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000e90 	.word	0x20000e90
 8003b50:	0800ff08 	.word	0x0800ff08

08003b54 <processReflectError>:
	}

	return status;
}

static void processReflectError(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
	if (mtAfCbs.pfnAfReflectError) {
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <processReflectError+0xa0>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d040      	beq.n	8003bea <processReflectError+0x96>
		uint8_t msgIdx = 2;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	73fb      	strb	r3, [r7, #15]
		ReflectErrorFormat_t rsp;
		if (rpcLen < 6) {
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d802      	bhi.n	8003b78 <processReflectError+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003b72:	4821      	ldr	r0, [pc, #132]	; (8003bf8 <processReflectError+0xa4>)
 8003b74:	f00a f996 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	73fa      	strb	r2, [r7, #15]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4413      	add	r3, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	723b      	strb	r3, [r7, #8]
		rsp.Endpoint = rpcBuff[msgIdx++];
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	73fa      	strb	r2, [r7, #15]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	727b      	strb	r3, [r7, #9]
		rsp.TransId = rpcBuff[msgIdx++];
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	73fa      	strb	r2, [r7, #15]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	72bb      	strb	r3, [r7, #10]
		rsp.DstAddrMode = rpcBuff[msgIdx++];
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	73fa      	strb	r2, [r7, #15]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	72fb      	strb	r3, [r7, #11]
		rsp.DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	440b      	add	r3, r1
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	3302      	adds	r3, #2
 8003bdc:	73fb      	strb	r3, [r7, #15]

		mtAfCbs.pfnAfReflectError(&rsp);
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <processReflectError+0xa0>)
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f107 0208 	add.w	r2, r7, #8
 8003be6:	4610      	mov	r0, r2
 8003be8:	4798      	blx	r3
	}
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000e90 	.word	0x20000e90
 8003bf8:	0800ff08 	.word	0x0800ff08

08003bfc <afRegisterCallbacks>:
 *
 * @param
 *
 * @return
 */
void afRegisterCallbacks(mtAfCb_t cbs) {
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	b4b0      	push	{r4, r5, r7}
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	f107 040c 	add.w	r4, r7, #12
 8003c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&mtAfCbs, &cbs, sizeof(mtAfCb_t));
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <afRegisterCallbacks+0x2c>)
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	f107 040c 	add.w	r4, r7, #12
 8003c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c16:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003c1a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bcb0      	pop	{r4, r5, r7}
 8003c24:	b004      	add	sp, #16
 8003c26:	4770      	bx	lr
 8003c28:	20000e90 	.word	0x20000e90

08003c2c <afProcess>:
 *
 * @param   rpcLen has the size of the frame: cmd0 + cmd1 + payload + FCS
 *
 * @return
 *************************************************************************************************/
void afProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003c40:	2b60      	cmp	r3, #96	; 0x60
 8003c42:	d105      	bne.n	8003c50 <afProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f83d 	bl	8003cc8 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8003c4e:	e034      	b.n	8003cba <afProcess+0x8e>
		switch (rpcBuff[1]) {
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3301      	adds	r3, #1
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	3b80      	subs	r3, #128	; 0x80
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d823      	bhi.n	8003ca4 <afProcess+0x78>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <afProcess+0x38>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c81 	.word	0x08003c81
 8003c6c:	08003c8d 	.word	0x08003c8d
 8003c70:	08003c99 	.word	0x08003c99
				processDataConfirm(rpcBuff, rpcLen);
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	4619      	mov	r1, r3
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fc4f 	bl	800351c <processDataConfirm>
				break;
 8003c7e:	e01c      	b.n	8003cba <afProcess+0x8e>
				processIncomingMsg(rpcBuff, rpcLen);
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	4619      	mov	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff fc81 	bl	800358c <processIncomingMsg>
				break;
 8003c8a:	e016      	b.n	8003cba <afProcess+0x8e>
				processIncomingMsgExt(rpcBuff, rpcLen);
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fd6b 	bl	800376c <processIncomingMsgExt>
				break;
 8003c96:	e010      	b.n	8003cba <afProcess+0x8e>
				processReflectError(rpcBuff, rpcLen);
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff59 	bl	8003b54 <processReflectError>
				break;
 8003ca2:	e00a      	b.n	8003cba <afProcess+0x8e>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3301      	adds	r3, #1
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4804      	ldr	r0, [pc, #16]	; (8003cc4 <afProcess+0x98>)
 8003cb4:	f7fc fd04 	bl	80006c0 <log_print>
				break;
 8003cb8:	bf00      	nop
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	0800ff1c 	.word	0x0800ff1c

08003cc8 <processSrsp>:
 *
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4818      	ldr	r0, [pc, #96]	; (8003d3c <processSrsp+0x74>)
 8003cdc:	f00a f846 	bl	800dd6c <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b12      	cmp	r3, #18
 8003ce8:	d012      	beq.n	8003d10 <processSrsp+0x48>
 8003cea:	2b12      	cmp	r3, #18
 8003cec:	dc16      	bgt.n	8003d1c <processSrsp+0x54>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <processSrsp+0x30>
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d006      	beq.n	8003d04 <processSrsp+0x3c>
 8003cf6:	e011      	b.n	8003d1c <processSrsp+0x54>
		case MT_AF_REGISTER:
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_REGISTER\n");
			processRegisterSrsp(rpcBuff, rpcLen);
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff fe73 	bl	80039e8 <processRegisterSrsp>
			break;
 8003d02:	e016      	b.n	8003d32 <processSrsp+0x6a>
		case MT_AF_DATA_REQUEST:
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_DATA_REQUEST\n");
			processDataRequestSrsp(rpcBuff, rpcLen);
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	4619      	mov	r1, r3
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fe95 	bl	8003a38 <processDataRequestSrsp>
			break;
 8003d0e:	e010      	b.n	8003d32 <processSrsp+0x6a>
		case MT_AF_DATA_RETRIEVE:
			dbg_print(PRINT_LEVEL_VERBOSE, "afProcess: MT_AF_DATA_RETRIEVE\n");
			processDataRetrieveSrsp(rpcBuff, rpcLen);
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff feb7 	bl	8003a88 <processDataRetrieveSrsp>
			break;
 8003d1a:	e00a      	b.n	8003d32 <processSrsp+0x6a>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	4619      	mov	r1, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3301      	adds	r3, #1
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4805      	ldr	r0, [pc, #20]	; (8003d40 <processSrsp+0x78>)
 8003d2c:	f7fc fcc8 	bl	80006c0 <log_print>
			break;
 8003d30:	bf00      	nop
	}

}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200050d8 	.word	0x200050d8
 8003d40:	0800ff4c 	.word	0x0800ff4c

08003d44 <appCfgRegisterCallbacks>:
#include <string.h>
#include <stdio.h>

static mtAppCfgCb_t mtAppCfgCbs;

void appCfgRegisterCallbacks(mtAppCfgCb_t cbs) {
 8003d44:	b490      	push	{r4, r7}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	1d3b      	adds	r3, r7, #4
 8003d4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	memcpy(&mtAppCfgCbs, &cbs, sizeof(mtAppCfgCb_t));
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <appCfgRegisterCallbacks+0x24>)
 8003d52:	461c      	mov	r4, r3
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc90      	pop	{r4, r7}
 8003d66:	4770      	bx	lr
 8003d68:	20000eac 	.word	0x20000eac

08003d6c <processCommissioningNotify>:

static void processCommissioningNotify(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgCommissioningNotifyCb_t) {
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <processCommissioningNotify+0x68>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d025      	beq.n	8003dcc <processCommissioningNotify+0x60>
		uint8_t msgIdx = 2;
 8003d80:	2302      	movs	r3, #2
 8003d82:	73fb      	strb	r3, [r7, #15]
		appCfgCommissioningNotifyFormat_t rsp;

		// size error?
		if (rpcLen < 3) {
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d802      	bhi.n	8003d90 <processCommissioningNotify+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003d8a:	4813      	ldr	r0, [pc, #76]	; (8003dd8 <processCommissioningNotify+0x6c>)
 8003d8c:	f00a f88a 	bl	800dea4 <puts>
		}

		// copy command
		rsp.status = rpcBuff[msgIdx++];
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	73fa      	strb	r2, [r7, #15]
 8003d96:	461a      	mov	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	733b      	strb	r3, [r7, #12]
		rsp.commissioningMode1 = rpcBuff[msgIdx++];
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	73fa      	strb	r2, [r7, #15]
 8003da6:	461a      	mov	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	737b      	strb	r3, [r7, #13]
		rsp.commissioningMode2 = rpcBuff[msgIdx++];
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	73fa      	strb	r2, [r7, #15]
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	73bb      	strb	r3, [r7, #14]

		// callback function
		mtAppCfgCbs.pfnAppCfgCommissioningNotifyCb_t(&rsp);
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <processCommissioningNotify+0x68>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f107 020c 	add.w	r2, r7, #12
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4798      	blx	r3
	}
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000eac 	.word	0x20000eac
 8003dd8:	0800ff78 	.word	0x0800ff78

08003ddc <processSetChannel>:

static void processSetChannel(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgSetChannelCb_t) {
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <processSetChannel+0x48>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <processSetChannel+0x40>
		uint8_t msgIdx = 2;
 8003df0:	2302      	movs	r3, #2
 8003df2:	73fb      	strb	r3, [r7, #15]
		appCfgSetChannelFormat_t rsp;

		// size error?
		if (rpcLen < 1) {
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <processSetChannel+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003dfa:	480b      	ldr	r0, [pc, #44]	; (8003e28 <processSetChannel+0x4c>)
 8003dfc:	f00a f852 	bl	800dea4 <puts>
		}

		// copy command
		rsp.success = rpcBuff[msgIdx++];
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	73fa      	strb	r2, [r7, #15]
 8003e06:	461a      	mov	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	733b      	strb	r3, [r7, #12]

		// callback function
		mtAppCfgCbs.pfnAppCfgSetChannelCb_t(&rsp);
 8003e10:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <processSetChannel+0x48>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f107 020c 	add.w	r2, r7, #12
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4798      	blx	r3
	}
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000eac 	.word	0x20000eac
 8003e28:	0800ff78 	.word	0x0800ff78

08003e2c <processStartCommissioning>:

static void processStartCommissioning(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtAppCfgCbs.pfnAppCfgCommissioningStartCb_t) {
 8003e38:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <processStartCommissioning+0x48>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <processStartCommissioning+0x40>
		uint8_t msgIdx = 2;
 8003e40:	2302      	movs	r3, #2
 8003e42:	73fb      	strb	r3, [r7, #15]
		appCfgStartCommissioningStart_t rsp;

		// size error?
		if (rpcLen < 1) {
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <processStartCommissioning+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8003e4a:	480b      	ldr	r0, [pc, #44]	; (8003e78 <processStartCommissioning+0x4c>)
 8003e4c:	f00a f82a 	bl	800dea4 <puts>
		}

		// copy command
		rsp.success = rpcBuff[msgIdx++];
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	73fa      	strb	r2, [r7, #15]
 8003e56:	461a      	mov	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	733b      	strb	r3, [r7, #12]

		// callback function
		mtAppCfgCbs.pfnAppCfgCommissioningStartCb_t(&rsp);
 8003e60:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <processStartCommissioning+0x48>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f107 020c 	add.w	r2, r7, #12
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4798      	blx	r3
	}
}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000eac 	.word	0x20000eac
 8003e78:	0800ff78 	.word	0x0800ff78

08003e7c <processSrsp>:

static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b05      	cmp	r3, #5
 8003e90:	d007      	beq.n	8003ea2 <processSrsp+0x26>
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d10b      	bne.n	8003eae <processSrsp+0x32>
		case MT_APP_CFG_SRSP_SET_CHANNEL:
			dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: SET_CHANNEL_SRSP\n");
			processSetChannel(rpcBuff, rpcLen);
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ff9e 	bl	8003ddc <processSetChannel>
			break;
 8003ea0:	e010      	b.n	8003ec4 <processSrsp+0x48>
		case MT_APP_CFG_SRSP_START_COMMISSIONING:
			dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: START_COMMISSIONING_SRSP\n");
			processStartCommissioning(rpcBuff, rpcLen);
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffc0 	bl	8003e2c <processStartCommissioning>
			break;
 8003eac:	e00a      	b.n	8003ec4 <processSrsp+0x48>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4803      	ldr	r0, [pc, #12]	; (8003ecc <processSrsp+0x50>)
 8003ebe:	f7fc fbff 	bl	80006c0 <log_print>
			break;
 8003ec2:	bf00      	nop
	}
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	0800ff8c 	.word	0x0800ff8c

08003ed0 <appCfgProcess>:

void appCfgProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "appCfgProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003ee4:	2b60      	cmp	r3, #96	; 0x60
 8003ee6:	d105      	bne.n	8003ef4 <appCfgProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	4619      	mov	r1, r3
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ffc5 	bl	8003e7c <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8003ef2:	e015      	b.n	8003f20 <appCfgProcess+0x50>
		switch (rpcBuff[1]) {
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d105      	bne.n	8003f0a <appCfgProcess+0x3a>
				processCommissioningNotify(rpcBuff, rpcLen);
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ff32 	bl	8003d6c <processCommissioningNotify>
				break;
 8003f08:	e00a      	b.n	8003f20 <appCfgProcess+0x50>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3301      	adds	r3, #1
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	4803      	ldr	r0, [pc, #12]	; (8003f28 <appCfgProcess+0x58>)
 8003f1a:	f7fc fbd1 	bl	80006c0 <log_print>
				break;
 8003f1e:	bf00      	nop
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	0800ffb8 	.word	0x0800ffb8

08003f2c <appCfgSetChannel>:

uint8_t appCfgSetChannel(setChannelFormat_t *req) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t payload[5];

	// build command
	payload[0] = (req->primaryChannel) ? 1 : 0;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	723b      	strb	r3, [r7, #8]
	payload[1] = req->channel & 0xFF;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	727b      	strb	r3, [r7, #9]
	payload[2] = (req->channel >> 8) & 0xFF;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	72bb      	strb	r3, [r7, #10]
	payload[3] = (req->channel >> 16) & 0xFF;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	72fb      	strb	r3, [r7, #11]
	payload[4] = (req->channel >> 24) & 0xFF;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	0e1b      	lsrs	r3, r3, #24
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	733b      	strb	r3, [r7, #12]

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_APP_CFG), 0x08, payload, 5);
 8003f6a:	f107 0208 	add.w	r2, r7, #8
 8003f6e:	2305      	movs	r3, #5
 8003f70:	2108      	movs	r1, #8
 8003f72:	202f      	movs	r0, #47	; 0x2f
 8003f74:	f004 fb0c 	bl	8008590 <rpcSendFrame>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <appCfgSetChannel+0x5c>
		rpcWaitMqClientMsg(50);
 8003f82:	2032      	movs	r0, #50	; 0x32
 8003f84:	f004 f98e 	bl	80082a4 <rpcWaitMqClientMsg>
	}

	// return
	return status;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <appCfgStartCommissioning>:

uint8_t appCfgStartCommissioning(startCommissioningFormat_t *req) {
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t payload[1];

	// build command
	payload[0] = req->commissioningMode;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	733b      	strb	r3, [r7, #12]

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_APP_CFG), 0x05, payload, 1);
 8003fa0:	f107 020c 	add.w	r2, r7, #12
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	2105      	movs	r1, #5
 8003fa8:	202f      	movs	r0, #47	; 0x2f
 8003faa:	f004 faf1 	bl	8008590 <rpcSendFrame>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	73fb      	strb	r3, [r7, #15]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <appCfgStartCommissioning+0x2c>
		rpcWaitMqClientMsg(50);
 8003fb8:	2032      	movs	r0, #50	; 0x32
 8003fba:	f004 f973 	bl	80082a4 <rpcWaitMqClientMsg>
	}

	// return
	return status;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <processReadConfigurationSrsp>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processReadConfigurationSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0a6      	sub	sp, #152	; 0x98
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiReadConfigurationSrsp) {
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <processReadConfigurationSrsp+0xbc>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d04e      	beq.n	800407a <processReadConfigurationSrsp+0xb2>
		uint8_t msgIdx = 2;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReadConfigurationSrspFormat_t rsp;
		if (rpcLen < 3) {
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d802      	bhi.n	8003fee <processReadConfigurationSrsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8003fe8:	4827      	ldr	r0, [pc, #156]	; (8004088 <processReadConfigurationSrsp+0xc0>)
 8003fea:	f009 ff5b 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8003fee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	733b      	strb	r3, [r7, #12]
		rsp.ConfigId = rpcBuff[msgIdx++];
 8004002:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800400c:	461a      	mov	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	737b      	strb	r3, [r7, #13]
		rsp.Len = rpcBuff[msgIdx++];
 8004016:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8004020:	461a      	mov	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	73bb      	strb	r3, [r7, #14]
		if (rpcLen > 3) {
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d91e      	bls.n	800406e <processReadConfigurationSrsp+0xa6>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004036:	e014      	b.n	8004062 <processReadConfigurationSrsp+0x9a>
				rsp.Value[i] = rpcBuff[msgIdx++];
 8004038:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 8004042:	461a      	mov	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	7819      	ldrb	r1, [r3, #0]
 800404a:	f107 020f 	add.w	r2, r7, #15
 800404e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004052:	4413      	add	r3, r2
 8004054:	460a      	mov	r2, r1
 8004056:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8004058:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800405c:	3301      	adds	r3, #1
 800405e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004062:	7bbb      	ldrb	r3, [r7, #14]
 8004064:	461a      	mov	r2, r3
 8004066:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800406a:	4293      	cmp	r3, r2
 800406c:	d3e4      	bcc.n	8004038 <processReadConfigurationSrsp+0x70>
			}
		}
		mtSapiCbs.pfnSapiReadConfigurationSrsp(&rsp);
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <processReadConfigurationSrsp+0xbc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f107 020c 	add.w	r2, r7, #12
 8004076:	4610      	mov	r0, r2
 8004078:	4798      	blx	r3
	}
}
 800407a:	bf00      	nop
 800407c:	3798      	adds	r7, #152	; 0x98
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000eb8 	.word	0x20000eb8
 8004088:	0800ffe8 	.word	0x0800ffe8

0800408c <processGetDeviceInfoSrsp>:
 * @param   rpcBuff - Incoming buffer
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processGetDeviceInfoSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiGetDeviceInfoSrsp) {
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <processGetDeviceInfoSrsp+0x74>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d02b      	beq.n	80040f8 <processGetDeviceInfoSrsp+0x6c>
		uint8_t msgIdx = 2;
 80040a0:	2302      	movs	r3, #2
 80040a2:	75fb      	strb	r3, [r7, #23]
		GetDeviceInfoSrspFormat_t rsp;
		if (rpcLen < 9) {
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d802      	bhi.n	80040b0 <processGetDeviceInfoSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80040aa:	4816      	ldr	r0, [pc, #88]	; (8004104 <processGetDeviceInfoSrsp+0x78>)
 80040ac:	f009 fefa 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Param = rpcBuff[msgIdx++];
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	75fa      	strb	r2, [r7, #23]
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4413      	add	r3, r2
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	733b      	strb	r3, [r7, #12]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 80040c0:	2300      	movs	r3, #0
 80040c2:	75bb      	strb	r3, [r7, #22]
 80040c4:	e00f      	b.n	80040e6 <processGetDeviceInfoSrsp+0x5a>
			rsp.Value[i] = rpcBuff[msgIdx++];
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	75fa      	strb	r2, [r7, #23]
 80040cc:	461a      	mov	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	441a      	add	r2, r3
 80040d2:	7dbb      	ldrb	r3, [r7, #22]
 80040d4:	7812      	ldrb	r2, [r2, #0]
 80040d6:	f107 0118 	add.w	r1, r7, #24
 80040da:	440b      	add	r3, r1
 80040dc:	f803 2c0b 	strb.w	r2, [r3, #-11]
		for (i = 0; i < 8; i++) {
 80040e0:	7dbb      	ldrb	r3, [r7, #22]
 80040e2:	3301      	adds	r3, #1
 80040e4:	75bb      	strb	r3, [r7, #22]
 80040e6:	7dbb      	ldrb	r3, [r7, #22]
 80040e8:	2b07      	cmp	r3, #7
 80040ea:	d9ec      	bls.n	80040c6 <processGetDeviceInfoSrsp+0x3a>
		}

		mtSapiCbs.pfnSapiGetDeviceInfoSrsp(&rsp);
 80040ec:	4b04      	ldr	r3, [pc, #16]	; (8004100 <processGetDeviceInfoSrsp+0x74>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f107 020c 	add.w	r2, r7, #12
 80040f4:	4610      	mov	r0, r2
 80040f6:	4798      	blx	r3
	}
}
 80040f8:	bf00      	nop
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000eb8 	.word	0x20000eb8
 8004104:	0800ffe8 	.word	0x0800ffe8

08004108 <processFindDeviceCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processFindDeviceCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800410c:	b089      	sub	sp, #36	; 0x24
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	460b      	mov	r3, r1
 8004114:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiFindDeviceCnf) {
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <processFindDeviceCnf+0xc4>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d051      	beq.n	80041c2 <processFindDeviceCnf+0xba>
		uint8_t msgIdx = 2;
 800411e:	2302      	movs	r3, #2
 8004120:	77fb      	strb	r3, [r7, #31]
		FindDeviceCnfFormat_t rsp;
		if (rpcLen < 11) {
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	2b0a      	cmp	r3, #10
 8004126:	d802      	bhi.n	800412e <processFindDeviceCnf+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8004128:	4829      	ldr	r0, [pc, #164]	; (80041d0 <processFindDeviceCnf+0xc8>)
 800412a:	f009 febb 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SearchKey = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800412e:	7ffb      	ldrb	r3, [r7, #31]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b29a      	uxth	r2, r3
 8004138:	7ffb      	ldrb	r3, [r7, #31]
 800413a:	3301      	adds	r3, #1
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	440b      	add	r3, r1
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	b29b      	uxth	r3, r3
 8004148:	4413      	add	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 800414e:	7ffb      	ldrb	r3, [r7, #31]
 8004150:	3302      	adds	r3, #2
 8004152:	77fb      	strb	r3, [r7, #31]
		rsp.Result = 0;
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8004160:	2300      	movs	r3, #0
 8004162:	77bb      	strb	r3, [r7, #30]
 8004164:	e024      	b.n	80041b0 <processFindDeviceCnf+0xa8>
			rsp.Result |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8004166:	7ffb      	ldrb	r3, [r7, #31]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	77fa      	strb	r2, [r7, #31]
 800416c:	461a      	mov	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	7fb9      	ldrb	r1, [r7, #30]
 800417c:	00c9      	lsls	r1, r1, #3
 800417e:	f1a1 0620 	sub.w	r6, r1, #32
 8004182:	f1c1 0020 	rsb	r0, r1, #32
 8004186:	fa03 f501 	lsl.w	r5, r3, r1
 800418a:	fa02 f606 	lsl.w	r6, r2, r6
 800418e:	4335      	orrs	r5, r6
 8004190:	fa22 f000 	lsr.w	r0, r2, r0
 8004194:	4305      	orrs	r5, r0
 8004196:	fa02 f401 	lsl.w	r4, r2, r1
 800419a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800419e:	ea44 0802 	orr.w	r8, r4, r2
 80041a2:	ea45 0903 	orr.w	r9, r5, r3
 80041a6:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++)
 80041aa:	7fbb      	ldrb	r3, [r7, #30]
 80041ac:	3301      	adds	r3, #1
 80041ae:	77bb      	strb	r3, [r7, #30]
 80041b0:	7fbb      	ldrb	r3, [r7, #30]
 80041b2:	2b07      	cmp	r3, #7
 80041b4:	d9d7      	bls.n	8004166 <processFindDeviceCnf+0x5e>

		mtSapiCbs.pfnSapiFindDeviceCnf(&rsp);
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <processFindDeviceCnf+0xc4>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f107 0208 	add.w	r2, r7, #8
 80041be:	4610      	mov	r0, r2
 80041c0:	4798      	blx	r3
	}
}
 80041c2:	bf00      	nop
 80041c4:	3724      	adds	r7, #36	; 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041cc:	20000eb8 	.word	0x20000eb8
 80041d0:	0800ffe8 	.word	0x0800ffe8

080041d4 <processSendDataCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processSendDataCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiSendDataCnf) {
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <processSendDataCnf+0x58>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01d      	beq.n	8004224 <processSendDataCnf+0x50>
		uint8_t msgIdx = 2;
 80041e8:	2302      	movs	r3, #2
 80041ea:	73fb      	strb	r3, [r7, #15]
		SendDataCnfFormat_t rsp;
		if (rpcLen < 2) {
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d802      	bhi.n	80041f8 <processSendDataCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80041f2:	480f      	ldr	r0, [pc, #60]	; (8004230 <processSendDataCnf+0x5c>)
 80041f4:	f009 fe56 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Handle = rpcBuff[msgIdx++];
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	73fa      	strb	r2, [r7, #15]
 80041fe:	461a      	mov	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4413      	add	r3, r2
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	733b      	strb	r3, [r7, #12]
		rsp.Status = rpcBuff[msgIdx++];
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	73fa      	strb	r2, [r7, #15]
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4413      	add	r3, r2
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	737b      	strb	r3, [r7, #13]

		mtSapiCbs.pfnSapiSendDataCnf(&rsp);
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <processSendDataCnf+0x58>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f107 020c 	add.w	r2, r7, #12
 8004220:	4610      	mov	r0, r2
 8004222:	4798      	blx	r3
	}
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000eb8 	.word	0x20000eb8
 8004230:	0800ffe8 	.word	0x0800ffe8

08004234 <processReceiveDataInd>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processReceiveDataInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b09c      	sub	sp, #112	; 0x70
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiReceiveDataInd) {
 8004240:	4b3c      	ldr	r3, [pc, #240]	; (8004334 <processReceiveDataInd+0x100>)
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d070      	beq.n	800432a <processReceiveDataInd+0xf6>
		uint8_t msgIdx = 2;
 8004248:	2302      	movs	r3, #2
 800424a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		ReceiveDataIndFormat_t rsp;
		if (rpcLen < 6) {
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	2b05      	cmp	r3, #5
 8004252:	d802      	bhi.n	800425a <processReceiveDataInd+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8004254:	4838      	ldr	r0, [pc, #224]	; (8004338 <processReceiveDataInd+0x104>)
 8004256:	f009 fe25 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Source = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800425a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b29a      	uxth	r2, r3
 8004266:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800426a:	3301      	adds	r3, #1
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	440b      	add	r3, r1
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	b29b      	uxth	r3, r3
 8004278:	4413      	add	r3, r2
 800427a:	b29b      	uxth	r3, r3
 800427c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800427e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004282:	3302      	adds	r3, #2
 8004284:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		rsp.Command = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b29a      	uxth	r2, r3
 8004294:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004298:	3301      	adds	r3, #1
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	440b      	add	r3, r1
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	81fb      	strh	r3, [r7, #14]
		msgIdx += 2;
 80042ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042b0:	3302      	adds	r3, #2
 80042b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		rsp.Len = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80042b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042c6:	3301      	adds	r3, #1
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	440b      	add	r3, r1
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 80042da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042de:	3302      	adds	r3, #2
 80042e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (rpcLen > 6) {
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d919      	bls.n	800431e <processReceiveDataInd+0xea>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 80042ea:	2300      	movs	r3, #0
 80042ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ee:	e011      	b.n	8004314 <processReceiveDataInd+0xe0>
				rsp.Data[i] = rpcBuff[msgIdx++];
 80042f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	7819      	ldrb	r1, [r3, #0]
 8004302:	f107 0212 	add.w	r2, r7, #18
 8004306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004308:	4413      	add	r3, r2
 800430a:	460a      	mov	r2, r1
 800430c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 800430e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004310:	3301      	adds	r3, #1
 8004312:	66bb      	str	r3, [r7, #104]	; 0x68
 8004314:	8a3b      	ldrh	r3, [r7, #16]
 8004316:	461a      	mov	r2, r3
 8004318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800431a:	4293      	cmp	r3, r2
 800431c:	d3e8      	bcc.n	80042f0 <processReceiveDataInd+0xbc>
			}
		}
		mtSapiCbs.pfnSapiReceiveDataInd(&rsp);
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <processReceiveDataInd+0x100>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f107 020c 	add.w	r2, r7, #12
 8004326:	4610      	mov	r0, r2
 8004328:	4798      	blx	r3
	}
}
 800432a:	bf00      	nop
 800432c:	3770      	adds	r7, #112	; 0x70
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000eb8 	.word	0x20000eb8
 8004338:	0800ffe8 	.word	0x0800ffe8

0800433c <processAllowBindCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processAllowBindCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiAllowBindCnf) {
 8004348:	4b14      	ldr	r3, [pc, #80]	; (800439c <processAllowBindCnf+0x60>)
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <processAllowBindCnf+0x56>
		uint8_t msgIdx = 2;
 8004350:	2302      	movs	r3, #2
 8004352:	73fb      	strb	r3, [r7, #15]
		AllowBindCnfFormat_t rsp;
		if (rpcLen < 2) {
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d802      	bhi.n	8004360 <processAllowBindCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800435a:	4811      	ldr	r0, [pc, #68]	; (80043a0 <processAllowBindCnf+0x64>)
 800435c:	f009 fda2 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Source = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b29a      	uxth	r2, r3
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	3301      	adds	r3, #1
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	440b      	add	r3, r1
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	b29b      	uxth	r3, r3
 800437a:	4413      	add	r3, r2
 800437c:	b29b      	uxth	r3, r3
 800437e:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	3302      	adds	r3, #2
 8004384:	73fb      	strb	r3, [r7, #15]

		mtSapiCbs.pfnSapiAllowBindCnf(&rsp);
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <processAllowBindCnf+0x60>)
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f107 020c 	add.w	r2, r7, #12
 800438e:	4610      	mov	r0, r2
 8004390:	4798      	blx	r3
	}
}
 8004392:	bf00      	nop
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000eb8 	.word	0x20000eb8
 80043a0:	0800ffe8 	.word	0x0800ffe8

080043a4 <processBindCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processBindCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiBindCnf) {
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <processBindCnf+0x70>)
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d028      	beq.n	800440a <processBindCnf+0x66>
		uint8_t msgIdx = 2;
 80043b8:	2302      	movs	r3, #2
 80043ba:	73fb      	strb	r3, [r7, #15]
		BindCnfFormat_t rsp;
		if (rpcLen < 3) {
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d802      	bhi.n	80043c8 <processBindCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80043c2:	4815      	ldr	r0, [pc, #84]	; (8004418 <processBindCnf+0x74>)
 80043c4:	f009 fd6e 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.CommandId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	4413      	add	r3, r2
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	3301      	adds	r3, #1
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	440b      	add	r3, r1
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	3302      	adds	r3, #2
 80043ec:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	73fa      	strb	r2, [r7, #15]
 80043f4:	461a      	mov	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4413      	add	r3, r2
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	72bb      	strb	r3, [r7, #10]

		mtSapiCbs.pfnSapiBindCnf(&rsp);
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <processBindCnf+0x70>)
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f107 0208 	add.w	r2, r7, #8
 8004406:	4610      	mov	r0, r2
 8004408:	4798      	blx	r3
	}
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000eb8 	.word	0x20000eb8
 8004418:	0800ffe8 	.word	0x0800ffe8

0800441c <processStartCnf>:
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 * @return   
 */
static void processStartCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
	if (mtSapiCbs.pfnSapiStartCnf) {
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <processStartCnf+0x48>)
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d015      	beq.n	800445c <processStartCnf+0x40>
		uint8_t msgIdx = 2;
 8004430:	2302      	movs	r3, #2
 8004432:	73fb      	strb	r3, [r7, #15]
		StartCnfFormat_t rsp;
		if (rpcLen < 1) {
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <processStartCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800443a:	480b      	ldr	r0, [pc, #44]	; (8004468 <processStartCnf+0x4c>)
 800443c:	f009 fd32 	bl	800dea4 <puts>
		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	73fa      	strb	r2, [r7, #15]
 8004446:	461a      	mov	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4413      	add	r3, r2
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	733b      	strb	r3, [r7, #12]

		mtSapiCbs.pfnSapiStartCnf(&rsp);
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <processStartCnf+0x48>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f107 020c 	add.w	r2, r7, #12
 8004458:	4610      	mov	r0, r2
 800445a:	4798      	blx	r3
	}
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000eb8 	.word	0x20000eb8
 8004468:	0800ffe8 	.word	0x0800ffe8

0800446c <processSrsp>:
 *
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	461a      	mov	r2, r3
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4813      	ldr	r0, [pc, #76]	; (80044cc <processSrsp+0x60>)
 8004480:	f009 fc74 	bl	800dd6c <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3301      	adds	r3, #1
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b04      	cmp	r3, #4
 800448c:	d002      	beq.n	8004494 <processSrsp+0x28>
 800448e:	2b06      	cmp	r3, #6
 8004490:	d006      	beq.n	80044a0 <processSrsp+0x34>
 8004492:	e00b      	b.n	80044ac <processSrsp+0x40>
		case MT_SAPI_READ_CONFIGURATION:
			dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_READ_CONFIGURATION\n");
			processReadConfigurationSrsp(rpcBuff, rpcLen);
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fd95 	bl	8003fc8 <processReadConfigurationSrsp>
			break;
 800449e:	e010      	b.n	80044c2 <processSrsp+0x56>
		case MT_SAPI_GET_DEVICE_INFO:
			dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: MT_SAPI_GET_DEVICE_INFO\n");
			processGetDeviceInfoSrsp(rpcBuff, rpcLen);
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fdf1 	bl	800408c <processGetDeviceInfoSrsp>
			break;
 80044aa:	e00a      	b.n	80044c2 <processSrsp+0x56>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message  [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	4619      	mov	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3301      	adds	r3, #1
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	4805      	ldr	r0, [pc, #20]	; (80044d0 <processSrsp+0x64>)
 80044bc:	f7fc f900 	bl	80006c0 <log_print>
			break;
 80044c0:	bf00      	nop
	}

}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200050d8 	.word	0x200050d8
 80044d0:	0800fffc 	.word	0x0800fffc

080044d4 <sapiProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 ***********************************************************************************************/
void sapiProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "sapiProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80044e8:	2b60      	cmp	r3, #96	; 0x60
 80044ea:	d105      	bne.n	80044f8 <sapiProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ffbb 	bl	800446c <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_INFO, "sapiProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 80044f6:	e048      	b.n	800458a <sapiProcess+0xb6>
		switch (rpcBuff[1]) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3301      	adds	r3, #1
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	3b80      	subs	r3, #128	; 0x80
 8004500:	2b07      	cmp	r3, #7
 8004502:	d837      	bhi.n	8004574 <sapiProcess+0xa0>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <sapiProcess+0x38>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004569 	.word	0x08004569
 8004510:	0800455d 	.word	0x0800455d
 8004514:	08004551 	.word	0x08004551
 8004518:	08004539 	.word	0x08004539
 800451c:	08004575 	.word	0x08004575
 8004520:	0800452d 	.word	0x0800452d
 8004524:	08004575 	.word	0x08004575
 8004528:	08004545 	.word	0x08004545
				processFindDeviceCnf(rpcBuff, rpcLen);
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fde9 	bl	8004108 <processFindDeviceCnf>
				break;
 8004536:	e028      	b.n	800458a <sapiProcess+0xb6>
				processSendDataCnf(rpcBuff, rpcLen);
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fe49 	bl	80041d4 <processSendDataCnf>
				break;
 8004542:	e022      	b.n	800458a <sapiProcess+0xb6>
				processReceiveDataInd(rpcBuff, rpcLen);
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	4619      	mov	r1, r3
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fe73 	bl	8004234 <processReceiveDataInd>
				break;
 800454e:	e01c      	b.n	800458a <sapiProcess+0xb6>
				processAllowBindCnf(rpcBuff, rpcLen);
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff fef1 	bl	800433c <processAllowBindCnf>
				break;
 800455a:	e016      	b.n	800458a <sapiProcess+0xb6>
				processBindCnf(rpcBuff, rpcLen);
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ff1f 	bl	80043a4 <processBindCnf>
				break;
 8004566:	e010      	b.n	800458a <sapiProcess+0xb6>
				processStartCnf(rpcBuff, rpcLen);
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	4619      	mov	r1, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ff55 	bl	800441c <processStartCnf>
				break;
 8004572:	e00a      	b.n	800458a <sapiProcess+0xb6>
				dbg_print(PRINT_LEVEL_INFO, "sapiProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3301      	adds	r3, #1
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	4804      	ldr	r0, [pc, #16]	; (8004594 <sapiProcess+0xc0>)
 8004584:	f7fc f89c 	bl	80006c0 <log_print>
				break;
 8004588:	bf00      	nop
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	08010028 	.word	0x08010028

08004598 <processPingSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of incoming buffer.
 *
 */
static void processPingSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysPingSrsp) {
 80045a4:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <processPingSrsp+0x60>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <processPingSrsp+0x56>
		uint8_t msgIdx = 2;
 80045ac:	2302      	movs	r3, #2
 80045ae:	73fb      	strb	r3, [r7, #15]
		PingSrspFormat_t rsp;
		if (rpcLen < 2) {
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d802      	bhi.n	80045bc <processPingSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80045b6:	4811      	ldr	r0, [pc, #68]	; (80045fc <processPingSrsp+0x64>)
 80045b8:	f009 fc74 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Capabilities = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	3301      	adds	r3, #1
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	440b      	add	r3, r1
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	b29b      	uxth	r3, r3
 80045da:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	3302      	adds	r3, #2
 80045e0:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysPingSrsp(&rsp);
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <processPingSrsp+0x60>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f107 020c 	add.w	r2, r7, #12
 80045ea:	4610      	mov	r0, r2
 80045ec:	4798      	blx	r3
	}
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000ed8 	.word	0x20000ed8
 80045fc:	08010054 	.word	0x08010054

08004600 <processGetExtAddrSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGetExtAddrSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004604:	b087      	sub	sp, #28
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	460b      	mov	r3, r1
 800460c:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGetExtAddrSrsp) {
 800460e:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <processGetExtAddrSrsp+0xa0>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03e      	beq.n	8004694 <processGetExtAddrSrsp+0x94>
		uint8_t msgIdx = 2;
 8004616:	2302      	movs	r3, #2
 8004618:	75fb      	strb	r3, [r7, #23]
		GetExtAddrSrspFormat_t rsp;
		if (rpcLen < 8) {
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	2b07      	cmp	r3, #7
 800461e:	d802      	bhi.n	8004626 <processGetExtAddrSrsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8004620:	4820      	ldr	r0, [pc, #128]	; (80046a4 <processGetExtAddrSrsp+0xa4>)
 8004622:	f009 fc3f 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.ExtAddr = 0;
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		uint8_t i;
		for (i = 0; i < 8; i++)
 8004632:	2300      	movs	r3, #0
 8004634:	75bb      	strb	r3, [r7, #22]
 8004636:	e024      	b.n	8004682 <processGetExtAddrSrsp+0x82>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	75fa      	strb	r2, [r7, #23]
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4413      	add	r3, r2
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b2da      	uxtb	r2, r3
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	7db9      	ldrb	r1, [r7, #22]
 800464e:	00c9      	lsls	r1, r1, #3
 8004650:	f1a1 0620 	sub.w	r6, r1, #32
 8004654:	f1c1 0020 	rsb	r0, r1, #32
 8004658:	fa03 f501 	lsl.w	r5, r3, r1
 800465c:	fa02 f606 	lsl.w	r6, r2, r6
 8004660:	4335      	orrs	r5, r6
 8004662:	fa22 f000 	lsr.w	r0, r2, r0
 8004666:	4305      	orrs	r5, r0
 8004668:	fa02 f401 	lsl.w	r4, r2, r1
 800466c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004670:	ea44 0802 	orr.w	r8, r4, r2
 8004674:	ea45 0903 	orr.w	r9, r5, r3
 8004678:	e9c7 8902 	strd	r8, r9, [r7, #8]
		for (i = 0; i < 8; i++)
 800467c:	7dbb      	ldrb	r3, [r7, #22]
 800467e:	3301      	adds	r3, #1
 8004680:	75bb      	strb	r3, [r7, #22]
 8004682:	7dbb      	ldrb	r3, [r7, #22]
 8004684:	2b07      	cmp	r3, #7
 8004686:	d9d7      	bls.n	8004638 <processGetExtAddrSrsp+0x38>

		mtSysCbs.pfnSysGetExtAddrSrsp(&rsp);
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <processGetExtAddrSrsp+0xa0>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f107 0208 	add.w	r2, r7, #8
 8004690:	4610      	mov	r0, r2
 8004692:	4798      	blx	r3
	}
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800469e:	bf00      	nop
 80046a0:	20000ed8 	.word	0x20000ed8
 80046a4:	08010054 	.word	0x08010054

080046a8 <processRamReadSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processRamReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b0a6      	sub	sp, #152	; 0x98
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysRamReadSrsp) {
 80046b4:	4b26      	ldr	r3, [pc, #152]	; (8004750 <processRamReadSrsp+0xa8>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d044      	beq.n	8004746 <processRamReadSrsp+0x9e>
		uint8_t msgIdx = 2;
 80046bc:	2302      	movs	r3, #2
 80046be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		RamReadSrspFormat_t rsp;
		if (rpcLen < 2) {
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d802      	bhi.n	80046ce <processRamReadSrsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 80046c8:	4822      	ldr	r0, [pc, #136]	; (8004754 <processRamReadSrsp+0xac>)
 80046ca:	f009 fbeb 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 80046ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80046d8:	461a      	mov	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	733b      	strb	r3, [r7, #12]
		rsp.Len = rpcBuff[msgIdx++];
 80046e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80046ec:	461a      	mov	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	737b      	strb	r3, [r7, #13]
		if (rpcLen > 2) {
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d91e      	bls.n	800473a <processRamReadSrsp+0x92>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004702:	e014      	b.n	800472e <processRamReadSrsp+0x86>
				rsp.Value[i] = rpcBuff[msgIdx++];
 8004704:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800470e:	461a      	mov	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	7819      	ldrb	r1, [r3, #0]
 8004716:	f107 020e 	add.w	r2, r7, #14
 800471a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800471e:	4413      	add	r3, r2
 8004720:	460a      	mov	r2, r1
 8004722:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8004724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004728:	3301      	adds	r3, #1
 800472a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800472e:	7b7b      	ldrb	r3, [r7, #13]
 8004730:	461a      	mov	r2, r3
 8004732:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004736:	4293      	cmp	r3, r2
 8004738:	d3e4      	bcc.n	8004704 <processRamReadSrsp+0x5c>
			}
		}
		mtSysCbs.pfnSysRamReadSrsp(&rsp);
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <processRamReadSrsp+0xa8>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f107 020c 	add.w	r2, r7, #12
 8004742:	4610      	mov	r0, r2
 8004744:	4798      	blx	r3
	}
}
 8004746:	bf00      	nop
 8004748:	3798      	adds	r7, #152	; 0x98
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000ed8 	.word	0x20000ed8
 8004754:	08010054 	.word	0x08010054

08004758 <sysResetReq>:
 *
 * @param   req - Pointer to command specific structure.
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysResetReq(ResetReqFormat_t *req) {
 8004758:	b5b0      	push	{r4, r5, r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	466b      	mov	r3, sp
 8004762:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	77fb      	strb	r3, [r7, #31]
	uint32_t cmdLen = 1;
 8004768:	2301      	movs	r3, #1
 800476a:	61bb      	str	r3, [r7, #24]
	uint8_t cmd[cmdLen];
 800476c:	69bc      	ldr	r4, [r7, #24]
 800476e:	4623      	mov	r3, r4
 8004770:	3b01      	subs	r3, #1
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	4620      	mov	r0, r4
 8004776:	f04f 0100 	mov.w	r1, #0
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	00cb      	lsls	r3, r1, #3
 8004784:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004788:	00c2      	lsls	r2, r0, #3
 800478a:	4620      	mov	r0, r4
 800478c:	f04f 0100 	mov.w	r1, #0
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	00cb      	lsls	r3, r1, #3
 800479a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800479e:	00c2      	lsls	r2, r0, #3
 80047a0:	1de3      	adds	r3, r4, #7
 80047a2:	08db      	lsrs	r3, r3, #3
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	ebad 0d03 	sub.w	sp, sp, r3
 80047aa:	466b      	mov	r3, sp
 80047ac:	3300      	adds	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]

	cmd[cmInd++] = req->Type;
 80047b0:	7ffb      	ldrb	r3, [r7, #31]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	77fa      	strb	r2, [r7, #31]
 80047b6:	461a      	mov	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	7819      	ldrb	r1, [r3, #0]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	5499      	strb	r1, [r3, r2]

	status = rpcSendFrame((MT_RPC_CMD_AREQ | MT_RPC_SYS_SYS),
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2100      	movs	r1, #0
 80047c8:	2041      	movs	r0, #65	; 0x41
 80047ca:	f003 fee1 	bl	8008590 <rpcSendFrame>
 80047ce:	4603      	mov	r3, r0
 80047d0:	73fb      	strb	r3, [r7, #15]
	MT_SYS_RESET_REQ, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <sysResetReq+0x86>
		rpcWaitMqClientMsg(50);
 80047d8:	2032      	movs	r0, #50	; 0x32
 80047da:	f003 fd63 	bl	80082a4 <rpcWaitMqClientMsg>
	}
	return status;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	46ad      	mov	sp, r5
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080047ec <processResetInd>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processResetInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysResetInd) {
 80047f8:	4b22      	ldr	r3, [pc, #136]	; (8004884 <processResetInd+0x98>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d03d      	beq.n	800487c <processResetInd+0x90>
		uint8_t msgIdx = 2;
 8004800:	2302      	movs	r3, #2
 8004802:	73fb      	strb	r3, [r7, #15]
		ResetIndFormat_t rsp;
		if (rpcLen < 6) {
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	2b05      	cmp	r3, #5
 8004808:	d802      	bhi.n	8004810 <processResetInd+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800480a:	481f      	ldr	r0, [pc, #124]	; (8004888 <processResetInd+0x9c>)
 800480c:	f009 fb4a 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Reason = rpcBuff[msgIdx++];
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	73fa      	strb	r2, [r7, #15]
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4413      	add	r3, r2
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	723b      	strb	r3, [r7, #8]
		rsp.TransportRev = rpcBuff[msgIdx++];
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	73fa      	strb	r2, [r7, #15]
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	727b      	strb	r3, [r7, #9]
		rsp.ProductId = rpcBuff[msgIdx++];
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	73fa      	strb	r2, [r7, #15]
 8004836:	461a      	mov	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4413      	add	r3, r2
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	72bb      	strb	r3, [r7, #10]
		rsp.MajorRel = rpcBuff[msgIdx++];
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	73fa      	strb	r2, [r7, #15]
 8004846:	461a      	mov	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4413      	add	r3, r2
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	72fb      	strb	r3, [r7, #11]
		rsp.MinorRel = rpcBuff[msgIdx++];
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	73fa      	strb	r2, [r7, #15]
 8004856:	461a      	mov	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4413      	add	r3, r2
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	733b      	strb	r3, [r7, #12]
		rsp.HwRev = rpcBuff[msgIdx++];
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	73fa      	strb	r2, [r7, #15]
 8004866:	461a      	mov	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4413      	add	r3, r2
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	737b      	strb	r3, [r7, #13]

		mtSysCbs.pfnSysResetInd(&rsp);
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <processResetInd+0x98>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f107 0208 	add.w	r2, r7, #8
 8004878:	4610      	mov	r0, r2
 800487a:	4798      	blx	r3
	}
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000ed8 	.word	0x20000ed8
 8004888:	08010054 	.word	0x08010054

0800488c <sysVersion>:
 *
 * @param    -
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysVersion() {
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
	uint8_t status;

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_SYS),
 8004892:	2300      	movs	r3, #0
 8004894:	2200      	movs	r2, #0
 8004896:	2102      	movs	r1, #2
 8004898:	2021      	movs	r0, #33	; 0x21
 800489a:	f003 fe79 	bl	8008590 <rpcSendFrame>
 800489e:	4603      	mov	r3, r0
 80048a0:	71fb      	strb	r3, [r7, #7]
	MT_SYS_VERSION, NULL, 0);

	if (status == MT_RPC_SUCCESS) {
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d102      	bne.n	80048ae <sysVersion+0x22>
		rpcWaitMqClientMsg(50);
 80048a8:	2032      	movs	r0, #50	; 0x32
 80048aa:	f003 fcfb 	bl	80082a4 <rpcWaitMqClientMsg>
	}

	return status;
 80048ae:	79fb      	ldrb	r3, [r7, #7]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <processVersionSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processVersionSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysVersionSrsp) {
 80048c4:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <processVersionSrsp+0x88>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d035      	beq.n	8004938 <processVersionSrsp+0x80>
		uint8_t msgIdx = 2;
 80048cc:	2302      	movs	r3, #2
 80048ce:	73fb      	strb	r3, [r7, #15]
		VersionSrspFormat_t rsp;
		if (rpcLen < 5) {
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d802      	bhi.n	80048dc <processVersionSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80048d6:	481b      	ldr	r0, [pc, #108]	; (8004944 <processVersionSrsp+0x8c>)
 80048d8:	f009 fae4 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.TransportRev = rpcBuff[msgIdx++];
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	73fa      	strb	r2, [r7, #15]
 80048e2:	461a      	mov	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4413      	add	r3, r2
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	723b      	strb	r3, [r7, #8]
		rsp.Product = rpcBuff[msgIdx++];
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	73fa      	strb	r2, [r7, #15]
 80048f2:	461a      	mov	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	727b      	strb	r3, [r7, #9]
		rsp.MajorRel = rpcBuff[msgIdx++];
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	73fa      	strb	r2, [r7, #15]
 8004902:	461a      	mov	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4413      	add	r3, r2
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	72bb      	strb	r3, [r7, #10]
		rsp.MinorRel = rpcBuff[msgIdx++];
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	73fa      	strb	r2, [r7, #15]
 8004912:	461a      	mov	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4413      	add	r3, r2
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	72fb      	strb	r3, [r7, #11]
		rsp.MaintRel = rpcBuff[msgIdx++];
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	73fa      	strb	r2, [r7, #15]
 8004922:	461a      	mov	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4413      	add	r3, r2
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysVersionSrsp(&rsp);
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <processVersionSrsp+0x88>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f107 0208 	add.w	r2, r7, #8
 8004934:	4610      	mov	r0, r2
 8004936:	4798      	blx	r3
	}
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000ed8 	.word	0x20000ed8
 8004944:	08010054 	.word	0x08010054

08004948 <processOsalNvReadSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalNvReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b0c4      	sub	sp, #272	; 0x110
 800494c:	af00      	add	r7, sp, #0
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	6018      	str	r0, [r3, #0]
 8004952:	460a      	mov	r2, r1
 8004954:	1cfb      	adds	r3, r7, #3
 8004956:	701a      	strb	r2, [r3, #0]
	if (mtSysCbs.pfnSysOsalNvReadSrsp) {
 8004958:	4b2c      	ldr	r3, [pc, #176]	; (8004a0c <processOsalNvReadSrsp+0xc4>)
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d050      	beq.n	8004a02 <processOsalNvReadSrsp+0xba>
		uint8_t msgIdx = 2;
 8004960:	2302      	movs	r3, #2
 8004962:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		OsalNvReadSrspFormat_t rsp;
		if (rpcLen < 2) {
 8004966:	1cfb      	adds	r3, r7, #3
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d802      	bhi.n	8004974 <processOsalNvReadSrsp+0x2c>
			printf("MT_RPC_ERR_LENGTH\n");
 800496e:	4828      	ldr	r0, [pc, #160]	; (8004a10 <processOsalNvReadSrsp+0xc8>)
 8004970:	f009 fa98 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8004974:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 800497e:	461a      	mov	r2, r3
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4413      	add	r3, r2
 8004986:	781a      	ldrb	r2, [r3, #0]
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	701a      	strb	r2, [r3, #0]
		rsp.Len = rpcBuff[msgIdx++];
 800498e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8004998:	461a      	mov	r2, r3
 800499a:	1d3b      	adds	r3, r7, #4
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4413      	add	r3, r2
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	f107 030c 	add.w	r3, r7, #12
 80049a6:	705a      	strb	r2, [r3, #1]
		if (rpcLen > 2) {
 80049a8:	1cfb      	adds	r3, r7, #3
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d922      	bls.n	80049f6 <processOsalNvReadSrsp+0xae>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 80049b0:	2300      	movs	r3, #0
 80049b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80049b6:	e016      	b.n	80049e6 <processOsalNvReadSrsp+0x9e>
				rsp.Value[i] = rpcBuff[msgIdx++];
 80049b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 80049c2:	461a      	mov	r2, r3
 80049c4:	1d3b      	adds	r3, r7, #4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4413      	add	r3, r2
 80049ca:	7819      	ldrb	r1, [r3, #0]
 80049cc:	f107 020c 	add.w	r2, r7, #12
 80049d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049d4:	4413      	add	r3, r2
 80049d6:	3302      	adds	r3, #2
 80049d8:	460a      	mov	r2, r1
 80049da:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 80049dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049e0:	3301      	adds	r3, #1
 80049e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80049e6:	f107 030c 	add.w	r3, r7, #12
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	461a      	mov	r2, r3
 80049ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d3e0      	bcc.n	80049b8 <processOsalNvReadSrsp+0x70>
			}
		}
		mtSysCbs.pfnSysOsalNvReadSrsp(&rsp);
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <processOsalNvReadSrsp+0xc4>)
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f107 020c 	add.w	r2, r7, #12
 80049fe:	4610      	mov	r0, r2
 8004a00:	4798      	blx	r3
	}
}
 8004a02:	bf00      	nop
 8004a04:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000ed8 	.word	0x20000ed8
 8004a10:	08010054 	.word	0x08010054

08004a14 <sysOsalNvWrite>:
 *
 * @param   req - Pointer to command specific structure.
 *
 * @return   status, either Success (0) or Failure (1).
 */
uint8_t sysOsalNvWrite(OsalNvWriteFormat_t *req) {
 8004a14:	b5b0      	push	{r4, r5, r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	466b      	mov	r3, sp
 8004a1e:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	76fb      	strb	r3, [r7, #27]
	uint32_t cmdLen = 4 + req->Len;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	78db      	ldrb	r3, [r3, #3]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	617b      	str	r3, [r7, #20]
	uint8_t cmd[cmdLen];
 8004a2c:	697c      	ldr	r4, [r7, #20]
 8004a2e:	4623      	mov	r3, r4
 8004a30:	3b01      	subs	r3, #1
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	4620      	mov	r0, r4
 8004a36:	f04f 0100 	mov.w	r1, #0
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	00cb      	lsls	r3, r1, #3
 8004a44:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004a48:	00c2      	lsls	r2, r0, #3
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	00cb      	lsls	r3, r1, #3
 8004a5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004a5e:	00c2      	lsls	r2, r0, #3
 8004a60:	1de3      	adds	r3, r4, #7
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	ebad 0d03 	sub.w	sp, sp, r3
 8004a6a:	466b      	mov	r3, sp
 8004a6c:	3300      	adds	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
	int idx;

	cmd[cmInd++] = (uint8_t) (req->Id & 0xFF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8819      	ldrh	r1, [r3, #0]
 8004a74:	7efb      	ldrb	r3, [r7, #27]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	76fa      	strb	r2, [r7, #27]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	b2c9      	uxtb	r1, r1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->Id >> 8) & 0xFF);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	0a1b      	lsrs	r3, r3, #8
 8004a88:	b299      	uxth	r1, r3
 8004a8a:	7efb      	ldrb	r3, [r7, #27]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	76fa      	strb	r2, [r7, #27]
 8004a90:	461a      	mov	r2, r3
 8004a92:	b2c9      	uxtb	r1, r1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Offset;
 8004a98:	7efb      	ldrb	r3, [r7, #27]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	76fa      	strb	r2, [r7, #27]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7899      	ldrb	r1, [r3, #2]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Len;
 8004aa8:	7efb      	ldrb	r3, [r7, #27]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	76fa      	strb	r2, [r7, #27]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	78d9      	ldrb	r1, [r3, #3]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	5499      	strb	r1, [r3, r2]
	for (idx = 0; idx < req->Len; idx++) {
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	e00d      	b.n	8004ada <sysOsalNvWrite+0xc6>
		cmd[cmInd++] = req->Value[idx];
 8004abe:	7efb      	ldrb	r3, [r7, #27]
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	76fa      	strb	r2, [r7, #27]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	3304      	adds	r3, #4
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	545a      	strb	r2, [r3, r1]
	for (idx = 0; idx < req->Len; idx++) {
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	78db      	ldrb	r3, [r3, #3]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	dbeb      	blt.n	8004abe <sysOsalNvWrite+0xaa>
	}

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_SYS),
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2109      	movs	r1, #9
 8004aee:	2021      	movs	r0, #33	; 0x21
 8004af0:	f003 fd4e 	bl	8008590 <rpcSendFrame>
 8004af4:	4603      	mov	r3, r0
 8004af6:	72fb      	strb	r3, [r7, #11]
	MT_SYS_OSAL_NV_WRITE, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 8004af8:	7afb      	ldrb	r3, [r7, #11]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <sysOsalNvWrite+0xf0>
		rpcWaitMqClientMsg(50);
 8004afe:	2032      	movs	r0, #50	; 0x32
 8004b00:	f003 fbd0 	bl	80082a4 <rpcWaitMqClientMsg>
	}

	return status;
 8004b04:	7afb      	ldrb	r3, [r7, #11]
 8004b06:	46ad      	mov	sp, r5
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bdb0      	pop	{r4, r5, r7, pc}

08004b10 <processOsalNvLengthSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalNvLengthSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysOsalNvLengthSrsp) {
 8004b1c:	4b14      	ldr	r3, [pc, #80]	; (8004b70 <processOsalNvLengthSrsp+0x60>)
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <processOsalNvLengthSrsp+0x56>
		uint8_t msgIdx = 2;
 8004b24:	2302      	movs	r3, #2
 8004b26:	73fb      	strb	r3, [r7, #15]
		OsalNvLengthSrspFormat_t rsp;
		if (rpcLen < 2) {
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d802      	bhi.n	8004b34 <processOsalNvLengthSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004b2e:	4811      	ldr	r0, [pc, #68]	; (8004b74 <processOsalNvLengthSrsp+0x64>)
 8004b30:	f009 f9b8 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.ItemLen = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4413      	add	r3, r2
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	3301      	adds	r3, #1
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	440b      	add	r3, r1
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	3302      	adds	r3, #2
 8004b58:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysOsalNvLengthSrsp(&rsp);
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <processOsalNvLengthSrsp+0x60>)
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f107 020c 	add.w	r2, r7, #12
 8004b62:	4610      	mov	r0, r2
 8004b64:	4798      	blx	r3
	}
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000ed8 	.word	0x20000ed8
 8004b74:	08010054 	.word	0x08010054

08004b78 <processOsalTimerExpired>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processOsalTimerExpired(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysOsalTimerExpired) {
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <processOsalTimerExpired+0x48>)
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d015      	beq.n	8004bb8 <processOsalTimerExpired+0x40>
		uint8_t msgIdx = 2;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	73fb      	strb	r3, [r7, #15]
		OsalTimerExpiredFormat_t rsp;
		if (rpcLen < 1) {
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d102      	bne.n	8004b9c <processOsalTimerExpired+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004b96:	480b      	ldr	r0, [pc, #44]	; (8004bc4 <processOsalTimerExpired+0x4c>)
 8004b98:	f009 f984 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Id = rpcBuff[msgIdx++];
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	73fa      	strb	r2, [r7, #15]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysOsalTimerExpired(&rsp);
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <processOsalTimerExpired+0x48>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f107 020c 	add.w	r2, r7, #12
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4798      	blx	r3
	}
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000ed8 	.word	0x20000ed8
 8004bc4:	08010054 	.word	0x08010054

08004bc8 <processStackTuneSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processStackTuneSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysStackTuneSrsp) {
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <processStackTuneSrsp+0x48>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d015      	beq.n	8004c08 <processStackTuneSrsp+0x40>
		uint8_t msgIdx = 2;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	73fb      	strb	r3, [r7, #15]
		StackTuneSrspFormat_t rsp;
		if (rpcLen < 1) {
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d102      	bne.n	8004bec <processStackTuneSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004be6:	480b      	ldr	r0, [pc, #44]	; (8004c14 <processStackTuneSrsp+0x4c>)
 8004be8:	f009 f95c 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = rpcBuff[msgIdx++];
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	73fa      	strb	r2, [r7, #15]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysStackTuneSrsp(&rsp);
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <processStackTuneSrsp+0x48>)
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f107 020c 	add.w	r2, r7, #12
 8004c04:	4610      	mov	r0, r2
 8004c06:	4798      	blx	r3
	}
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000ed8 	.word	0x20000ed8
 8004c14:	08010054 	.word	0x08010054

08004c18 <processAdcReadSrsp>:
 *
 * @param   rpcBuff - Incoming buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processAdcReadSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysAdcReadSrsp) {
 8004c24:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <processAdcReadSrsp+0x60>)
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <processAdcReadSrsp+0x56>
		uint8_t msgIdx = 2;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	73fb      	strb	r3, [r7, #15]
		AdcReadSrspFormat_t rsp;
		if (rpcLen < 2) {
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d802      	bhi.n	8004c3c <processAdcReadSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004c36:	4811      	ldr	r0, [pc, #68]	; (8004c7c <processAdcReadSrsp+0x64>)
 8004c38:	f009 f934 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	440b      	add	r3, r1
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysAdcReadSrsp(&rsp);
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <processAdcReadSrsp+0x60>)
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	f107 020c 	add.w	r2, r7, #12
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4798      	blx	r3
	}
}
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000ed8 	.word	0x20000ed8
 8004c7c:	08010054 	.word	0x08010054

08004c80 <processGpioSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGpioSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGpioSrsp) {
 8004c8c:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <processGpioSrsp+0x48>)
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d015      	beq.n	8004cc0 <processGpioSrsp+0x40>
		uint8_t msgIdx = 2;
 8004c94:	2302      	movs	r3, #2
 8004c96:	73fb      	strb	r3, [r7, #15]
		GpioSrspFormat_t rsp;
		if (rpcLen < 1) {
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d102      	bne.n	8004ca4 <processGpioSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004c9e:	480b      	ldr	r0, [pc, #44]	; (8004ccc <processGpioSrsp+0x4c>)
 8004ca0:	f009 f900 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = rpcBuff[msgIdx++];
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	73fa      	strb	r2, [r7, #15]
 8004caa:	461a      	mov	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4413      	add	r3, r2
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysGpioSrsp(&rsp);
 8004cb4:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <processGpioSrsp+0x48>)
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	f107 020c 	add.w	r2, r7, #12
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4798      	blx	r3
	}
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000ed8 	.word	0x20000ed8
 8004ccc:	08010054 	.word	0x08010054

08004cd0 <processRandomSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processRandomSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysRandomSrsp) {
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <processRandomSrsp+0x60>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d020      	beq.n	8004d26 <processRandomSrsp+0x56>
		uint8_t msgIdx = 2;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	73fb      	strb	r3, [r7, #15]
		RandomSrspFormat_t rsp;
		if (rpcLen < 2) {
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d802      	bhi.n	8004cf4 <processRandomSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004cee:	4811      	ldr	r0, [pc, #68]	; (8004d34 <processRandomSrsp+0x64>)
 8004cf0:	f009 f8d8 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Value = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	3301      	adds	r3, #1
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	440b      	add	r3, r1
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	3302      	adds	r3, #2
 8004d18:	73fb      	strb	r3, [r7, #15]

		mtSysCbs.pfnSysRandomSrsp(&rsp);
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <processRandomSrsp+0x60>)
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	f107 020c 	add.w	r2, r7, #12
 8004d22:	4610      	mov	r0, r2
 8004d24:	4798      	blx	r3
	}
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000ed8 	.word	0x20000ed8
 8004d34:	08010054 	.word	0x08010054

08004d38 <processGetTimeSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processGetTimeSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysGetTimeSrsp) {
 8004d44:	4b34      	ldr	r3, [pc, #208]	; (8004e18 <processGetTimeSrsp+0xe0>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d061      	beq.n	8004e10 <processGetTimeSrsp+0xd8>
		uint8_t msgIdx = 2;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	75fb      	strb	r3, [r7, #23]
		GetTimeSrspFormat_t rsp;
		if (rpcLen < 11) {
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b0a      	cmp	r3, #10
 8004d54:	d802      	bhi.n	8004d5c <processGetTimeSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004d56:	4831      	ldr	r0, [pc, #196]	; (8004e1c <processGetTimeSrsp+0xe4>)
 8004d58:	f009 f8a4 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.UTCTime = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
		uint8_t i;
		for (i = 0; i < 4; i++)
 8004d60:	2300      	movs	r3, #0
 8004d62:	75bb      	strb	r3, [r7, #22]
 8004d64:	e010      	b.n	8004d88 <processGetTimeSrsp+0x50>
			rsp.UTCTime |= ((uint32_t) rpcBuff[msgIdx++]) << (i * 8);
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	75fa      	strb	r2, [r7, #23]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	7dbb      	ldrb	r3, [r7, #22]
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < 4; i++)
 8004d82:	7dbb      	ldrb	r3, [r7, #22]
 8004d84:	3301      	adds	r3, #1
 8004d86:	75bb      	strb	r3, [r7, #22]
 8004d88:	7dbb      	ldrb	r3, [r7, #22]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d9eb      	bls.n	8004d66 <processGetTimeSrsp+0x2e>
		rsp.Hour = rpcBuff[msgIdx++];
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	75fa      	strb	r2, [r7, #23]
 8004d94:	461a      	mov	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4413      	add	r3, r2
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	733b      	strb	r3, [r7, #12]
		rsp.Minute = rpcBuff[msgIdx++];
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	75fa      	strb	r2, [r7, #23]
 8004da4:	461a      	mov	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	737b      	strb	r3, [r7, #13]
		rsp.Second = rpcBuff[msgIdx++];
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	75fa      	strb	r2, [r7, #23]
 8004db4:	461a      	mov	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	73bb      	strb	r3, [r7, #14]
		rsp.Month = rpcBuff[msgIdx++];
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	75fa      	strb	r2, [r7, #23]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	73fb      	strb	r3, [r7, #15]
		rsp.Day = rpcBuff[msgIdx++];
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	75fa      	strb	r2, [r7, #23]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	743b      	strb	r3, [r7, #16]
		rsp.Year = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4413      	add	r3, r2
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	3301      	adds	r3, #1
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	440b      	add	r3, r1
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4413      	add	r3, r2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	827b      	strh	r3, [r7, #18]
		msgIdx += 2;
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
 8004e00:	3302      	adds	r3, #2
 8004e02:	75fb      	strb	r3, [r7, #23]

		mtSysCbs.pfnSysGetTimeSrsp(&rsp);
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <processGetTimeSrsp+0xe0>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	f107 0208 	add.w	r2, r7, #8
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	4798      	blx	r3
	}
}
 8004e10:	bf00      	nop
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20000ed8 	.word	0x20000ed8
 8004e1c:	08010054 	.word	0x08010054

08004e20 <processSetTxPowerSrsp>:
 *
 * @param   rpcBuff - Incoming Buffer.
 * @param   rpcLen - Length of buffer.
 *
 */
static void processSetTxPowerSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
	if (mtSysCbs.pfnSysSetTxPowerSrsp) {
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <processSetTxPowerSrsp+0x48>)
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <processSetTxPowerSrsp+0x40>
		uint8_t msgIdx = 2;
 8004e34:	2302      	movs	r3, #2
 8004e36:	73fb      	strb	r3, [r7, #15]
		SetTxPowerSrspFormat_t rsp;
		if (rpcLen < 1) {
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <processSetTxPowerSrsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8004e3e:	480b      	ldr	r0, [pc, #44]	; (8004e6c <processSetTxPowerSrsp+0x4c>)
 8004e40:	f009 f830 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.TxPower = rpcBuff[msgIdx++];
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	73fa      	strb	r2, [r7, #15]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	733b      	strb	r3, [r7, #12]

		mtSysCbs.pfnSysSetTxPowerSrsp(&rsp);
 8004e54:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <processSetTxPowerSrsp+0x48>)
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	f107 020c 	add.w	r2, r7, #12
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4798      	blx	r3
	}
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000ed8 	.word	0x20000ed8
 8004e6c:	08010054 	.word	0x08010054

08004e70 <sysRegisterCallbacks>:
 * @brief
 *
 * @param
 *
 */
void sysRegisterCallbacks(mtSysCb_t cbs) {
 8004e70:	b084      	sub	sp, #16
 8004e72:	b4b0      	push	{r4, r5, r7}
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	f107 040c 	add.w	r4, r7, #12
 8004e7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&mtSysCbs, &cbs, sizeof(mtSysCb_t));
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <sysRegisterCallbacks+0x34>)
 8004e80:	461d      	mov	r5, r3
 8004e82:	f107 040c 	add.w	r4, r7, #12
 8004e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e96:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004e9a:	bf00      	nop
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bcb0      	pop	{r4, r5, r7}
 8004ea0:	b004      	add	sp, #16
 8004ea2:	4770      	bx	lr
 8004ea4:	20000ed8 	.word	0x20000ed8

08004ea8 <processSrsp>:
 *
 * @param
 *

 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4843      	ldr	r0, [pc, #268]	; (8004fc8 <processSrsp+0x120>)
 8004ebc:	f008 ff56 	bl	800dd6c <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	2b13      	cmp	r3, #19
 8004eca:	d873      	bhi.n	8004fb4 <processSrsp+0x10c>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <processSrsp+0x2c>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004f25 	.word	0x08004f25
 8004ed8:	08004f49 	.word	0x08004f49
 8004edc:	08004fb5 	.word	0x08004fb5
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08004f3d 	.word	0x08004f3d
 8004ee8:	08004fb5 	.word	0x08004fb5
 8004eec:	08004fb5 	.word	0x08004fb5
 8004ef0:	08004f55 	.word	0x08004f55
 8004ef4:	08004fbd 	.word	0x08004fbd
 8004ef8:	08004fb5 	.word	0x08004fb5
 8004efc:	08004fb5 	.word	0x08004fb5
 8004f00:	08004f91 	.word	0x08004f91
 8004f04:	08004f79 	.word	0x08004f79
 8004f08:	08004f85 	.word	0x08004f85
 8004f0c:	08004f6d 	.word	0x08004f6d
 8004f10:	08004fb5 	.word	0x08004fb5
 8004f14:	08004f9d 	.word	0x08004f9d
 8004f18:	08004fb5 	.word	0x08004fb5
 8004f1c:	08004f61 	.word	0x08004f61
 8004f20:	08004fa9 	.word	0x08004fa9
		case MT_SYS_PING:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_PING\n");
			processPingSrsp(rpcBuff, rpcLen);
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff fb35 	bl	8004598 <processPingSrsp>
			break;
 8004f2e:	e046      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_GET_EXTADDR:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GET_EXTADDR\n");
			processGetExtAddrSrsp(rpcBuff, rpcLen);
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff fb63 	bl	8004600 <processGetExtAddrSrsp>
			break;
 8004f3a:	e040      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_RAM_READ:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RAM_READ\n");
			processRamReadSrsp(rpcBuff, rpcLen);
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff fbb1 	bl	80046a8 <processRamReadSrsp>
			break;
 8004f46:	e03a      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_VERSION:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_VERSION\n");
			processVersionSrsp(rpcBuff, rpcLen);
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff fcb3 	bl	80048b8 <processVersionSrsp>
			break;
 8004f52:	e034      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_OSAL_NV_READ:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_READ\n");
			processOsalNvReadSrsp(rpcBuff, rpcLen);
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	4619      	mov	r1, r3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fcf5 	bl	8004948 <processOsalNvReadSrsp>
			break;
 8004f5e:	e02e      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_OSAL_NV_WRITE:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_WRITE\n");
			break;
		case MT_SYS_OSAL_NV_LENGTH:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_OSAL_NV_LENGTH\n");
			processOsalNvLengthSrsp(rpcBuff, rpcLen);
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	4619      	mov	r1, r3
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff fdd3 	bl	8004b10 <processOsalNvLengthSrsp>
			break;
 8004f6a:	e028      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_STACK_TUNE:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_STACK_TUNE\n");
			processStackTuneSrsp(rpcBuff, rpcLen);
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff fe29 	bl	8004bc8 <processStackTuneSrsp>
			break;
 8004f76:	e022      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_ADC_READ:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_ADC_READ\n");
			processAdcReadSrsp(rpcBuff, rpcLen);
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff fe4b 	bl	8004c18 <processAdcReadSrsp>
			break;
 8004f82:	e01c      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_GPIO:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GPIO\n");
			processGpioSrsp(rpcBuff, rpcLen);
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fe79 	bl	8004c80 <processGpioSrsp>
			break;
 8004f8e:	e016      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_RANDOM:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_RANDOM\n");
			processRandomSrsp(rpcBuff, rpcLen);
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fe9b 	bl	8004cd0 <processRandomSrsp>
			break;
 8004f9a:	e010      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_GET_TIME:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_GET_TIME\n");
			processGetTimeSrsp(rpcBuff, rpcLen);
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff fec9 	bl	8004d38 <processGetTimeSrsp>
			break;
 8004fa6:	e00a      	b.n	8004fbe <processSrsp+0x116>
		case MT_SYS_SET_TX_POWER:
			dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: MT_SYS_SET_TX_POWER\n");
			processSetTxPowerSrsp(rpcBuff, rpcLen);
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff ff37 	bl	8004e20 <processSetTxPowerSrsp>
			break;
 8004fb2:	e004      	b.n	8004fbe <processSrsp+0x116>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message\n");
 8004fb4:	4805      	ldr	r0, [pc, #20]	; (8004fcc <processSrsp+0x124>)
 8004fb6:	f7fb fb83 	bl	80006c0 <log_print>
			break;
 8004fba:	e000      	b.n	8004fbe <processSrsp+0x116>
			break;
 8004fbc:	bf00      	nop
	}

}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	200050d8 	.word	0x200050d8
 8004fcc:	08010068 	.word	0x08010068

08004fd0 <sysProcess>:
 *
 * @param   rpcLen has the size of the frame: cmd0 + cmd1 + payload + FCS
 *

 *************************************************************************************************/
void sysProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "sysProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004fe4:	2b60      	cmp	r3, #96	; 0x60
 8004fe6:	d105      	bne.n	8004ff4 <sysProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff ff5b 	bl	8004ea8 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcSys: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8004ff2:	e01e      	b.n	8005032 <sysProcess+0x62>
		switch (rpcBuff[1]) {
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d002      	beq.n	8005004 <sysProcess+0x34>
 8004ffe:	2b81      	cmp	r3, #129	; 0x81
 8005000:	d006      	beq.n	8005010 <sysProcess+0x40>
 8005002:	e00b      	b.n	800501c <sysProcess+0x4c>
				processResetInd(rpcBuff, rpcLen);
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff fbef 	bl	80047ec <processResetInd>
				break;
 800500e:	e010      	b.n	8005032 <sysProcess+0x62>
				processOsalTimerExpired(rpcBuff, rpcLen);
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fdaf 	bl	8004b78 <processOsalTimerExpired>
				break;
 800501a:	e00a      	b.n	8005032 <sysProcess+0x62>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcSys: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	4619      	mov	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3301      	adds	r3, #1
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	4804      	ldr	r0, [pc, #16]	; (800503c <sysProcess+0x6c>)
 800502c:	f7fb fb48 	bl	80006c0 <log_print>
				break;
 8005030:	bf00      	nop
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	0801008c 	.word	0x0801008c

08005040 <utilRegisterCallbacks>:
#include <stddef.h>
#include <string.h>

static mtUtilCb_t mtUtilCbs;

void utilRegisterCallbacks(mtUtilCb_t cbs) {
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
	memcpy(&mtUtilCbs, &cbs, sizeof(mtUtilCb_t));
 800504a:	4a04      	ldr	r2, [pc, #16]	; (800505c <utilRegisterCallbacks+0x1c>)
 800504c:	6013      	str	r3, [r2, #0]
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000f10 	.word	0x20000f10

08005060 <processGetDeviceInfo>:

static void processGetDeviceInfo(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005064:	b09b      	sub	sp, #108	; 0x6c
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	70fb      	strb	r3, [r7, #3]
	// valid function pointer?
	if (mtUtilCbs.pfnUtilGetDeviceInfoCb_t) {
 800506e:	4b6f      	ldr	r3, [pc, #444]	; (800522c <processGetDeviceInfo+0x1cc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80d5 	beq.w	8005222 <processGetDeviceInfo+0x1c2>
		uint8_t msgIdx = 2;
 8005078:	2302      	movs	r3, #2
 800507a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		utilGetDeviceInfoFormat_t rsp;

		// size error?
		if (rpcLen < 1) {
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <processGetDeviceInfo+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 8005084:	486a      	ldr	r0, [pc, #424]	; (8005230 <processGetDeviceInfo+0x1d0>)
 8005086:	f008 ff0d 	bl	800dea4 <puts>
		}

		// copy command data
		rsp.success = rpcBuff[msgIdx++];
 800508a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	723b      	strb	r3, [r7, #8]
		rsp.ieee_addr = 0;
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (uint8_t i = 0; i < 8; i++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80050b0:	e029      	b.n	8005106 <processGetDeviceInfo+0xa6>
			rsp.ieee_addr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80050b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80050bc:	461a      	mov	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 80050ce:	00c9      	lsls	r1, r1, #3
 80050d0:	f1a1 0620 	sub.w	r6, r1, #32
 80050d4:	f1c1 0020 	rsb	r0, r1, #32
 80050d8:	fa03 f501 	lsl.w	r5, r3, r1
 80050dc:	fa02 f606 	lsl.w	r6, r2, r6
 80050e0:	4335      	orrs	r5, r6
 80050e2:	fa22 f000 	lsr.w	r0, r2, r0
 80050e6:	4305      	orrs	r5, r0
 80050e8:	fa02 f401 	lsl.w	r4, r2, r1
 80050ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050f0:	ea44 0802 	orr.w	r8, r4, r2
 80050f4:	ea45 0903 	orr.w	r9, r5, r3
 80050f8:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (uint8_t i = 0; i < 8; i++)
 80050fc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005100:	3301      	adds	r3, #1
 8005102:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005106:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800510a:	2b07      	cmp	r3, #7
 800510c:	d9d1      	bls.n	80050b2 <processGetDeviceInfo+0x52>
		rsp.short_addr = rpcBuff[msgIdx++];
 800510e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005118:	461a      	mov	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	833b      	strh	r3, [r7, #24]
		rsp.short_addr |= (rpcBuff[msgIdx++] << 8);
 8005124:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4413      	add	r3, r2
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	8b3a      	ldrh	r2, [r7, #24]
 800513a:	b212      	sxth	r2, r2
 800513c:	b21b      	sxth	r3, r3
 800513e:	4313      	orrs	r3, r2
 8005140:	b21b      	sxth	r3, r3
 8005142:	b29b      	uxth	r3, r3
 8005144:	833b      	strh	r3, [r7, #24]
		rsp.device_type = rpcBuff[msgIdx++];
 8005146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005150:	461a      	mov	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	76bb      	strb	r3, [r7, #26]
		rsp.device_state = rpcBuff[msgIdx++];
 800515a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005164:	461a      	mov	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4413      	add	r3, r2
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	76fb      	strb	r3, [r7, #27]
#warning possible loss of data
		rsp.ass_device_cnt = MIN(rpcBuff[msgIdx], ASS_DEVICE_LIST_MAX);
 800516e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4413      	add	r3, r2
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b20      	cmp	r3, #32
 800517a:	bf28      	it	cs
 800517c:	2320      	movcs	r3, #32
 800517e:	b2db      	uxtb	r3, r3
 8005180:	773b      	strb	r3, [r7, #28]
		msgIdx++;
 8005182:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005186:	3301      	adds	r3, #1
 8005188:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (rsp.ass_device_cnt) {
 800518c:	7f3b      	ldrb	r3, [r7, #28]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d041      	beq.n	8005216 <processGetDeviceInfo+0x1b6>
			for (uint8_t i = 0; i < rsp.ass_device_cnt; i++) {
 8005192:	2300      	movs	r3, #0
 8005194:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8005198:	e038      	b.n	800520c <processGetDeviceInfo+0x1ac>
				rsp.ass_device_list[i] = rpcBuff[msgIdx++];
 800519a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80051a4:	461a      	mov	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4413      	add	r3, r2
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80051b0:	b292      	uxth	r2, r2
 80051b2:	3308      	adds	r3, #8
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80051ba:	440b      	add	r3, r1
 80051bc:	f823 2c5a 	strh.w	r2, [r3, #-90]
				rsp.ass_device_list[i] |= (rpcBuff[msgIdx++] << 8);
 80051c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4413      	add	r3, r2
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	0219      	lsls	r1, r3, #8
 80051d4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80051d8:	3308      	adds	r3, #8
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80051e0:	4413      	add	r3, r2
 80051e2:	f833 3c5a 	ldrh.w	r3, [r3, #-90]
 80051e6:	b21a      	sxth	r2, r3
 80051e8:	b20b      	sxth	r3, r1
 80051ea:	4313      	orrs	r3, r2
 80051ec:	b21a      	sxth	r2, r3
 80051ee:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80051f2:	b292      	uxth	r2, r2
 80051f4:	3308      	adds	r3, #8
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80051fc:	440b      	add	r3, r1
 80051fe:	f823 2c5a 	strh.w	r2, [r3, #-90]
			for (uint8_t i = 0; i < rsp.ass_device_cnt; i++) {
 8005202:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005206:	3301      	adds	r3, #1
 8005208:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800520c:	7f3b      	ldrb	r3, [r7, #28]
 800520e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8005212:	429a      	cmp	r2, r3
 8005214:	d3c1      	bcc.n	800519a <processGetDeviceInfo+0x13a>
			}
		}

		// callback function
		mtUtilCbs.pfnUtilGetDeviceInfoCb_t(&rsp);
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <processGetDeviceInfo+0x1cc>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f107 0208 	add.w	r2, r7, #8
 800521e:	4610      	mov	r0, r2
 8005220:	4798      	blx	r3
	}
}
 8005222:	bf00      	nop
 8005224:	376c      	adds	r7, #108	; 0x6c
 8005226:	46bd      	mov	sp, r7
 8005228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800522c:	20000f10 	.word	0x20000f10
 8005230:	080100bc 	.word	0x080100bc

08005234 <processSrsp>:

static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3301      	adds	r3, #1
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <processSrsp+0x22>
		case MT_UTIL_SRSP_GET_DEVICE_INFO:
			dbg_print(PRINT_LEVEL_VERBOSE, "utilProcess: SET_CHANNEL_SRSP\n");
			processGetDeviceInfo(rpcBuff, rpcLen);
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff ff06 	bl	8005060 <processGetDeviceInfo>
			break;
 8005254:	e00a      	b.n	800526c <processSrsp+0x38>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message [%x:%x]\n", rpcBuff[0], rpcBuff[1]);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	4619      	mov	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3301      	adds	r3, #1
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	4803      	ldr	r0, [pc, #12]	; (8005274 <processSrsp+0x40>)
 8005266:	f7fb fa2b 	bl	80006c0 <log_print>
			break;
 800526a:	bf00      	nop
	}
}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	080100d0 	.word	0x080100d0

08005278 <utilProcess>:

void utilProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "utilProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800528c:	2b60      	cmp	r3, #96	; 0x60
 800528e:	d105      	bne.n	800529c <utilProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff ffcd 	bl	8005234 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 800529a:	e00a      	b.n	80052b2 <utilProcess+0x3a>
				dbg_print(PRINT_LEVEL_WARNING, "processRpcAf: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	4619      	mov	r1, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3301      	adds	r3, #1
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	4804      	ldr	r0, [pc, #16]	; (80052bc <utilProcess+0x44>)
 80052ac:	f7fb fa08 	bl	80006c0 <log_print>
				break;
 80052b0:	bf00      	nop
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	080100fc 	.word	0x080100fc

080052c0 <utilGetDeviceInfo>:

uint8_t utilGetDeviceInfo(void) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
	uint8_t status;

	// send the frame
	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_UTIL), 0x00, NULL, 0);
 80052c6:	2300      	movs	r3, #0
 80052c8:	2200      	movs	r2, #0
 80052ca:	2100      	movs	r1, #0
 80052cc:	2027      	movs	r0, #39	; 0x27
 80052ce:	f003 f95f 	bl	8008590 <rpcSendFrame>
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]

	// wait for a response
	if (status == MT_RPC_SUCCESS) {
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <utilGetDeviceInfo+0x22>
		rpcWaitMqClientMsg(50);
 80052dc:	2032      	movs	r0, #50	; 0x32
 80052de:	f002 ffe1 	bl	80082a4 <rpcWaitMqClientMsg>
	}

	// return
	return status;
 80052e2:	79fb      	ldrb	r3, [r7, #7]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <processStateChange>:
 *
 * @param   uint8_t *rpcBuff
 *
 * @return  none
 */
static void processStateChange(uint8_t *rpcBuff, uint8_t rpcLen) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	70fb      	strb	r3, [r7, #3]

	uint8_t zdoState = rpcBuff[2];
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	789b      	ldrb	r3, [r3, #2]
 80052fc:	73fb      	strb	r3, [r7, #15]
	//passes the state to the callback function
	if (mtZdoCbs.pfnmtZdoStateChangeInd) {
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <processStateChange+0x2c>)
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <processStateChange+0x24>
		mtZdoCbs.pfnmtZdoStateChangeInd(zdoState);
 8005306:	4b04      	ldr	r3, [pc, #16]	; (8005318 <processStateChange+0x2c>)
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	7bfa      	ldrb	r2, [r7, #15]
 800530c:	4610      	mov	r0, r2
 800530e:	4798      	blx	r3
	}
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000f14 	.word	0x20000f14

0800531c <zdoSimpleDescReq>:
 *
 * @param    req - Pointer to outgoing command structure
 *
 * @return   status
 */
uint8_t zdoSimpleDescReq(SimpleDescReqFormat_t *req) {
 800531c:	b5b0      	push	{r4, r5, r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	466b      	mov	r3, sp
 8005326:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	75bb      	strb	r3, [r7, #22]
	uint32_t cmdLen = 5;
 800532c:	2305      	movs	r3, #5
 800532e:	613b      	str	r3, [r7, #16]
	uint8_t cmd[cmdLen];
 8005330:	693c      	ldr	r4, [r7, #16]
 8005332:	4623      	mov	r3, r4
 8005334:	3b01      	subs	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	4620      	mov	r0, r4
 800533a:	f04f 0100 	mov.w	r1, #0
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	00cb      	lsls	r3, r1, #3
 8005348:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800534c:	00c2      	lsls	r2, r0, #3
 800534e:	4620      	mov	r0, r4
 8005350:	f04f 0100 	mov.w	r1, #0
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	00cb      	lsls	r3, r1, #3
 800535e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005362:	00c2      	lsls	r2, r0, #3
 8005364:	1de3      	adds	r3, r4, #7
 8005366:	08db      	lsrs	r3, r3, #3
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	ebad 0d03 	sub.w	sp, sp, r3
 800536e:	466b      	mov	r3, sp
 8005370:	3300      	adds	r3, #0
 8005372:	60bb      	str	r3, [r7, #8]

	cmd[cmInd++] = (uint8_t) (req->DstAddr & 0xFF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8819      	ldrh	r1, [r3, #0]
 8005378:	7dbb      	ldrb	r3, [r7, #22]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	75ba      	strb	r2, [r7, #22]
 800537e:	461a      	mov	r2, r3
 8005380:	b2c9      	uxtb	r1, r1
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->DstAddr >> 8) & 0xFF);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	b299      	uxth	r1, r3
 800538e:	7dbb      	ldrb	r3, [r7, #22]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	75ba      	strb	r2, [r7, #22]
 8005394:	461a      	mov	r2, r3
 8005396:	b2c9      	uxtb	r1, r1
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->NwkAddrOfInterest & 0xFF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8859      	ldrh	r1, [r3, #2]
 80053a0:	7dbb      	ldrb	r3, [r7, #22]
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	75ba      	strb	r2, [r7, #22]
 80053a6:	461a      	mov	r2, r3
 80053a8:	b2c9      	uxtb	r1, r1
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->NwkAddrOfInterest >> 8) & 0xFF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	885b      	ldrh	r3, [r3, #2]
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	b299      	uxth	r1, r3
 80053b6:	7dbb      	ldrb	r3, [r7, #22]
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	75ba      	strb	r2, [r7, #22]
 80053bc:	461a      	mov	r2, r3
 80053be:	b2c9      	uxtb	r1, r1
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = req->Endpoint;
 80053c4:	7dbb      	ldrb	r3, [r7, #22]
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	75ba      	strb	r2, [r7, #22]
 80053ca:	461a      	mov	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	7919      	ldrb	r1, [r3, #4]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	5499      	strb	r1, [r3, r2]

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_ZDO),
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2104      	movs	r1, #4
 80053dc:	2025      	movs	r0, #37	; 0x25
 80053de:	f003 f8d7 	bl	8008590 <rpcSendFrame>
 80053e2:	4603      	mov	r3, r0
 80053e4:	75fb      	strb	r3, [r7, #23]
	MT_ZDO_SIMPLE_DESC_REQ, cmd, cmdLen);

	if (status == MT_RPC_SUCCESS) {
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d105      	bne.n	80053f8 <zdoSimpleDescReq+0xdc>
		rpcWaitMqClientMsg(50);
 80053ec:	2032      	movs	r0, #50	; 0x32
 80053ee:	f002 ff59 	bl	80082a4 <rpcWaitMqClientMsg>
		status = srspRpcBuff[2];
 80053f2:	4b04      	ldr	r3, [pc, #16]	; (8005404 <zdoSimpleDescReq+0xe8>)
 80053f4:	789b      	ldrb	r3, [r3, #2]
 80053f6:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	46ad      	mov	sp, r5
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bdb0      	pop	{r4, r5, r7, pc}
 8005404:	200050d8 	.word	0x200050d8

08005408 <zdoActiveEpReq>:
 *
 * @param    req - Pointer to outgoing command structure
 *
 * @return   status
 */
uint8_t zdoActiveEpReq(ActiveEpReqFormat_t *req) {
 8005408:	b5b0      	push	{r4, r5, r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	466b      	mov	r3, sp
 8005412:	461d      	mov	r5, r3
	uint8_t status;
	uint8_t cmInd = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	75bb      	strb	r3, [r7, #22]
	uint32_t cmdLen = 4;
 8005418:	2304      	movs	r3, #4
 800541a:	613b      	str	r3, [r7, #16]
	uint8_t cmd[cmdLen];
 800541c:	693c      	ldr	r4, [r7, #16]
 800541e:	4623      	mov	r3, r4
 8005420:	3b01      	subs	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	4620      	mov	r0, r4
 8005426:	f04f 0100 	mov.w	r1, #0
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	00cb      	lsls	r3, r1, #3
 8005434:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005438:	00c2      	lsls	r2, r0, #3
 800543a:	4620      	mov	r0, r4
 800543c:	f04f 0100 	mov.w	r1, #0
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	00cb      	lsls	r3, r1, #3
 800544a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800544e:	00c2      	lsls	r2, r0, #3
 8005450:	1de3      	adds	r3, r4, #7
 8005452:	08db      	lsrs	r3, r3, #3
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	ebad 0d03 	sub.w	sp, sp, r3
 800545a:	466b      	mov	r3, sp
 800545c:	3300      	adds	r3, #0
 800545e:	60bb      	str	r3, [r7, #8]

	cmd[cmInd++] = (uint8_t) (req->DstAddr & 0xFF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8819      	ldrh	r1, [r3, #0]
 8005464:	7dbb      	ldrb	r3, [r7, #22]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	75ba      	strb	r2, [r7, #22]
 800546a:	461a      	mov	r2, r3
 800546c:	b2c9      	uxtb	r1, r1
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->DstAddr >> 8) & 0xFF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	b299      	uxth	r1, r3
 800547a:	7dbb      	ldrb	r3, [r7, #22]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	75ba      	strb	r2, [r7, #22]
 8005480:	461a      	mov	r2, r3
 8005482:	b2c9      	uxtb	r1, r1
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) (req->NwkAddrOfInterest & 0xFF);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8859      	ldrh	r1, [r3, #2]
 800548c:	7dbb      	ldrb	r3, [r7, #22]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	75ba      	strb	r2, [r7, #22]
 8005492:	461a      	mov	r2, r3
 8005494:	b2c9      	uxtb	r1, r1
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	5499      	strb	r1, [r3, r2]
	cmd[cmInd++] = (uint8_t) ((req->NwkAddrOfInterest >> 8) & 0xFF);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	885b      	ldrh	r3, [r3, #2]
 800549e:	0a1b      	lsrs	r3, r3, #8
 80054a0:	b299      	uxth	r1, r3
 80054a2:	7dbb      	ldrb	r3, [r7, #22]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	75ba      	strb	r2, [r7, #22]
 80054a8:	461a      	mov	r2, r3
 80054aa:	b2c9      	uxtb	r1, r1
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	5499      	strb	r1, [r3, r2]

	status = rpcSendFrame((MT_RPC_CMD_SREQ | MT_RPC_SYS_ZDO), MT_ZDO_ACTIVE_EP_REQ, cmd, cmdLen);
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2105      	movs	r1, #5
 80054b8:	2025      	movs	r0, #37	; 0x25
 80054ba:	f003 f869 	bl	8008590 <rpcSendFrame>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]

	if (status == MT_RPC_SUCCESS) {
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <zdoActiveEpReq+0xcc>
		rpcWaitMqClientMsg(50);
 80054c8:	2032      	movs	r0, #50	; 0x32
 80054ca:	f002 feeb 	bl	80082a4 <rpcWaitMqClientMsg>
		status = srspRpcBuff[2];
 80054ce:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <zdoActiveEpReq+0xd8>)
 80054d0:	789b      	ldrb	r3, [r3, #2]
 80054d2:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	46ad      	mov	sp, r5
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bdb0      	pop	{r4, r5, r7, pc}
 80054e0:	200050d8 	.word	0x200050d8

080054e4 <processGetLinkKey>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processGetLinkKey(uint8_t *rpcBuff, uint8_t rpcLen) {
 80054e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054e8:	b08d      	sub	sp, #52	; 0x34
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoGetLinkKey) {
 80054f2:	4b36      	ldr	r3, [pc, #216]	; (80055cc <processGetLinkKey+0xe8>)
 80054f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d061      	beq.n	80055c0 <processGetLinkKey+0xdc>
		uint8_t msgIdx = 2;
 80054fc:	2302      	movs	r3, #2
 80054fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		GetLinkKeySrspFormat_t rsp;
		if (rpcLen < 25) {
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	2b18      	cmp	r3, #24
 8005506:	d802      	bhi.n	800550e <processGetLinkKey+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 8005508:	4831      	ldr	r0, [pc, #196]	; (80055d0 <processGetLinkKey+0xec>)
 800550a:	f008 fccb 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 800550e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8005518:	461a      	mov	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 800552e:	2300      	movs	r3, #0
 8005530:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005534:	e029      	b.n	800558a <processGetLinkKey+0xa6>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8005536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8005540:	461a      	mov	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8005552:	00c9      	lsls	r1, r1, #3
 8005554:	f1a1 0620 	sub.w	r6, r1, #32
 8005558:	f1c1 0020 	rsb	r0, r1, #32
 800555c:	fa03 f501 	lsl.w	r5, r3, r1
 8005560:	fa02 f606 	lsl.w	r6, r2, r6
 8005564:	4335      	orrs	r5, r6
 8005566:	fa22 f000 	lsr.w	r0, r2, r0
 800556a:	4305      	orrs	r5, r0
 800556c:	fa02 f401 	lsl.w	r4, r2, r1
 8005570:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005574:	ea44 0802 	orr.w	r8, r4, r2
 8005578:	ea45 0903 	orr.w	r9, r5, r3
 800557c:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++)
 8005580:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005584:	3301      	adds	r3, #1
 8005586:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800558a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800558e:	2b07      	cmp	r3, #7
 8005590:	d9d1      	bls.n	8005536 <processGetLinkKey+0x52>
		memcpy(rsp.LinkKeyData, &rpcBuff[msgIdx], 16);
 8005592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	f107 0418 	add.w	r4, r7, #24
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		msgIdx += 16;
 80055a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055ac:	3310      	adds	r3, #16
 80055ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		mtZdoCbs.pfnZdoGetLinkKey(&rsp);
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <processGetLinkKey+0xe8>)
 80055b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b8:	f107 0208 	add.w	r2, r7, #8
 80055bc:	4610      	mov	r0, r2
 80055be:	4798      	blx	r3
	}
}
 80055c0:	bf00      	nop
 80055c2:	3734      	adds	r7, #52	; 0x34
 80055c4:	46bd      	mov	sp, r7
 80055c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055ca:	bf00      	nop
 80055cc:	20000f14 	.word	0x20000f14
 80055d0:	0801012c 	.word	0x0801012c

080055d4 <processNwkAddrRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNwkAddrRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80055d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055d8:	b0ad      	sub	sp, #180	; 0xb4
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNwkAddrRsp) {
 80055e2:	4b5b      	ldr	r3, [pc, #364]	; (8005750 <processNwkAddrRsp+0x17c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80ad 	beq.w	8005746 <processNwkAddrRsp+0x172>
		uint8_t msgIdx = 2;
 80055ec:	2302      	movs	r3, #2
 80055ee:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		NwkAddrRspFormat_t rsp;
		if (rpcLen < 13) {
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d802      	bhi.n	80055fe <processNwkAddrRsp+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 80055f8:	4856      	ldr	r0, [pc, #344]	; (8005754 <processNwkAddrRsp+0x180>)
 80055fa:	f008 fc53 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 80055fe:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8005624:	e029      	b.n	800567a <processNwkAddrRsp+0xa6>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8005626:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8005630:	461a      	mov	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4413      	add	r3, r2
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	f897 10ae 	ldrb.w	r1, [r7, #174]	; 0xae
 8005642:	00c9      	lsls	r1, r1, #3
 8005644:	f1a1 0620 	sub.w	r6, r1, #32
 8005648:	f1c1 0020 	rsb	r0, r1, #32
 800564c:	fa03 f501 	lsl.w	r5, r3, r1
 8005650:	fa02 f606 	lsl.w	r6, r2, r6
 8005654:	4335      	orrs	r5, r6
 8005656:	fa22 f000 	lsr.w	r0, r2, r0
 800565a:	4305      	orrs	r5, r0
 800565c:	fa02 f401 	lsl.w	r4, r2, r1
 8005660:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005664:	ea44 0802 	orr.w	r8, r4, r2
 8005668:	ea45 0903 	orr.w	r9, r5, r3
 800566c:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++)
 8005670:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8005674:	3301      	adds	r3, #1
 8005676:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800567a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800567e:	2b07      	cmp	r3, #7
 8005680:	d9d1      	bls.n	8005626 <processNwkAddrRsp+0x52>
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005682:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	4413      	add	r3, r2
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b29a      	uxth	r2, r3
 800568e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005692:	3301      	adds	r3, #1
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	440b      	add	r3, r1
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	b29b      	uxth	r3, r3
 80056a0:	4413      	add	r3, r2
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 80056a6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80056aa:	3302      	adds	r3, #2
 80056ac:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		rsp.StartIndex = rpcBuff[msgIdx++];
 80056b0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 80056ba:	461a      	mov	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4413      	add	r3, r2
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	76bb      	strb	r3, [r7, #26]
		rsp.NumAssocDev = rpcBuff[msgIdx++];
 80056c4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 80056ce:	461a      	mov	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4413      	add	r3, r2
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	76fb      	strb	r3, [r7, #27]
		if (rpcLen > 13) {
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	2b0d      	cmp	r3, #13
 80056dc:	d92d      	bls.n	800573a <processNwkAddrRsp+0x166>
			uint32_t i;
			for (i = 0; i < rsp.NumAssocDev; i++) {
 80056de:	2300      	movs	r3, #0
 80056e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056e4:	e023      	b.n	800572e <processNwkAddrRsp+0x15a>
				rsp.AssocDevList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80056e6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80056f6:	3301      	adds	r3, #1
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	440b      	add	r3, r1
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	b29b      	uxth	r3, r3
 8005704:	4413      	add	r3, r2
 8005706:	b29a      	uxth	r2, r3
 8005708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800570c:	3308      	adds	r3, #8
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8005714:	440b      	add	r3, r1
 8005716:	f823 2ca4 	strh.w	r2, [r3, #-164]
				msgIdx += 2;
 800571a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800571e:	3302      	adds	r3, #2
 8005720:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			for (i = 0; i < rsp.NumAssocDev; i++) {
 8005724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005728:	3301      	adds	r3, #1
 800572a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800572e:	7efb      	ldrb	r3, [r7, #27]
 8005730:	461a      	mov	r2, r3
 8005732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005736:	4293      	cmp	r3, r2
 8005738:	d3d5      	bcc.n	80056e6 <processNwkAddrRsp+0x112>
			}
		}
		mtZdoCbs.pfnZdoNwkAddrRsp(&rsp);
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <processNwkAddrRsp+0x17c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f107 0208 	add.w	r2, r7, #8
 8005742:	4610      	mov	r0, r2
 8005744:	4798      	blx	r3
	}
}
 8005746:	bf00      	nop
 8005748:	37b4      	adds	r7, #180	; 0xb4
 800574a:	46bd      	mov	sp, r7
 800574c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005750:	20000f14 	.word	0x20000f14
 8005754:	0801012c 	.word	0x0801012c

08005758 <processIeeeAddrRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processIeeeAddrRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800575c:	b0ad      	sub	sp, #180	; 0xb4
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoIeeeAddrRsp) {
 8005766:	4b5f      	ldr	r3, [pc, #380]	; (80058e4 <processIeeeAddrRsp+0x18c>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80b4 	beq.w	80058d8 <processIeeeAddrRsp+0x180>
		uint8_t msgIdx = 2;
 8005770:	2302      	movs	r3, #2
 8005772:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		IeeeAddrRspFormat_t rsp;
		if (rpcLen < 13) {
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	2b0c      	cmp	r3, #12
 800577a:	d802      	bhi.n	8005782 <processIeeeAddrRsp+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 800577c:	485a      	ldr	r0, [pc, #360]	; (80058e8 <processIeeeAddrRsp+0x190>)
 800577e:	f008 fb91 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.Status = rpcBuff[msgIdx++];
 8005782:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 800578c:	461a      	mov	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	723b      	strb	r3, [r7, #8]
		rsp.IEEEAddr = 0;
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80057a8:	e029      	b.n	80057fe <processIeeeAddrRsp+0xa6>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80057aa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 80057b4:	461a      	mov	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4413      	add	r3, r2
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	f897 10ae 	ldrb.w	r1, [r7, #174]	; 0xae
 80057c6:	00c9      	lsls	r1, r1, #3
 80057c8:	f1a1 0620 	sub.w	r6, r1, #32
 80057cc:	f1c1 0020 	rsb	r0, r1, #32
 80057d0:	fa03 f501 	lsl.w	r5, r3, r1
 80057d4:	fa02 f606 	lsl.w	r6, r2, r6
 80057d8:	4335      	orrs	r5, r6
 80057da:	fa22 f000 	lsr.w	r0, r2, r0
 80057de:	4305      	orrs	r5, r0
 80057e0:	fa02 f401 	lsl.w	r4, r2, r1
 80057e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057e8:	ea44 0802 	orr.w	r8, r4, r2
 80057ec:	ea45 0903 	orr.w	r9, r5, r3
 80057f0:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++)
 80057f4:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80057f8:	3301      	adds	r3, #1
 80057fa:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80057fe:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8005802:	2b07      	cmp	r3, #7
 8005804:	d9d1      	bls.n	80057aa <processIeeeAddrRsp+0x52>
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005806:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	b29a      	uxth	r2, r3
 8005812:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005816:	3301      	adds	r3, #1
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	440b      	add	r3, r1
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	b29b      	uxth	r3, r3
 8005824:	4413      	add	r3, r2
 8005826:	b29b      	uxth	r3, r3
 8005828:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 800582a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800582e:	3302      	adds	r3, #2
 8005830:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		rsp.StartIndex = rpcBuff[msgIdx++];
 8005834:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 800583e:	461a      	mov	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4413      	add	r3, r2
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	76bb      	strb	r3, [r7, #26]
		rsp.NumAssocDev = rpcBuff[msgIdx++];
 8005848:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	f887 20af 	strb.w	r2, [r7, #175]	; 0xaf
 8005852:	461a      	mov	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4413      	add	r3, r2
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	76fb      	strb	r3, [r7, #27]
		rsp.StartIndex = (rsp.NumAssocDev == 0 ? 0 : rsp.StartIndex);
 800585c:	7efb      	ldrb	r3, [r7, #27]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <processIeeeAddrRsp+0x10e>
 8005862:	7ebb      	ldrb	r3, [r7, #26]
 8005864:	e000      	b.n	8005868 <processIeeeAddrRsp+0x110>
 8005866:	2300      	movs	r3, #0
 8005868:	76bb      	strb	r3, [r7, #26]
		if (rpcLen > 13) {
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	2b0d      	cmp	r3, #13
 800586e:	d92d      	bls.n	80058cc <processIeeeAddrRsp+0x174>
			uint32_t i;
			for (i = 0; i < rsp.NumAssocDev; i++) {
 8005870:	2300      	movs	r3, #0
 8005872:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005876:	e023      	b.n	80058c0 <processIeeeAddrRsp+0x168>
				rsp.AssocDevList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005878:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	4413      	add	r3, r2
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b29a      	uxth	r2, r3
 8005884:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005888:	3301      	adds	r3, #1
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	440b      	add	r3, r1
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	b29b      	uxth	r3, r3
 8005896:	4413      	add	r3, r2
 8005898:	b29a      	uxth	r2, r3
 800589a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800589e:	3308      	adds	r3, #8
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80058a6:	440b      	add	r3, r1
 80058a8:	f823 2ca4 	strh.w	r2, [r3, #-164]
				msgIdx += 2;
 80058ac:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80058b0:	3302      	adds	r3, #2
 80058b2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			for (i = 0; i < rsp.NumAssocDev; i++) {
 80058b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058ba:	3301      	adds	r3, #1
 80058bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058c0:	7efb      	ldrb	r3, [r7, #27]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d3d5      	bcc.n	8005878 <processIeeeAddrRsp+0x120>
			}
		}
		mtZdoCbs.pfnZdoIeeeAddrRsp(&rsp);
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <processIeeeAddrRsp+0x18c>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f107 0208 	add.w	r2, r7, #8
 80058d4:	4610      	mov	r0, r2
 80058d6:	4798      	blx	r3
	}
}
 80058d8:	bf00      	nop
 80058da:	37b4      	adds	r7, #180	; 0xb4
 80058dc:	46bd      	mov	sp, r7
 80058de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058e2:	bf00      	nop
 80058e4:	20000f14 	.word	0x20000f14
 80058e8:	0801012c 	.word	0x0801012c

080058ec <processNodeDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNodeDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNodeDescRsp) {
 80058f8:	4b5c      	ldr	r3, [pc, #368]	; (8005a6c <processNodeDescRsp+0x180>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 80b0 	beq.w	8005a62 <processNodeDescRsp+0x176>
		uint8_t msgIdx = 2;
 8005902:	2302      	movs	r3, #2
 8005904:	77fb      	strb	r3, [r7, #31]
		NodeDescRspFormat_t rsp;
		if (rpcLen < 18) {
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	2b11      	cmp	r3, #17
 800590a:	d802      	bhi.n	8005912 <processNodeDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 800590c:	4858      	ldr	r0, [pc, #352]	; (8005a70 <processNodeDescRsp+0x184>)
 800590e:	f008 fac9 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005912:	7ffb      	ldrb	r3, [r7, #31]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	4413      	add	r3, r2
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	b29a      	uxth	r2, r3
 800591c:	7ffb      	ldrb	r3, [r7, #31]
 800591e:	3301      	adds	r3, #1
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	440b      	add	r3, r1
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	b29b      	uxth	r3, r3
 800592c:	4413      	add	r3, r2
 800592e:	b29b      	uxth	r3, r3
 8005930:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005932:	7ffb      	ldrb	r3, [r7, #31]
 8005934:	3302      	adds	r3, #2
 8005936:	77fb      	strb	r3, [r7, #31]
		rsp.Status = rpcBuff[msgIdx++];
 8005938:	7ffb      	ldrb	r3, [r7, #31]
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	77fa      	strb	r2, [r7, #31]
 800593e:	461a      	mov	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4413      	add	r3, r2
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005948:	7ffb      	ldrb	r3, [r7, #31]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	b29a      	uxth	r2, r3
 8005952:	7ffb      	ldrb	r3, [r7, #31]
 8005954:	3301      	adds	r3, #1
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	440b      	add	r3, r1
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	b29b      	uxth	r3, r3
 8005962:	4413      	add	r3, r2
 8005964:	b29b      	uxth	r3, r3
 8005966:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005968:	7ffb      	ldrb	r3, [r7, #31]
 800596a:	3302      	adds	r3, #2
 800596c:	77fb      	strb	r3, [r7, #31]
		rsp.LoTy_ComDescAv_UsrDesAv = rpcBuff[msgIdx++];
 800596e:	7ffb      	ldrb	r3, [r7, #31]
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	77fa      	strb	r2, [r7, #31]
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4413      	add	r3, r2
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	73bb      	strb	r3, [r7, #14]
		rsp.APSFlg_FrqBnd = rpcBuff[msgIdx++];
 800597e:	7ffb      	ldrb	r3, [r7, #31]
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	77fa      	strb	r2, [r7, #31]
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	73fb      	strb	r3, [r7, #15]
		rsp.MACCapFlg = rpcBuff[msgIdx++];
 800598e:	7ffb      	ldrb	r3, [r7, #31]
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	77fa      	strb	r2, [r7, #31]
 8005994:	461a      	mov	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4413      	add	r3, r2
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	743b      	strb	r3, [r7, #16]
		rsp.ManufacturerCode = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800599e:	7ffb      	ldrb	r3, [r7, #31]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4413      	add	r3, r2
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	7ffb      	ldrb	r3, [r7, #31]
 80059aa:	3301      	adds	r3, #1
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	440b      	add	r3, r1
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4413      	add	r3, r2
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	827b      	strh	r3, [r7, #18]
		msgIdx += 2;
 80059be:	7ffb      	ldrb	r3, [r7, #31]
 80059c0:	3302      	adds	r3, #2
 80059c2:	77fb      	strb	r3, [r7, #31]
		rsp.MaxBufferSize = rpcBuff[msgIdx++];
 80059c4:	7ffb      	ldrb	r3, [r7, #31]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	77fa      	strb	r2, [r7, #31]
 80059ca:	461a      	mov	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4413      	add	r3, r2
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	753b      	strb	r3, [r7, #20]
		rsp.MaxTransferSize = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80059d4:	7ffb      	ldrb	r3, [r7, #31]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	b29a      	uxth	r2, r3
 80059de:	7ffb      	ldrb	r3, [r7, #31]
 80059e0:	3301      	adds	r3, #1
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	440b      	add	r3, r1
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	4413      	add	r3, r2
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	82fb      	strh	r3, [r7, #22]
		msgIdx += 2;
 80059f4:	7ffb      	ldrb	r3, [r7, #31]
 80059f6:	3302      	adds	r3, #2
 80059f8:	77fb      	strb	r3, [r7, #31]
		rsp.ServerMask = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80059fa:	7ffb      	ldrb	r3, [r7, #31]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	4413      	add	r3, r2
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	7ffb      	ldrb	r3, [r7, #31]
 8005a06:	3301      	adds	r3, #1
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	440b      	add	r3, r1
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	4413      	add	r3, r2
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	833b      	strh	r3, [r7, #24]
		msgIdx += 2;
 8005a1a:	7ffb      	ldrb	r3, [r7, #31]
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	77fb      	strb	r3, [r7, #31]
		rsp.MaxOutTransferSize = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005a20:	7ffb      	ldrb	r3, [r7, #31]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	7ffb      	ldrb	r3, [r7, #31]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	440b      	add	r3, r1
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	837b      	strh	r3, [r7, #26]
		msgIdx += 2;
 8005a40:	7ffb      	ldrb	r3, [r7, #31]
 8005a42:	3302      	adds	r3, #2
 8005a44:	77fb      	strb	r3, [r7, #31]
		rsp.DescriptorCapabilities = rpcBuff[msgIdx++];
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	77fa      	strb	r2, [r7, #31]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4413      	add	r3, r2
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	773b      	strb	r3, [r7, #28]

		mtZdoCbs.pfnZdoNodeDescRsp(&rsp);
 8005a56:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <processNodeDescRsp+0x180>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f107 0208 	add.w	r2, r7, #8
 8005a5e:	4610      	mov	r0, r2
 8005a60:	4798      	blx	r3
	}
}
 8005a62:	bf00      	nop
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000f14 	.word	0x20000f14
 8005a70:	0801012c 	.word	0x0801012c

08005a74 <processPowerDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processPowerDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoPowerDescRsp) {
 8005a80:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <processPowerDescRsp+0xb4>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d04b      	beq.n	8005b20 <processPowerDescRsp+0xac>
		uint8_t msgIdx = 2;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	75fb      	strb	r3, [r7, #23]
		PowerDescRspFormat_t rsp;
		if (rpcLen < 7) {
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	2b06      	cmp	r3, #6
 8005a90:	d802      	bhi.n	8005a98 <processPowerDescRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8005a92:	4826      	ldr	r0, [pc, #152]	; (8005b2c <processPowerDescRsp+0xb8>)
 8005a94:	f008 fa06 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	440b      	add	r3, r1
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	3302      	adds	r3, #2
 8005abc:	75fb      	strb	r3, [r7, #23]
		rsp.Status = rpcBuff[msgIdx++];
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	75fa      	strb	r2, [r7, #23]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4413      	add	r3, r2
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
 8005ada:	3301      	adds	r3, #1
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	440b      	add	r3, r1
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	4413      	add	r3, r2
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	3302      	adds	r3, #2
 8005af2:	75fb      	strb	r3, [r7, #23]
		rsp.CurrntPwrMode_AvalPwrSrcs = rpcBuff[msgIdx++];
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	75fa      	strb	r2, [r7, #23]
 8005afa:	461a      	mov	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4413      	add	r3, r2
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	74bb      	strb	r3, [r7, #18]
		rsp.CurrntPwrSrc_CurrntPwrSrcLvl = rpcBuff[msgIdx++];
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	75fa      	strb	r2, [r7, #23]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	74fb      	strb	r3, [r7, #19]

		mtZdoCbs.pfnZdoPowerDescRsp(&rsp);
 8005b14:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <processPowerDescRsp+0xb4>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f107 020c 	add.w	r2, r7, #12
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4798      	blx	r3
	}
}
 8005b20:	bf00      	nop
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20000f14 	.word	0x20000f14
 8005b2c:	0801012c 	.word	0x0801012c

08005b30 <processSimpleDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processSimpleDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b098      	sub	sp, #96	; 0x60
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoSimpleDescRsp) {
 8005b3c:	4b83      	ldr	r3, [pc, #524]	; (8005d4c <processSimpleDescRsp+0x21c>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80ff 	beq.w	8005d44 <processSimpleDescRsp+0x214>
		uint8_t msgIdx = 2;
 8005b46:	2302      	movs	r3, #2
 8005b48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		SimpleDescRspFormat_t rsp;
		if (rpcLen < 6) {
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d802      	bhi.n	8005b58 <processSimpleDescRsp+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 8005b52:	487f      	ldr	r0, [pc, #508]	; (8005d50 <processSimpleDescRsp+0x220>)
 8005b54:	f008 f9a6 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005b58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	4413      	add	r3, r2
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b68:	3301      	adds	r3, #1
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	440b      	add	r3, r1
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	4413      	add	r3, r2
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8005b7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b80:	3302      	adds	r3, #2
 8005b82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		rsp.Status = rpcBuff[msgIdx++];
 8005b86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005b90:	461a      	mov	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005baa:	3301      	adds	r3, #1
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	440b      	add	r3, r1
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	4413      	add	r3, r2
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005bbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bc2:	3302      	adds	r3, #2
 8005bc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		rsp.Len = rpcBuff[msgIdx++];
 8005bc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	73bb      	strb	r3, [r7, #14]
		if (rpcLen > 6) {
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	2b06      	cmp	r3, #6
 8005be0:	f240 80aa 	bls.w	8005d38 <processSimpleDescRsp+0x208>
			rsp.Endpoint = rpcBuff[msgIdx++];
 8005be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005bee:	461a      	mov	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	73fb      	strb	r3, [r7, #15]
			rsp.ProfileID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005bf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c08:	3301      	adds	r3, #1
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	440b      	add	r3, r1
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	4413      	add	r3, r2
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	823b      	strh	r3, [r7, #16]
			msgIdx += 2;
 8005c1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c20:	3302      	adds	r3, #2
 8005c22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			rsp.DeviceID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c36:	3301      	adds	r3, #1
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	440b      	add	r3, r1
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	4413      	add	r3, r2
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	827b      	strh	r3, [r7, #18]
			msgIdx += 2;
 8005c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c4e:	3302      	adds	r3, #2
 8005c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			rsp.DeviceVersion = rpcBuff[msgIdx++];
 8005c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005c5e:	461a      	mov	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	753b      	strb	r3, [r7, #20]
			rsp.NumInClusters = rpcBuff[msgIdx++];
 8005c68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005c72:	461a      	mov	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	757b      	strb	r3, [r7, #21]
			uint32_t i;
			for (i = 0; i < rsp.NumInClusters; i++) {
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c80:	e020      	b.n	8005cc4 <processSimpleDescRsp+0x194>
				rsp.InClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005c82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4413      	add	r3, r2
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c92:	3301      	adds	r3, #1
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	440b      	add	r3, r1
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005cae:	440b      	add	r3, r1
 8005cb0:	f823 2c52 	strh.w	r2, [r3, #-82]
				msgIdx += 2;
 8005cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cb8:	3302      	adds	r3, #2
 8005cba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			for (i = 0; i < rsp.NumInClusters; i++) {
 8005cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cc4:	7d7b      	ldrb	r3, [r7, #21]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d3d9      	bcc.n	8005c82 <processSimpleDescRsp+0x152>
			}
			rsp.NumOutClusters = rpcBuff[msgIdx++];
 8005cce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8005cd8:	461a      	mov	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			for (i = 0; i < rsp.NumOutClusters; i++) {
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ce8:	e020      	b.n	8005d2c <processSimpleDescRsp+0x1fc>
				rsp.OutClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	440b      	add	r3, r1
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d0e:	3318      	adds	r3, #24
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005d16:	440b      	add	r3, r1
 8005d18:	f823 2c58 	strh.w	r2, [r3, #-88]
				msgIdx += 2;
 8005d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d20:	3302      	adds	r3, #2
 8005d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			for (i = 0; i < rsp.NumOutClusters; i++) {
 8005d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d28:	3301      	adds	r3, #1
 8005d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d2c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005d30:	461a      	mov	r2, r3
 8005d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d3d8      	bcc.n	8005cea <processSimpleDescRsp+0x1ba>
			}
		}
		mtZdoCbs.pfnZdoSimpleDescRsp(&rsp);
 8005d38:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <processSimpleDescRsp+0x21c>)
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f107 0208 	add.w	r2, r7, #8
 8005d40:	4610      	mov	r0, r2
 8005d42:	4798      	blx	r3
	}
}
 8005d44:	bf00      	nop
 8005d46:	3760      	adds	r7, #96	; 0x60
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20000f14 	.word	0x20000f14
 8005d50:	0801012c 	.word	0x0801012c

08005d54 <processActiveEpRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processActiveEpRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b09a      	sub	sp, #104	; 0x68
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoActiveEpRsp) {
 8005d60:	4b3a      	ldr	r3, [pc, #232]	; (8005e4c <processActiveEpRsp+0xf8>)
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d06d      	beq.n	8005e44 <processActiveEpRsp+0xf0>
		uint8_t msgIdx = 2;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		ActiveEpRspFormat_t rsp;
		if (rpcLen < 6) {
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	2b05      	cmp	r3, #5
 8005d72:	d802      	bhi.n	8005d7a <processActiveEpRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8005d74:	4836      	ldr	r0, [pc, #216]	; (8005e50 <processActiveEpRsp+0xfc>)
 8005d76:	f008 f895 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4413      	add	r3, r2
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	440b      	add	r3, r1
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	4413      	add	r3, r2
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005d9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005da2:	3302      	adds	r3, #2
 8005da4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8005da8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005db2:	461a      	mov	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4413      	add	r3, r2
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005dbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dcc:	3301      	adds	r3, #1
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	440b      	add	r3, r1
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	4413      	add	r3, r2
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8005de0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005de4:	3302      	adds	r3, #2
 8005de6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.ActiveEPCount = rpcBuff[msgIdx++];
 8005dea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005df4:	461a      	mov	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4413      	add	r3, r2
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	2b06      	cmp	r3, #6
 8005e02:	d919      	bls.n	8005e38 <processActiveEpRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.ActiveEPCount; i++) {
 8005e04:	2300      	movs	r3, #0
 8005e06:	663b      	str	r3, [r7, #96]	; 0x60
 8005e08:	e011      	b.n	8005e2e <processActiveEpRsp+0xda>
				rsp.ActiveEPList[i] = rpcBuff[msgIdx++];
 8005e0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4413      	add	r3, r2
 8005e1a:	7819      	ldrb	r1, [r3, #0]
 8005e1c:	f107 0213 	add.w	r2, r7, #19
 8005e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e22:	4413      	add	r3, r2
 8005e24:	460a      	mov	r2, r1
 8005e26:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.ActiveEPCount; i++) {
 8005e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e2e:	7cbb      	ldrb	r3, [r7, #18]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d3e8      	bcc.n	8005e0a <processActiveEpRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoActiveEpRsp(&rsp);
 8005e38:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <processActiveEpRsp+0xf8>)
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	f107 020c 	add.w	r2, r7, #12
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
	}
}
 8005e44:	bf00      	nop
 8005e46:	3768      	adds	r7, #104	; 0x68
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000f14 	.word	0x20000f14
 8005e50:	0801012c 	.word	0x0801012c

08005e54 <processMatchDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMatchDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b09a      	sub	sp, #104	; 0x68
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMatchDescRsp) {
 8005e60:	4b3a      	ldr	r3, [pc, #232]	; (8005f4c <processMatchDescRsp+0xf8>)
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d06d      	beq.n	8005f44 <processMatchDescRsp+0xf0>
		uint8_t msgIdx = 2;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		MatchDescRspFormat_t rsp;
		if (rpcLen < 6) {
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	2b05      	cmp	r3, #5
 8005e72:	d802      	bhi.n	8005e7a <processMatchDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8005e74:	4836      	ldr	r0, [pc, #216]	; (8005f50 <processMatchDescRsp+0xfc>)
 8005e76:	f008 f815 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005e7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	4413      	add	r3, r2
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	440b      	add	r3, r1
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	4413      	add	r3, r2
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005e9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8005ea8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005ebc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ecc:	3301      	adds	r3, #1
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	440b      	add	r3, r1
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	4413      	add	r3, r2
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8005ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.MatchLength = rpcBuff[msgIdx++];
 8005eea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4413      	add	r3, r2
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	2b06      	cmp	r3, #6
 8005f02:	d919      	bls.n	8005f38 <processMatchDescRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.MatchLength; i++) {
 8005f04:	2300      	movs	r3, #0
 8005f06:	663b      	str	r3, [r7, #96]	; 0x60
 8005f08:	e011      	b.n	8005f2e <processMatchDescRsp+0xda>
				rsp.MatchList[i] = rpcBuff[msgIdx++];
 8005f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005f14:	461a      	mov	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4413      	add	r3, r2
 8005f1a:	7819      	ldrb	r1, [r3, #0]
 8005f1c:	f107 0213 	add.w	r2, r7, #19
 8005f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f22:	4413      	add	r3, r2
 8005f24:	460a      	mov	r2, r1
 8005f26:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.MatchLength; i++) {
 8005f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f2e:	7cbb      	ldrb	r3, [r7, #18]
 8005f30:	461a      	mov	r2, r3
 8005f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d3e8      	bcc.n	8005f0a <processMatchDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoMatchDescRsp(&rsp);
 8005f38:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <processMatchDescRsp+0xf8>)
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f107 020c 	add.w	r2, r7, #12
 8005f40:	4610      	mov	r0, r2
 8005f42:	4798      	blx	r3
	}
}
 8005f44:	bf00      	nop
 8005f46:	3768      	adds	r7, #104	; 0x68
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20000f14 	.word	0x20000f14
 8005f50:	0801012c 	.word	0x0801012c

08005f54 <processComplexDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processComplexDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b09a      	sub	sp, #104	; 0x68
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoComplexDescRsp) {
 8005f60:	4b3a      	ldr	r3, [pc, #232]	; (800604c <processComplexDescRsp+0xf8>)
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d06d      	beq.n	8006044 <processComplexDescRsp+0xf0>
		uint8_t msgIdx = 2;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		ComplexDescRspFormat_t rsp;
		if (rpcLen < 6) {
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	2b05      	cmp	r3, #5
 8005f72:	d802      	bhi.n	8005f7a <processComplexDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8005f74:	4836      	ldr	r0, [pc, #216]	; (8006050 <processComplexDescRsp+0xfc>)
 8005f76:	f007 ff95 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005f7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4413      	add	r3, r2
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	440b      	add	r3, r1
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	4413      	add	r3, r2
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8005f9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fa2:	3302      	adds	r3, #2
 8005fa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 8005fa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8005fbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fcc:	3301      	adds	r3, #1
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	440b      	add	r3, r1
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	4413      	add	r3, r2
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8005fe0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fe4:	3302      	adds	r3, #2
 8005fe6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.ComplexLength = rpcBuff[msgIdx++];
 8005fea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	2b06      	cmp	r3, #6
 8006002:	d919      	bls.n	8006038 <processComplexDescRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.ComplexLength; i++) {
 8006004:	2300      	movs	r3, #0
 8006006:	663b      	str	r3, [r7, #96]	; 0x60
 8006008:	e011      	b.n	800602e <processComplexDescRsp+0xda>
				rsp.ComplexList[i] = rpcBuff[msgIdx++];
 800600a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8006014:	461a      	mov	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	7819      	ldrb	r1, [r3, #0]
 800601c:	f107 0213 	add.w	r2, r7, #19
 8006020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006022:	4413      	add	r3, r2
 8006024:	460a      	mov	r2, r1
 8006026:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.ComplexLength; i++) {
 8006028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800602a:	3301      	adds	r3, #1
 800602c:	663b      	str	r3, [r7, #96]	; 0x60
 800602e:	7cbb      	ldrb	r3, [r7, #18]
 8006030:	461a      	mov	r2, r3
 8006032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006034:	4293      	cmp	r3, r2
 8006036:	d3e8      	bcc.n	800600a <processComplexDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoComplexDescRsp(&rsp);
 8006038:	4b04      	ldr	r3, [pc, #16]	; (800604c <processComplexDescRsp+0xf8>)
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f107 020c 	add.w	r2, r7, #12
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
	}
}
 8006044:	bf00      	nop
 8006046:	3768      	adds	r7, #104	; 0x68
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000f14 	.word	0x20000f14
 8006050:	0801012c 	.word	0x0801012c

08006054 <processUserDescRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUserDescRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b09a      	sub	sp, #104	; 0x68
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUserDescRsp) {
 8006060:	4b3a      	ldr	r3, [pc, #232]	; (800614c <processUserDescRsp+0xf8>)
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d06d      	beq.n	8006144 <processUserDescRsp+0xf0>
		uint8_t msgIdx = 2;
 8006068:	2302      	movs	r3, #2
 800606a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		UserDescRspFormat_t rsp;
		if (rpcLen < 6) {
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	2b05      	cmp	r3, #5
 8006072:	d802      	bhi.n	800607a <processUserDescRsp+0x26>
			printf("MT_RPC_ERR_LENGTH\n");
 8006074:	4836      	ldr	r0, [pc, #216]	; (8006150 <processUserDescRsp+0xfc>)
 8006076:	f007 ff15 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800607a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	4413      	add	r3, r2
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b29a      	uxth	r2, r3
 8006086:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800608a:	3301      	adds	r3, #1
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	440b      	add	r3, r1
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	b29b      	uxth	r3, r3
 8006098:	4413      	add	r3, r2
 800609a:	b29b      	uxth	r3, r3
 800609c:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800609e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060a2:	3302      	adds	r3, #2
 80060a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Status = rpcBuff[msgIdx++];
 80060a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80060b2:	461a      	mov	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4413      	add	r3, r2
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	73bb      	strb	r3, [r7, #14]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80060bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	4413      	add	r3, r2
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060cc:	3301      	adds	r3, #1
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	440b      	add	r3, r1
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	b29b      	uxth	r3, r3
 80060da:	4413      	add	r3, r2
 80060dc:	b29b      	uxth	r3, r3
 80060de:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 80060e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060e4:	3302      	adds	r3, #2
 80060e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rsp.Len = rpcBuff[msgIdx++];
 80060ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 80060f4:	461a      	mov	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	74bb      	strb	r3, [r7, #18]
		if (rpcLen > 6) {
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	2b06      	cmp	r3, #6
 8006102:	d919      	bls.n	8006138 <processUserDescRsp+0xe4>
			uint32_t i;
			for (i = 0; i < rsp.Len; i++) {
 8006104:	2300      	movs	r3, #0
 8006106:	663b      	str	r3, [r7, #96]	; 0x60
 8006108:	e011      	b.n	800612e <processUserDescRsp+0xda>
				rsp.CUserDescriptor[i] = rpcBuff[msgIdx++];
 800610a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8006114:	461a      	mov	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4413      	add	r3, r2
 800611a:	7819      	ldrb	r1, [r3, #0]
 800611c:	f107 0213 	add.w	r2, r7, #19
 8006120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006122:	4413      	add	r3, r2
 8006124:	460a      	mov	r2, r1
 8006126:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.Len; i++) {
 8006128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800612a:	3301      	adds	r3, #1
 800612c:	663b      	str	r3, [r7, #96]	; 0x60
 800612e:	7cbb      	ldrb	r3, [r7, #18]
 8006130:	461a      	mov	r2, r3
 8006132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006134:	4293      	cmp	r3, r2
 8006136:	d3e8      	bcc.n	800610a <processUserDescRsp+0xb6>
			}
		}
		mtZdoCbs.pfnZdoUserDescRsp(&rsp);
 8006138:	4b04      	ldr	r3, [pc, #16]	; (800614c <processUserDescRsp+0xf8>)
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	f107 020c 	add.w	r2, r7, #12
 8006140:	4610      	mov	r0, r2
 8006142:	4798      	blx	r3
	}
}
 8006144:	bf00      	nop
 8006146:	3768      	adds	r7, #104	; 0x68
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000f14 	.word	0x20000f14
 8006150:	0801012c 	.word	0x0801012c

08006154 <processUserDescConf>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUserDescConf(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUserDescConf) {
 8006160:	4b21      	ldr	r3, [pc, #132]	; (80061e8 <processUserDescConf+0x94>)
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d03b      	beq.n	80061e0 <processUserDescConf+0x8c>
		uint8_t msgIdx = 2;
 8006168:	2302      	movs	r3, #2
 800616a:	73fb      	strb	r3, [r7, #15]
		UserDescConfFormat_t rsp;
		if (rpcLen < 5) {
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	2b04      	cmp	r3, #4
 8006170:	d802      	bhi.n	8006178 <processUserDescConf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8006172:	481e      	ldr	r0, [pc, #120]	; (80061ec <processUserDescConf+0x98>)
 8006174:	f007 fe96 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	b29a      	uxth	r2, r3
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	3301      	adds	r3, #1
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	440b      	add	r3, r1
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	021b      	lsls	r3, r3, #8
 8006190:	b29b      	uxth	r3, r3
 8006192:	4413      	add	r3, r2
 8006194:	b29b      	uxth	r3, r3
 8006196:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	3302      	adds	r3, #2
 800619c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	73fa      	strb	r2, [r7, #15]
 80061a4:	461a      	mov	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4413      	add	r3, r2
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	72bb      	strb	r3, [r7, #10]
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4413      	add	r3, r2
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	3301      	adds	r3, #1
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	440b      	add	r3, r1
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	4413      	add	r3, r2
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	3302      	adds	r3, #2
 80061d2:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoUserDescConf(&rsp);
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <processUserDescConf+0x94>)
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	f107 0208 	add.w	r2, r7, #8
 80061dc:	4610      	mov	r0, r2
 80061de:	4798      	blx	r3
	}
}
 80061e0:	bf00      	nop
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000f14 	.word	0x20000f14
 80061ec:	0801012c 	.word	0x0801012c

080061f0 <processServerDiscRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processServerDiscRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoServerDiscRsp) {
 80061fc:	4b21      	ldr	r3, [pc, #132]	; (8006284 <processServerDiscRsp+0x94>)
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d03b      	beq.n	800627c <processServerDiscRsp+0x8c>
		uint8_t msgIdx = 2;
 8006204:	2302      	movs	r3, #2
 8006206:	73fb      	strb	r3, [r7, #15]
		ServerDiscRspFormat_t rsp;
		if (rpcLen < 5) {
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	2b04      	cmp	r3, #4
 800620c:	d802      	bhi.n	8006214 <processServerDiscRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800620e:	481e      	ldr	r0, [pc, #120]	; (8006288 <processServerDiscRsp+0x98>)
 8006210:	f007 fe48 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	b29a      	uxth	r2, r3
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	3301      	adds	r3, #1
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	440b      	add	r3, r1
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	b29b      	uxth	r3, r3
 800622e:	4413      	add	r3, r2
 8006230:	b29b      	uxth	r3, r3
 8006232:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	3302      	adds	r3, #2
 8006238:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	73fa      	strb	r2, [r7, #15]
 8006240:	461a      	mov	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4413      	add	r3, r2
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	72bb      	strb	r3, [r7, #10]
		rsp.ServerMask = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	b29a      	uxth	r2, r3
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	3301      	adds	r3, #1
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	440b      	add	r3, r1
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	b29b      	uxth	r3, r3
 8006264:	4413      	add	r3, r2
 8006266:	b29b      	uxth	r3, r3
 8006268:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	3302      	adds	r3, #2
 800626e:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoServerDiscRsp(&rsp);
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <processServerDiscRsp+0x94>)
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	f107 0208 	add.w	r2, r7, #8
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
	}
}
 800627c:	bf00      	nop
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000f14 	.word	0x20000f14
 8006288:	0801012c 	.word	0x0801012c

0800628c <processEndDeviceBindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processEndDeviceBindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoEndDeviceBindRsp) {
 8006298:	4b18      	ldr	r3, [pc, #96]	; (80062fc <processEndDeviceBindRsp+0x70>)
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d028      	beq.n	80062f2 <processEndDeviceBindRsp+0x66>
		uint8_t msgIdx = 2;
 80062a0:	2302      	movs	r3, #2
 80062a2:	73fb      	strb	r3, [r7, #15]
		EndDeviceBindRspFormat_t rsp;
		if (rpcLen < 3) {
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d802      	bhi.n	80062b0 <processEndDeviceBindRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80062aa:	4815      	ldr	r0, [pc, #84]	; (8006300 <processEndDeviceBindRsp+0x74>)
 80062ac:	f007 fdfa 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	4413      	add	r3, r2
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	3301      	adds	r3, #1
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	440b      	add	r3, r1
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	4413      	add	r3, r2
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	3302      	adds	r3, #2
 80062d4:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	73fa      	strb	r2, [r7, #15]
 80062dc:	461a      	mov	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4413      	add	r3, r2
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoEndDeviceBindRsp(&rsp);
 80062e6:	4b05      	ldr	r3, [pc, #20]	; (80062fc <processEndDeviceBindRsp+0x70>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	f107 0208 	add.w	r2, r7, #8
 80062ee:	4610      	mov	r0, r2
 80062f0:	4798      	blx	r3
	}
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000f14 	.word	0x20000f14
 8006300:	0801012c 	.word	0x0801012c

08006304 <processBindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processBindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoBindRsp) {
 8006310:	4b18      	ldr	r3, [pc, #96]	; (8006374 <processBindRsp+0x70>)
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	2b00      	cmp	r3, #0
 8006316:	d028      	beq.n	800636a <processBindRsp+0x66>
		uint8_t msgIdx = 2;
 8006318:	2302      	movs	r3, #2
 800631a:	73fb      	strb	r3, [r7, #15]
		BindRspFormat_t rsp;
		if (rpcLen < 3) {
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d802      	bhi.n	8006328 <processBindRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8006322:	4815      	ldr	r0, [pc, #84]	; (8006378 <processBindRsp+0x74>)
 8006324:	f007 fdbe 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	4413      	add	r3, r2
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	b29a      	uxth	r2, r3
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	3301      	adds	r3, #1
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	440b      	add	r3, r1
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	b29b      	uxth	r3, r3
 8006342:	4413      	add	r3, r2
 8006344:	b29b      	uxth	r3, r3
 8006346:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	3302      	adds	r3, #2
 800634c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	73fa      	strb	r2, [r7, #15]
 8006354:	461a      	mov	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoBindRsp(&rsp);
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <processBindRsp+0x70>)
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	f107 0208 	add.w	r2, r7, #8
 8006366:	4610      	mov	r0, r2
 8006368:	4798      	blx	r3
	}
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000f14 	.word	0x20000f14
 8006378:	0801012c 	.word	0x0801012c

0800637c <processUnbindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processUnbindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoUnbindRsp) {
 8006388:	4b18      	ldr	r3, [pc, #96]	; (80063ec <processUnbindRsp+0x70>)
 800638a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638c:	2b00      	cmp	r3, #0
 800638e:	d028      	beq.n	80063e2 <processUnbindRsp+0x66>
		uint8_t msgIdx = 2;
 8006390:	2302      	movs	r3, #2
 8006392:	73fb      	strb	r3, [r7, #15]
		UnbindRspFormat_t rsp;
		if (rpcLen < 3) {
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d802      	bhi.n	80063a0 <processUnbindRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800639a:	4815      	ldr	r0, [pc, #84]	; (80063f0 <processUnbindRsp+0x74>)
 800639c:	f007 fd82 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	4413      	add	r3, r2
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	3301      	adds	r3, #1
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	440b      	add	r3, r1
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	b29b      	uxth	r3, r3
 80063be:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	3302      	adds	r3, #2
 80063c4:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	73fa      	strb	r2, [r7, #15]
 80063cc:	461a      	mov	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4413      	add	r3, r2
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoUnbindRsp(&rsp);
 80063d6:	4b05      	ldr	r3, [pc, #20]	; (80063ec <processUnbindRsp+0x70>)
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	f107 0208 	add.w	r2, r7, #8
 80063de:	4610      	mov	r0, r2
 80063e0:	4798      	blx	r3
	}
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000f14 	.word	0x20000f14
 80063f0:	0801012c 	.word	0x0801012c

080063f4 <processMgmtNwkDiscRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtNwkDiscRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80063f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063f8:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	1d3b      	adds	r3, r7, #4
 8006400:	6018      	str	r0, [r3, #0]
 8006402:	460a      	mov	r2, r1
 8006404:	1cfb      	adds	r3, r7, #3
 8006406:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtNwkDiscRsp) {
 8006408:	4b8f      	ldr	r3, [pc, #572]	; (8006648 <processMgmtNwkDiscRsp+0x254>)
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8114 	beq.w	800663a <processMgmtNwkDiscRsp+0x246>
		uint8_t msgIdx = 2;
 8006412:	2302      	movs	r3, #2
 8006414:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		MgmtNwkDiscRspFormat_t rsp;
		if (rpcLen < 6) {
 8006418:	1cfb      	adds	r3, r7, #3
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b05      	cmp	r3, #5
 800641e:	d802      	bhi.n	8006426 <processMgmtNwkDiscRsp+0x32>
			printf("MT_RPC_ERR_LENGTH\n");
 8006420:	488a      	ldr	r0, [pc, #552]	; (800664c <processMgmtNwkDiscRsp+0x258>)
 8006422:	f007 fd3f 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006426:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800642a:	1d3a      	adds	r2, r7, #4
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	4413      	add	r3, r2
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	b29a      	uxth	r2, r3
 8006434:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8006438:	3301      	adds	r3, #1
 800643a:	1d39      	adds	r1, r7, #4
 800643c:	6809      	ldr	r1, [r1, #0]
 800643e:	440b      	add	r3, r1
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	b29b      	uxth	r3, r3
 8006448:	4413      	add	r3, r2
 800644a:	b29a      	uxth	r2, r3
 800644c:	f107 0308 	add.w	r3, r7, #8
 8006450:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8006452:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8006456:	3302      	adds	r3, #2
 8006458:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		rsp.Status = rpcBuff[msgIdx++];
 800645c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8006466:	461a      	mov	r2, r3
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4413      	add	r3, r2
 800646e:	781a      	ldrb	r2, [r3, #0]
 8006470:	f107 0308 	add.w	r3, r7, #8
 8006474:	709a      	strb	r2, [r3, #2]
		rsp.NetworkCount = rpcBuff[msgIdx++];
 8006476:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8006480:	461a      	mov	r2, r3
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4413      	add	r3, r2
 8006488:	781a      	ldrb	r2, [r3, #0]
 800648a:	f107 0308 	add.w	r3, r7, #8
 800648e:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8006490:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 800649a:	461a      	mov	r2, r3
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4413      	add	r3, r2
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	f107 0308 	add.w	r3, r7, #8
 80064a8:	711a      	strb	r2, [r3, #4]
		rsp.NetworkListCount = rpcBuff[msgIdx++];
 80064aa:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 80064b4:	461a      	mov	r2, r3
 80064b6:	1d3b      	adds	r3, r7, #4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4413      	add	r3, r2
 80064bc:	781a      	ldrb	r2, [r3, #0]
 80064be:	f107 0308 	add.w	r3, r7, #8
 80064c2:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 80064c4:	1cfb      	adds	r3, r7, #3
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b06      	cmp	r3, #6
 80064ca:	f240 80b0 	bls.w	800662e <processMgmtNwkDiscRsp+0x23a>
			uint32_t i;
			for (i = 0; i < rsp.NetworkListCount; i++) {
 80064ce:	2300      	movs	r3, #0
 80064d0:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 80064d4:	e0a2      	b.n	800661c <processMgmtNwkDiscRsp+0x228>
				rsp.NetworkList[i].PanID = 0;
 80064d6:	f107 0208 	add.w	r2, r7, #8
 80064da:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	4413      	add	r3, r2
 80064e2:	f103 0108 	add.w	r1, r3, #8
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 80064f8:	e038      	b.n	800656c <processMgmtNwkDiscRsp+0x178>
					rsp.NetworkList[i].PanID |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 80064fa:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 8006504:	461a      	mov	r2, r3
 8006506:	1d3b      	adds	r3, r7, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4413      	add	r3, r2
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b2da      	uxtb	r2, r3
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	f897 1497 	ldrb.w	r1, [r7, #1175]	; 0x497
 8006518:	00c9      	lsls	r1, r1, #3
 800651a:	f1a1 0620 	sub.w	r6, r1, #32
 800651e:	f1c1 0020 	rsb	r0, r1, #32
 8006522:	fa03 f501 	lsl.w	r5, r3, r1
 8006526:	fa02 f606 	lsl.w	r6, r2, r6
 800652a:	4335      	orrs	r5, r6
 800652c:	fa22 f000 	lsr.w	r0, r2, r0
 8006530:	4305      	orrs	r5, r0
 8006532:	fa02 f401 	lsl.w	r4, r2, r1
 8006536:	f107 0208 	add.w	r2, r7, #8
 800653a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	4413      	add	r3, r2
 8006542:	3308      	adds	r3, #8
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	ea44 0802 	orr.w	r8, r4, r2
 800654c:	ea45 0903 	orr.w	r9, r5, r3
 8006550:	f107 0208 	add.w	r2, r7, #8
 8006554:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	4413      	add	r3, r2
 800655c:	3308      	adds	r3, #8
 800655e:	e9c3 8900 	strd	r8, r9, [r3]
				for (ind = 0; ind < 8; ind++)
 8006562:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8006566:	3301      	adds	r3, #1
 8006568:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 800656c:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8006570:	2b07      	cmp	r3, #7
 8006572:	d9c2      	bls.n	80064fa <processMgmtNwkDiscRsp+0x106>
				rsp.NetworkList[i].LogicalChannel = rpcBuff[msgIdx++];
 8006574:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 800657e:	461a      	mov	r2, r3
 8006580:	1d3b      	adds	r3, r7, #4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4413      	add	r3, r2
 8006586:	7819      	ldrb	r1, [r3, #0]
 8006588:	f107 0208 	add.w	r2, r7, #8
 800658c:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8006590:	3301      	adds	r3, #1
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	4413      	add	r3, r2
 8006596:	460a      	mov	r2, r1
 8006598:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].StackProf_ZigVer = rpcBuff[msgIdx++];
 800659a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 80065a4:	461a      	mov	r2, r3
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4413      	add	r3, r2
 80065ac:	7819      	ldrb	r1, [r3, #0]
 80065ae:	f107 0208 	add.w	r2, r7, #8
 80065b2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80065b6:	3301      	adds	r3, #1
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	4413      	add	r3, r2
 80065bc:	3301      	adds	r3, #1
 80065be:	460a      	mov	r2, r1
 80065c0:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].BeacOrd_SupFramOrd = rpcBuff[msgIdx++];
 80065c2:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 80065cc:	461a      	mov	r2, r3
 80065ce:	1d3b      	adds	r3, r7, #4
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4413      	add	r3, r2
 80065d4:	7819      	ldrb	r1, [r3, #0]
 80065d6:	f107 0208 	add.w	r2, r7, #8
 80065da:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80065de:	3301      	adds	r3, #1
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	4413      	add	r3, r2
 80065e4:	3302      	adds	r3, #2
 80065e6:	460a      	mov	r2, r1
 80065e8:	701a      	strb	r2, [r3, #0]
				rsp.NetworkList[i].PermitJoin = rpcBuff[msgIdx++];
 80065ea:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	f887 249f 	strb.w	r2, [r7, #1183]	; 0x49f
 80065f4:	461a      	mov	r2, r3
 80065f6:	1d3b      	adds	r3, r7, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4413      	add	r3, r2
 80065fc:	7819      	ldrb	r1, [r3, #0]
 80065fe:	f107 0208 	add.w	r2, r7, #8
 8006602:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8006606:	3301      	adds	r3, #1
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	4413      	add	r3, r2
 800660c:	3303      	adds	r3, #3
 800660e:	460a      	mov	r2, r1
 8006610:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.NetworkListCount; i++) {
 8006612:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8006616:	3301      	adds	r3, #1
 8006618:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800661c:	f107 0308 	add.w	r3, r7, #8
 8006620:	795b      	ldrb	r3, [r3, #5]
 8006622:	461a      	mov	r2, r3
 8006624:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8006628:	4293      	cmp	r3, r2
 800662a:	f4ff af54 	bcc.w	80064d6 <processMgmtNwkDiscRsp+0xe2>
			}
		}
		mtZdoCbs.pfnZdoMgmtNwkDiscRsp(&rsp);
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <processMgmtNwkDiscRsp+0x254>)
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	f107 0208 	add.w	r2, r7, #8
 8006636:	4610      	mov	r0, r2
 8006638:	4798      	blx	r3
	}
}
 800663a:	bf00      	nop
 800663c:	f207 47a4 	addw	r7, r7, #1188	; 0x4a4
 8006640:	46bd      	mov	sp, r7
 8006642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006646:	bf00      	nop
 8006648:	20000f14 	.word	0x20000f14
 800664c:	0801012c 	.word	0x0801012c

08006650 <processMgmtLqiRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtLqiRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	f2ad 6d5c 	subw	sp, sp, #1628	; 0x65c
 8006658:	af00      	add	r7, sp, #0
 800665a:	f107 030c 	add.w	r3, r7, #12
 800665e:	6018      	str	r0, [r3, #0]
 8006660:	460a      	mov	r2, r1
 8006662:	f107 030b 	add.w	r3, r7, #11
 8006666:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtLqiRsp) {
 8006668:	4b6f      	ldr	r3, [pc, #444]	; (8006828 <processMgmtLqiRsp+0x1d8>)
 800666a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 81c3 	beq.w	80069f8 <processMgmtLqiRsp+0x3a8>
		uint8_t msgIdx = 2;
 8006672:	2302      	movs	r3, #2
 8006674:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
		MgmtLqiRspFormat_t rsp;
		if (rpcLen < 6) {
 8006678:	f107 030b 	add.w	r3, r7, #11
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b05      	cmp	r3, #5
 8006680:	d802      	bhi.n	8006688 <processMgmtLqiRsp+0x38>
			printf("MT_RPC_ERR_LENGTH\n");
 8006682:	486a      	ldr	r0, [pc, #424]	; (800682c <processMgmtLqiRsp+0x1dc>)
 8006684:	f007 fc0e 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006688:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 800668c:	f107 020c 	add.w	r2, r7, #12
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	4413      	add	r3, r2
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b29a      	uxth	r2, r3
 8006698:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 800669c:	3301      	adds	r3, #1
 800669e:	f107 010c 	add.w	r1, r7, #12
 80066a2:	6809      	ldr	r1, [r1, #0]
 80066a4:	440b      	add	r3, r1
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	f107 0310 	add.w	r3, r7, #16
 80066b6:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 80066b8:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 80066bc:	3302      	adds	r3, #2
 80066be:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
		rsp.Status = rpcBuff[msgIdx++];
 80066c2:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 80066cc:	461a      	mov	r2, r3
 80066ce:	f107 030c 	add.w	r3, r7, #12
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4413      	add	r3, r2
 80066d6:	781a      	ldrb	r2, [r3, #0]
 80066d8:	f107 0310 	add.w	r3, r7, #16
 80066dc:	709a      	strb	r2, [r3, #2]
		rsp.NeighborTableEntries = rpcBuff[msgIdx++];
 80066de:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 80066e8:	461a      	mov	r2, r3
 80066ea:	f107 030c 	add.w	r3, r7, #12
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4413      	add	r3, r2
 80066f2:	781a      	ldrb	r2, [r3, #0]
 80066f4:	f107 0310 	add.w	r3, r7, #16
 80066f8:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 80066fa:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8006704:	461a      	mov	r2, r3
 8006706:	f107 030c 	add.w	r3, r7, #12
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4413      	add	r3, r2
 800670e:	781a      	ldrb	r2, [r3, #0]
 8006710:	f107 0310 	add.w	r3, r7, #16
 8006714:	711a      	strb	r2, [r3, #4]
		rsp.NeighborLqiListCount = rpcBuff[msgIdx++];
 8006716:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8006720:	461a      	mov	r2, r3
 8006722:	f107 030c 	add.w	r3, r7, #12
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4413      	add	r3, r2
 800672a:	781a      	ldrb	r2, [r3, #0]
 800672c:	f107 0310 	add.w	r3, r7, #16
 8006730:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 8006732:	f107 030b 	add.w	r3, r7, #11
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b06      	cmp	r3, #6
 800673a:	f240 8154 	bls.w	80069e6 <processMgmtLqiRsp+0x396>
			uint32_t i;
			for (i = 0; i < rsp.NeighborLqiListCount; i++) {
 800673e:	2300      	movs	r3, #0
 8006740:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 8006744:	e146      	b.n	80069d4 <processMgmtLqiRsp+0x384>

				rsp.NeighborLqiList[i].ExtendedPanID = 0;
 8006746:	f107 0110 	add.w	r1, r7, #16
 800674a:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 800674e:	4613      	mov	r3, r2
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	4413      	add	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	440b      	add	r3, r1
 8006758:	f103 0108 	add.w	r1, r3, #8
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 8006768:	2300      	movs	r3, #0
 800676a:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
 800676e:	e041      	b.n	80067f4 <processMgmtLqiRsp+0x1a4>
					rsp.NeighborLqiList[i].ExtendedPanID |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8006770:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 800677a:	461a      	mov	r2, r3
 800677c:	f107 030c 	add.w	r3, r7, #12
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4413      	add	r3, r2
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	f897 164f 	ldrb.w	r1, [r7, #1615]	; 0x64f
 8006790:	00c9      	lsls	r1, r1, #3
 8006792:	f1a1 0620 	sub.w	r6, r1, #32
 8006796:	f1c1 0020 	rsb	r0, r1, #32
 800679a:	fa03 f901 	lsl.w	r9, r3, r1
 800679e:	fa02 f606 	lsl.w	r6, r2, r6
 80067a2:	ea49 0906 	orr.w	r9, r9, r6
 80067a6:	fa22 f000 	lsr.w	r0, r2, r0
 80067aa:	ea49 0900 	orr.w	r9, r9, r0
 80067ae:	fa02 f801 	lsl.w	r8, r2, r1
 80067b2:	f107 0110 	add.w	r1, r7, #16
 80067b6:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 80067ba:	4613      	mov	r3, r2
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	440b      	add	r3, r1
 80067c4:	3308      	adds	r3, #8
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	ea48 0a02 	orr.w	sl, r8, r2
 80067ce:	ea49 0b03 	orr.w	fp, r9, r3
 80067d2:	f107 0110 	add.w	r1, r7, #16
 80067d6:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 80067da:	4613      	mov	r3, r2
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	4413      	add	r3, r2
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	440b      	add	r3, r1
 80067e4:	3308      	adds	r3, #8
 80067e6:	e9c3 ab00 	strd	sl, fp, [r3]
				for (ind = 0; ind < 8; ind++)
 80067ea:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 80067ee:	3301      	adds	r3, #1
 80067f0:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
 80067f4:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 80067f8:	2b07      	cmp	r3, #7
 80067fa:	d9b9      	bls.n	8006770 <processMgmtLqiRsp+0x120>
				rsp.NeighborLqiList[i].ExtendedAddress = 0;
 80067fc:	f107 0110 	add.w	r1, r7, #16
 8006800:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 8006804:	4613      	mov	r3, r2
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	4413      	add	r3, r2
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	440b      	add	r3, r1
 800680e:	f103 0110 	add.w	r1, r3, #16
 8006812:	f04f 0200 	mov.w	r2, #0
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	e9c1 2300 	strd	r2, r3, [r1]
				for (ind = 0; ind < 8; ind++)
 800681e:	2300      	movs	r3, #0
 8006820:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
 8006824:	e047      	b.n	80068b6 <processMgmtLqiRsp+0x266>
 8006826:	bf00      	nop
 8006828:	20000f14 	.word	0x20000f14
 800682c:	0801012c 	.word	0x0801012c
					rsp.NeighborLqiList[i].ExtendedAddress |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 8006830:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 800683a:	461a      	mov	r2, r3
 800683c:	f107 030c 	add.w	r3, r7, #12
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4413      	add	r3, r2
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	f897 164f 	ldrb.w	r1, [r7, #1615]	; 0x64f
 8006850:	00c9      	lsls	r1, r1, #3
 8006852:	f1a1 0620 	sub.w	r6, r1, #32
 8006856:	f1c1 0020 	rsb	r0, r1, #32
 800685a:	fa03 f501 	lsl.w	r5, r3, r1
 800685e:	fa02 f606 	lsl.w	r6, r2, r6
 8006862:	4335      	orrs	r5, r6
 8006864:	fa22 f000 	lsr.w	r0, r2, r0
 8006868:	4305      	orrs	r5, r0
 800686a:	fa02 f401 	lsl.w	r4, r2, r1
 800686e:	f107 0110 	add.w	r1, r7, #16
 8006872:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 8006876:	4613      	mov	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4413      	add	r3, r2
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	440b      	add	r3, r1
 8006880:	3310      	adds	r3, #16
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	ea44 0102 	orr.w	r1, r4, r2
 800688a:	6039      	str	r1, [r7, #0]
 800688c:	432b      	orrs	r3, r5
 800688e:	607b      	str	r3, [r7, #4]
 8006890:	f107 0110 	add.w	r1, r7, #16
 8006894:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 8006898:	4613      	mov	r3, r2
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	4413      	add	r3, r2
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	440b      	add	r3, r1
 80068a2:	3310      	adds	r3, #16
 80068a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068a8:	e9c3 1200 	strd	r1, r2, [r3]
				for (ind = 0; ind < 8; ind++)
 80068ac:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 80068b0:	3301      	adds	r3, #1
 80068b2:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
 80068b6:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 80068ba:	2b07      	cmp	r3, #7
 80068bc:	d9b8      	bls.n	8006830 <processMgmtLqiRsp+0x1e0>
				rsp.NeighborLqiList[i].NetworkAddress = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80068be:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 80068c2:	f107 020c 	add.w	r2, r7, #12
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	4413      	add	r3, r2
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 80068d2:	3301      	adds	r3, #1
 80068d4:	f107 010c 	add.w	r1, r7, #12
 80068d8:	6809      	ldr	r1, [r1, #0]
 80068da:	440b      	add	r3, r1
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	021b      	lsls	r3, r3, #8
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	4413      	add	r3, r2
 80068e6:	b298      	uxth	r0, r3
 80068e8:	f107 0110 	add.w	r1, r7, #16
 80068ec:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	4613      	mov	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	4413      	add	r3, r2
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	440b      	add	r3, r1
 80068fc:	4602      	mov	r2, r0
 80068fe:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 8006900:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8006904:	3302      	adds	r3, #2
 8006906:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
				rsp.NeighborLqiList[i].DevTyp_RxOnWhenIdle_Relat = rpcBuff[msgIdx++];
 800690a:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8006914:	461a      	mov	r2, r3
 8006916:	f107 030c 	add.w	r3, r7, #12
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4413      	add	r3, r2
 800691e:	7818      	ldrb	r0, [r3, #0]
 8006920:	f107 0110 	add.w	r1, r7, #16
 8006924:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	4613      	mov	r3, r2
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	4413      	add	r3, r2
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	440b      	add	r3, r1
 8006934:	3302      	adds	r3, #2
 8006936:	4602      	mov	r2, r0
 8006938:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].PermitJoining = rpcBuff[msgIdx++];
 800693a:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8006944:	461a      	mov	r2, r3
 8006946:	f107 030c 	add.w	r3, r7, #12
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4413      	add	r3, r2
 800694e:	7818      	ldrb	r0, [r3, #0]
 8006950:	f107 0110 	add.w	r1, r7, #16
 8006954:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	4613      	mov	r3, r2
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	4413      	add	r3, r2
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	440b      	add	r3, r1
 8006964:	3303      	adds	r3, #3
 8006966:	4602      	mov	r2, r0
 8006968:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].Depth = rpcBuff[msgIdx++];
 800696a:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8006974:	461a      	mov	r2, r3
 8006976:	f107 030c 	add.w	r3, r7, #12
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4413      	add	r3, r2
 800697e:	7818      	ldrb	r0, [r3, #0]
 8006980:	f107 0110 	add.w	r1, r7, #16
 8006984:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	4613      	mov	r3, r2
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	4413      	add	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	440b      	add	r3, r1
 8006994:	3304      	adds	r3, #4
 8006996:	4602      	mov	r2, r0
 8006998:	701a      	strb	r2, [r3, #0]
				rsp.NeighborLqiList[i].LQI = rpcBuff[msgIdx++];
 800699a:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 80069a4:	461a      	mov	r2, r3
 80069a6:	f107 030c 	add.w	r3, r7, #12
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4413      	add	r3, r2
 80069ae:	7818      	ldrb	r0, [r3, #0]
 80069b0:	f107 0110 	add.w	r1, r7, #16
 80069b4:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	4613      	mov	r3, r2
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	4413      	add	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	440b      	add	r3, r1
 80069c4:	3305      	adds	r3, #5
 80069c6:	4602      	mov	r2, r0
 80069c8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.NeighborLqiListCount; i++) {
 80069ca:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80069ce:	3301      	adds	r3, #1
 80069d0:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 80069d4:	f107 0310 	add.w	r3, r7, #16
 80069d8:	795b      	ldrb	r3, [r3, #5]
 80069da:	461a      	mov	r2, r3
 80069dc:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80069e0:	4293      	cmp	r3, r2
 80069e2:	f4ff aeb0 	bcc.w	8006746 <processMgmtLqiRsp+0xf6>

			}
		}
		MgmtLqiRspFormat_t *copyy = &rsp;
 80069e6:	f107 0310 	add.w	r3, r7, #16
 80069ea:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
		mtZdoCbs.pfnZdoMgmtLqiRsp(copyy);
 80069ee:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <processMgmtLqiRsp+0x3b4>)
 80069f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f2:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 80069f6:	4798      	blx	r3
	}
}
 80069f8:	bf00      	nop
 80069fa:	f207 675c 	addw	r7, r7, #1628	; 0x65c
 80069fe:	46bd      	mov	sp, r7
 8006a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a04:	20000f14 	.word	0x20000f14

08006a08 <processMgmtRtgRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtRtgRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b0f6      	sub	sp, #472	; 0x1d8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	1d3b      	adds	r3, r7, #4
 8006a10:	6018      	str	r0, [r3, #0]
 8006a12:	460a      	mov	r2, r1
 8006a14:	1cfb      	adds	r3, r7, #3
 8006a16:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtRtgRsp) {
 8006a18:	4b6d      	ldr	r3, [pc, #436]	; (8006bd0 <processMgmtRtgRsp+0x1c8>)
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 80d2 	beq.w	8006bc6 <processMgmtRtgRsp+0x1be>
		uint8_t msgIdx = 2;
 8006a22:	2302      	movs	r3, #2
 8006a24:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		MgmtRtgRspFormat_t rsp;
		if (rpcLen < 6) {
 8006a28:	1cfb      	adds	r3, r7, #3
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d802      	bhi.n	8006a36 <processMgmtRtgRsp+0x2e>
			printf("MT_RPC_ERR_LENGTH\n");
 8006a30:	4868      	ldr	r0, [pc, #416]	; (8006bd4 <processMgmtRtgRsp+0x1cc>)
 8006a32:	f007 fa37 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006a36:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006a3a:	1d3a      	adds	r2, r7, #4
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	4413      	add	r3, r2
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006a48:	3301      	adds	r3, #1
 8006a4a:	1d39      	adds	r1, r7, #4
 8006a4c:	6809      	ldr	r1, [r1, #0]
 8006a4e:	440b      	add	r3, r1
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	4413      	add	r3, r2
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	f107 0308 	add.w	r3, r7, #8
 8006a60:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8006a62:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006a66:	3302      	adds	r3, #2
 8006a68:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		rsp.Status = rpcBuff[msgIdx++];
 8006a6c:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8006a76:	461a      	mov	r2, r3
 8006a78:	1d3b      	adds	r3, r7, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	781a      	ldrb	r2, [r3, #0]
 8006a80:	f107 0308 	add.w	r3, r7, #8
 8006a84:	709a      	strb	r2, [r3, #2]
		rsp.RoutingTableEntries = rpcBuff[msgIdx++];
 8006a86:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8006a90:	461a      	mov	r2, r3
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4413      	add	r3, r2
 8006a98:	781a      	ldrb	r2, [r3, #0]
 8006a9a:	f107 0308 	add.w	r3, r7, #8
 8006a9e:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8006aa0:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8006aaa:	461a      	mov	r2, r3
 8006aac:	1d3b      	adds	r3, r7, #4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	781a      	ldrb	r2, [r3, #0]
 8006ab4:	f107 0308 	add.w	r3, r7, #8
 8006ab8:	711a      	strb	r2, [r3, #4]
		rsp.RoutingTableListCount = rpcBuff[msgIdx++];
 8006aba:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	1d3b      	adds	r3, r7, #4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4413      	add	r3, r2
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	f107 0308 	add.w	r3, r7, #8
 8006ad2:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 8006ad4:	1cfb      	adds	r3, r7, #3
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b06      	cmp	r3, #6
 8006ada:	d96e      	bls.n	8006bba <processMgmtRtgRsp+0x1b2>
			uint32_t i;
			for (i = 0; i < rsp.RoutingTableListCount; i++) {
 8006adc:	2300      	movs	r3, #0
 8006ade:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006ae2:	e062      	b.n	8006baa <processMgmtRtgRsp+0x1a2>
				rsp.RoutingTableList[i].DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006ae4:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006ae8:	1d3a      	adds	r2, r7, #4
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	4413      	add	r3, r2
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006af6:	3301      	adds	r3, #1
 8006af8:	1d39      	adds	r1, r7, #4
 8006afa:	6809      	ldr	r1, [r1, #0]
 8006afc:	440b      	add	r3, r1
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	4413      	add	r3, r2
 8006b08:	b298      	uxth	r0, r3
 8006b0a:	f107 0108 	add.w	r1, r7, #8
 8006b0e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8006b12:	4613      	mov	r3, r2
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	4413      	add	r3, r2
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	440b      	add	r3, r1
 8006b1c:	3306      	adds	r3, #6
 8006b1e:	4602      	mov	r2, r0
 8006b20:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 8006b22:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006b26:	3302      	adds	r3, #2
 8006b28:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
				rsp.RoutingTableList[i].Status = rpcBuff[msgIdx++];
 8006b2c:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	f887 21d7 	strb.w	r2, [r7, #471]	; 0x1d7
 8006b36:	461a      	mov	r2, r3
 8006b38:	1d3b      	adds	r3, r7, #4
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	7818      	ldrb	r0, [r3, #0]
 8006b40:	f107 0108 	add.w	r1, r7, #8
 8006b44:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8006b48:	4613      	mov	r3, r2
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	4413      	add	r3, r2
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	440b      	add	r3, r1
 8006b52:	3308      	adds	r3, #8
 8006b54:	4602      	mov	r2, r0
 8006b56:	701a      	strb	r2, [r3, #0]
				rsp.RoutingTableList[i].NextHop = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006b58:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006b5c:	1d3a      	adds	r2, r7, #4
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	4413      	add	r3, r2
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	1d39      	adds	r1, r7, #4
 8006b6e:	6809      	ldr	r1, [r1, #0]
 8006b70:	440b      	add	r3, r1
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	b298      	uxth	r0, r3
 8006b7e:	f107 0108 	add.w	r1, r7, #8
 8006b82:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8006b86:	4613      	mov	r3, r2
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	4413      	add	r3, r2
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	440b      	add	r3, r1
 8006b90:	330a      	adds	r3, #10
 8006b92:	4602      	mov	r2, r0
 8006b94:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 8006b96:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
			for (i = 0; i < rsp.RoutingTableListCount; i++) {
 8006ba0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006baa:	f107 0308 	add.w	r3, r7, #8
 8006bae:	795b      	ldrb	r3, [r3, #5]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d394      	bcc.n	8006ae4 <processMgmtRtgRsp+0xdc>
			}
		}
		mtZdoCbs.pfnZdoMgmtRtgRsp(&rsp);
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <processMgmtRtgRsp+0x1c8>)
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f107 0208 	add.w	r2, r7, #8
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	4798      	blx	r3
	}
}
 8006bc6:	bf00      	nop
 8006bc8:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20000f14 	.word	0x20000f14
 8006bd4:	0801012c 	.word	0x0801012c

08006bd8 <processMgmtBindRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtBindRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	f6ad 1d8c 	subw	sp, sp, #2444	; 0x98c
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	f107 030c 	add.w	r3, r7, #12
 8006be6:	6018      	str	r0, [r3, #0]
 8006be8:	460a      	mov	r2, r1
 8006bea:	f107 030b 	add.w	r3, r7, #11
 8006bee:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoMgmtBindRsp) {
 8006bf0:	4bbe      	ldr	r3, [pc, #760]	; (8006eec <processMgmtBindRsp+0x314>)
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 8173 	beq.w	8006ee0 <processMgmtBindRsp+0x308>
		uint8_t msgIdx = 2;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
		MgmtBindRspFormat_t rsp;
		if (rpcLen < 6) {
 8006c00:	f107 030b 	add.w	r3, r7, #11
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	d802      	bhi.n	8006c10 <processMgmtBindRsp+0x38>
			printf("MT_RPC_ERR_LENGTH\n");
 8006c0a:	48b9      	ldr	r0, [pc, #740]	; (8006ef0 <processMgmtBindRsp+0x318>)
 8006c0c:	f007 f94a 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006c10:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006c14:	f107 020c 	add.w	r2, r7, #12
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006c24:	3301      	adds	r3, #1
 8006c26:	f107 010c 	add.w	r1, r7, #12
 8006c2a:	6809      	ldr	r1, [r1, #0]
 8006c2c:	440b      	add	r3, r1
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	021b      	lsls	r3, r3, #8
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	4413      	add	r3, r2
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	f107 0310 	add.w	r3, r7, #16
 8006c3e:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8006c40:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006c44:	3302      	adds	r3, #2
 8006c46:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
		rsp.Status = rpcBuff[msgIdx++];
 8006c4a:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006c54:	461a      	mov	r2, r3
 8006c56:	f107 030c 	add.w	r3, r7, #12
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	f107 0310 	add.w	r3, r7, #16
 8006c64:	709a      	strb	r2, [r3, #2]
		rsp.BindingTableEntries = rpcBuff[msgIdx++];
 8006c66:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006c70:	461a      	mov	r2, r3
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4413      	add	r3, r2
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	f107 0310 	add.w	r3, r7, #16
 8006c80:	70da      	strb	r2, [r3, #3]
		rsp.StartIndex = rpcBuff[msgIdx++];
 8006c82:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f107 030c 	add.w	r3, r7, #12
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4413      	add	r3, r2
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	f107 0310 	add.w	r3, r7, #16
 8006c9c:	711a      	strb	r2, [r3, #4]
		rsp.BindingTableListCount = rpcBuff[msgIdx++];
 8006c9e:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f107 030c 	add.w	r3, r7, #12
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	781a      	ldrb	r2, [r3, #0]
 8006cb4:	f107 0310 	add.w	r3, r7, #16
 8006cb8:	715a      	strb	r2, [r3, #5]
		if (rpcLen > 6) {
 8006cba:	f107 030b 	add.w	r3, r7, #11
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b06      	cmp	r3, #6
 8006cc2:	f240 8107 	bls.w	8006ed4 <processMgmtBindRsp+0x2fc>
			uint32_t i;
			for (i = 0; i < rsp.BindingTableListCount; i++) {
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 8006ccc:	e0f9      	b.n	8006ec2 <processMgmtBindRsp+0x2ea>
				rsp.BindingTableList[i].SrcIEEEAddr = 0;
 8006cce:	f107 0210 	add.w	r2, r7, #16
 8006cd2:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8006cd6:	015b      	lsls	r3, r3, #5
 8006cd8:	4413      	add	r3, r2
 8006cda:	f103 0108 	add.w	r1, r3, #8
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t i;
				for (i = 0; i < 8; i++)
 8006cea:	2300      	movs	r3, #0
 8006cec:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
 8006cf0:	e03b      	b.n	8006d6a <processMgmtBindRsp+0x192>
					rsp.BindingTableList[i].SrcIEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8006cf2:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f107 030c 	add.w	r3, r7, #12
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4413      	add	r3, r2
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	f897 197f 	ldrb.w	r1, [r7, #2431]	; 0x97f
 8006d12:	00c9      	lsls	r1, r1, #3
 8006d14:	f1a1 0620 	sub.w	r6, r1, #32
 8006d18:	f1c1 0020 	rsb	r0, r1, #32
 8006d1c:	fa03 f901 	lsl.w	r9, r3, r1
 8006d20:	fa02 f606 	lsl.w	r6, r2, r6
 8006d24:	ea49 0906 	orr.w	r9, r9, r6
 8006d28:	fa22 f000 	lsr.w	r0, r2, r0
 8006d2c:	ea49 0900 	orr.w	r9, r9, r0
 8006d30:	fa02 f801 	lsl.w	r8, r2, r1
 8006d34:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006d38:	f107 0210 	add.w	r2, r7, #16
 8006d3c:	015b      	lsls	r3, r3, #5
 8006d3e:	4413      	add	r3, r2
 8006d40:	3308      	adds	r3, #8
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f897 197f 	ldrb.w	r1, [r7, #2431]	; 0x97f
 8006d4a:	ea48 0a02 	orr.w	sl, r8, r2
 8006d4e:	ea49 0b03 	orr.w	fp, r9, r3
 8006d52:	f107 0210 	add.w	r2, r7, #16
 8006d56:	014b      	lsls	r3, r1, #5
 8006d58:	4413      	add	r3, r2
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	e9c3 ab00 	strd	sl, fp, [r3]
				for (i = 0; i < 8; i++)
 8006d60:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006d64:	3301      	adds	r3, #1
 8006d66:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
 8006d6a:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006d6e:	2b07      	cmp	r3, #7
 8006d70:	d9bf      	bls.n	8006cf2 <processMgmtBindRsp+0x11a>
				rsp.BindingTableList[i].SrcEndpoint = rpcBuff[msgIdx++];
 8006d72:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f107 030c 	add.w	r3, r7, #12
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	441a      	add	r2, r3
 8006d86:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006d8a:	7811      	ldrb	r1, [r2, #0]
 8006d8c:	f107 0210 	add.w	r2, r7, #16
 8006d90:	015b      	lsls	r3, r3, #5
 8006d92:	4413      	add	r3, r2
 8006d94:	3310      	adds	r3, #16
 8006d96:	460a      	mov	r2, r1
 8006d98:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].ClusterID = rpcBuff[msgIdx++];
 8006d9a:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006da4:	461a      	mov	r2, r3
 8006da6:	f107 030c 	add.w	r3, r7, #12
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	441a      	add	r2, r3
 8006dae:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006db2:	7811      	ldrb	r1, [r2, #0]
 8006db4:	f107 0210 	add.w	r2, r7, #16
 8006db8:	015b      	lsls	r3, r3, #5
 8006dba:	4413      	add	r3, r2
 8006dbc:	3311      	adds	r3, #17
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].DstAddrMode = rpcBuff[msgIdx++];
 8006dc2:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006dda:	7811      	ldrb	r1, [r2, #0]
 8006ddc:	f107 0210 	add.w	r2, r7, #16
 8006de0:	015b      	lsls	r3, r3, #5
 8006de2:	4413      	add	r3, r2
 8006de4:	3312      	adds	r3, #18
 8006de6:	460a      	mov	r2, r1
 8006de8:	701a      	strb	r2, [r3, #0]
				rsp.BindingTableList[i].DstIEEEAddr = 0;
 8006dea:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006dee:	f107 0210 	add.w	r2, r7, #16
 8006df2:	015b      	lsls	r3, r3, #5
 8006df4:	4413      	add	r3, r2
 8006df6:	f103 0118 	add.w	r1, r3, #24
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	e9c1 2300 	strd	r2, r3, [r1]
				for (i = 0; i < 8; i++)
 8006e06:	2300      	movs	r3, #0
 8006e08:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
 8006e0c:	e03c      	b.n	8006e88 <processMgmtBindRsp+0x2b0>
					rsp.BindingTableList[i].DstIEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8006e0e:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4413      	add	r3, r2
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	f897 197f 	ldrb.w	r1, [r7, #2431]	; 0x97f
 8006e2e:	00c9      	lsls	r1, r1, #3
 8006e30:	f1a1 0620 	sub.w	r6, r1, #32
 8006e34:	f1c1 0020 	rsb	r0, r1, #32
 8006e38:	fa03 f501 	lsl.w	r5, r3, r1
 8006e3c:	fa02 f606 	lsl.w	r6, r2, r6
 8006e40:	4335      	orrs	r5, r6
 8006e42:	fa22 f000 	lsr.w	r0, r2, r0
 8006e46:	4305      	orrs	r5, r0
 8006e48:	fa02 f401 	lsl.w	r4, r2, r1
 8006e4c:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006e50:	f107 0210 	add.w	r2, r7, #16
 8006e54:	015b      	lsls	r3, r3, #5
 8006e56:	4413      	add	r3, r2
 8006e58:	3318      	adds	r3, #24
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f897 197f 	ldrb.w	r1, [r7, #2431]	; 0x97f
 8006e62:	ea44 0002 	orr.w	r0, r4, r2
 8006e66:	6038      	str	r0, [r7, #0]
 8006e68:	432b      	orrs	r3, r5
 8006e6a:	607b      	str	r3, [r7, #4]
 8006e6c:	f107 0210 	add.w	r2, r7, #16
 8006e70:	014b      	lsls	r3, r1, #5
 8006e72:	4413      	add	r3, r2
 8006e74:	3318      	adds	r3, #24
 8006e76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e7a:	e9c3 1200 	strd	r1, r2, [r3]
				for (i = 0; i < 8; i++)
 8006e7e:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006e82:	3301      	adds	r3, #1
 8006e84:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
 8006e88:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006e8c:	2b07      	cmp	r3, #7
 8006e8e:	d9be      	bls.n	8006e0e <processMgmtBindRsp+0x236>
				rsp.BindingTableList[i].DstEndpoint = rpcBuff[msgIdx++];
 8006e90:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	f887 2987 	strb.w	r2, [r7, #2439]	; 0x987
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f107 030c 	add.w	r3, r7, #12
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	441a      	add	r2, r3
 8006ea4:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8006ea8:	7811      	ldrb	r1, [r2, #0]
 8006eaa:	f107 0210 	add.w	r2, r7, #16
 8006eae:	3301      	adds	r3, #1
 8006eb0:	015b      	lsls	r3, r3, #5
 8006eb2:	4413      	add	r3, r2
 8006eb4:	460a      	mov	r2, r1
 8006eb6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rsp.BindingTableListCount; i++) {
 8006eb8:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 8006ec2:	f107 0310 	add.w	r3, r7, #16
 8006ec6:	795b      	ldrb	r3, [r3, #5]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f4ff aefd 	bcc.w	8006cce <processMgmtBindRsp+0xf6>
			}
		}
		mtZdoCbs.pfnZdoMgmtBindRsp(&rsp);
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <processMgmtBindRsp+0x314>)
 8006ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed8:	f107 0210 	add.w	r2, r7, #16
 8006edc:	4610      	mov	r0, r2
 8006ede:	4798      	blx	r3
	}
}
 8006ee0:	bf00      	nop
 8006ee2:	f607 178c 	addw	r7, r7, #2444	; 0x98c
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eec:	20000f14 	.word	0x20000f14
 8006ef0:	0801012c 	.word	0x0801012c

08006ef4 <processMgmtLeaveRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtLeaveRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtLeaveRsp) {
 8006f00:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <processMgmtLeaveRsp+0x70>)
 8006f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d028      	beq.n	8006f5a <processMgmtLeaveRsp+0x66>
		uint8_t msgIdx = 2;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	73fb      	strb	r3, [r7, #15]
		MgmtLeaveRspFormat_t rsp;
		if (rpcLen < 3) {
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d802      	bhi.n	8006f18 <processMgmtLeaveRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8006f12:	4815      	ldr	r0, [pc, #84]	; (8006f68 <processMgmtLeaveRsp+0x74>)
 8006f14:	f006 ffc6 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	3301      	adds	r3, #1
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	440b      	add	r3, r1
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	4413      	add	r3, r2
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	3302      	adds	r3, #2
 8006f3c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	73fa      	strb	r2, [r7, #15]
 8006f44:	461a      	mov	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4413      	add	r3, r2
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtLeaveRsp(&rsp);
 8006f4e:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <processMgmtLeaveRsp+0x70>)
 8006f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f52:	f107 0208 	add.w	r2, r7, #8
 8006f56:	4610      	mov	r0, r2
 8006f58:	4798      	blx	r3
	}
}
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000f14 	.word	0x20000f14
 8006f68:	0801012c 	.word	0x0801012c

08006f6c <processMgmtDirectJoinRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtDirectJoinRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtDirectJoinRsp) {
 8006f78:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <processMgmtDirectJoinRsp+0x70>)
 8006f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d028      	beq.n	8006fd2 <processMgmtDirectJoinRsp+0x66>
		uint8_t msgIdx = 2;
 8006f80:	2302      	movs	r3, #2
 8006f82:	73fb      	strb	r3, [r7, #15]
		MgmtDirectJoinRspFormat_t rsp;
		if (rpcLen < 3) {
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d802      	bhi.n	8006f90 <processMgmtDirectJoinRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8006f8a:	4815      	ldr	r0, [pc, #84]	; (8006fe0 <processMgmtDirectJoinRsp+0x74>)
 8006f8c:	f006 ff8a 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4413      	add	r3, r2
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	440b      	add	r3, r1
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	4413      	add	r3, r2
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	3302      	adds	r3, #2
 8006fb4:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	73fa      	strb	r2, [r7, #15]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtDirectJoinRsp(&rsp);
 8006fc6:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <processMgmtDirectJoinRsp+0x70>)
 8006fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fca:	f107 0208 	add.w	r2, r7, #8
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4798      	blx	r3
	}
}
 8006fd2:	bf00      	nop
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000f14 	.word	0x20000f14
 8006fe0:	0801012c 	.word	0x0801012c

08006fe4 <processMgmtPermitJoinRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMgmtPermitJoinRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMgmtPermitJoinRsp) {
 8006ff0:	4b18      	ldr	r3, [pc, #96]	; (8007054 <processMgmtPermitJoinRsp+0x70>)
 8006ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d028      	beq.n	800704a <processMgmtPermitJoinRsp+0x66>
		uint8_t msgIdx = 2;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	73fb      	strb	r3, [r7, #15]
		MgmtPermitJoinRspFormat_t rsp;
		if (rpcLen < 3) {
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d802      	bhi.n	8007008 <processMgmtPermitJoinRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 8007002:	4815      	ldr	r0, [pc, #84]	; (8007058 <processMgmtPermitJoinRsp+0x74>)
 8007004:	f006 ff4e 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4413      	add	r3, r2
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	b29a      	uxth	r2, r3
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	3301      	adds	r3, #1
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	440b      	add	r3, r1
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	b29b      	uxth	r3, r3
 8007022:	4413      	add	r3, r2
 8007024:	b29b      	uxth	r3, r3
 8007026:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	3302      	adds	r3, #2
 800702c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	73fa      	strb	r2, [r7, #15]
 8007034:	461a      	mov	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4413      	add	r3, r2
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoMgmtPermitJoinRsp(&rsp);
 800703e:	4b05      	ldr	r3, [pc, #20]	; (8007054 <processMgmtPermitJoinRsp+0x70>)
 8007040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007042:	f107 0208 	add.w	r2, r7, #8
 8007046:	4610      	mov	r0, r2
 8007048:	4798      	blx	r3
	}
}
 800704a:	bf00      	nop
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000f14 	.word	0x20000f14
 8007058:	0801012c 	.word	0x0801012c

0800705c <processEndDeviceAnnceInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processEndDeviceAnnceInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 800705c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007060:	b08b      	sub	sp, #44	; 0x2c
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoEndDeviceAnnceInd) {
 800706a:	4b44      	ldr	r3, [pc, #272]	; (800717c <processEndDeviceAnnceInd+0x120>)
 800706c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706e:	2b00      	cmp	r3, #0
 8007070:	d07e      	beq.n	8007170 <processEndDeviceAnnceInd+0x114>
		uint8_t msgIdx = 2;
 8007072:	2302      	movs	r3, #2
 8007074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		EndDeviceAnnceIndFormat_t rsp;
		if (rpcLen < 13) {
 8007078:	78fb      	ldrb	r3, [r7, #3]
 800707a:	2b0c      	cmp	r3, #12
 800707c:	d802      	bhi.n	8007084 <processEndDeviceAnnceInd+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 800707e:	4840      	ldr	r0, [pc, #256]	; (8007180 <processEndDeviceAnnceInd+0x124>)
 8007080:	f006 ff10 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	4413      	add	r3, r2
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	b29a      	uxth	r2, r3
 8007090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007094:	3301      	adds	r3, #1
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	440b      	add	r3, r1
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	4413      	add	r3, r2
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80070a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070ac:	3302      	adds	r3, #2
 80070ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80070b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	4413      	add	r3, r2
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	b29a      	uxth	r2, r3
 80070be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070c2:	3301      	adds	r3, #1
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	440b      	add	r3, r1
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	4413      	add	r3, r2
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 80070d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070da:	3302      	adds	r3, #2
 80070dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rsp.IEEEAddr = 0;
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++)
 80070ec:	2300      	movs	r3, #0
 80070ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070f2:	e029      	b.n	8007148 <processEndDeviceAnnceInd+0xec>
			rsp.IEEEAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 80070f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80070fe:	461a      	mov	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b2da      	uxtb	r2, r3
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007110:	00c9      	lsls	r1, r1, #3
 8007112:	f1a1 0620 	sub.w	r6, r1, #32
 8007116:	f1c1 0020 	rsb	r0, r1, #32
 800711a:	fa03 f501 	lsl.w	r5, r3, r1
 800711e:	fa02 f606 	lsl.w	r6, r2, r6
 8007122:	4335      	orrs	r5, r6
 8007124:	fa22 f000 	lsr.w	r0, r2, r0
 8007128:	4305      	orrs	r5, r0
 800712a:	fa02 f401 	lsl.w	r4, r2, r1
 800712e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007132:	ea44 0802 	orr.w	r8, r4, r2
 8007136:	ea45 0903 	orr.w	r9, r5, r3
 800713a:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++)
 800713e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007142:	3301      	adds	r3, #1
 8007144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800714c:	2b07      	cmp	r3, #7
 800714e:	d9d1      	bls.n	80070f4 <processEndDeviceAnnceInd+0x98>
		rsp.Capabilities = rpcBuff[msgIdx++];
 8007150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4413      	add	r3, r2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	763b      	strb	r3, [r7, #24]

		mtZdoCbs.pfnZdoEndDeviceAnnceInd(&rsp);
 8007164:	4b05      	ldr	r3, [pc, #20]	; (800717c <processEndDeviceAnnceInd+0x120>)
 8007166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007168:	f107 0208 	add.w	r2, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
	}
}
 8007170:	bf00      	nop
 8007172:	372c      	adds	r7, #44	; 0x2c
 8007174:	46bd      	mov	sp, r7
 8007176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800717a:	bf00      	nop
 800717c:	20000f14 	.word	0x20000f14
 8007180:	0801012c 	.word	0x0801012c

08007184 <processMatchDescRspSent>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMatchDescRspSent(uint8_t *rpcBuff, uint8_t rpcLen) {
 8007184:	b580      	push	{r7, lr}
 8007186:	b096      	sub	sp, #88	; 0x58
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMatchDescRspSent) {
 8007190:	4b4a      	ldr	r3, [pc, #296]	; (80072bc <processMatchDescRspSent+0x138>)
 8007192:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 808d 	beq.w	80072b4 <processMatchDescRspSent+0x130>
		uint8_t msgIdx = 2;
 800719a:	2302      	movs	r3, #2
 800719c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		MatchDescRspSentFormat_t rsp;
		if (rpcLen < 4) {
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d802      	bhi.n	80071ac <processMatchDescRspSent+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 80071a6:	4846      	ldr	r0, [pc, #280]	; (80072c0 <processMatchDescRspSent+0x13c>)
 80071a8:	f006 fe7c 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80071ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	4413      	add	r3, r2
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071bc:	3301      	adds	r3, #1
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	440b      	add	r3, r1
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	4413      	add	r3, r2
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 80071d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071d4:	3302      	adds	r3, #2
 80071d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		rsp.NumInClusters = rpcBuff[msgIdx++];
 80071da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 80071e4:	461a      	mov	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4413      	add	r3, r2
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	72bb      	strb	r3, [r7, #10]
		uint32_t i;
		for (i = 0; i < rsp.NumInClusters; i++) {
 80071ee:	2300      	movs	r3, #0
 80071f0:	653b      	str	r3, [r7, #80]	; 0x50
 80071f2:	e01f      	b.n	8007234 <processMatchDescRspSent+0xb0>
			rsp.InClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80071f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	4413      	add	r3, r2
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	b29a      	uxth	r2, r3
 8007200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007204:	3301      	adds	r3, #1
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	440b      	add	r3, r1
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	b29b      	uxth	r3, r3
 8007212:	4413      	add	r3, r2
 8007214:	b29a      	uxth	r2, r3
 8007216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800721e:	440b      	add	r3, r1
 8007220:	f823 2c4c 	strh.w	r2, [r3, #-76]
			msgIdx += 2;
 8007224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007228:	3302      	adds	r3, #2
 800722a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for (i = 0; i < rsp.NumInClusters; i++) {
 800722e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007230:	3301      	adds	r3, #1
 8007232:	653b      	str	r3, [r7, #80]	; 0x50
 8007234:	7abb      	ldrb	r3, [r7, #10]
 8007236:	461a      	mov	r2, r3
 8007238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800723a:	4293      	cmp	r3, r2
 800723c:	d3da      	bcc.n	80071f4 <processMatchDescRspSent+0x70>
		}
		rsp.NumOutClusters = rpcBuff[msgIdx++];
 800723e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 8007248:	461a      	mov	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		for (i = 0; i < rsp.NumOutClusters; i++) {
 8007254:	2300      	movs	r3, #0
 8007256:	653b      	str	r3, [r7, #80]	; 0x50
 8007258:	e020      	b.n	800729c <processMatchDescRspSent+0x118>
			rsp.OutClusterList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800725a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	4413      	add	r3, r2
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	b29a      	uxth	r2, r3
 8007266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800726a:	3301      	adds	r3, #1
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	440b      	add	r3, r1
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	b29b      	uxth	r3, r3
 8007278:	4413      	add	r3, r2
 800727a:	b29a      	uxth	r2, r3
 800727c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800727e:	3310      	adds	r3, #16
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007286:	440b      	add	r3, r1
 8007288:	f823 2c4a 	strh.w	r2, [r3, #-74]
			msgIdx += 2;
 800728c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007290:	3302      	adds	r3, #2
 8007292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for (i = 0; i < rsp.NumOutClusters; i++) {
 8007296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007298:	3301      	adds	r3, #1
 800729a:	653b      	str	r3, [r7, #80]	; 0x50
 800729c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80072a0:	461a      	mov	r2, r3
 80072a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d3d8      	bcc.n	800725a <processMatchDescRspSent+0xd6>
		}

		mtZdoCbs.pfnZdoMatchDescRspSent(&rsp);
 80072a8:	4b04      	ldr	r3, [pc, #16]	; (80072bc <processMatchDescRspSent+0x138>)
 80072aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ac:	f107 0208 	add.w	r2, r7, #8
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
	}
}
 80072b4:	bf00      	nop
 80072b6:	3758      	adds	r7, #88	; 0x58
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20000f14 	.word	0x20000f14
 80072c0:	0801012c 	.word	0x0801012c

080072c4 <processStatusErrorRsp>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processStatusErrorRsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoStatusErrorRsp) {
 80072d0:	4b18      	ldr	r3, [pc, #96]	; (8007334 <processStatusErrorRsp+0x70>)
 80072d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d028      	beq.n	800732a <processStatusErrorRsp+0x66>
		uint8_t msgIdx = 2;
 80072d8:	2302      	movs	r3, #2
 80072da:	73fb      	strb	r3, [r7, #15]
		StatusErrorRspFormat_t rsp;
		if (rpcLen < 3) {
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d802      	bhi.n	80072e8 <processStatusErrorRsp+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80072e2:	4815      	ldr	r0, [pc, #84]	; (8007338 <processStatusErrorRsp+0x74>)
 80072e4:	f006 fdde 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	4413      	add	r3, r2
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	3301      	adds	r3, #1
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	440b      	add	r3, r1
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	021b      	lsls	r3, r3, #8
 8007300:	b29b      	uxth	r3, r3
 8007302:	4413      	add	r3, r2
 8007304:	b29b      	uxth	r3, r3
 8007306:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	3302      	adds	r3, #2
 800730c:	73fb      	strb	r3, [r7, #15]
		rsp.Status = rpcBuff[msgIdx++];
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	73fa      	strb	r2, [r7, #15]
 8007314:	461a      	mov	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4413      	add	r3, r2
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	72bb      	strb	r3, [r7, #10]

		mtZdoCbs.pfnZdoStatusErrorRsp(&rsp);
 800731e:	4b05      	ldr	r3, [pc, #20]	; (8007334 <processStatusErrorRsp+0x70>)
 8007320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007322:	f107 0208 	add.w	r2, r7, #8
 8007326:	4610      	mov	r0, r2
 8007328:	4798      	blx	r3
	}
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000f14 	.word	0x20000f14
 8007338:	0801012c 	.word	0x0801012c

0800733c <processSrcRtgInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processSrcRtgInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 800733c:	b580      	push	{r7, lr}
 800733e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8007342:	af00      	add	r7, sp, #0
 8007344:	1d3b      	adds	r3, r7, #4
 8007346:	6018      	str	r0, [r3, #0]
 8007348:	460a      	mov	r2, r1
 800734a:	1cfb      	adds	r3, r7, #3
 800734c:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoSrcRtgInd) {
 800734e:	4b39      	ldr	r3, [pc, #228]	; (8007434 <processSrcRtgInd+0xf8>)
 8007350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007352:	2b00      	cmp	r3, #0
 8007354:	d068      	beq.n	8007428 <processSrcRtgInd+0xec>
		uint8_t msgIdx = 2;
 8007356:	2302      	movs	r3, #2
 8007358:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		SrcRtgIndFormat_t rsp;
		if (rpcLen < 4) {
 800735c:	1cfb      	adds	r3, r7, #3
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b03      	cmp	r3, #3
 8007362:	d802      	bhi.n	800736a <processSrcRtgInd+0x2e>
			printf("MT_RPC_ERR_LENGTH\n");
 8007364:	4834      	ldr	r0, [pc, #208]	; (8007438 <processSrcRtgInd+0xfc>)
 8007366:	f006 fd9d 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.DstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 800736a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800736e:	1d3a      	adds	r2, r7, #4
 8007370:	6812      	ldr	r2, [r2, #0]
 8007372:	4413      	add	r3, r2
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b29a      	uxth	r2, r3
 8007378:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800737c:	3301      	adds	r3, #1
 800737e:	1d39      	adds	r1, r7, #4
 8007380:	6809      	ldr	r1, [r1, #0]
 8007382:	440b      	add	r3, r1
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	b29b      	uxth	r3, r3
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	b29b      	uxth	r3, r3
 800738c:	4413      	add	r3, r2
 800738e:	b29a      	uxth	r2, r3
 8007390:	f107 030c 	add.w	r3, r7, #12
 8007394:	801a      	strh	r2, [r3, #0]
		msgIdx += 2;
 8007396:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800739a:	3302      	adds	r3, #2
 800739c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		rsp.RelayCount = rpcBuff[msgIdx++];
 80073a0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 80073aa:	461a      	mov	r2, r3
 80073ac:	1d3b      	adds	r3, r7, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4413      	add	r3, r2
 80073b2:	781a      	ldrb	r2, [r3, #0]
 80073b4:	f107 030c 	add.w	r3, r7, #12
 80073b8:	709a      	strb	r2, [r3, #2]
		uint32_t i;
		for (i = 0; i < rsp.RelayCount; i++) {
 80073ba:	2300      	movs	r3, #0
 80073bc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80073c0:	e024      	b.n	800740c <processSrcRtgInd+0xd0>
			rsp.RelayList[i] = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80073c2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80073c6:	1d3a      	adds	r2, r7, #4
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	4413      	add	r3, r2
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80073d4:	3301      	adds	r3, #1
 80073d6:	1d39      	adds	r1, r7, #4
 80073d8:	6809      	ldr	r1, [r1, #0]
 80073da:	440b      	add	r3, r1
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	4413      	add	r3, r2
 80073e6:	b299      	uxth	r1, r3
 80073e8:	f107 020c 	add.w	r2, r7, #12
 80073ec:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	4413      	add	r3, r2
 80073f4:	460a      	mov	r2, r1
 80073f6:	809a      	strh	r2, [r3, #4]
			msgIdx += 2;
 80073f8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80073fc:	3302      	adds	r3, #2
 80073fe:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		for (i = 0; i < rsp.RelayCount; i++) {
 8007402:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007406:	3301      	adds	r3, #1
 8007408:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800740c:	f107 030c 	add.w	r3, r7, #12
 8007410:	789b      	ldrb	r3, [r3, #2]
 8007412:	461a      	mov	r2, r3
 8007414:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007418:	4293      	cmp	r3, r2
 800741a:	d3d2      	bcc.n	80073c2 <processSrcRtgInd+0x86>
		}

		mtZdoCbs.pfnZdoSrcRtgInd(&rsp);
 800741c:	4b05      	ldr	r3, [pc, #20]	; (8007434 <processSrcRtgInd+0xf8>)
 800741e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007420:	f107 020c 	add.w	r2, r7, #12
 8007424:	4610      	mov	r0, r2
 8007426:	4798      	blx	r3
	}
}
 8007428:	bf00      	nop
 800742a:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000f14 	.word	0x20000f14
 8007438:	0801012c 	.word	0x0801012c

0800743c <processBeaconNotifyInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processBeaconNotifyInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 800743c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007440:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8007444:	af00      	add	r7, sp, #0
 8007446:	1d3b      	adds	r3, r7, #4
 8007448:	6018      	str	r0, [r3, #0]
 800744a:	460a      	mov	r2, r1
 800744c:	1cfb      	adds	r3, r7, #3
 800744e:	701a      	strb	r2, [r3, #0]
	if (mtZdoCbs.pfnZdoBeaconNotifyInd) {
 8007450:	4bd4      	ldr	r3, [pc, #848]	; (80077a4 <processBeaconNotifyInd+0x368>)
 8007452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 819f 	beq.w	8007798 <processBeaconNotifyInd+0x35c>
		uint8_t msgIdx = 2;
 800745a:	2302      	movs	r3, #2
 800745c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		BeaconNotifyIndFormat_t rsp;
		if (rpcLen < 1) {
 8007460:	1cfb      	adds	r3, r7, #3
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <processBeaconNotifyInd+0x32>
			printf("MT_RPC_ERR_LENGTH\n");
 8007468:	48cf      	ldr	r0, [pc, #828]	; (80077a8 <processBeaconNotifyInd+0x36c>)
 800746a:	f006 fd1b 	bl	800dea4 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 800746e:	1cfb      	adds	r3, r7, #3
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	4619      	mov	r1, r3
 8007474:	48cd      	ldr	r0, [pc, #820]	; (80077ac <processBeaconNotifyInd+0x370>)
 8007476:	f006 fc8f 	bl	800dd98 <iprintf>

		rsp.BeaconCount = rpcBuff[msgIdx++];
 800747a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8007484:	461a      	mov	r2, r3
 8007486:	1d3b      	adds	r3, r7, #4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4413      	add	r3, r2
 800748c:	781a      	ldrb	r2, [r3, #0]
 800748e:	f107 0308 	add.w	r3, r7, #8
 8007492:	701a      	strb	r2, [r3, #0]
		if (rpcLen > 1) {
 8007494:	1cfb      	adds	r3, r7, #3
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b01      	cmp	r3, #1
 800749a:	f240 8177 	bls.w	800778c <processBeaconNotifyInd+0x350>
			uint32_t i;
			for (i = 0; i < rsp.BeaconCount; i++) {
 800749e:	2300      	movs	r3, #0
 80074a0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80074a4:	e169      	b.n	800777a <processBeaconNotifyInd+0x33e>
				rsp.BeaconList[i].SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80074a6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80074aa:	1d3a      	adds	r2, r7, #4
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	4413      	add	r3, r2
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80074b8:	3301      	adds	r3, #1
 80074ba:	1d39      	adds	r1, r7, #4
 80074bc:	6809      	ldr	r1, [r1, #0]
 80074be:	440b      	add	r3, r1
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4413      	add	r3, r2
 80074ca:	b298      	uxth	r0, r3
 80074cc:	f107 0108 	add.w	r1, r7, #8
 80074d0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80074d4:	4613      	mov	r3, r2
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	4413      	add	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	440b      	add	r3, r1
 80074de:	3308      	adds	r3, #8
 80074e0:	4602      	mov	r2, r0
 80074e2:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 80074e4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80074e8:	3302      	adds	r3, #2
 80074ea:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				rsp.BeaconList[i].PanId = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80074ee:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80074f2:	1d3a      	adds	r2, r7, #4
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	4413      	add	r3, r2
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007500:	3301      	adds	r3, #1
 8007502:	1d39      	adds	r1, r7, #4
 8007504:	6809      	ldr	r1, [r1, #0]
 8007506:	440b      	add	r3, r1
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	b29b      	uxth	r3, r3
 8007510:	4413      	add	r3, r2
 8007512:	b298      	uxth	r0, r3
 8007514:	f107 0108 	add.w	r1, r7, #8
 8007518:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800751c:	4613      	mov	r3, r2
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	4413      	add	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	440b      	add	r3, r1
 8007526:	330a      	adds	r3, #10
 8007528:	4602      	mov	r2, r0
 800752a:	801a      	strh	r2, [r3, #0]
				msgIdx += 2;
 800752c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007530:	3302      	adds	r3, #2
 8007532:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				rsp.BeaconList[i].LogicalChannel = rpcBuff[msgIdx++];
 8007536:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8007540:	461a      	mov	r2, r3
 8007542:	1d3b      	adds	r3, r7, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4413      	add	r3, r2
 8007548:	7818      	ldrb	r0, [r3, #0]
 800754a:	f107 0108 	add.w	r1, r7, #8
 800754e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8007552:	4613      	mov	r3, r2
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	4413      	add	r3, r2
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	440b      	add	r3, r1
 800755c:	330c      	adds	r3, #12
 800755e:	4602      	mov	r2, r0
 8007560:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].PermitJoining = rpcBuff[msgIdx++];
 8007562:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 800756c:	461a      	mov	r2, r3
 800756e:	1d3b      	adds	r3, r7, #4
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4413      	add	r3, r2
 8007574:	7818      	ldrb	r0, [r3, #0]
 8007576:	f107 0108 	add.w	r1, r7, #8
 800757a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800757e:	4613      	mov	r3, r2
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	4413      	add	r3, r2
 8007584:	00db      	lsls	r3, r3, #3
 8007586:	440b      	add	r3, r1
 8007588:	330d      	adds	r3, #13
 800758a:	4602      	mov	r2, r0
 800758c:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].RouterCap = rpcBuff[msgIdx++];
 800758e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8007598:	461a      	mov	r2, r3
 800759a:	1d3b      	adds	r3, r7, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4413      	add	r3, r2
 80075a0:	7818      	ldrb	r0, [r3, #0]
 80075a2:	f107 0108 	add.w	r1, r7, #8
 80075a6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80075aa:	4613      	mov	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	440b      	add	r3, r1
 80075b4:	330e      	adds	r3, #14
 80075b6:	4602      	mov	r2, r0
 80075b8:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].DevCap = rpcBuff[msgIdx++];
 80075ba:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 80075c4:	461a      	mov	r2, r3
 80075c6:	1d3b      	adds	r3, r7, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4413      	add	r3, r2
 80075cc:	7818      	ldrb	r0, [r3, #0]
 80075ce:	f107 0108 	add.w	r1, r7, #8
 80075d2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80075d6:	4613      	mov	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	440b      	add	r3, r1
 80075e0:	330f      	adds	r3, #15
 80075e2:	4602      	mov	r2, r0
 80075e4:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].ProtocolVer = rpcBuff[msgIdx++];
 80075e6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 80075f0:	461a      	mov	r2, r3
 80075f2:	1d3b      	adds	r3, r7, #4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4413      	add	r3, r2
 80075f8:	7818      	ldrb	r0, [r3, #0]
 80075fa:	f107 0108 	add.w	r1, r7, #8
 80075fe:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8007602:	4613      	mov	r3, r2
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	4413      	add	r3, r2
 8007608:	00db      	lsls	r3, r3, #3
 800760a:	440b      	add	r3, r1
 800760c:	3310      	adds	r3, #16
 800760e:	4602      	mov	r2, r0
 8007610:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].StackProf = rpcBuff[msgIdx++];
 8007612:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 800761c:	461a      	mov	r2, r3
 800761e:	1d3b      	adds	r3, r7, #4
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4413      	add	r3, r2
 8007624:	7818      	ldrb	r0, [r3, #0]
 8007626:	f107 0108 	add.w	r1, r7, #8
 800762a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800762e:	4613      	mov	r3, r2
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	4413      	add	r3, r2
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	440b      	add	r3, r1
 8007638:	3311      	adds	r3, #17
 800763a:	4602      	mov	r2, r0
 800763c:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].Lqi = rpcBuff[msgIdx++];
 800763e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8007648:	461a      	mov	r2, r3
 800764a:	1d3b      	adds	r3, r7, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4413      	add	r3, r2
 8007650:	7818      	ldrb	r0, [r3, #0]
 8007652:	f107 0108 	add.w	r1, r7, #8
 8007656:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800765a:	4613      	mov	r3, r2
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4413      	add	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	440b      	add	r3, r1
 8007664:	3312      	adds	r3, #18
 8007666:	4602      	mov	r2, r0
 8007668:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].Depth = rpcBuff[msgIdx++];
 800766a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 8007674:	461a      	mov	r2, r3
 8007676:	1d3b      	adds	r3, r7, #4
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4413      	add	r3, r2
 800767c:	7818      	ldrb	r0, [r3, #0]
 800767e:	f107 0108 	add.w	r1, r7, #8
 8007682:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8007686:	4613      	mov	r3, r2
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	4413      	add	r3, r2
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	440b      	add	r3, r1
 8007690:	3313      	adds	r3, #19
 8007692:	4602      	mov	r2, r0
 8007694:	701a      	strb	r2, [r3, #0]
				rsp.BeaconList[i].UpdateId = rpcBuff[msgIdx++];
 8007696:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 80076a0:	461a      	mov	r2, r3
 80076a2:	1d3b      	adds	r3, r7, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4413      	add	r3, r2
 80076a8:	7818      	ldrb	r0, [r3, #0]
 80076aa:	f107 0108 	add.w	r1, r7, #8
 80076ae:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80076b2:	4613      	mov	r3, r2
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	4413      	add	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	440b      	add	r3, r1
 80076bc:	3314      	adds	r3, #20
 80076be:	4602      	mov	r2, r0
 80076c0:	701a      	strb	r2, [r3, #0]

				rsp.BeaconList[i].ExtendedPanId = 0;
 80076c2:	f107 0108 	add.w	r1, r7, #8
 80076c6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	4613      	mov	r3, r2
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	4413      	add	r3, r2
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	4419      	add	r1, r3
 80076d6:	f04f 0200 	mov.w	r2, #0
 80076da:	f04f 0300 	mov.w	r3, #0
 80076de:	e9c1 2300 	strd	r2, r3, [r1]
				uint8_t ind;
				for (ind = 0; ind < 8; ind++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80076e8:	e03e      	b.n	8007768 <processBeaconNotifyInd+0x32c>
					rsp.BeaconList[i].ExtendedPanId |= ((uint64_t) rpcBuff[msgIdx++]) << (ind * 8);
 80076ea:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	f887 2217 	strb.w	r2, [r7, #535]	; 0x217
 80076f4:	461a      	mov	r2, r3
 80076f6:	1d3b      	adds	r3, r7, #4
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4413      	add	r3, r2
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	f897 120f 	ldrb.w	r1, [r7, #527]	; 0x20f
 8007708:	00c9      	lsls	r1, r1, #3
 800770a:	f1a1 0620 	sub.w	r6, r1, #32
 800770e:	f1c1 0020 	rsb	r0, r1, #32
 8007712:	fa03 f501 	lsl.w	r5, r3, r1
 8007716:	fa02 f606 	lsl.w	r6, r2, r6
 800771a:	4335      	orrs	r5, r6
 800771c:	fa22 f000 	lsr.w	r0, r2, r0
 8007720:	4305      	orrs	r5, r0
 8007722:	fa02 f401 	lsl.w	r4, r2, r1
 8007726:	f107 0108 	add.w	r1, r7, #8
 800772a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	4613      	mov	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	4413      	add	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	440b      	add	r3, r1
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	ea44 0802 	orr.w	r8, r4, r2
 8007742:	ea45 0903 	orr.w	r9, r5, r3
 8007746:	f107 0108 	add.w	r1, r7, #8
 800774a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	4613      	mov	r3, r2
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	4413      	add	r3, r2
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	440b      	add	r3, r1
 800775a:	e9c3 8900 	strd	r8, r9, [r3]
				for (ind = 0; ind < 8; ind++)
 800775e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007762:	3301      	adds	r3, #1
 8007764:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8007768:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800776c:	2b07      	cmp	r3, #7
 800776e:	d9bc      	bls.n	80076ea <processBeaconNotifyInd+0x2ae>
			for (i = 0; i < rsp.BeaconCount; i++) {
 8007770:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007774:	3301      	adds	r3, #1
 8007776:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800777a:	f107 0308 	add.w	r3, r7, #8
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007786:	4293      	cmp	r3, r2
 8007788:	f4ff ae8d 	bcc.w	80074a6 <processBeaconNotifyInd+0x6a>

			}
		}
		mtZdoCbs.pfnZdoBeaconNotifyInd(&rsp);
 800778c:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <processBeaconNotifyInd+0x368>)
 800778e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007790:	f107 0208 	add.w	r2, r7, #8
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
	}
}
 8007798:	bf00      	nop
 800779a:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800779e:	46bd      	mov	sp, r7
 80077a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077a4:	20000f14 	.word	0x20000f14
 80077a8:	0801012c 	.word	0x0801012c
 80077ac:	08010140 	.word	0x08010140

080077b0 <processJoinCnf>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processJoinCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoJoinCnf) {
 80077bc:	4b24      	ldr	r3, [pc, #144]	; (8007850 <processJoinCnf+0xa0>)
 80077be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d040      	beq.n	8007846 <processJoinCnf+0x96>
		uint8_t msgIdx = 2;
 80077c4:	2302      	movs	r3, #2
 80077c6:	73fb      	strb	r3, [r7, #15]
		JoinCnfFormat_t rsp;
		if (rpcLen < 5) {
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	d802      	bhi.n	80077d4 <processJoinCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 80077ce:	4821      	ldr	r0, [pc, #132]	; (8007854 <processJoinCnf+0xa4>)
 80077d0:	f006 fb68 	bl	800dea4 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	4619      	mov	r1, r3
 80077d8:	481f      	ldr	r0, [pc, #124]	; (8007858 <processJoinCnf+0xa8>)
 80077da:	f006 fadd 	bl	800dd98 <iprintf>

		rsp.Status = rpcBuff[msgIdx++];
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	73fa      	strb	r2, [r7, #15]
 80077e4:	461a      	mov	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4413      	add	r3, r2
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	723b      	strb	r3, [r7, #8]
		rsp.DevAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	3301      	adds	r3, #1
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	440b      	add	r3, r1
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	b29b      	uxth	r3, r3
 8007808:	4413      	add	r3, r2
 800780a:	b29b      	uxth	r3, r3
 800780c:	817b      	strh	r3, [r7, #10]
		msgIdx += 2;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	3302      	adds	r3, #2
 8007812:	73fb      	strb	r3, [r7, #15]
		rsp.ParentAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	4413      	add	r3, r2
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	b29a      	uxth	r2, r3
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	3301      	adds	r3, #1
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	440b      	add	r3, r1
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	b29b      	uxth	r3, r3
 800782e:	4413      	add	r3, r2
 8007830:	b29b      	uxth	r3, r3
 8007832:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	3302      	adds	r3, #2
 8007838:	73fb      	strb	r3, [r7, #15]

		mtZdoCbs.pfnZdoJoinCnf(&rsp);
 800783a:	4b05      	ldr	r3, [pc, #20]	; (8007850 <processJoinCnf+0xa0>)
 800783c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800783e:	f107 0208 	add.w	r2, r7, #8
 8007842:	4610      	mov	r0, r2
 8007844:	4798      	blx	r3
	}
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000f14 	.word	0x20000f14
 8007854:	0801012c 	.word	0x0801012c
 8007858:	08010140 	.word	0x08010140

0800785c <processNwkDiscoveryCnf>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processNwkDiscoveryCnf(uint8_t *rpcBuff, uint8_t rpcLen) {
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoNwkDiscoveryCnf) {
 8007868:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <processNwkDiscoveryCnf+0x54>)
 800786a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01a      	beq.n	80078a6 <processNwkDiscoveryCnf+0x4a>
		uint8_t msgIdx = 2;
 8007870:	2302      	movs	r3, #2
 8007872:	73fb      	strb	r3, [r7, #15]
		NwkDiscoveryCnfFormat_t rsp;
		if (rpcLen < 1) {
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <processNwkDiscoveryCnf+0x24>
			printf("MT_RPC_ERR_LENGTH\n");
 800787a:	480e      	ldr	r0, [pc, #56]	; (80078b4 <processNwkDiscoveryCnf+0x58>)
 800787c:	f006 fb12 	bl	800dea4 <puts>
		}
		printf("rpcLen = %d\n", rpcLen);
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	4619      	mov	r1, r3
 8007884:	480c      	ldr	r0, [pc, #48]	; (80078b8 <processNwkDiscoveryCnf+0x5c>)
 8007886:	f006 fa87 	bl	800dd98 <iprintf>

		rsp.Status = rpcBuff[msgIdx++];
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	73fa      	strb	r2, [r7, #15]
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4413      	add	r3, r2
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	733b      	strb	r3, [r7, #12]

		mtZdoCbs.pfnZdoNwkDiscoveryCnf(&rsp);
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <processNwkDiscoveryCnf+0x54>)
 800789c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800789e:	f107 020c 	add.w	r2, r7, #12
 80078a2:	4610      	mov	r0, r2
 80078a4:	4798      	blx	r3
	}
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000f14 	.word	0x20000f14
 80078b4:	0801012c 	.word	0x0801012c
 80078b8:	08010140 	.word	0x08010140

080078bc <processLeaveInd>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processLeaveInd(uint8_t *rpcBuff, uint8_t rpcLen) {
 80078bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078c0:	b08b      	sub	sp, #44	; 0x2c
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	460b      	mov	r3, r1
 80078c8:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoLeaveInd) {
 80078ca:	4b42      	ldr	r3, [pc, #264]	; (80079d4 <processLeaveInd+0x118>)
 80078cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d07b      	beq.n	80079ca <processLeaveInd+0x10e>
		uint8_t msgIdx = 2;
 80078d2:	2302      	movs	r3, #2
 80078d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		LeaveIndFormat_t rsp;
		if (rpcLen < 13) {
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	2b0c      	cmp	r3, #12
 80078dc:	d802      	bhi.n	80078e4 <processLeaveInd+0x28>
			printf("MT_RPC_ERR_LENGTH\n");
 80078de:	483e      	ldr	r0, [pc, #248]	; (80079d8 <processLeaveInd+0x11c>)
 80078e0:	f006 fae0 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 80078e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	4413      	add	r3, r2
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078f4:	3301      	adds	r3, #1
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	440b      	add	r3, r1
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	021b      	lsls	r3, r3, #8
 8007900:	b29b      	uxth	r3, r3
 8007902:	4413      	add	r3, r2
 8007904:	b29b      	uxth	r3, r3
 8007906:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8007908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800790c:	3302      	adds	r3, #2
 800790e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		rsp.ExtAddr = 0;
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	f04f 0300 	mov.w	r3, #0
 800791a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 800791e:	2300      	movs	r3, #0
 8007920:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007924:	e029      	b.n	800797a <processLeaveInd+0xbe>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8007926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8007930:	461a      	mov	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4413      	add	r3, r2
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	b2da      	uxtb	r2, r3
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007942:	00c9      	lsls	r1, r1, #3
 8007944:	f1a1 0620 	sub.w	r6, r1, #32
 8007948:	f1c1 0020 	rsb	r0, r1, #32
 800794c:	fa03 f501 	lsl.w	r5, r3, r1
 8007950:	fa02 f606 	lsl.w	r6, r2, r6
 8007954:	4335      	orrs	r5, r6
 8007956:	fa22 f000 	lsr.w	r0, r2, r0
 800795a:	4305      	orrs	r5, r0
 800795c:	fa02 f401 	lsl.w	r4, r2, r1
 8007960:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007964:	ea44 0802 	orr.w	r8, r4, r2
 8007968:	ea45 0903 	orr.w	r9, r5, r3
 800796c:	e9c7 8904 	strd	r8, r9, [r7, #16]
		for (i = 0; i < 8; i++) {
 8007970:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007974:	3301      	adds	r3, #1
 8007976:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800797a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800797e:	2b07      	cmp	r3, #7
 8007980:	d9d1      	bls.n	8007926 <processLeaveInd+0x6a>
		}
		rsp.Request = rpcBuff[msgIdx++];
 8007982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800798c:	461a      	mov	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4413      	add	r3, r2
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	763b      	strb	r3, [r7, #24]
		rsp.Remove = rpcBuff[msgIdx++];
 8007996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80079a0:	461a      	mov	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4413      	add	r3, r2
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	767b      	strb	r3, [r7, #25]
		rsp.Rejoin = rpcBuff[msgIdx++];
 80079aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80079b4:	461a      	mov	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4413      	add	r3, r2
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	76bb      	strb	r3, [r7, #26]

		mtZdoCbs.pfnZdoLeaveInd(&rsp);
 80079be:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <processLeaveInd+0x118>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	f107 0208 	add.w	r2, r7, #8
 80079c6:	4610      	mov	r0, r2
 80079c8:	4798      	blx	r3
	}
}
 80079ca:	bf00      	nop
 80079cc:	372c      	adds	r7, #44	; 0x2c
 80079ce:	46bd      	mov	sp, r7
 80079d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079d4:	20000f14 	.word	0x20000f14
 80079d8:	0801012c 	.word	0x0801012c

080079dc <processMsgCbIncoming>:
 * @param    rpcBuff - Buffer from rpc layer, contains command data
 * @param    rpcLen - Length of rpcBuff
 *
 * @return
 */
static void processMsgCbIncoming(uint8_t *rpcBuff, uint8_t rpcLen) {
 80079dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079e0:	b08d      	sub	sp, #52	; 0x34
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	70fb      	strb	r3, [r7, #3]
	if (mtZdoCbs.pfnZdoMsgCbIncoming) {
 80079ea:	4b6b      	ldr	r3, [pc, #428]	; (8007b98 <processMsgCbIncoming+0x1bc>)
 80079ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 80cd 	beq.w	8007b8e <processMsgCbIncoming+0x1b2>
		uint8_t msgIdx = 2;
 80079f4:	2302      	movs	r3, #2
 80079f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		MsgCbIncomingFormat_t rsp;
		if (rpcLen < 9) {
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d802      	bhi.n	8007a06 <processMsgCbIncoming+0x2a>
			printf("MT_RPC_ERR_LENGTH\n");
 8007a00:	4866      	ldr	r0, [pc, #408]	; (8007b9c <processMsgCbIncoming+0x1c0>)
 8007a02:	f006 fa4f 	bl	800dea4 <puts>

		}
		//printf("rpcLen = %d\n", rpcLen);

		rsp.SrcAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a16:	3301      	adds	r3, #1
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	440b      	add	r3, r1
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	4413      	add	r3, r2
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	813b      	strh	r3, [r7, #8]
		msgIdx += 2;
 8007a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a2e:	3302      	adds	r3, #2
 8007a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		rsp.WasBroadcast = rpcBuff[msgIdx++];
 8007a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4413      	add	r3, r2
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	72bb      	strb	r3, [r7, #10]
		rsp.ClusterID = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007a48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4413      	add	r3, r2
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a58:	3301      	adds	r3, #1
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	440b      	add	r3, r1
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	4413      	add	r3, r2
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	81bb      	strh	r3, [r7, #12]
		msgIdx += 2;
 8007a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a70:	3302      	adds	r3, #2
 8007a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		rsp.SecurityUse = rpcBuff[msgIdx++];
 8007a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007a80:	461a      	mov	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	73bb      	strb	r3, [r7, #14]
		rsp.SeqNum = rpcBuff[msgIdx++];
 8007a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007a94:	461a      	mov	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	73fb      	strb	r3, [r7, #15]
		rsp.MacDstAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007aae:	3301      	adds	r3, #1
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	440b      	add	r3, r1
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	4413      	add	r3, r2
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	823b      	strh	r3, [r7, #16]
		msgIdx += 2;
 8007ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ac6:	3302      	adds	r3, #2
 8007ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		rsp.Status = rpcBuff[msgIdx++];
 8007acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4413      	add	r3, r2
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	74bb      	strb	r3, [r7, #18]
		rsp.ExtAddr = 0;
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		uint8_t i;
		for (i = 0; i < 8; i++) {
 8007aec:	2300      	movs	r3, #0
 8007aee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007af2:	e029      	b.n	8007b48 <processMsgCbIncoming+0x16c>
			rsp.ExtAddr |= ((uint64_t) rpcBuff[msgIdx++]) << (i * 8);
 8007af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007afe:	461a      	mov	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4413      	add	r3, r2
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8007b10:	00c9      	lsls	r1, r1, #3
 8007b12:	f1a1 0620 	sub.w	r6, r1, #32
 8007b16:	f1c1 0020 	rsb	r0, r1, #32
 8007b1a:	fa03 f501 	lsl.w	r5, r3, r1
 8007b1e:	fa02 f606 	lsl.w	r6, r2, r6
 8007b22:	4335      	orrs	r5, r6
 8007b24:	fa22 f000 	lsr.w	r0, r2, r0
 8007b28:	4305      	orrs	r5, r0
 8007b2a:	fa02 f401 	lsl.w	r4, r2, r1
 8007b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b32:	ea44 0802 	orr.w	r8, r4, r2
 8007b36:	ea45 0903 	orr.w	r9, r5, r3
 8007b3a:	e9c7 8906 	strd	r8, r9, [r7, #24]
		for (i = 0; i < 8; i++) {
 8007b3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b42:	3301      	adds	r3, #1
 8007b44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007b48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b4c:	2b07      	cmp	r3, #7
 8007b4e:	d9d1      	bls.n	8007af4 <processMsgCbIncoming+0x118>
		}
		rsp.NwkAddr = BUILD_UINT16(rpcBuff[msgIdx], rpcBuff[msgIdx + 1]);
 8007b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	4413      	add	r3, r2
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b60:	3301      	adds	r3, #1
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	440b      	add	r3, r1
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	021b      	lsls	r3, r3, #8
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	4413      	add	r3, r2
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	843b      	strh	r3, [r7, #32]
		rsp.NotUsed = rpcBuff[msgIdx];
 8007b74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		mtZdoCbs.pfnZdoMsgCbIncoming(&rsp);
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <processMsgCbIncoming+0x1bc>)
 8007b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b86:	f107 0208 	add.w	r2, r7, #8
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	4798      	blx	r3
	}
}
 8007b8e:	bf00      	nop
 8007b90:	3734      	adds	r7, #52	; 0x34
 8007b92:	46bd      	mov	sp, r7
 8007b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b98:	20000f14 	.word	0x20000f14
 8007b9c:	0801012c 	.word	0x0801012c

08007ba0 <zdoProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 ***********************************************************************************************/
void zdoProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
	dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: processing CMD0:%x, CMD1:%x\n", rpcBuff[0], rpcBuff[1]);

	//process the synchronous SRSP from SREQ
	if ((rpcBuff[0] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007bb4:	2b60      	cmp	r3, #96	; 0x60
 8007bb6:	d105      	bne.n	8007bc4 <zdoProcess+0x24>
		processSrsp(rpcBuff, rpcLen);
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f9d7 	bl	8007f70 <processSrsp>
			default:
				dbg_print(PRINT_LEVEL_WARNING, "zdoProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
				break;
		}
	}
}
 8007bc2:	e1ce      	b.n	8007f62 <zdoProcess+0x3c2>
		switch (rpcBuff[1]) {
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	3b80      	subs	r3, #128	; 0x80
 8007bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8007bce:	f200 81bd 	bhi.w	8007f4c <zdoProcess+0x3ac>
 8007bd2:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <zdoProcess+0x38>)
 8007bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd8:	08007de5 	.word	0x08007de5
 8007bdc:	08007df1 	.word	0x08007df1
 8007be0:	08007dfd 	.word	0x08007dfd
 8007be4:	08007e09 	.word	0x08007e09
 8007be8:	08007e15 	.word	0x08007e15
 8007bec:	08007e21 	.word	0x08007e21
 8007bf0:	08007e2d 	.word	0x08007e2d
 8007bf4:	08007f4d 	.word	0x08007f4d
 8007bf8:	08007f4d 	.word	0x08007f4d
 8007bfc:	08007f4d 	.word	0x08007f4d
 8007c00:	08007f4d 	.word	0x08007f4d
 8007c04:	08007f4d 	.word	0x08007f4d
 8007c08:	08007f4d 	.word	0x08007f4d
 8007c0c:	08007f4d 	.word	0x08007f4d
 8007c10:	08007f4d 	.word	0x08007f4d
 8007c14:	08007f4d 	.word	0x08007f4d
 8007c18:	08007e39 	.word	0x08007e39
 8007c1c:	08007e45 	.word	0x08007e45
 8007c20:	08007f4d 	.word	0x08007f4d
 8007c24:	08007f4d 	.word	0x08007f4d
 8007c28:	08007e51 	.word	0x08007e51
 8007c2c:	08007e5d 	.word	0x08007e5d
 8007c30:	08007f4d 	.word	0x08007f4d
 8007c34:	08007f4d 	.word	0x08007f4d
 8007c38:	08007f4d 	.word	0x08007f4d
 8007c3c:	08007f4d 	.word	0x08007f4d
 8007c40:	08007f4d 	.word	0x08007f4d
 8007c44:	08007f4d 	.word	0x08007f4d
 8007c48:	08007f4d 	.word	0x08007f4d
 8007c4c:	08007f4d 	.word	0x08007f4d
 8007c50:	08007f4d 	.word	0x08007f4d
 8007c54:	08007f4d 	.word	0x08007f4d
 8007c58:	08007e69 	.word	0x08007e69
 8007c5c:	08007e75 	.word	0x08007e75
 8007c60:	08007e81 	.word	0x08007e81
 8007c64:	08007f4d 	.word	0x08007f4d
 8007c68:	08007f4d 	.word	0x08007f4d
 8007c6c:	08007f4d 	.word	0x08007f4d
 8007c70:	08007f4d 	.word	0x08007f4d
 8007c74:	08007f4d 	.word	0x08007f4d
 8007c78:	08007f4d 	.word	0x08007f4d
 8007c7c:	08007f4d 	.word	0x08007f4d
 8007c80:	08007f4d 	.word	0x08007f4d
 8007c84:	08007f4d 	.word	0x08007f4d
 8007c88:	08007f4d 	.word	0x08007f4d
 8007c8c:	08007f4d 	.word	0x08007f4d
 8007c90:	08007f4d 	.word	0x08007f4d
 8007c94:	08007f4d 	.word	0x08007f4d
 8007c98:	08007e8d 	.word	0x08007e8d
 8007c9c:	08007e99 	.word	0x08007e99
 8007ca0:	08007ea5 	.word	0x08007ea5
 8007ca4:	08007eb1 	.word	0x08007eb1
 8007ca8:	08007ebd 	.word	0x08007ebd
 8007cac:	08007ec9 	.word	0x08007ec9
 8007cb0:	08007ed5 	.word	0x08007ed5
 8007cb4:	08007f4d 	.word	0x08007f4d
 8007cb8:	08007f4d 	.word	0x08007f4d
 8007cbc:	08007f4d 	.word	0x08007f4d
 8007cc0:	08007f4d 	.word	0x08007f4d
 8007cc4:	08007f4d 	.word	0x08007f4d
 8007cc8:	08007f4d 	.word	0x08007f4d
 8007ccc:	08007f4d 	.word	0x08007f4d
 8007cd0:	08007f4d 	.word	0x08007f4d
 8007cd4:	08007f4d 	.word	0x08007f4d
 8007cd8:	08007dd9 	.word	0x08007dd9
 8007cdc:	08007ee1 	.word	0x08007ee1
 8007ce0:	08007eed 	.word	0x08007eed
 8007ce4:	08007ef9 	.word	0x08007ef9
 8007ce8:	08007f05 	.word	0x08007f05
 8007cec:	08007f11 	.word	0x08007f11
 8007cf0:	08007f1d 	.word	0x08007f1d
 8007cf4:	08007f29 	.word	0x08007f29
 8007cf8:	08007f4d 	.word	0x08007f4d
 8007cfc:	08007f35 	.word	0x08007f35
 8007d00:	08007f4d 	.word	0x08007f4d
 8007d04:	08007f4d 	.word	0x08007f4d
 8007d08:	08007f4d 	.word	0x08007f4d
 8007d0c:	08007f4d 	.word	0x08007f4d
 8007d10:	08007f4d 	.word	0x08007f4d
 8007d14:	08007f4d 	.word	0x08007f4d
 8007d18:	08007f4d 	.word	0x08007f4d
 8007d1c:	08007f4d 	.word	0x08007f4d
 8007d20:	08007f4d 	.word	0x08007f4d
 8007d24:	08007f4d 	.word	0x08007f4d
 8007d28:	08007f4d 	.word	0x08007f4d
 8007d2c:	08007f4d 	.word	0x08007f4d
 8007d30:	08007f4d 	.word	0x08007f4d
 8007d34:	08007f4d 	.word	0x08007f4d
 8007d38:	08007f4d 	.word	0x08007f4d
 8007d3c:	08007f4d 	.word	0x08007f4d
 8007d40:	08007f4d 	.word	0x08007f4d
 8007d44:	08007f4d 	.word	0x08007f4d
 8007d48:	08007f4d 	.word	0x08007f4d
 8007d4c:	08007f4d 	.word	0x08007f4d
 8007d50:	08007f4d 	.word	0x08007f4d
 8007d54:	08007f4d 	.word	0x08007f4d
 8007d58:	08007f4d 	.word	0x08007f4d
 8007d5c:	08007f4d 	.word	0x08007f4d
 8007d60:	08007f4d 	.word	0x08007f4d
 8007d64:	08007f4d 	.word	0x08007f4d
 8007d68:	08007f4d 	.word	0x08007f4d
 8007d6c:	08007f4d 	.word	0x08007f4d
 8007d70:	08007f4d 	.word	0x08007f4d
 8007d74:	08007f4d 	.word	0x08007f4d
 8007d78:	08007f4d 	.word	0x08007f4d
 8007d7c:	08007f4d 	.word	0x08007f4d
 8007d80:	08007f4d 	.word	0x08007f4d
 8007d84:	08007f4d 	.word	0x08007f4d
 8007d88:	08007f4d 	.word	0x08007f4d
 8007d8c:	08007f4d 	.word	0x08007f4d
 8007d90:	08007f4d 	.word	0x08007f4d
 8007d94:	08007f4d 	.word	0x08007f4d
 8007d98:	08007f4d 	.word	0x08007f4d
 8007d9c:	08007f4d 	.word	0x08007f4d
 8007da0:	08007f4d 	.word	0x08007f4d
 8007da4:	08007f4d 	.word	0x08007f4d
 8007da8:	08007f4d 	.word	0x08007f4d
 8007dac:	08007f4d 	.word	0x08007f4d
 8007db0:	08007f4d 	.word	0x08007f4d
 8007db4:	08007f4d 	.word	0x08007f4d
 8007db8:	08007f4d 	.word	0x08007f4d
 8007dbc:	08007f4d 	.word	0x08007f4d
 8007dc0:	08007f4d 	.word	0x08007f4d
 8007dc4:	08007f4d 	.word	0x08007f4d
 8007dc8:	08007f4d 	.word	0x08007f4d
 8007dcc:	08007f4d 	.word	0x08007f4d
 8007dd0:	08007f4d 	.word	0x08007f4d
 8007dd4:	08007f41 	.word	0x08007f41
				processStateChange(rpcBuff, rpcLen);
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7fd fa85 	bl	80052ec <processStateChange>
				break;
 8007de2:	e0be      	b.n	8007f62 <zdoProcess+0x3c2>
				processNwkAddrRsp(rpcBuff, rpcLen);
 8007de4:	78fb      	ldrb	r3, [r7, #3]
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7fd fbf3 	bl	80055d4 <processNwkAddrRsp>
				break;
 8007dee:	e0b8      	b.n	8007f62 <zdoProcess+0x3c2>
				processIeeeAddrRsp(rpcBuff, rpcLen);
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7fd fcaf 	bl	8005758 <processIeeeAddrRsp>
				break;
 8007dfa:	e0b2      	b.n	8007f62 <zdoProcess+0x3c2>
				processNodeDescRsp(rpcBuff, rpcLen);
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7fd fd73 	bl	80058ec <processNodeDescRsp>
				break;
 8007e06:	e0ac      	b.n	8007f62 <zdoProcess+0x3c2>
				processPowerDescRsp(rpcBuff, rpcLen);
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fd fe31 	bl	8005a74 <processPowerDescRsp>
				break;
 8007e12:	e0a6      	b.n	8007f62 <zdoProcess+0x3c2>
				processSimpleDescRsp(rpcBuff, rpcLen);
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7fd fe89 	bl	8005b30 <processSimpleDescRsp>
				break;
 8007e1e:	e0a0      	b.n	8007f62 <zdoProcess+0x3c2>
				processActiveEpRsp(rpcBuff, rpcLen);
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7fd ff95 	bl	8005d54 <processActiveEpRsp>
				break;
 8007e2a:	e09a      	b.n	8007f62 <zdoProcess+0x3c2>
				processMatchDescRsp(rpcBuff, rpcLen);
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7fe f80f 	bl	8005e54 <processMatchDescRsp>
				break;
 8007e36:	e094      	b.n	8007f62 <zdoProcess+0x3c2>
				processComplexDescRsp(rpcBuff, rpcLen);
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fe f889 	bl	8005f54 <processComplexDescRsp>
				break;
 8007e42:	e08e      	b.n	8007f62 <zdoProcess+0x3c2>
				processUserDescRsp(rpcBuff, rpcLen);
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7fe f903 	bl	8006054 <processUserDescRsp>
				break;
 8007e4e:	e088      	b.n	8007f62 <zdoProcess+0x3c2>
				processUserDescConf(rpcBuff, rpcLen);
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fe f97d 	bl	8006154 <processUserDescConf>
				break;
 8007e5a:	e082      	b.n	8007f62 <zdoProcess+0x3c2>
				processServerDiscRsp(rpcBuff, rpcLen);
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fe f9c5 	bl	80061f0 <processServerDiscRsp>
				break;
 8007e66:	e07c      	b.n	8007f62 <zdoProcess+0x3c2>
				processEndDeviceBindRsp(rpcBuff, rpcLen);
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fe fa0d 	bl	800628c <processEndDeviceBindRsp>
				break;
 8007e72:	e076      	b.n	8007f62 <zdoProcess+0x3c2>
				processBindRsp(rpcBuff, rpcLen);
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7fe fa43 	bl	8006304 <processBindRsp>
				break;
 8007e7e:	e070      	b.n	8007f62 <zdoProcess+0x3c2>
				processUnbindRsp(rpcBuff, rpcLen);
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7fe fa79 	bl	800637c <processUnbindRsp>
				break;
 8007e8a:	e06a      	b.n	8007f62 <zdoProcess+0x3c2>
				processMgmtNwkDiscRsp(rpcBuff, rpcLen);
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7fe faaf 	bl	80063f4 <processMgmtNwkDiscRsp>
				break;
 8007e96:	e064      	b.n	8007f62 <zdoProcess+0x3c2>
				processMgmtLqiRsp(rpcBuff, rpcLen);
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7fe fbd7 	bl	8006650 <processMgmtLqiRsp>
				break;
 8007ea2:	e05e      	b.n	8007f62 <zdoProcess+0x3c2>
				processMgmtRtgRsp(rpcBuff, rpcLen);
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7fe fdad 	bl	8006a08 <processMgmtRtgRsp>
				break;
 8007eae:	e058      	b.n	8007f62 <zdoProcess+0x3c2>
				processMgmtBindRsp(rpcBuff, rpcLen);
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7fe fe8f 	bl	8006bd8 <processMgmtBindRsp>
				break;
 8007eba:	e052      	b.n	8007f62 <zdoProcess+0x3c2>
				processMgmtLeaveRsp(rpcBuff, rpcLen);
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff f817 	bl	8006ef4 <processMgmtLeaveRsp>
				break;
 8007ec6:	e04c      	b.n	8007f62 <zdoProcess+0x3c2>
				processMgmtDirectJoinRsp(rpcBuff, rpcLen);
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff f84d 	bl	8006f6c <processMgmtDirectJoinRsp>
				break;
 8007ed2:	e046      	b.n	8007f62 <zdoProcess+0x3c2>
				processMgmtPermitJoinRsp(rpcBuff, rpcLen);
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff f883 	bl	8006fe4 <processMgmtPermitJoinRsp>
				break;
 8007ede:	e040      	b.n	8007f62 <zdoProcess+0x3c2>
				processEndDeviceAnnceInd(rpcBuff, rpcLen);
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff f8b9 	bl	800705c <processEndDeviceAnnceInd>
				break;
 8007eea:	e03a      	b.n	8007f62 <zdoProcess+0x3c2>
				processMatchDescRspSent(rpcBuff, rpcLen);
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff f947 	bl	8007184 <processMatchDescRspSent>
				break;
 8007ef6:	e034      	b.n	8007f62 <zdoProcess+0x3c2>
				processStatusErrorRsp(rpcBuff, rpcLen);
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff f9e1 	bl	80072c4 <processStatusErrorRsp>
				break;
 8007f02:	e02e      	b.n	8007f62 <zdoProcess+0x3c2>
				processSrcRtgInd(rpcBuff, rpcLen);
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff fa17 	bl	800733c <processSrcRtgInd>
				break;
 8007f0e:	e028      	b.n	8007f62 <zdoProcess+0x3c2>
				processBeaconNotifyInd(rpcBuff, rpcLen);
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7ff fa91 	bl	800743c <processBeaconNotifyInd>
				break;
 8007f1a:	e022      	b.n	8007f62 <zdoProcess+0x3c2>
				processJoinCnf(rpcBuff, rpcLen);
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff fc45 	bl	80077b0 <processJoinCnf>
				break;
 8007f26:	e01c      	b.n	8007f62 <zdoProcess+0x3c2>
				processNwkDiscoveryCnf(rpcBuff, rpcLen);
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff fc95 	bl	800785c <processNwkDiscoveryCnf>
				break;
 8007f32:	e016      	b.n	8007f62 <zdoProcess+0x3c2>
				processLeaveInd(rpcBuff, rpcLen);
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff fcbf 	bl	80078bc <processLeaveInd>
				break;
 8007f3e:	e010      	b.n	8007f62 <zdoProcess+0x3c2>
				processMsgCbIncoming(rpcBuff, rpcLen);
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff fd49 	bl	80079dc <processMsgCbIncoming>
				break;
 8007f4a:	e00a      	b.n	8007f62 <zdoProcess+0x3c2>
				dbg_print(PRINT_LEVEL_WARNING, "zdoProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	4619      	mov	r1, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3301      	adds	r3, #1
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4804      	ldr	r0, [pc, #16]	; (8007f6c <zdoProcess+0x3cc>)
 8007f5c:	f7f8 fbb0 	bl	80006c0 <log_print>
				break;
 8007f60:	bf00      	nop
}
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	08010150 	.word	0x08010150

08007f70 <processSrsp>:
 *
 * @param
 *
 * @return
 */
static void processSrsp(uint8_t *rpcBuff, uint8_t rpcLen) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
	//copies sresp to local buffer
	memcpy(srspRpcBuff, rpcBuff, rpcLen);
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	480b      	ldr	r0, [pc, #44]	; (8007fb0 <processSrsp+0x40>)
 8007f84:	f005 fef2 	bl	800dd6c <memcpy>
	//srspRpcLen = rpcLen;
	switch (rpcBuff[1]) {
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b25      	cmp	r3, #37	; 0x25
 8007f90:	d105      	bne.n	8007f9e <processSrsp+0x2e>
		case MT_ZDO_GET_LINK_KEY:
			dbg_print(PRINT_LEVEL_VERBOSE, "zdoProcess: MT_ZDO_GET_LINK_KEY\n");
			processGetLinkKey(rpcBuff, rpcLen);
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fd faa4 	bl	80054e4 <processGetLinkKey>
			break;
 8007f9c:	e003      	b.n	8007fa6 <processSrsp+0x36>
		default:
			dbg_print(PRINT_LEVEL_INFO, "processSrsp: unsupported message\n");
 8007f9e:	4805      	ldr	r0, [pc, #20]	; (8007fb4 <processSrsp+0x44>)
 8007fa0:	f7f8 fb8e 	bl	80006c0 <log_print>
			break;
 8007fa4:	bf00      	nop
	}
}
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	200050d8 	.word	0x200050d8
 8007fb4:	0801017c 	.word	0x0801017c

08007fb8 <zdoRegisterCallbacks>:
 *
 * @param
 *
 * @return
 */
void zdoRegisterCallbacks(mtZdoCb_t cbs) {
 8007fb8:	b084      	sub	sp, #16
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	f107 0c08 	add.w	ip, r7, #8
 8007fc2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&mtZdoCbs, &cbs, sizeof(mtZdoCb_t));
 8007fc6:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <zdoRegisterCallbacks+0x2c>)
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f107 0308 	add.w	r3, r7, #8
 8007fce:	2284      	movs	r2, #132	; 0x84
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f005 fecb 	bl	800dd6c <memcpy>
}
 8007fd6:	bf00      	nop
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fde:	b004      	add	sp, #16
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	20000f14 	.word	0x20000f14

08007fe8 <mtProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
void mtProcess(uint8_t *rpcBuff, uint8_t rpcLen) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
	//Read CMD0
	switch (rpcBuff[0] & MT_RPC_SUBSYSTEM_MASK) {
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	f003 031f 	and.w	r3, r3, #31
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	2b0e      	cmp	r3, #14
 8008000:	d844      	bhi.n	800808c <mtProcess+0xa4>
 8008002:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <mtProcess+0x20>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	08008051 	.word	0x08008051
 800800c:	0800808d 	.word	0x0800808d
 8008010:	0800808d 	.word	0x0800808d
 8008014:	0800805d 	.word	0x0800805d
 8008018:	08008045 	.word	0x08008045
 800801c:	08008069 	.word	0x08008069
 8008020:	08008075 	.word	0x08008075
 8008024:	0800808d 	.word	0x0800808d
 8008028:	0800808d 	.word	0x0800808d
 800802c:	0800808d 	.word	0x0800808d
 8008030:	0800808d 	.word	0x0800808d
 8008034:	0800808d 	.word	0x0800808d
 8008038:	0800808d 	.word	0x0800808d
 800803c:	0800808d 	.word	0x0800808d
 8008040:	08008081 	.word	0x08008081
		case MT_RPC_SYS_ZDO:
			//process ZDO RPC's in the ZDO module
			zdoProcess(rpcBuff, rpcLen);
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff fda9 	bl	8007ba0 <zdoProcess>
			break;
 800804e:	e01e      	b.n	800808e <mtProcess+0xa6>

		case MT_RPC_SYS_SYS:
			//process SYS RPC's in the Sys module
			sysProcess(rpcBuff, rpcLen);
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fc ffbb 	bl	8004fd0 <sysProcess>
			break;
 800805a:	e018      	b.n	800808e <mtProcess+0xa6>

		case MT_RPC_SYS_AF:
			//process SYS RPC's in the Sys module
			afProcess(rpcBuff, rpcLen);
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7fb fde3 	bl	8003c2c <afProcess>
			break;
 8008066:	e012      	b.n	800808e <mtProcess+0xa6>

		case MT_RPC_SYS_SAPI:
			//process SYS RPC's in the Sys module
			sapiProcess(rpcBuff, rpcLen);
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7fc fa31 	bl	80044d4 <sapiProcess>
			break;
 8008072:	e00c      	b.n	800808e <mtProcess+0xa6>

		case MT_RPC_SYS_UTIL:
			//process SYS RPC's in the Util module
			utilProcess(rpcBuff, rpcLen);
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7fd f8fd 	bl	8005278 <utilProcess>
			break;
 800807e:	e006      	b.n	800808e <mtProcess+0xa6>

		case MT_RPC_SYS_APP_CFG:
			//process SYS RPC's in the App Cfg module
			appCfgProcess(rpcBuff, rpcLen);
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7fb ff23 	bl	8003ed0 <appCfgProcess>
			break;
 800808a:	e000      	b.n	800808e <mtProcess+0xa6>

		default:
			dbg_print(PRINT_LEVEL_VERBOSE, "mtProcess: CMD0:%x, CMD1:%x, not handled\n", rpcBuff[0], rpcBuff[1]);

			break;
 800808c:	bf00      	nop
	}

}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop

08008098 <rpcTransportOpen>:
 *
 * @brief   opens the serial port to the CC253x.
 *
 * @return  status
 */
int32_t rpcTransportOpen(void) {
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
	// create queues
	rpc_q_uart_tx = xQueueCreate(256, sizeof(uint8_t));
 800809c:	2200      	movs	r2, #0
 800809e:	2101      	movs	r1, #1
 80080a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80080a4:	f003 fc1a 	bl	800b8dc <xQueueGenericCreate>
 80080a8:	4603      	mov	r3, r0
 80080aa:	4a10      	ldr	r2, [pc, #64]	; (80080ec <rpcTransportOpen+0x54>)
 80080ac:	6013      	str	r3, [r2, #0]
	rpc_q_uart_rx = xQueueCreate(256, sizeof(uint8_t));
 80080ae:	2200      	movs	r2, #0
 80080b0:	2101      	movs	r1, #1
 80080b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80080b6:	f003 fc11 	bl	800b8dc <xQueueGenericCreate>
 80080ba:	4603      	mov	r3, r0
 80080bc:	4a0c      	ldr	r2, [pc, #48]	; (80080f0 <rpcTransportOpen+0x58>)
 80080be:	6013      	str	r3, [r2, #0]

	// enable receive interrupt
	SET_BIT(hlpuart1.Instance->CR1, USART_CR1_RXNEIE);
 80080c0:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <rpcTransportOpen+0x5c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <rpcTransportOpen+0x5c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0220 	orr.w	r2, r2, #32
 80080ce:	601a      	str	r2, [r3, #0]

	// throw an error if one queue couldn't be created
	return (rpc_q_uart_tx == NULL || rpc_q_uart_rx == NULL) ? -1 : 0;
 80080d0:	4b06      	ldr	r3, [pc, #24]	; (80080ec <rpcTransportOpen+0x54>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <rpcTransportOpen+0x48>
 80080d8:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <rpcTransportOpen+0x58>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d102      	bne.n	80080e6 <rpcTransportOpen+0x4e>
 80080e0:	f04f 33ff 	mov.w	r3, #4294967295
 80080e4:	e000      	b.n	80080e8 <rpcTransportOpen+0x50>
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	20000f98 	.word	0x20000f98
 80080f0:	20000f9c 	.word	0x20000f9c
 80080f4:	20004fd4 	.word	0x20004fd4

080080f8 <rpcTransportISR>:
/*********************************************************************
 * @fn      rpcTransportISR
 *
 * @brief   Interrupt Service Routine for RPC uart
 */
void rpcTransportISR(void) {
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
	// read status register
	isr_stat = hlpuart1.Instance->ISR;
 80080fc:	4b23      	ldr	r3, [pc, #140]	; (800818c <rpcTransportISR+0x94>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	4a23      	ldr	r2, [pc, #140]	; (8008190 <rpcTransportISR+0x98>)
 8008104:	6013      	str	r3, [r2, #0]

	// overrun error?
	if (isr_stat & USART_ISR_ORE)
 8008106:	4b22      	ldr	r3, [pc, #136]	; (8008190 <rpcTransportISR+0x98>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d007      	beq.n	8008122 <rpcTransportISR+0x2a>
		hlpuart1.Instance->ICR |= USART_ICR_ORECF;
 8008112:	4b1e      	ldr	r3, [pc, #120]	; (800818c <rpcTransportISR+0x94>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6a1a      	ldr	r2, [r3, #32]
 8008118:	4b1c      	ldr	r3, [pc, #112]	; (800818c <rpcTransportISR+0x94>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0208 	orr.w	r2, r2, #8
 8008120:	621a      	str	r2, [r3, #32]

	// check for rx interrupt
	if (isr_stat & USART_ISR_RXNE) {
 8008122:	4b1b      	ldr	r3, [pc, #108]	; (8008190 <rpcTransportISR+0x98>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00d      	beq.n	800814a <rpcTransportISR+0x52>
		// read the data
		isr_data = hlpuart1.Instance->RDR & 0xFF;
 800812e:	4b17      	ldr	r3, [pc, #92]	; (800818c <rpcTransportISR+0x94>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008134:	b29b      	uxth	r3, r3
 8008136:	b2da      	uxtb	r2, r3
 8008138:	4b16      	ldr	r3, [pc, #88]	; (8008194 <rpcTransportISR+0x9c>)
 800813a:	701a      	strb	r2, [r3, #0]

		// Transmit data to queue
		xQueueSendFromISR(rpc_q_uart_rx, (void* ) &isr_data, NULL);
 800813c:	4b16      	ldr	r3, [pc, #88]	; (8008198 <rpcTransportISR+0xa0>)
 800813e:	6818      	ldr	r0, [r3, #0]
 8008140:	2300      	movs	r3, #0
 8008142:	2200      	movs	r2, #0
 8008144:	4913      	ldr	r1, [pc, #76]	; (8008194 <rpcTransportISR+0x9c>)
 8008146:	f003 fd2b 	bl	800bba0 <xQueueGenericSendFromISR>
	}

	// check for data to send
	if (isr_stat & USART_ISR_TC) {
 800814a:	4b11      	ldr	r3, [pc, #68]	; (8008190 <rpcTransportISR+0x98>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	d018      	beq.n	8008188 <rpcTransportISR+0x90>
		// grab data from fifo
		if (xQueueReceiveFromISR(rpc_q_uart_tx, (void*) &isr_data, NULL) == pdFALSE) {
 8008156:	4b11      	ldr	r3, [pc, #68]	; (800819c <rpcTransportISR+0xa4>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2200      	movs	r2, #0
 800815c:	490d      	ldr	r1, [pc, #52]	; (8008194 <rpcTransportISR+0x9c>)
 800815e:	4618      	mov	r0, r3
 8008160:	f003 ffa2 	bl	800c0a8 <xQueueReceiveFromISR>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d108      	bne.n	800817c <rpcTransportISR+0x84>
			// end of transmission, disable TX empty interrupt
			CLEAR_BIT(hlpuart1.Instance->CR1, USART_CR1_TCIE);
 800816a:	4b08      	ldr	r3, [pc, #32]	; (800818c <rpcTransportISR+0x94>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	4b06      	ldr	r3, [pc, #24]	; (800818c <rpcTransportISR+0x94>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008178:	601a      	str	r2, [r3, #0]
		else {
			// send another byte
			hlpuart1.Instance->TDR = isr_data;
		}
	}
}
 800817a:	e005      	b.n	8008188 <rpcTransportISR+0x90>
			hlpuart1.Instance->TDR = isr_data;
 800817c:	4b05      	ldr	r3, [pc, #20]	; (8008194 <rpcTransportISR+0x9c>)
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <rpcTransportISR+0x94>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	b292      	uxth	r2, r2
 8008186:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8008188:	bf00      	nop
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20004fd4 	.word	0x20004fd4
 8008190:	20000fa0 	.word	0x20000fa0
 8008194:	20000fa4 	.word	0x20000fa4
 8008198:	20000f9c 	.word	0x20000f9c
 800819c:	20000f98 	.word	0x20000f98

080081a0 <rpcTransportWrite>:
 * @param   buf - Buffer for data to be placed in
 * @param   len - Length of the given buffer
 *
 * @return  status
 */
void rpcTransportWrite(uint8_t *buf, uint8_t len) {
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70fb      	strb	r3, [r7, #3]
	for (uint16_t i = 0; i < len; i++) {
 80081ac:	2300      	movs	r3, #0
 80081ae:	81fb      	strh	r3, [r7, #14]
 80081b0:	e01b      	b.n	80081ea <rpcTransportWrite+0x4a>
		// add data to tx queue
		xQueueSend(rpc_q_uart_tx, (void* ) &buf[i], 1);
 80081b2:	4b13      	ldr	r3, [pc, #76]	; (8008200 <rpcTransportWrite+0x60>)
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	89fb      	ldrh	r3, [r7, #14]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	18d1      	adds	r1, r2, r3
 80081bc:	2300      	movs	r3, #0
 80081be:	2201      	movs	r2, #1
 80081c0:	f003 fbf0 	bl	800b9a4 <xQueueGenericSend>

		// enable "RX Not Empty" and "TX Empty" interrupt
		SET_BIT(hlpuart1.Instance->CR1, USART_CR1_RXNEIE);
 80081c4:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <rpcTransportWrite+0x64>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	4b0e      	ldr	r3, [pc, #56]	; (8008204 <rpcTransportWrite+0x64>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0220 	orr.w	r2, r2, #32
 80081d2:	601a      	str	r2, [r3, #0]
		SET_BIT(hlpuart1.Instance->CR1, USART_CR1_TCIE);
 80081d4:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <rpcTransportWrite+0x64>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <rpcTransportWrite+0x64>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081e2:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < len; i++) {
 80081e4:	89fb      	ldrh	r3, [r7, #14]
 80081e6:	3301      	adds	r3, #1
 80081e8:	81fb      	strh	r3, [r7, #14]
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	89fa      	ldrh	r2, [r7, #14]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d3de      	bcc.n	80081b2 <rpcTransportWrite+0x12>
	}
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000f98 	.word	0x20000f98
 8008204:	20004fd4 	.word	0x20004fd4

08008208 <rpcTransportRead>:
 * @param   buf - Buffer for data to be placed in
 * @param   len - Length of the given buffer
 *
 * @return  amount of bytes read
 */
uint8_t rpcTransportRead(uint8_t *buf, uint8_t len) {
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
	int index = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	60fb      	str	r3, [r7, #12]

	// keep waiting for data btyes
	while (xQueueReceive(rpc_q_uart_rx, &buf[index], 1) == pdTRUE) {
 8008218:	e006      	b.n	8008228 <rpcTransportRead+0x20>
		// increment position in buffer
		index++;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]

		// all data received?
		if (index == len)
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	429a      	cmp	r2, r3
 8008226:	d00c      	beq.n	8008242 <rpcTransportRead+0x3a>
	while (xQueueReceive(rpc_q_uart_rx, &buf[index], 1) == pdTRUE) {
 8008228:	4b09      	ldr	r3, [pc, #36]	; (8008250 <rpcTransportRead+0x48>)
 800822a:	6818      	ldr	r0, [r3, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	4413      	add	r3, r2
 8008232:	2201      	movs	r2, #1
 8008234:	4619      	mov	r1, r3
 8008236:	f003 fd4b 	bl	800bcd0 <xQueueReceive>
 800823a:	4603      	mov	r3, r0
 800823c:	2b01      	cmp	r3, #1
 800823e:	d0ec      	beq.n	800821a <rpcTransportRead+0x12>
 8008240:	e000      	b.n	8008244 <rpcTransportRead+0x3c>
			break;
 8008242:	bf00      	nop
	}

	// return the amount of data read
	return index;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	b2db      	uxtb	r3, r3
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20000f9c 	.word	0x20000f9c

08008254 <rpcOpen>:
 *
 * @param   devicePath - path to the UART device
 *
 * @return  status
 */
int32_t rpcOpen(void) {
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
	// open RPC transport (create communication queues)
	if (rpcTransportOpen() < 0) {
 8008258:	f7ff ff1e 	bl	8008098 <rpcTransportOpen>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	da05      	bge.n	800826e <rpcOpen+0x1a>
		dbg_print(PRINT_LEVEL_ERROR, "rpcOpen: device open failed\n");
 8008262:	4809      	ldr	r0, [pc, #36]	; (8008288 <rpcOpen+0x34>)
 8008264:	f7f8 fa2c 	bl	80006c0 <log_print>
		return (-1);
 8008268:	f04f 33ff 	mov.w	r3, #4294967295
 800826c:	e00a      	b.n	8008284 <rpcOpen+0x30>
	}

	// create binary semaphore
	srspSem = xSemaphoreCreateBinary();
 800826e:	2203      	movs	r2, #3
 8008270:	2100      	movs	r1, #0
 8008272:	2001      	movs	r0, #1
 8008274:	f003 fb32 	bl	800b8dc <xQueueGenericCreate>
 8008278:	4603      	mov	r3, r0
 800827a:	4a04      	ldr	r2, [pc, #16]	; (800828c <rpcOpen+0x38>)
 800827c:	6013      	str	r3, [r2, #0]

	// send force run command to CC2530
	rpcForceRun();
 800827e:	f000 f849 	bl	8008314 <rpcForceRun>

	// return result
	return 0;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	bd80      	pop	{r7, pc}
 8008288:	080101a0 	.word	0x080101a0
 800828c:	20000fa8 	.word	0x20000fa8

08008290 <rpcInitMq>:
 *
 * @param   -
 *
 * @return  status
 */
int32_t rpcInitMq(void) {
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
	llq_open(&rpcLlq);
 8008294:	4802      	ldr	r0, [pc, #8]	; (80082a0 <rpcInitMq+0x10>)
 8008296:	f000 fa62 	bl	800875e <llq_open>
	return 0;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000fb0 	.word	0x20000fb0

080082a4 <rpcWaitMqClientMsg>:
 *
 * @param   -
 *
 * @return  status
 */
int32_t rpcWaitMqClientMsg(uint32_t timeout) {
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b0c4      	sub	sp, #272	; 0x110
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	1d3b      	adds	r3, r7, #4
 80082ac:	6018      	str	r0, [r3, #0]
	uint8_t rpcFrame[RPC_MAX_LEN + 1];
	int32_t rpcLen;

	rpcLen = llq_timedreceive(&rpcLlq, (char*) rpcFrame, RPC_MAX_LEN + 1, timeout);
 80082ae:	1d3b      	adds	r3, r7, #4
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f107 0108 	add.w	r1, r7, #8
 80082b6:	f240 1201 	movw	r2, #257	; 0x101
 80082ba:	4813      	ldr	r0, [pc, #76]	; (8008308 <rpcWaitMqClientMsg+0x64>)
 80082bc:	f000 fa60 	bl	8008780 <llq_timedreceive>
 80082c0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	if (rpcLen != -1) {
 80082c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082cc:	d00f      	beq.n	80082ee <rpcWaitMqClientMsg+0x4a>
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: processing MT[%d]\n", rpcLen);
 80082ce:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80082d2:	480e      	ldr	r0, [pc, #56]	; (800830c <rpcWaitMqClientMsg+0x68>)
 80082d4:	f7f8 f9f4 	bl	80006c0 <log_print>
		// process incoming message
		mtProcess(rpcFrame, rpcLen);
 80082d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	f107 0308 	add.w	r3, r7, #8
 80082e2:	4611      	mov	r1, r2
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff fe7f 	bl	8007fe8 <mtProcess>
	else {
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: Timed out [%d]\n", rpcLen);
		return -1;
	}

	return 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	e006      	b.n	80082fc <rpcWaitMqClientMsg+0x58>
		dbg_print(PRINT_LEVEL_INFO, "rpcWaitMqClientMsg: Timed out [%d]\n", rpcLen);
 80082ee:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80082f2:	4807      	ldr	r0, [pc, #28]	; (8008310 <rpcWaitMqClientMsg+0x6c>)
 80082f4:	f7f8 f9e4 	bl	80006c0 <log_print>
		return -1;
 80082f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000fb0 	.word	0x20000fb0
 800830c:	08010200 	.word	0x08010200
 8008310:	08010228 	.word	0x08010228

08008314 <rpcForceRun>:
 *
 * @param   -
 *
 * @return  -
 */
void rpcForceRun(void) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
	uint8_t forceBoot = SB_FORCE_RUN;
 800831a:	2307      	movs	r3, #7
 800831c:	71fb      	strb	r3, [r7, #7]

	// send the bootloader force boot incase we have a bootloader that waits
	rpcTransportWrite(&forceBoot, 1);
 800831e:	1dfb      	adds	r3, r7, #7
 8008320:	2101      	movs	r1, #1
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff ff3c 	bl	80081a0 <rpcTransportWrite>
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <rpcProcess>:
 *
 * @param   none
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
int32_t rpcProcess(void) {
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b0c3      	sub	sp, #268	; 0x10c
 8008334:	af00      	add	r7, sp, #0
	uint8_t rpcLen, rpcTempLen, bytesRead, sofByte, rpcBuffIdx;
	uint8_t retryAttempts = 0, len, rpcBuff[RPC_MAX_LEN];
 8008336:	2300      	movs	r3, #0
 8008338:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t fcs;

	//read first byte and check it is a SOF
	bytesRead = rpcTransportRead(&sofByte, 1);
 800833c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008340:	2101      	movs	r1, #1
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff ff60 	bl	8008208 <rpcTransportRead>
 8008348:	4603      	mov	r3, r0
 800834a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

	// did we recieve SOF?
	if ((sofByte == MT_RPC_SOF) && (bytesRead == 1))
 800834e:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8008352:	2bfe      	cmp	r3, #254	; 0xfe
 8008354:	f040 80fc 	bne.w	8008550 <rpcProcess+0x220>
 8008358:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800835c:	2b01      	cmp	r3, #1
 800835e:	f040 80f7 	bne.w	8008550 <rpcProcess+0x220>
	{
		// clear retry counter
		retryAttempts = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

		// read length byte
		bytesRead = rpcTransportRead(&rpcLen, 1);
 8008368:	f207 1301 	addw	r3, r7, #257	; 0x101
 800836c:	2101      	movs	r1, #1
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff ff4a 	bl	8008208 <rpcTransportRead>
 8008374:	4603      	mov	r3, r0
 8008376:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

		if (bytesRead == 1) {
 800837a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800837e:	2b01      	cmp	r3, #1
 8008380:	f040 80e0 	bne.w	8008544 <rpcProcess+0x214>
			len = rpcLen;
 8008384:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8008388:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			rpcBuff[0] = rpcLen;
 800838c:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
 8008390:	463b      	mov	r3, r7
 8008392:	701a      	strb	r2, [r3, #0]

			//allocating RPC payload (+ cmd0, cmd1 and fcs)
			rpcLen += RPC_CMD0_FIELD_LEN + RPC_CMD1_FIELD_LEN + RPC_UART_FCS_LEN;
 8008394:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8008398:	3303      	adds	r3, #3
 800839a:	b2db      	uxtb	r3, r3
 800839c:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101

			//non blocking read, so we need to wait for the rpc to be read
			rpcBuffIdx = 1;
 80083a0:	2301      	movs	r3, #1
 80083a2:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			rpcTempLen = rpcLen;
 80083a6:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80083aa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			while (rpcTempLen > 0) {
 80083ae:	e04d      	b.n	800844c <rpcProcess+0x11c>
				// read RPC frame
				bytesRead = rpcTransportRead(&(rpcBuff[rpcBuffIdx]), rpcTempLen);
 80083b0:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80083b4:	463a      	mov	r2, r7
 80083b6:	4413      	add	r3, r2
 80083b8:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f7ff ff22 	bl	8008208 <rpcTransportRead>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

				// check for error
				if (bytesRead > rpcTempLen) {
 80083ca:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 80083ce:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d922      	bls.n	800841c <rpcProcess+0xec>
					//there was an error
					dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: read of %d bytes failed - %s\n", rpcTempLen, strerror(errno));
 80083d6:	f897 4107 	ldrb.w	r4, [r7, #263]	; 0x107
 80083da:	f005 fc9d 	bl	800dd18 <__errno>
 80083de:	4603      	mov	r3, r0
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f005 ff4c 	bl	800e280 <strerror>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	4621      	mov	r1, r4
 80083ee:	485c      	ldr	r0, [pc, #368]	; (8008560 <rpcProcess+0x230>)
 80083f0:	f7f8 f966 	bl	80006c0 <log_print>

					// check whether retry limits has been reached
					if (retryAttempts++ < 5) {
 80083f4:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d806      	bhi.n	8008410 <rpcProcess+0xe0>
						// sleep for 10ms
						vTaskDelay(10);
 8008402:	200a      	movs	r0, #10
 8008404:	f004 f99a 	bl	800c73c <vTaskDelay>

						// try again
						bytesRead = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 800840e:	e005      	b.n	800841c <rpcProcess+0xec>
					}
					else {
						// something went wrong, abort
						dbg_print(PRINT_LEVEL_ERROR, "rpcProcess: transport read failed too many times\n");
 8008410:	4854      	ldr	r0, [pc, #336]	; (8008564 <rpcProcess+0x234>)
 8008412:	f7f8 f955 	bl	80006c0 <log_print>

						return -1;
 8008416:	f04f 33ff 	mov.w	r3, #4294967295
 800841a:	e09b      	b.n	8008554 <rpcProcess+0x224>
					}
				}

				// update counters
				if (rpcTempLen > bytesRead) {
 800841c:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8008420:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8008424:	429a      	cmp	r2, r3
 8008426:	d907      	bls.n	8008438 <rpcProcess+0x108>
					rpcTempLen -= bytesRead;
 8008428:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 800842c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8008436:	e002      	b.n	800843e <rpcProcess+0x10e>
				}
				else {
					rpcTempLen = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				}
				rpcBuffIdx += bytesRead;
 800843e:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8008442:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8008446:	4413      	add	r3, r2
 8008448:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			while (rpcTempLen > 0) {
 800844c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1ad      	bne.n	80083b0 <rpcProcess+0x80>
			}

			// print out incoming RPC frame
			printRpcMsg("SOC IN  <--", MT_RPC_SOF, len, &rpcBuff[1]);
 8008454:	463b      	mov	r3, r7
 8008456:	3301      	adds	r3, #1
 8008458:	f897 2103 	ldrb.w	r2, [r7, #259]	; 0x103
 800845c:	21fe      	movs	r1, #254	; 0xfe
 800845e:	4842      	ldr	r0, [pc, #264]	; (8008568 <rpcProcess+0x238>)
 8008460:	f000 f962 	bl	8008728 <printRpcMsg>

			//Verify FCS of incoming MT frames
			fcs = calcFcs(&rpcBuff[0], (len + 3));
 8008464:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8008468:	3303      	adds	r3, #3
 800846a:	b2da      	uxtb	r2, r3
 800846c:	463b      	mov	r3, r7
 800846e:	4611      	mov	r1, r2
 8008470:	4618      	mov	r0, r3
 8008472:	f000 f93d 	bl	80086f0 <calcFcs>
 8008476:	4603      	mov	r3, r0
 8008478:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
			if (rpcBuff[len + 3] != fcs) {
 800847c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8008480:	3303      	adds	r3, #3
 8008482:	463a      	mov	r2, r7
 8008484:	5cd3      	ldrb	r3, [r2, r3]
 8008486:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 800848a:	429a      	cmp	r2, r3
 800848c:	d00e      	beq.n	80084ac <rpcProcess+0x17c>
				dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: fcs error %x:%x\n", rpcBuff[len + 3], fcs);
 800848e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8008492:	3303      	adds	r3, #3
 8008494:	463a      	mov	r2, r7
 8008496:	5cd3      	ldrb	r3, [r2, r3]
 8008498:	4619      	mov	r1, r3
 800849a:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800849e:	461a      	mov	r2, r3
 80084a0:	4832      	ldr	r0, [pc, #200]	; (800856c <rpcProcess+0x23c>)
 80084a2:	f7f8 f90d 	bl	80006c0 <log_print>
				return -1;
 80084a6:	f04f 33ff 	mov.w	r3, #4294967295
 80084aa:	e053      	b.n	8008554 <rpcProcess+0x224>
			}

			if ((rpcBuff[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SRSP) {
 80084ac:	463b      	mov	r3, r7
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80084b4:	2b60      	cmp	r3, #96	; 0x60
 80084b6:	d134      	bne.n	8008522 <rpcProcess+0x1f2>
				// SRSP command ID deteced
				if (expectedSrspCmdId == (rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK)) {
 80084b8:	4b2d      	ldr	r3, [pc, #180]	; (8008570 <rpcProcess+0x240>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	461a      	mov	r2, r3
 80084be:	463b      	mov	r3, r7
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	f003 031f 	and.w	r3, r3, #31
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d11e      	bne.n	8008508 <rpcProcess+0x1d8>
					dbg_print(PRINT_LEVEL_INFO, "rpcProcess: processing expected srsp [%02X]\n", rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK);
 80084ca:	463b      	mov	r3, r7
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	f003 031f 	and.w	r3, r3, #31
 80084d2:	4619      	mov	r1, r3
 80084d4:	4827      	ldr	r0, [pc, #156]	; (8008574 <rpcProcess+0x244>)
 80084d6:	f7f8 f8f3 	bl	80006c0 <log_print>

					//unblock waiting sreq
					xSemaphoreGive(srspSem);
 80084da:	4b27      	ldr	r3, [pc, #156]	; (8008578 <rpcProcess+0x248>)
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	2300      	movs	r3, #0
 80084e0:	2200      	movs	r2, #0
 80084e2:	2100      	movs	r1, #0
 80084e4:	f003 fa5e 	bl	800b9a4 <xQueueGenericSend>

					dbg_print(PRINT_LEVEL_INFO, "rpcProcess: writing %d bytes SRSP to head of the queue\n", rpcLen);
 80084e8:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80084ec:	4619      	mov	r1, r3
 80084ee:	4823      	ldr	r0, [pc, #140]	; (800857c <rpcProcess+0x24c>)
 80084f0:	f7f8 f8e6 	bl	80006c0 <log_print>

					// send message to queue
					llq_add(&rpcLlq, (char*) &rpcBuff[1], rpcLen, 1);
 80084f4:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80084f8:	461a      	mov	r2, r3
 80084fa:	463b      	mov	r3, r7
 80084fc:	1c59      	adds	r1, r3, #1
 80084fe:	2301      	movs	r3, #1
 8008500:	481f      	ldr	r0, [pc, #124]	; (8008580 <rpcProcess+0x250>)
 8008502:	f000 f991 	bl	8008828 <llq_add>
 8008506:	e01b      	b.n	8008540 <rpcProcess+0x210>
				}
				else {
					// unexpected SRSP discard
					dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: UNEXPECTED SREQ!: %02X%s:%02X%s", expectedSrspCmdId, (rpcBuff[1] & MT_RPC_SUBSYSTEM_MASK));
 8008508:	4b19      	ldr	r3, [pc, #100]	; (8008570 <rpcProcess+0x240>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	4619      	mov	r1, r3
 800850e:	463b      	mov	r3, r7
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	f003 031f 	and.w	r3, r3, #31
 8008516:	461a      	mov	r2, r3
 8008518:	481a      	ldr	r0, [pc, #104]	; (8008584 <rpcProcess+0x254>)
 800851a:	f7f8 f8d1 	bl	80006c0 <log_print>
					return 0;
 800851e:	2300      	movs	r3, #0
 8008520:	e018      	b.n	8008554 <rpcProcess+0x224>
				}
			}
			else {
				// should be AREQ frame
				dbg_print(PRINT_LEVEL_INFO, "rpcProcess: writing %d bytes AREQ to tail of the que\n", rpcLen);
 8008522:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8008526:	4619      	mov	r1, r3
 8008528:	4817      	ldr	r0, [pc, #92]	; (8008588 <rpcProcess+0x258>)
 800852a:	f7f8 f8c9 	bl	80006c0 <log_print>

				// send message to queue
				llq_add(&rpcLlq, (char*) &rpcBuff[1], rpcLen, 0);
 800852e:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8008532:	461a      	mov	r2, r3
 8008534:	463b      	mov	r3, r7
 8008536:	1c59      	adds	r1, r3, #1
 8008538:	2300      	movs	r3, #0
 800853a:	4811      	ldr	r0, [pc, #68]	; (8008580 <rpcProcess+0x250>)
 800853c:	f000 f974 	bl	8008828 <llq_add>
			}

			return 0;
 8008540:	2300      	movs	r3, #0
 8008542:	e007      	b.n	8008554 <rpcProcess+0x224>
		}
		else {
			dbg_print(PRINT_LEVEL_WARNING, "rpcProcess: Len Not read [%x]\n", bytesRead);
 8008544:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8008548:	4619      	mov	r1, r3
 800854a:	4810      	ldr	r0, [pc, #64]	; (800858c <rpcProcess+0x25c>)
 800854c:	f7f8 f8b8 	bl	80006c0 <log_print>
		}
	}

	// nothing received yet
	return -1;
 8008550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008554:	4618      	mov	r0, r3
 8008556:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800855a:	46bd      	mov	sp, r7
 800855c:	bd90      	pop	{r4, r7, pc}
 800855e:	bf00      	nop
 8008560:	0801024c 	.word	0x0801024c
 8008564:	08010278 	.word	0x08010278
 8008568:	080102ac 	.word	0x080102ac
 800856c:	080102b8 	.word	0x080102b8
 8008570:	20000fac 	.word	0x20000fac
 8008574:	080102d8 	.word	0x080102d8
 8008578:	20000fa8 	.word	0x20000fa8
 800857c:	08010308 	.word	0x08010308
 8008580:	20000fb0 	.word	0x20000fb0
 8008584:	08010340 	.word	0x08010340
 8008588:	0801036c 	.word	0x0801036c
 800858c:	080103a4 	.word	0x080103a4

08008590 <rpcSendFrame>:
 *
 * @param   cmd0 System, cmd1 subsystem, ptr to payload, lenght of payload
 *
 * @return  length of current Rx Buffer
 *************************************************************************************************/
uint8_t rpcSendFrame(uint8_t cmd0, uint8_t cmd1, uint8_t *payload, uint8_t payload_len) {
 8008590:	b590      	push	{r4, r7, lr}
 8008592:	b0c5      	sub	sp, #276	; 0x114
 8008594:	af00      	add	r7, sp, #0
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	4639      	mov	r1, r7
 800859c:	600a      	str	r2, [r1, #0]
 800859e:	4619      	mov	r1, r3
 80085a0:	1dfb      	adds	r3, r7, #7
 80085a2:	4622      	mov	r2, r4
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	1dbb      	adds	r3, r7, #6
 80085a8:	4602      	mov	r2, r0
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	1d7b      	adds	r3, r7, #5
 80085ae:	460a      	mov	r2, r1
 80085b0:	701a      	strb	r2, [r3, #0]
	uint8_t buf[RPC_MAX_LEN];
	int32_t status = MT_RPC_SUCCESS;
 80085b2:	2300      	movs	r3, #0
 80085b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	// block here if SREQ is in progress
	dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Sending RPC\n");
 80085b8:	4846      	ldr	r0, [pc, #280]	; (80086d4 <rpcSendFrame+0x144>)
 80085ba:	f7f8 f881 	bl	80006c0 <log_print>

	// fill in header bytes
	buf[0] = MT_RPC_SOF;
 80085be:	f107 030c 	add.w	r3, r7, #12
 80085c2:	22fe      	movs	r2, #254	; 0xfe
 80085c4:	701a      	strb	r2, [r3, #0]
	buf[1] = payload_len;
 80085c6:	f107 030c 	add.w	r3, r7, #12
 80085ca:	1d7a      	adds	r2, r7, #5
 80085cc:	7812      	ldrb	r2, [r2, #0]
 80085ce:	705a      	strb	r2, [r3, #1]
	buf[2] = cmd0;
 80085d0:	f107 030c 	add.w	r3, r7, #12
 80085d4:	1dfa      	adds	r2, r7, #7
 80085d6:	7812      	ldrb	r2, [r2, #0]
 80085d8:	709a      	strb	r2, [r3, #2]
	buf[3] = cmd1;
 80085da:	f107 030c 	add.w	r3, r7, #12
 80085de:	1dba      	adds	r2, r7, #6
 80085e0:	7812      	ldrb	r2, [r2, #0]
 80085e2:	70da      	strb	r2, [r3, #3]

	if ((cmd0 & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ) {
 80085e4:	1dfb      	adds	r3, r7, #7
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d106      	bne.n	80085fe <rpcSendFrame+0x6e>
		// calculate expected SRSP
		expectedSrspCmdId = (cmd0 & MT_RPC_SUBSYSTEM_MASK);
 80085f0:	1dfb      	adds	r3, r7, #7
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	4b37      	ldr	r3, [pc, #220]	; (80086d8 <rpcSendFrame+0x148>)
 80085fc:	701a      	strb	r2, [r3, #0]
	}

	if (payload_len > 0) {
 80085fe:	1d7b      	adds	r3, r7, #5
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <rpcSendFrame+0x8a>
		// copy payload to buffer
		memcpy(buf + RPC_UART_HDR_LEN, payload, payload_len);
 8008606:	f107 030c 	add.w	r3, r7, #12
 800860a:	3304      	adds	r3, #4
 800860c:	1d7a      	adds	r2, r7, #5
 800860e:	7812      	ldrb	r2, [r2, #0]
 8008610:	4639      	mov	r1, r7
 8008612:	6809      	ldr	r1, [r1, #0]
 8008614:	4618      	mov	r0, r3
 8008616:	f005 fba9 	bl	800dd6c <memcpy>
	}

	// calculate FCS field
	buf[payload_len + RPC_UART_HDR_LEN] = calcFcs(&buf[RPC_UART_FRAME_START_IDX], payload_len + RPC_HDR_LEN);
 800861a:	1d7b      	adds	r3, r7, #5
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	3303      	adds	r3, #3
 8008620:	b2da      	uxtb	r2, r3
 8008622:	1d7b      	adds	r3, r7, #5
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	1d1c      	adds	r4, r3, #4
 8008628:	f107 030c 	add.w	r3, r7, #12
 800862c:	3301      	adds	r3, #1
 800862e:	4611      	mov	r1, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f85d 	bl	80086f0 <calcFcs>
 8008636:	4603      	mov	r3, r0
 8008638:	461a      	mov	r2, r3
 800863a:	f107 030c 	add.w	r3, r7, #12
 800863e:	551a      	strb	r2, [r3, r4]

	// send out RPC  message
	rpcTransportWrite(buf, payload_len + RPC_UART_HDR_LEN + RPC_UART_FCS_LEN);
 8008640:	1d7b      	adds	r3, r7, #5
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	3305      	adds	r3, #5
 8008646:	b2da      	uxtb	r2, r3
 8008648:	f107 030c 	add.w	r3, r7, #12
 800864c:	4611      	mov	r1, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fda6 	bl	80081a0 <rpcTransportWrite>

	// print out message to be sent
	printRpcMsg("SOC OUT -->", buf[0], payload_len, &buf[2]);
 8008654:	f107 030c 	add.w	r3, r7, #12
 8008658:	7819      	ldrb	r1, [r3, #0]
 800865a:	f107 030c 	add.w	r3, r7, #12
 800865e:	1c98      	adds	r0, r3, #2
 8008660:	1d7b      	adds	r3, r7, #5
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	4603      	mov	r3, r0
 8008666:	481d      	ldr	r0, [pc, #116]	; (80086dc <rpcSendFrame+0x14c>)
 8008668:	f000 f85e 	bl	8008728 <printRpcMsg>

	// wait for SRSP if necessary
	if ((cmd0 & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ) {
 800866c:	1dfb      	adds	r3, r7, #7
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008674:	2b20      	cmp	r3, #32
 8008676:	d124      	bne.n	80086c2 <rpcSendFrame+0x132>
		// feedback
		dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: waiting for SRSP [%02x]\n", expectedSrspCmdId);
 8008678:	4b17      	ldr	r3, [pc, #92]	; (80086d8 <rpcSendFrame+0x148>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	4619      	mov	r1, r3
 800867e:	4818      	ldr	r0, [pc, #96]	; (80086e0 <rpcSendFrame+0x150>)
 8008680:	f7f8 f81e 	bl	80006c0 <log_print>

		// Wait for the SRSP
		if (xSemaphoreTake(srspSem, SRSP_TIMEOUT_MS) == pdFALSE) {
 8008684:	4b17      	ldr	r3, [pc, #92]	; (80086e4 <rpcSendFrame+0x154>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800868c:	4618      	mov	r0, r3
 800868e:	f003 fbff 	bl	800be90 <xQueueSemaphoreTake>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10b      	bne.n	80086b0 <rpcSendFrame+0x120>
			dbg_print(PRINT_LEVEL_WARNING, "rpcSendFrame: SRSP Error - CMD0: 0x%02X CMD1: 0x%02X\n", cmd0, cmd1);
 8008698:	1dfb      	adds	r3, r7, #7
 800869a:	7819      	ldrb	r1, [r3, #0]
 800869c:	1dbb      	adds	r3, r7, #6
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	4811      	ldr	r0, [pc, #68]	; (80086e8 <rpcSendFrame+0x158>)
 80086a4:	f7f8 f80c 	bl	80006c0 <log_print>
			status = MT_RPC_ERR_SUBSYSTEM;
 80086a8:	2301      	movs	r3, #1
 80086aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80086ae:	e005      	b.n	80086bc <rpcSendFrame+0x12c>
		}
		else {
			dbg_print(PRINT_LEVEL_INFO, "rpcSendFrame: Receive SRSP\n");
 80086b0:	480e      	ldr	r0, [pc, #56]	; (80086ec <rpcSendFrame+0x15c>)
 80086b2:	f7f8 f805 	bl	80006c0 <log_print>
			status = MT_RPC_SUCCESS;
 80086b6:	2300      	movs	r3, #0
 80086b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		}

		//set expected SRSP to invalid
		expectedSrspCmdId = 0xFF;
 80086bc:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <rpcSendFrame+0x148>)
 80086be:	22ff      	movs	r2, #255	; 0xff
 80086c0:	701a      	strb	r2, [r3, #0]
	}

	// return found status
	return status;
 80086c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086c6:	b2db      	uxtb	r3, r3
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd90      	pop	{r4, r7, pc}
 80086d2:	bf00      	nop
 80086d4:	080103c4 	.word	0x080103c4
 80086d8:	20000fac 	.word	0x20000fac
 80086dc:	080103e0 	.word	0x080103e0
 80086e0:	080103ec 	.word	0x080103ec
 80086e4:	20000fa8 	.word	0x20000fa8
 80086e8:	08010414 	.word	0x08010414
 80086ec:	0801044c 	.word	0x0801044c

080086f0 <calcFcs>:
 * @param   msg  - pointer to the RPC general format frame message
 * @param   size - RPC general format frame size
 *
 * @return  FCS value
 */
static uint8_t calcFcs(uint8_t *msg, uint8_t size) {
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]

	// calculate FCS by XORing all bytes
	while (size--) {
 8008700:	e006      	b.n	8008710 <calcFcs+0x20>
		result ^= *msg++;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	4053      	eors	r3, r2
 800870e:	73fb      	strb	r3, [r7, #15]
	while (size--) {
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	1e5a      	subs	r2, r3, #1
 8008714:	70fa      	strb	r2, [r7, #3]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1f3      	bne.n	8008702 <calcFcs+0x12>
	}

	return result;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <printRpcMsg>:
 * @param   len - length byte
 * @param   msg  - pointer to the RPC message starting from Cmd0 byte
 *
 * @return  FCS value
 */
static void printRpcMsg(char *preMsg, uint8_t sof, uint8_t len, uint8_t *msg) {
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	607b      	str	r3, [r7, #4]
 8008732:	460b      	mov	r3, r1
 8008734:	72fb      	strb	r3, [r7, #11]
 8008736:	4613      	mov	r3, r2
 8008738:	72bb      	strb	r3, [r7, #10]

	// print headers
	dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, "%s %d Bytes: SOF:%02X, Len:%02X, CMD0:%02X, CMD1:%02X, Payload:", preMsg, len + 5, sof, len, msg[0], msg[1]);

	// print frame payload
	for (i = 2; i < len + 2; i++) {
 800873a:	2302      	movs	r3, #2
 800873c:	75fb      	strb	r3, [r7, #23]
 800873e:	e002      	b.n	8008746 <printRpcMsg+0x1e>
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	3301      	adds	r3, #1
 8008744:	75fb      	strb	r3, [r7, #23]
 8008746:	7abb      	ldrb	r3, [r7, #10]
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	429a      	cmp	r2, r3
 800874e:	daf7      	bge.n	8008740 <printRpcMsg+0x18>
	}

	// print FCS
	dbg_print(PRINT_LEVEL_INFO_LOWLEVEL, " FCS:%02X\n", msg[i]);

}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <llq_open>:
 *
 * @param    llq_t *hndl - handle to queue to be created
 *
 * @return   none
 */
void llq_open(llq_t *hndl) {
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
	hndl->queue = xQueueCreate(Q_SIZE, sizeof(queue_data_t));
 8008766:	2200      	movs	r2, #0
 8008768:	f44f 7181 	mov.w	r1, #258	; 0x102
 800876c:	2008      	movs	r0, #8
 800876e:	f003 f8b5 	bl	800b8dc <xQueueGenericCreate>
 8008772:	4602      	mov	r2, r0
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	601a      	str	r2, [r3, #0]
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <llq_timedreceive>:
 * @Param	int maxLength - Max length of message to read
 * @Param	struct timespec * timeout - Timeout value
 *
 * @return   length of message read from queue
 */
int llq_timedreceive(llq_t *hndl, char *buffer, int maxLength, int timeout) {
 8008780:	b590      	push	{r4, r7, lr}
 8008782:	b0c9      	sub	sp, #292	; 0x124
 8008784:	af00      	add	r7, sp, #0
 8008786:	f107 040c 	add.w	r4, r7, #12
 800878a:	6020      	str	r0, [r4, #0]
 800878c:	f107 0008 	add.w	r0, r7, #8
 8008790:	6001      	str	r1, [r0, #0]
 8008792:	1d39      	adds	r1, r7, #4
 8008794:	600a      	str	r2, [r1, #0]
 8008796:	463a      	mov	r2, r7
 8008798:	6013      	str	r3, [r2, #0]
	int sepmRnt = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	queue_data_t q_buf = { 0 };
 80087a0:	f107 0314 	add.w	r3, r7, #20
 80087a4:	4618      	mov	r0, r3
 80087a6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80087aa:	461a      	mov	r2, r3
 80087ac:	2100      	movs	r1, #0
 80087ae:	f005 faeb 	bl	800dd88 <memset>

	// wait for a message or timeout
	if (xQueueReceive(hndl->queue, &q_buf, timeout) != pdTRUE) {
 80087b2:	f107 030c 	add.w	r3, r7, #12
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6818      	ldr	r0, [r3, #0]
 80087ba:	463b      	mov	r3, r7
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	f107 0314 	add.w	r3, r7, #20
 80087c2:	4619      	mov	r1, r3
 80087c4:	f003 fa84 	bl	800bcd0 <xQueueReceive>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d003      	beq.n	80087d6 <llq_timedreceive+0x56>
		sepmRnt = -1;
 80087ce:	f04f 33ff 	mov.w	r3, #4294967295
 80087d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}

	int rLength = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	// we read with success?
	if (sepmRnt != -1) {
 80087dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80087e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e4:	d015      	beq.n	8008812 <llq_timedreceive+0x92>
		rLength = MIN(q_buf.len, maxLength);
 80087e6:	f107 0314 	add.w	r3, r7, #20
 80087ea:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80087ee:	461a      	mov	r2, r3
 80087f0:	1d3b      	adds	r3, r7, #4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4293      	cmp	r3, r2
 80087f6:	bfa8      	it	ge
 80087f8:	4613      	movge	r3, r2
 80087fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		memcpy(buffer, q_buf.data, rLength);
 80087fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008802:	f107 0114 	add.w	r1, r7, #20
 8008806:	f107 0308 	add.w	r3, r7, #8
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	f005 faae 	bl	800dd6c <memcpy>
 8008810:	e003      	b.n	800881a <llq_timedreceive+0x9a>
	}
	// error in read
	else {
		rLength = -1;
 8008812:	f04f 33ff 	mov.w	r3, #4294967295
 8008816:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	}

	// return
	return rLength;
 800881a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800881e:	4618      	mov	r0, r3
 8008820:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008824:	46bd      	mov	sp, r7
 8008826:	bd90      	pop	{r4, r7, pc}

08008828 <llq_add>:
 * @Param	int prio - 1 message has priority and should be added to
 * 			head of queue, 0 message assed to tail of queue
 *
 * @return   length of message read from queue
 */
int llq_add(llq_t *hndl, char *buffer, int len, int prio) {
 8008828:	b590      	push	{r4, r7, lr}
 800882a:	b0c7      	sub	sp, #284	; 0x11c
 800882c:	af00      	add	r7, sp, #0
 800882e:	f107 040c 	add.w	r4, r7, #12
 8008832:	6020      	str	r0, [r4, #0]
 8008834:	f107 0008 	add.w	r0, r7, #8
 8008838:	6001      	str	r1, [r0, #0]
 800883a:	1d39      	adds	r1, r7, #4
 800883c:	600a      	str	r2, [r1, #0]
 800883e:	463a      	mov	r2, r7
 8008840:	6013      	str	r3, [r2, #0]
	int ret = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	queue_data_t q_buf = { 0 };
 8008848:	f107 0310 	add.w	r3, r7, #16
 800884c:	4618      	mov	r0, r3
 800884e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008852:	461a      	mov	r2, r3
 8008854:	2100      	movs	r1, #0
 8008856:	f005 fa97 	bl	800dd88 <memset>

	// length
	q_buf.len = MIN(Q_FRAME_SIZE, len);
 800885a:	1d3b      	adds	r3, r7, #4
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008862:	bfa8      	it	ge
 8008864:	f44f 7380 	movge.w	r3, #256	; 0x100
 8008868:	b29a      	uxth	r2, r3
 800886a:	f107 0310 	add.w	r3, r7, #16
 800886e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	// data
	memcpy(q_buf.data, buffer, q_buf.len);
 8008872:	f107 0310 	add.w	r3, r7, #16
 8008876:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800887a:	461a      	mov	r2, r3
 800887c:	f107 0308 	add.w	r3, r7, #8
 8008880:	f107 0010 	add.w	r0, r7, #16
 8008884:	6819      	ldr	r1, [r3, #0]
 8008886:	f005 fa71 	bl	800dd6c <memcpy>

	if (prio == 1) {
 800888a:	463b      	mov	r3, r7
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d10a      	bne.n	80088a8 <llq_add+0x80>
		xQueueSendToFront(hndl->queue, &q_buf, 10);
 8008892:	f107 030c 	add.w	r3, r7, #12
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	f107 0110 	add.w	r1, r7, #16
 800889e:	2301      	movs	r3, #1
 80088a0:	220a      	movs	r2, #10
 80088a2:	f003 f87f 	bl	800b9a4 <xQueueGenericSend>
 80088a6:	e009      	b.n	80088bc <llq_add+0x94>
	}
	else {
		xQueueSendToBack(hndl->queue, &q_buf, 10);
 80088a8:	f107 030c 	add.w	r3, r7, #12
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6818      	ldr	r0, [r3, #0]
 80088b0:	f107 0110 	add.w	r1, r7, #16
 80088b4:	2300      	movs	r3, #0
 80088b6:	220a      	movs	r2, #10
 80088b8:	f003 f874 	bl	800b9a4 <xQueueGenericSend>
	}

	return ret;
 80088bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd90      	pop	{r4, r7, pc}

080088ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80088d4:	2003      	movs	r0, #3
 80088d6:	f000 f8dc 	bl	8008a92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80088da:	2000      	movs	r0, #0
 80088dc:	f7f8 f9e8 	bl	8000cb0 <HAL_InitTick>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	71fb      	strb	r3, [r7, #7]
 80088ea:	e001      	b.n	80088f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80088ec:	f7f8 f9b8 	bl	8000c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80088f0:	79fb      	ldrb	r3, [r7, #7]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088fc:	b480      	push	{r7}
 80088fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008900:	4b05      	ldr	r3, [pc, #20]	; (8008918 <HAL_IncTick+0x1c>)
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	4b05      	ldr	r3, [pc, #20]	; (800891c <HAL_IncTick+0x20>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4413      	add	r3, r2
 800890a:	4a03      	ldr	r2, [pc, #12]	; (8008918 <HAL_IncTick+0x1c>)
 800890c:	6013      	str	r3, [r2, #0]
}
 800890e:	bf00      	nop
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	200051d8 	.word	0x200051d8
 800891c:	200000f0 	.word	0x200000f0

08008920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008920:	b480      	push	{r7}
 8008922:	af00      	add	r7, sp, #0
  return uwTick;
 8008924:	4b03      	ldr	r3, [pc, #12]	; (8008934 <HAL_GetTick+0x14>)
 8008926:	681b      	ldr	r3, [r3, #0]
}
 8008928:	4618      	mov	r0, r3
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	200051d8 	.word	0x200051d8

08008938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008948:	4b0c      	ldr	r3, [pc, #48]	; (800897c <__NVIC_SetPriorityGrouping+0x44>)
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008954:	4013      	ands	r3, r2
 8008956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800896a:	4a04      	ldr	r2, [pc, #16]	; (800897c <__NVIC_SetPriorityGrouping+0x44>)
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	60d3      	str	r3, [r2, #12]
}
 8008970:	bf00      	nop
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	e000ed00 	.word	0xe000ed00

08008980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008980:	b480      	push	{r7}
 8008982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008984:	4b04      	ldr	r3, [pc, #16]	; (8008998 <__NVIC_GetPriorityGrouping+0x18>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	0a1b      	lsrs	r3, r3, #8
 800898a:	f003 0307 	and.w	r3, r3, #7
}
 800898e:	4618      	mov	r0, r3
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	e000ed00 	.word	0xe000ed00

0800899c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	db0b      	blt.n	80089c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	f003 021f 	and.w	r2, r3, #31
 80089b4:	4907      	ldr	r1, [pc, #28]	; (80089d4 <__NVIC_EnableIRQ+0x38>)
 80089b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ba:	095b      	lsrs	r3, r3, #5
 80089bc:	2001      	movs	r0, #1
 80089be:	fa00 f202 	lsl.w	r2, r0, r2
 80089c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	e000e100 	.word	0xe000e100

080089d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	6039      	str	r1, [r7, #0]
 80089e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	db0a      	blt.n	8008a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	490c      	ldr	r1, [pc, #48]	; (8008a24 <__NVIC_SetPriority+0x4c>)
 80089f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f6:	0112      	lsls	r2, r2, #4
 80089f8:	b2d2      	uxtb	r2, r2
 80089fa:	440b      	add	r3, r1
 80089fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a00:	e00a      	b.n	8008a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	4908      	ldr	r1, [pc, #32]	; (8008a28 <__NVIC_SetPriority+0x50>)
 8008a08:	79fb      	ldrb	r3, [r7, #7]
 8008a0a:	f003 030f 	and.w	r3, r3, #15
 8008a0e:	3b04      	subs	r3, #4
 8008a10:	0112      	lsls	r2, r2, #4
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	440b      	add	r3, r1
 8008a16:	761a      	strb	r2, [r3, #24]
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	e000e100 	.word	0xe000e100
 8008a28:	e000ed00 	.word	0xe000ed00

08008a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b089      	sub	sp, #36	; 0x24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f003 0307 	and.w	r3, r3, #7
 8008a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f1c3 0307 	rsb	r3, r3, #7
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	bf28      	it	cs
 8008a4a:	2304      	movcs	r3, #4
 8008a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	3304      	adds	r3, #4
 8008a52:	2b06      	cmp	r3, #6
 8008a54:	d902      	bls.n	8008a5c <NVIC_EncodePriority+0x30>
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	3b03      	subs	r3, #3
 8008a5a:	e000      	b.n	8008a5e <NVIC_EncodePriority+0x32>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a60:	f04f 32ff 	mov.w	r2, #4294967295
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	43da      	mvns	r2, r3
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	401a      	ands	r2, r3
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a74:	f04f 31ff 	mov.w	r1, #4294967295
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a7e:	43d9      	mvns	r1, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a84:	4313      	orrs	r3, r2
         );
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3724      	adds	r7, #36	; 0x24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff ff4c 	bl	8008938 <__NVIC_SetPriorityGrouping>
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008aba:	f7ff ff61 	bl	8008980 <__NVIC_GetPriorityGrouping>
 8008abe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	6978      	ldr	r0, [r7, #20]
 8008ac6:	f7ff ffb1 	bl	8008a2c <NVIC_EncodePriority>
 8008aca:	4602      	mov	r2, r0
 8008acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff ff80 	bl	80089d8 <__NVIC_SetPriority>
}
 8008ad8:	bf00      	nop
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff ff54 	bl	800899c <__NVIC_EnableIRQ>
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b0a:	e166      	b.n	8008dda <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	2101      	movs	r1, #1
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	fa01 f303 	lsl.w	r3, r1, r3
 8008b18:	4013      	ands	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 8158 	beq.w	8008dd4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d00b      	beq.n	8008b44 <HAL_GPIO_Init+0x48>
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d007      	beq.n	8008b44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b38:	2b11      	cmp	r3, #17
 8008b3a:	d003      	beq.n	8008b44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	2b12      	cmp	r3, #18
 8008b42:	d130      	bne.n	8008ba6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	2203      	movs	r2, #3
 8008b50:	fa02 f303 	lsl.w	r3, r2, r3
 8008b54:	43db      	mvns	r3, r3
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	fa02 f303 	lsl.w	r3, r2, r3
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	43db      	mvns	r3, r3
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	4013      	ands	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	091b      	lsrs	r3, r3, #4
 8008b90:	f003 0201 	and.w	r2, r3, #1
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	43db      	mvns	r3, r3
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	689a      	ldr	r2, [r3, #8]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d003      	beq.n	8008be6 <HAL_GPIO_Init+0xea>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	2b12      	cmp	r3, #18
 8008be4:	d123      	bne.n	8008c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	08da      	lsrs	r2, r3, #3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	3208      	adds	r2, #8
 8008bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	220f      	movs	r2, #15
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	43db      	mvns	r3, r3
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	4013      	ands	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	691a      	ldr	r2, [r3, #16]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f003 0307 	and.w	r3, r3, #7
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	08da      	lsrs	r2, r3, #3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	3208      	adds	r2, #8
 8008c28:	6939      	ldr	r1, [r7, #16]
 8008c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	2203      	movs	r2, #3
 8008c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3e:	43db      	mvns	r3, r3
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4013      	ands	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f003 0203 	and.w	r2, r3, #3
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 80b2 	beq.w	8008dd4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c70:	4b61      	ldr	r3, [pc, #388]	; (8008df8 <HAL_GPIO_Init+0x2fc>)
 8008c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c74:	4a60      	ldr	r2, [pc, #384]	; (8008df8 <HAL_GPIO_Init+0x2fc>)
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	6613      	str	r3, [r2, #96]	; 0x60
 8008c7c:	4b5e      	ldr	r3, [pc, #376]	; (8008df8 <HAL_GPIO_Init+0x2fc>)
 8008c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	60bb      	str	r3, [r7, #8]
 8008c86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008c88:	4a5c      	ldr	r2, [pc, #368]	; (8008dfc <HAL_GPIO_Init+0x300>)
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	089b      	lsrs	r3, r3, #2
 8008c8e:	3302      	adds	r3, #2
 8008c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	220f      	movs	r2, #15
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	43db      	mvns	r3, r3
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008cb2:	d02b      	beq.n	8008d0c <HAL_GPIO_Init+0x210>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a52      	ldr	r2, [pc, #328]	; (8008e00 <HAL_GPIO_Init+0x304>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d025      	beq.n	8008d08 <HAL_GPIO_Init+0x20c>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a51      	ldr	r2, [pc, #324]	; (8008e04 <HAL_GPIO_Init+0x308>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d01f      	beq.n	8008d04 <HAL_GPIO_Init+0x208>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a50      	ldr	r2, [pc, #320]	; (8008e08 <HAL_GPIO_Init+0x30c>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d019      	beq.n	8008d00 <HAL_GPIO_Init+0x204>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a4f      	ldr	r2, [pc, #316]	; (8008e0c <HAL_GPIO_Init+0x310>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d013      	beq.n	8008cfc <HAL_GPIO_Init+0x200>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a4e      	ldr	r2, [pc, #312]	; (8008e10 <HAL_GPIO_Init+0x314>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00d      	beq.n	8008cf8 <HAL_GPIO_Init+0x1fc>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a4d      	ldr	r2, [pc, #308]	; (8008e14 <HAL_GPIO_Init+0x318>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d007      	beq.n	8008cf4 <HAL_GPIO_Init+0x1f8>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a4c      	ldr	r2, [pc, #304]	; (8008e18 <HAL_GPIO_Init+0x31c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d101      	bne.n	8008cf0 <HAL_GPIO_Init+0x1f4>
 8008cec:	2307      	movs	r3, #7
 8008cee:	e00e      	b.n	8008d0e <HAL_GPIO_Init+0x212>
 8008cf0:	2308      	movs	r3, #8
 8008cf2:	e00c      	b.n	8008d0e <HAL_GPIO_Init+0x212>
 8008cf4:	2306      	movs	r3, #6
 8008cf6:	e00a      	b.n	8008d0e <HAL_GPIO_Init+0x212>
 8008cf8:	2305      	movs	r3, #5
 8008cfa:	e008      	b.n	8008d0e <HAL_GPIO_Init+0x212>
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	e006      	b.n	8008d0e <HAL_GPIO_Init+0x212>
 8008d00:	2303      	movs	r3, #3
 8008d02:	e004      	b.n	8008d0e <HAL_GPIO_Init+0x212>
 8008d04:	2302      	movs	r3, #2
 8008d06:	e002      	b.n	8008d0e <HAL_GPIO_Init+0x212>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <HAL_GPIO_Init+0x212>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	f002 0203 	and.w	r2, r2, #3
 8008d14:	0092      	lsls	r2, r2, #2
 8008d16:	4093      	lsls	r3, r2
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d1e:	4937      	ldr	r1, [pc, #220]	; (8008dfc <HAL_GPIO_Init+0x300>)
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	089b      	lsrs	r3, r3, #2
 8008d24:	3302      	adds	r3, #2
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008d2c:	4b3b      	ldr	r3, [pc, #236]	; (8008e1c <HAL_GPIO_Init+0x320>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	43db      	mvns	r3, r3
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	4013      	ands	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008d50:	4a32      	ldr	r2, [pc, #200]	; (8008e1c <HAL_GPIO_Init+0x320>)
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008d56:	4b31      	ldr	r3, [pc, #196]	; (8008e1c <HAL_GPIO_Init+0x320>)
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	43db      	mvns	r3, r3
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	4013      	ands	r3, r2
 8008d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008d7a:	4a28      	ldr	r2, [pc, #160]	; (8008e1c <HAL_GPIO_Init+0x320>)
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d80:	4b26      	ldr	r3, [pc, #152]	; (8008e1c <HAL_GPIO_Init+0x320>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	43db      	mvns	r3, r3
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008da4:	4a1d      	ldr	r2, [pc, #116]	; (8008e1c <HAL_GPIO_Init+0x320>)
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008daa:	4b1c      	ldr	r3, [pc, #112]	; (8008e1c <HAL_GPIO_Init+0x320>)
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	43db      	mvns	r3, r3
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	4013      	ands	r3, r2
 8008db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008dce:	4a13      	ldr	r2, [pc, #76]	; (8008e1c <HAL_GPIO_Init+0x320>)
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	fa22 f303 	lsr.w	r3, r2, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f47f ae91 	bne.w	8008b0c <HAL_GPIO_Init+0x10>
  }
}
 8008dea:	bf00      	nop
 8008dec:	bf00      	nop
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	40021000 	.word	0x40021000
 8008dfc:	40010000 	.word	0x40010000
 8008e00:	48000400 	.word	0x48000400
 8008e04:	48000800 	.word	0x48000800
 8008e08:	48000c00 	.word	0x48000c00
 8008e0c:	48001000 	.word	0x48001000
 8008e10:	48001400 	.word	0x48001400
 8008e14:	48001800 	.word	0x48001800
 8008e18:	48001c00 	.word	0x48001c00
 8008e1c:	40010400 	.word	0x40010400

08008e20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008e24:	4b04      	ldr	r3, [pc, #16]	; (8008e38 <HAL_PWREx_GetVoltageRange+0x18>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	40007000 	.word	0x40007000

08008e3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e4a:	d130      	bne.n	8008eae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e4c:	4b23      	ldr	r3, [pc, #140]	; (8008edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e58:	d038      	beq.n	8008ecc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e5a:	4b20      	ldr	r3, [pc, #128]	; (8008edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008e62:	4a1e      	ldr	r2, [pc, #120]	; (8008edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ee0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2232      	movs	r2, #50	; 0x32
 8008e70:	fb02 f303 	mul.w	r3, r2, r3
 8008e74:	4a1b      	ldr	r2, [pc, #108]	; (8008ee4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008e76:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7a:	0c9b      	lsrs	r3, r3, #18
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e80:	e002      	b.n	8008e88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e88:	4b14      	ldr	r3, [pc, #80]	; (8008edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e94:	d102      	bne.n	8008e9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1f2      	bne.n	8008e82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e9c:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea8:	d110      	bne.n	8008ecc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e00f      	b.n	8008ece <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008eae:	4b0b      	ldr	r3, [pc, #44]	; (8008edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eba:	d007      	beq.n	8008ecc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008ebc:	4b07      	ldr	r3, [pc, #28]	; (8008edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ec4:	4a05      	ldr	r2, [pc, #20]	; (8008edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008eca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	40007000 	.word	0x40007000
 8008ee0:	20000000 	.word	0x20000000
 8008ee4:	431bde83 	.word	0x431bde83

08008ee8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008eec:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	4a04      	ldr	r2, [pc, #16]	; (8008f04 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ef6:	6053      	str	r3, [r2, #4]
}
 8008ef8:	bf00      	nop
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	40007000 	.word	0x40007000

08008f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d102      	bne.n	8008f1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	f000 bc16 	b.w	8009748 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f1c:	4ba0      	ldr	r3, [pc, #640]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f003 030c 	and.w	r3, r3, #12
 8008f24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f26:	4b9e      	ldr	r3, [pc, #632]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	f003 0303 	and.w	r3, r3, #3
 8008f2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0310 	and.w	r3, r3, #16
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 80e4 	beq.w	8009106 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d007      	beq.n	8008f54 <HAL_RCC_OscConfig+0x4c>
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b0c      	cmp	r3, #12
 8008f48:	f040 808b 	bne.w	8009062 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	f040 8087 	bne.w	8009062 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008f54:	4b92      	ldr	r3, [pc, #584]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d005      	beq.n	8008f6c <HAL_RCC_OscConfig+0x64>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e3ed      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1a      	ldr	r2, [r3, #32]
 8008f70:	4b8b      	ldr	r3, [pc, #556]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <HAL_RCC_OscConfig+0x7e>
 8008f7c:	4b88      	ldr	r3, [pc, #544]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f84:	e005      	b.n	8008f92 <HAL_RCC_OscConfig+0x8a>
 8008f86:	4b86      	ldr	r3, [pc, #536]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f8c:	091b      	lsrs	r3, r3, #4
 8008f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d223      	bcs.n	8008fde <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fdb2 	bl	8009b04 <RCC_SetFlashLatencyFromMSIRange>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e3ce      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008faa:	4b7d      	ldr	r3, [pc, #500]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a7c      	ldr	r2, [pc, #496]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008fb0:	f043 0308 	orr.w	r3, r3, #8
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	4b7a      	ldr	r3, [pc, #488]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	4977      	ldr	r1, [pc, #476]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008fc8:	4b75      	ldr	r3, [pc, #468]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	4972      	ldr	r1, [pc, #456]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	604b      	str	r3, [r1, #4]
 8008fdc:	e025      	b.n	800902a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fde:	4b70      	ldr	r3, [pc, #448]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a6f      	ldr	r2, [pc, #444]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008fe4:	f043 0308 	orr.w	r3, r3, #8
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	4b6d      	ldr	r3, [pc, #436]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	496a      	ldr	r1, [pc, #424]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ffc:	4b68      	ldr	r3, [pc, #416]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	021b      	lsls	r3, r3, #8
 800900a:	4965      	ldr	r1, [pc, #404]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 800900c:	4313      	orrs	r3, r2
 800900e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fd72 	bl	8009b04 <RCC_SetFlashLatencyFromMSIRange>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e38e      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800902a:	f000 fc75 	bl	8009918 <HAL_RCC_GetSysClockFreq>
 800902e:	4602      	mov	r2, r0
 8009030:	4b5b      	ldr	r3, [pc, #364]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	091b      	lsrs	r3, r3, #4
 8009036:	f003 030f 	and.w	r3, r3, #15
 800903a:	495a      	ldr	r1, [pc, #360]	; (80091a4 <HAL_RCC_OscConfig+0x29c>)
 800903c:	5ccb      	ldrb	r3, [r1, r3]
 800903e:	f003 031f 	and.w	r3, r3, #31
 8009042:	fa22 f303 	lsr.w	r3, r2, r3
 8009046:	4a58      	ldr	r2, [pc, #352]	; (80091a8 <HAL_RCC_OscConfig+0x2a0>)
 8009048:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800904a:	4b58      	ldr	r3, [pc, #352]	; (80091ac <HAL_RCC_OscConfig+0x2a4>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f7f7 fe2e 	bl	8000cb0 <HAL_InitTick>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d052      	beq.n	8009104 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	e372      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d032      	beq.n	80090d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800906a:	4b4d      	ldr	r3, [pc, #308]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a4c      	ldr	r2, [pc, #304]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8009070:	f043 0301 	orr.w	r3, r3, #1
 8009074:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009076:	f7ff fc53 	bl	8008920 <HAL_GetTick>
 800907a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800907c:	e008      	b.n	8009090 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800907e:	f7ff fc4f 	bl	8008920 <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	2b02      	cmp	r3, #2
 800908a:	d901      	bls.n	8009090 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e35b      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009090:	4b43      	ldr	r3, [pc, #268]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d0f0      	beq.n	800907e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800909c:	4b40      	ldr	r3, [pc, #256]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a3f      	ldr	r2, [pc, #252]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 80090a2:	f043 0308 	orr.w	r3, r3, #8
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	4b3d      	ldr	r3, [pc, #244]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	493a      	ldr	r1, [pc, #232]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80090ba:	4b39      	ldr	r3, [pc, #228]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	021b      	lsls	r3, r3, #8
 80090c8:	4935      	ldr	r1, [pc, #212]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	604b      	str	r3, [r1, #4]
 80090ce:	e01a      	b.n	8009106 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80090d0:	4b33      	ldr	r3, [pc, #204]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a32      	ldr	r2, [pc, #200]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 80090d6:	f023 0301 	bic.w	r3, r3, #1
 80090da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80090dc:	f7ff fc20 	bl	8008920 <HAL_GetTick>
 80090e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80090e2:	e008      	b.n	80090f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80090e4:	f7ff fc1c 	bl	8008920 <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d901      	bls.n	80090f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e328      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80090f6:	4b2a      	ldr	r3, [pc, #168]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1f0      	bne.n	80090e4 <HAL_RCC_OscConfig+0x1dc>
 8009102:	e000      	b.n	8009106 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009104:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d073      	beq.n	80091fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	2b08      	cmp	r3, #8
 8009116:	d005      	beq.n	8009124 <HAL_RCC_OscConfig+0x21c>
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	2b0c      	cmp	r3, #12
 800911c:	d10e      	bne.n	800913c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b03      	cmp	r3, #3
 8009122:	d10b      	bne.n	800913c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009124:	4b1e      	ldr	r3, [pc, #120]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d063      	beq.n	80091f8 <HAL_RCC_OscConfig+0x2f0>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d15f      	bne.n	80091f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e305      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009144:	d106      	bne.n	8009154 <HAL_RCC_OscConfig+0x24c>
 8009146:	4b16      	ldr	r3, [pc, #88]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a15      	ldr	r2, [pc, #84]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 800914c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009150:	6013      	str	r3, [r2, #0]
 8009152:	e01d      	b.n	8009190 <HAL_RCC_OscConfig+0x288>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800915c:	d10c      	bne.n	8009178 <HAL_RCC_OscConfig+0x270>
 800915e:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a0f      	ldr	r2, [pc, #60]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8009164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	4b0d      	ldr	r3, [pc, #52]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a0c      	ldr	r2, [pc, #48]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8009170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	e00b      	b.n	8009190 <HAL_RCC_OscConfig+0x288>
 8009178:	4b09      	ldr	r3, [pc, #36]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a08      	ldr	r2, [pc, #32]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 800917e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a05      	ldr	r2, [pc, #20]	; (80091a0 <HAL_RCC_OscConfig+0x298>)
 800918a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800918e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01b      	beq.n	80091d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009198:	f7ff fbc2 	bl	8008920 <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800919e:	e010      	b.n	80091c2 <HAL_RCC_OscConfig+0x2ba>
 80091a0:	40021000 	.word	0x40021000
 80091a4:	08010498 	.word	0x08010498
 80091a8:	20000000 	.word	0x20000000
 80091ac:	200000ec 	.word	0x200000ec
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091b0:	f7ff fbb6 	bl	8008920 <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	2b64      	cmp	r3, #100	; 0x64
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e2c2      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091c2:	4baf      	ldr	r3, [pc, #700]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0f0      	beq.n	80091b0 <HAL_RCC_OscConfig+0x2a8>
 80091ce:	e014      	b.n	80091fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d0:	f7ff fba6 	bl	8008920 <HAL_GetTick>
 80091d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80091d6:	e008      	b.n	80091ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091d8:	f7ff fba2 	bl	8008920 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b64      	cmp	r3, #100	; 0x64
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e2ae      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80091ea:	4ba5      	ldr	r3, [pc, #660]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1f0      	bne.n	80091d8 <HAL_RCC_OscConfig+0x2d0>
 80091f6:	e000      	b.n	80091fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0302 	and.w	r3, r3, #2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d060      	beq.n	80092c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b04      	cmp	r3, #4
 800920a:	d005      	beq.n	8009218 <HAL_RCC_OscConfig+0x310>
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	2b0c      	cmp	r3, #12
 8009210:	d119      	bne.n	8009246 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b02      	cmp	r3, #2
 8009216:	d116      	bne.n	8009246 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009218:	4b99      	ldr	r3, [pc, #612]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <HAL_RCC_OscConfig+0x328>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e28b      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009230:	4b93      	ldr	r3, [pc, #588]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	061b      	lsls	r3, r3, #24
 800923e:	4990      	ldr	r1, [pc, #576]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009240:	4313      	orrs	r3, r2
 8009242:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009244:	e040      	b.n	80092c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d023      	beq.n	8009296 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800924e:	4b8c      	ldr	r3, [pc, #560]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a8b      	ldr	r2, [pc, #556]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800925a:	f7ff fb61 	bl	8008920 <HAL_GetTick>
 800925e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009260:	e008      	b.n	8009274 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009262:	f7ff fb5d 	bl	8008920 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	2b02      	cmp	r3, #2
 800926e:	d901      	bls.n	8009274 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e269      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009274:	4b82      	ldr	r3, [pc, #520]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800927c:	2b00      	cmp	r3, #0
 800927e:	d0f0      	beq.n	8009262 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009280:	4b7f      	ldr	r3, [pc, #508]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	061b      	lsls	r3, r3, #24
 800928e:	497c      	ldr	r1, [pc, #496]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009290:	4313      	orrs	r3, r2
 8009292:	604b      	str	r3, [r1, #4]
 8009294:	e018      	b.n	80092c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009296:	4b7a      	ldr	r3, [pc, #488]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a79      	ldr	r2, [pc, #484]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 800929c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a2:	f7ff fb3d 	bl	8008920 <HAL_GetTick>
 80092a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092a8:	e008      	b.n	80092bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092aa:	f7ff fb39 	bl	8008920 <HAL_GetTick>
 80092ae:	4602      	mov	r2, r0
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d901      	bls.n	80092bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e245      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092bc:	4b70      	ldr	r3, [pc, #448]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1f0      	bne.n	80092aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 0308 	and.w	r3, r3, #8
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d03c      	beq.n	800934e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01c      	beq.n	8009316 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092dc:	4b68      	ldr	r3, [pc, #416]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 80092de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092e2:	4a67      	ldr	r2, [pc, #412]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 80092e4:	f043 0301 	orr.w	r3, r3, #1
 80092e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ec:	f7ff fb18 	bl	8008920 <HAL_GetTick>
 80092f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092f2:	e008      	b.n	8009306 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092f4:	f7ff fb14 	bl	8008920 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d901      	bls.n	8009306 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e220      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009306:	4b5e      	ldr	r3, [pc, #376]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800930c:	f003 0302 	and.w	r3, r3, #2
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0ef      	beq.n	80092f4 <HAL_RCC_OscConfig+0x3ec>
 8009314:	e01b      	b.n	800934e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009316:	4b5a      	ldr	r3, [pc, #360]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800931c:	4a58      	ldr	r2, [pc, #352]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 800931e:	f023 0301 	bic.w	r3, r3, #1
 8009322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009326:	f7ff fafb 	bl	8008920 <HAL_GetTick>
 800932a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800932c:	e008      	b.n	8009340 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800932e:	f7ff faf7 	bl	8008920 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	2b02      	cmp	r3, #2
 800933a:	d901      	bls.n	8009340 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e203      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009340:	4b4f      	ldr	r3, [pc, #316]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1ef      	bne.n	800932e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 80a6 	beq.w	80094a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800935c:	2300      	movs	r3, #0
 800935e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009360:	4b47      	ldr	r3, [pc, #284]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10d      	bne.n	8009388 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800936c:	4b44      	ldr	r3, [pc, #272]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 800936e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009370:	4a43      	ldr	r2, [pc, #268]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009376:	6593      	str	r3, [r2, #88]	; 0x58
 8009378:	4b41      	ldr	r3, [pc, #260]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 800937a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800937c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009380:	60bb      	str	r3, [r7, #8]
 8009382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009384:	2301      	movs	r3, #1
 8009386:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009388:	4b3e      	ldr	r3, [pc, #248]	; (8009484 <HAL_RCC_OscConfig+0x57c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009390:	2b00      	cmp	r3, #0
 8009392:	d118      	bne.n	80093c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009394:	4b3b      	ldr	r3, [pc, #236]	; (8009484 <HAL_RCC_OscConfig+0x57c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a3a      	ldr	r2, [pc, #232]	; (8009484 <HAL_RCC_OscConfig+0x57c>)
 800939a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800939e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093a0:	f7ff fabe 	bl	8008920 <HAL_GetTick>
 80093a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093a6:	e008      	b.n	80093ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093a8:	f7ff faba 	bl	8008920 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d901      	bls.n	80093ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e1c6      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093ba:	4b32      	ldr	r3, [pc, #200]	; (8009484 <HAL_RCC_OscConfig+0x57c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0f0      	beq.n	80093a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d108      	bne.n	80093e0 <HAL_RCC_OscConfig+0x4d8>
 80093ce:	4b2c      	ldr	r3, [pc, #176]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 80093d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d4:	4a2a      	ldr	r2, [pc, #168]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 80093d6:	f043 0301 	orr.w	r3, r3, #1
 80093da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093de:	e024      	b.n	800942a <HAL_RCC_OscConfig+0x522>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	2b05      	cmp	r3, #5
 80093e6:	d110      	bne.n	800940a <HAL_RCC_OscConfig+0x502>
 80093e8:	4b25      	ldr	r3, [pc, #148]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 80093ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ee:	4a24      	ldr	r2, [pc, #144]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 80093f0:	f043 0304 	orr.w	r3, r3, #4
 80093f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093f8:	4b21      	ldr	r3, [pc, #132]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 80093fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093fe:	4a20      	ldr	r2, [pc, #128]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009400:	f043 0301 	orr.w	r3, r3, #1
 8009404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009408:	e00f      	b.n	800942a <HAL_RCC_OscConfig+0x522>
 800940a:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 800940c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009410:	4a1b      	ldr	r2, [pc, #108]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009412:	f023 0301 	bic.w	r3, r3, #1
 8009416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800941a:	4b19      	ldr	r3, [pc, #100]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 800941c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009420:	4a17      	ldr	r2, [pc, #92]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009422:	f023 0304 	bic.w	r3, r3, #4
 8009426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d016      	beq.n	8009460 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009432:	f7ff fa75 	bl	8008920 <HAL_GetTick>
 8009436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009438:	e00a      	b.n	8009450 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800943a:	f7ff fa71 	bl	8008920 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	f241 3288 	movw	r2, #5000	; 0x1388
 8009448:	4293      	cmp	r3, r2
 800944a:	d901      	bls.n	8009450 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e17b      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009450:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <HAL_RCC_OscConfig+0x578>)
 8009452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0ed      	beq.n	800943a <HAL_RCC_OscConfig+0x532>
 800945e:	e01a      	b.n	8009496 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009460:	f7ff fa5e 	bl	8008920 <HAL_GetTick>
 8009464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009466:	e00f      	b.n	8009488 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009468:	f7ff fa5a 	bl	8008920 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	f241 3288 	movw	r2, #5000	; 0x1388
 8009476:	4293      	cmp	r3, r2
 8009478:	d906      	bls.n	8009488 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e164      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
 800947e:	bf00      	nop
 8009480:	40021000 	.word	0x40021000
 8009484:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009488:	4ba8      	ldr	r3, [pc, #672]	; (800972c <HAL_RCC_OscConfig+0x824>)
 800948a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e8      	bne.n	8009468 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009496:	7ffb      	ldrb	r3, [r7, #31]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d105      	bne.n	80094a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800949c:	4ba3      	ldr	r3, [pc, #652]	; (800972c <HAL_RCC_OscConfig+0x824>)
 800949e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a0:	4aa2      	ldr	r2, [pc, #648]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80094a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0320 	and.w	r3, r3, #32
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d03c      	beq.n	800952e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01c      	beq.n	80094f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80094bc:	4b9b      	ldr	r3, [pc, #620]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80094be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094c2:	4a9a      	ldr	r2, [pc, #616]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80094c4:	f043 0301 	orr.w	r3, r3, #1
 80094c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094cc:	f7ff fa28 	bl	8008920 <HAL_GetTick>
 80094d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80094d2:	e008      	b.n	80094e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094d4:	f7ff fa24 	bl	8008920 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d901      	bls.n	80094e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e130      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80094e6:	4b91      	ldr	r3, [pc, #580]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80094e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0ef      	beq.n	80094d4 <HAL_RCC_OscConfig+0x5cc>
 80094f4:	e01b      	b.n	800952e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80094f6:	4b8d      	ldr	r3, [pc, #564]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80094f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094fc:	4a8b      	ldr	r2, [pc, #556]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80094fe:	f023 0301 	bic.w	r3, r3, #1
 8009502:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009506:	f7ff fa0b 	bl	8008920 <HAL_GetTick>
 800950a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800950c:	e008      	b.n	8009520 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800950e:	f7ff fa07 	bl	8008920 <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	2b02      	cmp	r3, #2
 800951a:	d901      	bls.n	8009520 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e113      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009520:	4b82      	ldr	r3, [pc, #520]	; (800972c <HAL_RCC_OscConfig+0x824>)
 8009522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1ef      	bne.n	800950e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 8107 	beq.w	8009746 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953c:	2b02      	cmp	r3, #2
 800953e:	f040 80cb 	bne.w	80096d8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009542:	4b7a      	ldr	r3, [pc, #488]	; (800972c <HAL_RCC_OscConfig+0x824>)
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f003 0203 	and.w	r2, r3, #3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009552:	429a      	cmp	r2, r3
 8009554:	d12c      	bne.n	80095b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009560:	3b01      	subs	r3, #1
 8009562:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009564:	429a      	cmp	r2, r3
 8009566:	d123      	bne.n	80095b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009574:	429a      	cmp	r2, r3
 8009576:	d11b      	bne.n	80095b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009582:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009584:	429a      	cmp	r2, r3
 8009586:	d113      	bne.n	80095b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009592:	085b      	lsrs	r3, r3, #1
 8009594:	3b01      	subs	r3, #1
 8009596:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009598:	429a      	cmp	r2, r3
 800959a:	d109      	bne.n	80095b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	085b      	lsrs	r3, r3, #1
 80095a8:	3b01      	subs	r3, #1
 80095aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d06d      	beq.n	800968c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	2b0c      	cmp	r3, #12
 80095b4:	d068      	beq.n	8009688 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80095b6:	4b5d      	ldr	r3, [pc, #372]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d105      	bne.n	80095ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80095c2:	4b5a      	ldr	r3, [pc, #360]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e0ba      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80095d2:	4b56      	ldr	r3, [pc, #344]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a55      	ldr	r2, [pc, #340]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80095d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80095de:	f7ff f99f 	bl	8008920 <HAL_GetTick>
 80095e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095e4:	e008      	b.n	80095f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095e6:	f7ff f99b 	bl	8008920 <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d901      	bls.n	80095f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e0a7      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095f8:	4b4c      	ldr	r3, [pc, #304]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1f0      	bne.n	80095e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009604:	4b49      	ldr	r3, [pc, #292]	; (800972c <HAL_RCC_OscConfig+0x824>)
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	4b49      	ldr	r3, [pc, #292]	; (8009730 <HAL_RCC_OscConfig+0x828>)
 800960a:	4013      	ands	r3, r2
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009614:	3a01      	subs	r2, #1
 8009616:	0112      	lsls	r2, r2, #4
 8009618:	4311      	orrs	r1, r2
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800961e:	0212      	lsls	r2, r2, #8
 8009620:	4311      	orrs	r1, r2
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009626:	0852      	lsrs	r2, r2, #1
 8009628:	3a01      	subs	r2, #1
 800962a:	0552      	lsls	r2, r2, #21
 800962c:	4311      	orrs	r1, r2
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009632:	0852      	lsrs	r2, r2, #1
 8009634:	3a01      	subs	r2, #1
 8009636:	0652      	lsls	r2, r2, #25
 8009638:	4311      	orrs	r1, r2
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800963e:	06d2      	lsls	r2, r2, #27
 8009640:	430a      	orrs	r2, r1
 8009642:	493a      	ldr	r1, [pc, #232]	; (800972c <HAL_RCC_OscConfig+0x824>)
 8009644:	4313      	orrs	r3, r2
 8009646:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009648:	4b38      	ldr	r3, [pc, #224]	; (800972c <HAL_RCC_OscConfig+0x824>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a37      	ldr	r2, [pc, #220]	; (800972c <HAL_RCC_OscConfig+0x824>)
 800964e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009652:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009654:	4b35      	ldr	r3, [pc, #212]	; (800972c <HAL_RCC_OscConfig+0x824>)
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	4a34      	ldr	r2, [pc, #208]	; (800972c <HAL_RCC_OscConfig+0x824>)
 800965a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800965e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009660:	f7ff f95e 	bl	8008920 <HAL_GetTick>
 8009664:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009666:	e008      	b.n	800967a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009668:	f7ff f95a 	bl	8008920 <HAL_GetTick>
 800966c:	4602      	mov	r2, r0
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	2b02      	cmp	r3, #2
 8009674:	d901      	bls.n	800967a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e066      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800967a:	4b2c      	ldr	r3, [pc, #176]	; (800972c <HAL_RCC_OscConfig+0x824>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0f0      	beq.n	8009668 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009686:	e05e      	b.n	8009746 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e05d      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800968c:	4b27      	ldr	r3, [pc, #156]	; (800972c <HAL_RCC_OscConfig+0x824>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d156      	bne.n	8009746 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009698:	4b24      	ldr	r3, [pc, #144]	; (800972c <HAL_RCC_OscConfig+0x824>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a23      	ldr	r2, [pc, #140]	; (800972c <HAL_RCC_OscConfig+0x824>)
 800969e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80096a4:	4b21      	ldr	r3, [pc, #132]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4a20      	ldr	r2, [pc, #128]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80096aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80096b0:	f7ff f936 	bl	8008920 <HAL_GetTick>
 80096b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096b6:	e008      	b.n	80096ca <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096b8:	f7ff f932 	bl	8008920 <HAL_GetTick>
 80096bc:	4602      	mov	r2, r0
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d901      	bls.n	80096ca <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e03e      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096ca:	4b18      	ldr	r3, [pc, #96]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d0f0      	beq.n	80096b8 <HAL_RCC_OscConfig+0x7b0>
 80096d6:	e036      	b.n	8009746 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2b0c      	cmp	r3, #12
 80096dc:	d031      	beq.n	8009742 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a12      	ldr	r2, [pc, #72]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80096e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80096ea:	4b10      	ldr	r3, [pc, #64]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d105      	bne.n	8009702 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80096f6:	4b0d      	ldr	r3, [pc, #52]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	4a0c      	ldr	r2, [pc, #48]	; (800972c <HAL_RCC_OscConfig+0x824>)
 80096fc:	f023 0303 	bic.w	r3, r3, #3
 8009700:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009702:	4b0a      	ldr	r3, [pc, #40]	; (800972c <HAL_RCC_OscConfig+0x824>)
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	4a09      	ldr	r2, [pc, #36]	; (800972c <HAL_RCC_OscConfig+0x824>)
 8009708:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800970c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009710:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009712:	f7ff f905 	bl	8008920 <HAL_GetTick>
 8009716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009718:	e00c      	b.n	8009734 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800971a:	f7ff f901 	bl	8008920 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d905      	bls.n	8009734 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e00d      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
 800972c:	40021000 	.word	0x40021000
 8009730:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009734:	4b06      	ldr	r3, [pc, #24]	; (8009750 <HAL_RCC_OscConfig+0x848>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1ec      	bne.n	800971a <HAL_RCC_OscConfig+0x812>
 8009740:	e001      	b.n	8009746 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e000      	b.n	8009748 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3720      	adds	r7, #32
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40021000 	.word	0x40021000

08009754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e0c8      	b.n	80098fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009768:	4b66      	ldr	r3, [pc, #408]	; (8009904 <HAL_RCC_ClockConfig+0x1b0>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	429a      	cmp	r2, r3
 8009774:	d910      	bls.n	8009798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009776:	4b63      	ldr	r3, [pc, #396]	; (8009904 <HAL_RCC_ClockConfig+0x1b0>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f023 0207 	bic.w	r2, r3, #7
 800977e:	4961      	ldr	r1, [pc, #388]	; (8009904 <HAL_RCC_ClockConfig+0x1b0>)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	4313      	orrs	r3, r2
 8009784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009786:	4b5f      	ldr	r3, [pc, #380]	; (8009904 <HAL_RCC_ClockConfig+0x1b0>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	429a      	cmp	r2, r3
 8009792:	d001      	beq.n	8009798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e0b0      	b.n	80098fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d04c      	beq.n	800983e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	d107      	bne.n	80097bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097ac:	4b56      	ldr	r3, [pc, #344]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d121      	bne.n	80097fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e09e      	b.n	80098fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d107      	bne.n	80097d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097c4:	4b50      	ldr	r3, [pc, #320]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d115      	bne.n	80097fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e092      	b.n	80098fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d107      	bne.n	80097ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097dc:	4b4a      	ldr	r3, [pc, #296]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0302 	and.w	r3, r3, #2
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e086      	b.n	80098fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097ec:	4b46      	ldr	r3, [pc, #280]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e07e      	b.n	80098fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097fc:	4b42      	ldr	r3, [pc, #264]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f023 0203 	bic.w	r2, r3, #3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	493f      	ldr	r1, [pc, #252]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 800980a:	4313      	orrs	r3, r2
 800980c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800980e:	f7ff f887 	bl	8008920 <HAL_GetTick>
 8009812:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009814:	e00a      	b.n	800982c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009816:	f7ff f883 	bl	8008920 <HAL_GetTick>
 800981a:	4602      	mov	r2, r0
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	f241 3288 	movw	r2, #5000	; 0x1388
 8009824:	4293      	cmp	r3, r2
 8009826:	d901      	bls.n	800982c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e066      	b.n	80098fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800982c:	4b36      	ldr	r3, [pc, #216]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f003 020c 	and.w	r2, r3, #12
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	429a      	cmp	r2, r3
 800983c:	d1eb      	bne.n	8009816 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d008      	beq.n	800985c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800984a:	4b2f      	ldr	r3, [pc, #188]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	492c      	ldr	r1, [pc, #176]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 8009858:	4313      	orrs	r3, r2
 800985a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800985c:	4b29      	ldr	r3, [pc, #164]	; (8009904 <HAL_RCC_ClockConfig+0x1b0>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0307 	and.w	r3, r3, #7
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d210      	bcs.n	800988c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800986a:	4b26      	ldr	r3, [pc, #152]	; (8009904 <HAL_RCC_ClockConfig+0x1b0>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f023 0207 	bic.w	r2, r3, #7
 8009872:	4924      	ldr	r1, [pc, #144]	; (8009904 <HAL_RCC_ClockConfig+0x1b0>)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	4313      	orrs	r3, r2
 8009878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800987a:	4b22      	ldr	r3, [pc, #136]	; (8009904 <HAL_RCC_ClockConfig+0x1b0>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	429a      	cmp	r2, r3
 8009886:	d001      	beq.n	800988c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e036      	b.n	80098fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0304 	and.w	r3, r3, #4
 8009894:	2b00      	cmp	r3, #0
 8009896:	d008      	beq.n	80098aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009898:	4b1b      	ldr	r3, [pc, #108]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	4918      	ldr	r1, [pc, #96]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d009      	beq.n	80098ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098b6:	4b14      	ldr	r3, [pc, #80]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	4910      	ldr	r1, [pc, #64]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098ca:	f000 f825 	bl	8009918 <HAL_RCC_GetSysClockFreq>
 80098ce:	4602      	mov	r2, r0
 80098d0:	4b0d      	ldr	r3, [pc, #52]	; (8009908 <HAL_RCC_ClockConfig+0x1b4>)
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	091b      	lsrs	r3, r3, #4
 80098d6:	f003 030f 	and.w	r3, r3, #15
 80098da:	490c      	ldr	r1, [pc, #48]	; (800990c <HAL_RCC_ClockConfig+0x1b8>)
 80098dc:	5ccb      	ldrb	r3, [r1, r3]
 80098de:	f003 031f 	and.w	r3, r3, #31
 80098e2:	fa22 f303 	lsr.w	r3, r2, r3
 80098e6:	4a0a      	ldr	r2, [pc, #40]	; (8009910 <HAL_RCC_ClockConfig+0x1bc>)
 80098e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80098ea:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <HAL_RCC_ClockConfig+0x1c0>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7f7 f9de 	bl	8000cb0 <HAL_InitTick>
 80098f4:	4603      	mov	r3, r0
 80098f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80098f8:	7afb      	ldrb	r3, [r7, #11]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	40022000 	.word	0x40022000
 8009908:	40021000 	.word	0x40021000
 800990c:	08010498 	.word	0x08010498
 8009910:	20000000 	.word	0x20000000
 8009914:	200000ec 	.word	0x200000ec

08009918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009918:	b480      	push	{r7}
 800991a:	b089      	sub	sp, #36	; 0x24
 800991c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	2300      	movs	r3, #0
 8009924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009926:	4b3e      	ldr	r3, [pc, #248]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f003 030c 	and.w	r3, r3, #12
 800992e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009930:	4b3b      	ldr	r3, [pc, #236]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	f003 0303 	and.w	r3, r3, #3
 8009938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d005      	beq.n	800994c <HAL_RCC_GetSysClockFreq+0x34>
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	2b0c      	cmp	r3, #12
 8009944:	d121      	bne.n	800998a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d11e      	bne.n	800998a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800994c:	4b34      	ldr	r3, [pc, #208]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0308 	and.w	r3, r3, #8
 8009954:	2b00      	cmp	r3, #0
 8009956:	d107      	bne.n	8009968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009958:	4b31      	ldr	r3, [pc, #196]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800995a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800995e:	0a1b      	lsrs	r3, r3, #8
 8009960:	f003 030f 	and.w	r3, r3, #15
 8009964:	61fb      	str	r3, [r7, #28]
 8009966:	e005      	b.n	8009974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009968:	4b2d      	ldr	r3, [pc, #180]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	091b      	lsrs	r3, r3, #4
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009974:	4a2b      	ldr	r2, [pc, #172]	; (8009a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800997c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10d      	bne.n	80099a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009988:	e00a      	b.n	80099a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2b04      	cmp	r3, #4
 800998e:	d102      	bne.n	8009996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009990:	4b25      	ldr	r3, [pc, #148]	; (8009a28 <HAL_RCC_GetSysClockFreq+0x110>)
 8009992:	61bb      	str	r3, [r7, #24]
 8009994:	e004      	b.n	80099a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	2b08      	cmp	r3, #8
 800999a:	d101      	bne.n	80099a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800999c:	4b23      	ldr	r3, [pc, #140]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x114>)
 800999e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2b0c      	cmp	r3, #12
 80099a4:	d134      	bne.n	8009a10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80099a6:	4b1e      	ldr	r3, [pc, #120]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d003      	beq.n	80099be <HAL_RCC_GetSysClockFreq+0xa6>
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d003      	beq.n	80099c4 <HAL_RCC_GetSysClockFreq+0xac>
 80099bc:	e005      	b.n	80099ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80099be:	4b1a      	ldr	r3, [pc, #104]	; (8009a28 <HAL_RCC_GetSysClockFreq+0x110>)
 80099c0:	617b      	str	r3, [r7, #20]
      break;
 80099c2:	e005      	b.n	80099d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80099c4:	4b19      	ldr	r3, [pc, #100]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x114>)
 80099c6:	617b      	str	r3, [r7, #20]
      break;
 80099c8:	e002      	b.n	80099d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	617b      	str	r3, [r7, #20]
      break;
 80099ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80099d0:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	091b      	lsrs	r3, r3, #4
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	3301      	adds	r3, #1
 80099dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80099de:	4b10      	ldr	r3, [pc, #64]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	fb02 f203 	mul.w	r2, r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80099f6:	4b0a      	ldr	r3, [pc, #40]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	0e5b      	lsrs	r3, r3, #25
 80099fc:	f003 0303 	and.w	r3, r3, #3
 8009a00:	3301      	adds	r3, #1
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009a10:	69bb      	ldr	r3, [r7, #24]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3724      	adds	r7, #36	; 0x24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	40021000 	.word	0x40021000
 8009a24:	080104b0 	.word	0x080104b0
 8009a28:	00f42400 	.word	0x00f42400
 8009a2c:	007a1200 	.word	0x007a1200

08009a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a30:	b480      	push	{r7}
 8009a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a34:	4b03      	ldr	r3, [pc, #12]	; (8009a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a36:	681b      	ldr	r3, [r3, #0]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	20000000 	.word	0x20000000

08009a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009a4c:	f7ff fff0 	bl	8009a30 <HAL_RCC_GetHCLKFreq>
 8009a50:	4602      	mov	r2, r0
 8009a52:	4b06      	ldr	r3, [pc, #24]	; (8009a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	0a1b      	lsrs	r3, r3, #8
 8009a58:	f003 0307 	and.w	r3, r3, #7
 8009a5c:	4904      	ldr	r1, [pc, #16]	; (8009a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a5e:	5ccb      	ldrb	r3, [r1, r3]
 8009a60:	f003 031f 	and.w	r3, r3, #31
 8009a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	40021000 	.word	0x40021000
 8009a70:	080104a8 	.word	0x080104a8

08009a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009a78:	f7ff ffda 	bl	8009a30 <HAL_RCC_GetHCLKFreq>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	0adb      	lsrs	r3, r3, #11
 8009a84:	f003 0307 	and.w	r3, r3, #7
 8009a88:	4904      	ldr	r1, [pc, #16]	; (8009a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a8a:	5ccb      	ldrb	r3, [r1, r3]
 8009a8c:	f003 031f 	and.w	r3, r3, #31
 8009a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	40021000 	.word	0x40021000
 8009a9c:	080104a8 	.word	0x080104a8

08009aa0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	220f      	movs	r2, #15
 8009aae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009ab0:	4b12      	ldr	r3, [pc, #72]	; (8009afc <HAL_RCC_GetClockConfig+0x5c>)
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f003 0203 	and.w	r2, r3, #3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009abc:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <HAL_RCC_GetClockConfig+0x5c>)
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009ac8:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <HAL_RCC_GetClockConfig+0x5c>)
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009ad4:	4b09      	ldr	r3, [pc, #36]	; (8009afc <HAL_RCC_GetClockConfig+0x5c>)
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	08db      	lsrs	r3, r3, #3
 8009ada:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009ae2:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <HAL_RCC_GetClockConfig+0x60>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0207 	and.w	r2, r3, #7
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	601a      	str	r2, [r3, #0]
}
 8009aee:	bf00      	nop
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40021000 	.word	0x40021000
 8009b00:	40022000 	.word	0x40022000

08009b04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009b10:	4b2a      	ldr	r3, [pc, #168]	; (8009bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009b1c:	f7ff f980 	bl	8008e20 <HAL_PWREx_GetVoltageRange>
 8009b20:	6178      	str	r0, [r7, #20]
 8009b22:	e014      	b.n	8009b4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b24:	4b25      	ldr	r3, [pc, #148]	; (8009bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b28:	4a24      	ldr	r2, [pc, #144]	; (8009bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8009b30:	4b22      	ldr	r3, [pc, #136]	; (8009bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009b3c:	f7ff f970 	bl	8008e20 <HAL_PWREx_GetVoltageRange>
 8009b40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009b42:	4b1e      	ldr	r3, [pc, #120]	; (8009bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b46:	4a1d      	ldr	r2, [pc, #116]	; (8009bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b54:	d10b      	bne.n	8009b6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b80      	cmp	r3, #128	; 0x80
 8009b5a:	d919      	bls.n	8009b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2ba0      	cmp	r3, #160	; 0xa0
 8009b60:	d902      	bls.n	8009b68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009b62:	2302      	movs	r3, #2
 8009b64:	613b      	str	r3, [r7, #16]
 8009b66:	e013      	b.n	8009b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009b68:	2301      	movs	r3, #1
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	e010      	b.n	8009b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b80      	cmp	r3, #128	; 0x80
 8009b72:	d902      	bls.n	8009b7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009b74:	2303      	movs	r3, #3
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	e00a      	b.n	8009b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b80      	cmp	r3, #128	; 0x80
 8009b7e:	d102      	bne.n	8009b86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009b80:	2302      	movs	r3, #2
 8009b82:	613b      	str	r3, [r7, #16]
 8009b84:	e004      	b.n	8009b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b70      	cmp	r3, #112	; 0x70
 8009b8a:	d101      	bne.n	8009b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009b90:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f023 0207 	bic.w	r2, r3, #7
 8009b98:	4909      	ldr	r1, [pc, #36]	; (8009bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009ba0:	4b07      	ldr	r3, [pc, #28]	; (8009bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0307 	and.w	r3, r3, #7
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d001      	beq.n	8009bb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e000      	b.n	8009bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	40021000 	.word	0x40021000
 8009bc0:	40022000 	.word	0x40022000

08009bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009bcc:	2300      	movs	r3, #0
 8009bce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d041      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009be4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009be8:	d02a      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009bea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009bee:	d824      	bhi.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009bf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bf4:	d008      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009bf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bfa:	d81e      	bhi.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c04:	d010      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c06:	e018      	b.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009c08:	4b86      	ldr	r3, [pc, #536]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	4a85      	ldr	r2, [pc, #532]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009c14:	e015      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f000 facd 	bl	800a1bc <RCCEx_PLLSAI1_Config>
 8009c22:	4603      	mov	r3, r0
 8009c24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009c26:	e00c      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3320      	adds	r3, #32
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fbb6 	bl	800a3a0 <RCCEx_PLLSAI2_Config>
 8009c34:	4603      	mov	r3, r0
 8009c36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009c38:	e003      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	74fb      	strb	r3, [r7, #19]
      break;
 8009c3e:	e000      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c42:	7cfb      	ldrb	r3, [r7, #19]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10b      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c48:	4b76      	ldr	r3, [pc, #472]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c56:	4973      	ldr	r1, [pc, #460]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009c5e:	e001      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c60:	7cfb      	ldrb	r3, [r7, #19]
 8009c62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d041      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c78:	d02a      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009c7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c7e:	d824      	bhi.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009c80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c84:	d008      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c8a:	d81e      	bhi.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00a      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c94:	d010      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009c96:	e018      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009c98:	4b62      	ldr	r3, [pc, #392]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	4a61      	ldr	r2, [pc, #388]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ca2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009ca4:	e015      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	2100      	movs	r1, #0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 fa85 	bl	800a1bc <RCCEx_PLLSAI1_Config>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009cb6:	e00c      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3320      	adds	r3, #32
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 fb6e 	bl	800a3a0 <RCCEx_PLLSAI2_Config>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009cc8:	e003      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	74fb      	strb	r3, [r7, #19]
      break;
 8009cce:	e000      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cd2:	7cfb      	ldrb	r3, [r7, #19]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10b      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009cd8:	4b52      	ldr	r3, [pc, #328]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce6:	494f      	ldr	r1, [pc, #316]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009cee:	e001      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf0:	7cfb      	ldrb	r3, [r7, #19]
 8009cf2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80a0 	beq.w	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d02:	2300      	movs	r3, #0
 8009d04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009d06:	4b47      	ldr	r3, [pc, #284]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e000      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009d16:	2300      	movs	r3, #0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00d      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d1c:	4b41      	ldr	r3, [pc, #260]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d20:	4a40      	ldr	r2, [pc, #256]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d26:	6593      	str	r3, [r2, #88]	; 0x58
 8009d28:	4b3e      	ldr	r3, [pc, #248]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d30:	60bb      	str	r3, [r7, #8]
 8009d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d34:	2301      	movs	r3, #1
 8009d36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d38:	4b3b      	ldr	r3, [pc, #236]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a3a      	ldr	r2, [pc, #232]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d44:	f7fe fdec 	bl	8008920 <HAL_GetTick>
 8009d48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009d4a:	e009      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d4c:	f7fe fde8 	bl	8008920 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d902      	bls.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	74fb      	strb	r3, [r7, #19]
        break;
 8009d5e:	e005      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009d60:	4b31      	ldr	r3, [pc, #196]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d0ef      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009d6c:	7cfb      	ldrb	r3, [r7, #19]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d15c      	bne.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009d72:	4b2c      	ldr	r3, [pc, #176]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01f      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d019      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009d90:	4b24      	ldr	r3, [pc, #144]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d9c:	4b21      	ldr	r3, [pc, #132]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009da2:	4a20      	ldr	r2, [pc, #128]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009dac:	4b1d      	ldr	r3, [pc, #116]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db2:	4a1c      	ldr	r2, [pc, #112]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009dbc:	4a19      	ldr	r2, [pc, #100]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d016      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dce:	f7fe fda7 	bl	8008920 <HAL_GetTick>
 8009dd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dd4:	e00b      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dd6:	f7fe fda3 	bl	8008920 <HAL_GetTick>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d902      	bls.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	74fb      	strb	r3, [r7, #19]
            break;
 8009dec:	e006      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dee:	4b0d      	ldr	r3, [pc, #52]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0ec      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009dfc:	7cfb      	ldrb	r3, [r7, #19]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10c      	bne.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e02:	4b08      	ldr	r3, [pc, #32]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e12:	4904      	ldr	r1, [pc, #16]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009e1a:	e009      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e1c:	7cfb      	ldrb	r3, [r7, #19]
 8009e1e:	74bb      	strb	r3, [r7, #18]
 8009e20:	e006      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009e22:	bf00      	nop
 8009e24:	40021000 	.word	0x40021000
 8009e28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e2c:	7cfb      	ldrb	r3, [r7, #19]
 8009e2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e30:	7c7b      	ldrb	r3, [r7, #17]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d105      	bne.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e36:	4ba6      	ldr	r3, [pc, #664]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e3a:	4aa5      	ldr	r2, [pc, #660]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009e4e:	4ba0      	ldr	r3, [pc, #640]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e54:	f023 0203 	bic.w	r2, r3, #3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5c:	499c      	ldr	r1, [pc, #624]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00a      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009e70:	4b97      	ldr	r3, [pc, #604]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e76:	f023 020c 	bic.w	r2, r3, #12
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7e:	4994      	ldr	r1, [pc, #592]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00a      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009e92:	4b8f      	ldr	r3, [pc, #572]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea0:	498b      	ldr	r1, [pc, #556]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 0308 	and.w	r3, r3, #8
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00a      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009eb4:	4b86      	ldr	r3, [pc, #536]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec2:	4983      	ldr	r1, [pc, #524]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 0310 	and.w	r3, r3, #16
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009ed6:	4b7e      	ldr	r3, [pc, #504]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee4:	497a      	ldr	r1, [pc, #488]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0320 	and.w	r3, r3, #32
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00a      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ef8:	4b75      	ldr	r3, [pc, #468]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009efe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f06:	4972      	ldr	r1, [pc, #456]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f1a:	4b6d      	ldr	r3, [pc, #436]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f28:	4969      	ldr	r1, [pc, #420]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00a      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f3c:	4b64      	ldr	r3, [pc, #400]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f4a:	4961      	ldr	r1, [pc, #388]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f5e:	4b5c      	ldr	r3, [pc, #368]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f6c:	4958      	ldr	r1, [pc, #352]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00a      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f80:	4b53      	ldr	r3, [pc, #332]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8e:	4950      	ldr	r1, [pc, #320]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00a      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009fa2:	4b4b      	ldr	r3, [pc, #300]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb0:	4947      	ldr	r1, [pc, #284]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00a      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009fc4:	4b42      	ldr	r3, [pc, #264]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fca:	f023 0203 	bic.w	r2, r3, #3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd2:	493f      	ldr	r1, [pc, #252]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d028      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009fe6:	4b3a      	ldr	r3, [pc, #232]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff4:	4936      	ldr	r1, [pc, #216]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a004:	d106      	bne.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a006:	4b32      	ldr	r3, [pc, #200]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	4a31      	ldr	r2, [pc, #196]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a00c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a010:	60d3      	str	r3, [r2, #12]
 800a012:	e011      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a01c:	d10c      	bne.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3304      	adds	r3, #4
 800a022:	2101      	movs	r1, #1
 800a024:	4618      	mov	r0, r3
 800a026:	f000 f8c9 	bl	800a1bc <RCCEx_PLLSAI1_Config>
 800a02a:	4603      	mov	r3, r0
 800a02c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a02e:	7cfb      	ldrb	r3, [r7, #19]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800a034:	7cfb      	ldrb	r3, [r7, #19]
 800a036:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d028      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a044:	4b22      	ldr	r3, [pc, #136]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a052:	491f      	ldr	r1, [pc, #124]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a054:	4313      	orrs	r3, r2
 800a056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a05e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a062:	d106      	bne.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a064:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	4a19      	ldr	r2, [pc, #100]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a06a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a06e:	60d3      	str	r3, [r2, #12]
 800a070:	e011      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a076:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a07a:	d10c      	bne.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3304      	adds	r3, #4
 800a080:	2101      	movs	r1, #1
 800a082:	4618      	mov	r0, r3
 800a084:	f000 f89a 	bl	800a1bc <RCCEx_PLLSAI1_Config>
 800a088:	4603      	mov	r3, r0
 800a08a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a08c:	7cfb      	ldrb	r3, [r7, #19]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800a092:	7cfb      	ldrb	r3, [r7, #19]
 800a094:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d02a      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0a2:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0b0:	4907      	ldr	r1, [pc, #28]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0c0:	d108      	bne.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0c2:	4b03      	ldr	r3, [pc, #12]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	4a02      	ldr	r2, [pc, #8]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a0c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0cc:	60d3      	str	r3, [r2, #12]
 800a0ce:	e013      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800a0d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0dc:	d10c      	bne.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 f869 	bl	800a1bc <RCCEx_PLLSAI1_Config>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a0ee:	7cfb      	ldrb	r3, [r7, #19]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800a0f4:	7cfb      	ldrb	r3, [r7, #19]
 800a0f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d02f      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a104:	4b2c      	ldr	r3, [pc, #176]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a112:	4929      	ldr	r1, [pc, #164]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a114:	4313      	orrs	r3, r2
 800a116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a11e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a122:	d10d      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3304      	adds	r3, #4
 800a128:	2102      	movs	r1, #2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 f846 	bl	800a1bc <RCCEx_PLLSAI1_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a134:	7cfb      	ldrb	r3, [r7, #19]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d014      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800a13a:	7cfb      	ldrb	r3, [r7, #19]
 800a13c:	74bb      	strb	r3, [r7, #18]
 800a13e:	e011      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a148:	d10c      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3320      	adds	r3, #32
 800a14e:	2102      	movs	r1, #2
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f925 	bl	800a3a0 <RCCEx_PLLSAI2_Config>
 800a156:	4603      	mov	r3, r0
 800a158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a15a:	7cfb      	ldrb	r3, [r7, #19]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800a160:	7cfb      	ldrb	r3, [r7, #19]
 800a162:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00b      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a170:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a176:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a180:	490d      	ldr	r1, [pc, #52]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a182:	4313      	orrs	r3, r2
 800a184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00b      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a194:	4b08      	ldr	r3, [pc, #32]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1a4:	4904      	ldr	r1, [pc, #16]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a1ac:	7cbb      	ldrb	r3, [r7, #18]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	40021000 	.word	0x40021000

0800a1bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a1ca:	4b74      	ldr	r3, [pc, #464]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f003 0303 	and.w	r3, r3, #3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d018      	beq.n	800a208 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a1d6:	4b71      	ldr	r3, [pc, #452]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	f003 0203 	and.w	r2, r3, #3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d10d      	bne.n	800a202 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
       ||
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d009      	beq.n	800a202 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a1ee:	4b6b      	ldr	r3, [pc, #428]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	091b      	lsrs	r3, r3, #4
 800a1f4:	f003 0307 	and.w	r3, r3, #7
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
       ||
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d047      	beq.n	800a292 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	73fb      	strb	r3, [r7, #15]
 800a206:	e044      	b.n	800a292 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b03      	cmp	r3, #3
 800a20e:	d018      	beq.n	800a242 <RCCEx_PLLSAI1_Config+0x86>
 800a210:	2b03      	cmp	r3, #3
 800a212:	d825      	bhi.n	800a260 <RCCEx_PLLSAI1_Config+0xa4>
 800a214:	2b01      	cmp	r3, #1
 800a216:	d002      	beq.n	800a21e <RCCEx_PLLSAI1_Config+0x62>
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d009      	beq.n	800a230 <RCCEx_PLLSAI1_Config+0x74>
 800a21c:	e020      	b.n	800a260 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a21e:	4b5f      	ldr	r3, [pc, #380]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 0302 	and.w	r3, r3, #2
 800a226:	2b00      	cmp	r3, #0
 800a228:	d11d      	bne.n	800a266 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a22e:	e01a      	b.n	800a266 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a230:	4b5a      	ldr	r3, [pc, #360]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d116      	bne.n	800a26a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a240:	e013      	b.n	800a26a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a242:	4b56      	ldr	r3, [pc, #344]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10f      	bne.n	800a26e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a24e:	4b53      	ldr	r3, [pc, #332]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d109      	bne.n	800a26e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a25e:	e006      	b.n	800a26e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	73fb      	strb	r3, [r7, #15]
      break;
 800a264:	e004      	b.n	800a270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a266:	bf00      	nop
 800a268:	e002      	b.n	800a270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a26a:	bf00      	nop
 800a26c:	e000      	b.n	800a270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a26e:	bf00      	nop
    }

    if(status == HAL_OK)
 800a270:	7bfb      	ldrb	r3, [r7, #15]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10d      	bne.n	800a292 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a276:	4b49      	ldr	r3, [pc, #292]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6819      	ldr	r1, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	3b01      	subs	r3, #1
 800a288:	011b      	lsls	r3, r3, #4
 800a28a:	430b      	orrs	r3, r1
 800a28c:	4943      	ldr	r1, [pc, #268]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a28e:	4313      	orrs	r3, r2
 800a290:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d17c      	bne.n	800a392 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a298:	4b40      	ldr	r3, [pc, #256]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a3f      	ldr	r2, [pc, #252]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a29e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a2a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2a4:	f7fe fb3c 	bl	8008920 <HAL_GetTick>
 800a2a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a2aa:	e009      	b.n	800a2c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a2ac:	f7fe fb38 	bl	8008920 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d902      	bls.n	800a2c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	73fb      	strb	r3, [r7, #15]
        break;
 800a2be:	e005      	b.n	800a2cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a2c0:	4b36      	ldr	r3, [pc, #216]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1ef      	bne.n	800a2ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d15f      	bne.n	800a392 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d110      	bne.n	800a2fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a2d8:	4b30      	ldr	r3, [pc, #192]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a2e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	6892      	ldr	r2, [r2, #8]
 800a2e8:	0211      	lsls	r1, r2, #8
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	68d2      	ldr	r2, [r2, #12]
 800a2ee:	06d2      	lsls	r2, r2, #27
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	492a      	ldr	r1, [pc, #168]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	610b      	str	r3, [r1, #16]
 800a2f8:	e027      	b.n	800a34a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d112      	bne.n	800a326 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a300:	4b26      	ldr	r3, [pc, #152]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a308:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	6892      	ldr	r2, [r2, #8]
 800a310:	0211      	lsls	r1, r2, #8
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	6912      	ldr	r2, [r2, #16]
 800a316:	0852      	lsrs	r2, r2, #1
 800a318:	3a01      	subs	r2, #1
 800a31a:	0552      	lsls	r2, r2, #21
 800a31c:	430a      	orrs	r2, r1
 800a31e:	491f      	ldr	r1, [pc, #124]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a320:	4313      	orrs	r3, r2
 800a322:	610b      	str	r3, [r1, #16]
 800a324:	e011      	b.n	800a34a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a326:	4b1d      	ldr	r3, [pc, #116]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a32e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	6892      	ldr	r2, [r2, #8]
 800a336:	0211      	lsls	r1, r2, #8
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	6952      	ldr	r2, [r2, #20]
 800a33c:	0852      	lsrs	r2, r2, #1
 800a33e:	3a01      	subs	r2, #1
 800a340:	0652      	lsls	r2, r2, #25
 800a342:	430a      	orrs	r2, r1
 800a344:	4915      	ldr	r1, [pc, #84]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a346:	4313      	orrs	r3, r2
 800a348:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a34a:	4b14      	ldr	r3, [pc, #80]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a13      	ldr	r2, [pc, #76]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a350:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a354:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a356:	f7fe fae3 	bl	8008920 <HAL_GetTick>
 800a35a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a35c:	e009      	b.n	800a372 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a35e:	f7fe fadf 	bl	8008920 <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d902      	bls.n	800a372 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	73fb      	strb	r3, [r7, #15]
          break;
 800a370:	e005      	b.n	800a37e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a372:	4b0a      	ldr	r3, [pc, #40]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d0ef      	beq.n	800a35e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a384:	4b05      	ldr	r3, [pc, #20]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a386:	691a      	ldr	r2, [r3, #16]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	4903      	ldr	r1, [pc, #12]	; (800a39c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a38e:	4313      	orrs	r3, r2
 800a390:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a392:	7bfb      	ldrb	r3, [r7, #15]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	40021000 	.word	0x40021000

0800a3a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a3ae:	4b69      	ldr	r3, [pc, #420]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	f003 0303 	and.w	r3, r3, #3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d018      	beq.n	800a3ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a3ba:	4b66      	ldr	r3, [pc, #408]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f003 0203 	and.w	r2, r3, #3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d10d      	bne.n	800a3e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
       ||
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d009      	beq.n	800a3e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a3d2:	4b60      	ldr	r3, [pc, #384]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	091b      	lsrs	r3, r3, #4
 800a3d8:	f003 0307 	and.w	r3, r3, #7
 800a3dc:	1c5a      	adds	r2, r3, #1
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
       ||
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d047      	beq.n	800a476 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	73fb      	strb	r3, [r7, #15]
 800a3ea:	e044      	b.n	800a476 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d018      	beq.n	800a426 <RCCEx_PLLSAI2_Config+0x86>
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d825      	bhi.n	800a444 <RCCEx_PLLSAI2_Config+0xa4>
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d002      	beq.n	800a402 <RCCEx_PLLSAI2_Config+0x62>
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d009      	beq.n	800a414 <RCCEx_PLLSAI2_Config+0x74>
 800a400:	e020      	b.n	800a444 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a402:	4b54      	ldr	r3, [pc, #336]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d11d      	bne.n	800a44a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a412:	e01a      	b.n	800a44a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a414:	4b4f      	ldr	r3, [pc, #316]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d116      	bne.n	800a44e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a424:	e013      	b.n	800a44e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a426:	4b4b      	ldr	r3, [pc, #300]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10f      	bne.n	800a452 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a432:	4b48      	ldr	r3, [pc, #288]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d109      	bne.n	800a452 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a442:	e006      	b.n	800a452 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
      break;
 800a448:	e004      	b.n	800a454 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a44a:	bf00      	nop
 800a44c:	e002      	b.n	800a454 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a44e:	bf00      	nop
 800a450:	e000      	b.n	800a454 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a452:	bf00      	nop
    }

    if(status == HAL_OK)
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10d      	bne.n	800a476 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a45a:	4b3e      	ldr	r3, [pc, #248]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6819      	ldr	r1, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	011b      	lsls	r3, r3, #4
 800a46e:	430b      	orrs	r3, r1
 800a470:	4938      	ldr	r1, [pc, #224]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a472:	4313      	orrs	r3, r2
 800a474:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d166      	bne.n	800a54a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a47c:	4b35      	ldr	r3, [pc, #212]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a34      	ldr	r2, [pc, #208]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a488:	f7fe fa4a 	bl	8008920 <HAL_GetTick>
 800a48c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a48e:	e009      	b.n	800a4a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a490:	f7fe fa46 	bl	8008920 <HAL_GetTick>
 800a494:	4602      	mov	r2, r0
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d902      	bls.n	800a4a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	73fb      	strb	r3, [r7, #15]
        break;
 800a4a2:	e005      	b.n	800a4b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a4a4:	4b2b      	ldr	r3, [pc, #172]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1ef      	bne.n	800a490 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d149      	bne.n	800a54a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d110      	bne.n	800a4de <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a4bc:	4b25      	ldr	r3, [pc, #148]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a4c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	6892      	ldr	r2, [r2, #8]
 800a4cc:	0211      	lsls	r1, r2, #8
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	68d2      	ldr	r2, [r2, #12]
 800a4d2:	06d2      	lsls	r2, r2, #27
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	491f      	ldr	r1, [pc, #124]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	614b      	str	r3, [r1, #20]
 800a4dc:	e011      	b.n	800a502 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a4de:	4b1d      	ldr	r3, [pc, #116]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a4e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	6892      	ldr	r2, [r2, #8]
 800a4ee:	0211      	lsls	r1, r2, #8
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6912      	ldr	r2, [r2, #16]
 800a4f4:	0852      	lsrs	r2, r2, #1
 800a4f6:	3a01      	subs	r2, #1
 800a4f8:	0652      	lsls	r2, r2, #25
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	4915      	ldr	r1, [pc, #84]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a502:	4b14      	ldr	r3, [pc, #80]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a13      	ldr	r2, [pc, #76]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a50c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a50e:	f7fe fa07 	bl	8008920 <HAL_GetTick>
 800a512:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a514:	e009      	b.n	800a52a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a516:	f7fe fa03 	bl	8008920 <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	2b02      	cmp	r3, #2
 800a522:	d902      	bls.n	800a52a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	73fb      	strb	r3, [r7, #15]
          break;
 800a528:	e005      	b.n	800a536 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a52a:	4b0a      	ldr	r3, [pc, #40]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0ef      	beq.n	800a516 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800a536:	7bfb      	ldrb	r3, [r7, #15]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d106      	bne.n	800a54a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a53c:	4b05      	ldr	r3, [pc, #20]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a53e:	695a      	ldr	r2, [r3, #20]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	4903      	ldr	r1, [pc, #12]	; (800a554 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a546:	4313      	orrs	r3, r2
 800a548:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	40021000 	.word	0x40021000

0800a558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e01d      	b.n	800a5a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d106      	bne.n	800a584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f815 	bl	800a5ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2202      	movs	r2, #2
 800a588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	3304      	adds	r3, #4
 800a594:	4619      	mov	r1, r3
 800a596:	4610      	mov	r0, r2
 800a598:	f000 f986 	bl	800a8a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a5b6:	bf00      	nop
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
	...

0800a5c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68da      	ldr	r2, [r3, #12]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f042 0201 	orr.w	r2, r2, #1
 800a5da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	4b0c      	ldr	r3, [pc, #48]	; (800a614 <HAL_TIM_Base_Start_IT+0x50>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b06      	cmp	r3, #6
 800a5ec:	d00b      	beq.n	800a606 <HAL_TIM_Base_Start_IT+0x42>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5f4:	d007      	beq.n	800a606 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f042 0201 	orr.w	r2, r2, #1
 800a604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	00010007 	.word	0x00010007

0800a618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	f003 0302 	and.w	r3, r3, #2
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d122      	bne.n	800a674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	f003 0302 	and.w	r3, r3, #2
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d11b      	bne.n	800a674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f06f 0202 	mvn.w	r2, #2
 800a644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	f003 0303 	and.w	r3, r3, #3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f905 	bl	800a86a <HAL_TIM_IC_CaptureCallback>
 800a660:	e005      	b.n	800a66e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f8f7 	bl	800a856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f908 	bl	800a87e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	f003 0304 	and.w	r3, r3, #4
 800a67e:	2b04      	cmp	r3, #4
 800a680:	d122      	bne.n	800a6c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	f003 0304 	and.w	r3, r3, #4
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d11b      	bne.n	800a6c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f06f 0204 	mvn.w	r2, #4
 800a698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2202      	movs	r2, #2
 800a69e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d003      	beq.n	800a6b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f8db 	bl	800a86a <HAL_TIM_IC_CaptureCallback>
 800a6b4:	e005      	b.n	800a6c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f8cd 	bl	800a856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f8de 	bl	800a87e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	f003 0308 	and.w	r3, r3, #8
 800a6d2:	2b08      	cmp	r3, #8
 800a6d4:	d122      	bne.n	800a71c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	f003 0308 	and.w	r3, r3, #8
 800a6e0:	2b08      	cmp	r3, #8
 800a6e2:	d11b      	bne.n	800a71c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f06f 0208 	mvn.w	r2, #8
 800a6ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2204      	movs	r2, #4
 800a6f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	f003 0303 	and.w	r3, r3, #3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f8b1 	bl	800a86a <HAL_TIM_IC_CaptureCallback>
 800a708:	e005      	b.n	800a716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f8a3 	bl	800a856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f8b4 	bl	800a87e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	f003 0310 	and.w	r3, r3, #16
 800a726:	2b10      	cmp	r3, #16
 800a728:	d122      	bne.n	800a770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b10      	cmp	r3, #16
 800a736:	d11b      	bne.n	800a770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f06f 0210 	mvn.w	r2, #16
 800a740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2208      	movs	r2, #8
 800a746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a752:	2b00      	cmp	r3, #0
 800a754:	d003      	beq.n	800a75e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f887 	bl	800a86a <HAL_TIM_IC_CaptureCallback>
 800a75c:	e005      	b.n	800a76a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f879 	bl	800a856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f88a 	bl	800a87e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d10e      	bne.n	800a79c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d107      	bne.n	800a79c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f06f 0201 	mvn.w	r2, #1
 800a794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7f6 fa48 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7a6:	2b80      	cmp	r3, #128	; 0x80
 800a7a8:	d10e      	bne.n	800a7c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b4:	2b80      	cmp	r3, #128	; 0x80
 800a7b6:	d107      	bne.n	800a7c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f914 	bl	800a9f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7d6:	d10e      	bne.n	800a7f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e2:	2b80      	cmp	r3, #128	; 0x80
 800a7e4:	d107      	bne.n	800a7f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a7ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f907 	bl	800aa04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a800:	2b40      	cmp	r3, #64	; 0x40
 800a802:	d10e      	bne.n	800a822 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a80e:	2b40      	cmp	r3, #64	; 0x40
 800a810:	d107      	bne.n	800a822 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a81a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f838 	bl	800a892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b20      	cmp	r3, #32
 800a82e:	d10e      	bne.n	800a84e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	f003 0320 	and.w	r3, r3, #32
 800a83a:	2b20      	cmp	r3, #32
 800a83c:	d107      	bne.n	800a84e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f06f 0220 	mvn.w	r2, #32
 800a846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f8c7 	bl	800a9dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a84e:	bf00      	nop
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a85e:	bf00      	nop
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a872:	bf00      	nop
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a87e:	b480      	push	{r7}
 800a880:	b083      	sub	sp, #12
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a892:	b480      	push	{r7}
 800a894:	b083      	sub	sp, #12
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a89a:	bf00      	nop
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
	...

0800a8a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a40      	ldr	r2, [pc, #256]	; (800a9bc <TIM_Base_SetConfig+0x114>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d013      	beq.n	800a8e8 <TIM_Base_SetConfig+0x40>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8c6:	d00f      	beq.n	800a8e8 <TIM_Base_SetConfig+0x40>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a3d      	ldr	r2, [pc, #244]	; (800a9c0 <TIM_Base_SetConfig+0x118>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d00b      	beq.n	800a8e8 <TIM_Base_SetConfig+0x40>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a3c      	ldr	r2, [pc, #240]	; (800a9c4 <TIM_Base_SetConfig+0x11c>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d007      	beq.n	800a8e8 <TIM_Base_SetConfig+0x40>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a3b      	ldr	r2, [pc, #236]	; (800a9c8 <TIM_Base_SetConfig+0x120>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d003      	beq.n	800a8e8 <TIM_Base_SetConfig+0x40>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a3a      	ldr	r2, [pc, #232]	; (800a9cc <TIM_Base_SetConfig+0x124>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d108      	bne.n	800a8fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a2f      	ldr	r2, [pc, #188]	; (800a9bc <TIM_Base_SetConfig+0x114>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d01f      	beq.n	800a942 <TIM_Base_SetConfig+0x9a>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a908:	d01b      	beq.n	800a942 <TIM_Base_SetConfig+0x9a>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a2c      	ldr	r2, [pc, #176]	; (800a9c0 <TIM_Base_SetConfig+0x118>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d017      	beq.n	800a942 <TIM_Base_SetConfig+0x9a>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a2b      	ldr	r2, [pc, #172]	; (800a9c4 <TIM_Base_SetConfig+0x11c>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d013      	beq.n	800a942 <TIM_Base_SetConfig+0x9a>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a2a      	ldr	r2, [pc, #168]	; (800a9c8 <TIM_Base_SetConfig+0x120>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d00f      	beq.n	800a942 <TIM_Base_SetConfig+0x9a>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a29      	ldr	r2, [pc, #164]	; (800a9cc <TIM_Base_SetConfig+0x124>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d00b      	beq.n	800a942 <TIM_Base_SetConfig+0x9a>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a28      	ldr	r2, [pc, #160]	; (800a9d0 <TIM_Base_SetConfig+0x128>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d007      	beq.n	800a942 <TIM_Base_SetConfig+0x9a>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a27      	ldr	r2, [pc, #156]	; (800a9d4 <TIM_Base_SetConfig+0x12c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d003      	beq.n	800a942 <TIM_Base_SetConfig+0x9a>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a26      	ldr	r2, [pc, #152]	; (800a9d8 <TIM_Base_SetConfig+0x130>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d108      	bne.n	800a954 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	4313      	orrs	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	4313      	orrs	r3, r2
 800a960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	689a      	ldr	r2, [r3, #8]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a10      	ldr	r2, [pc, #64]	; (800a9bc <TIM_Base_SetConfig+0x114>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d00f      	beq.n	800a9a0 <TIM_Base_SetConfig+0xf8>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a12      	ldr	r2, [pc, #72]	; (800a9cc <TIM_Base_SetConfig+0x124>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d00b      	beq.n	800a9a0 <TIM_Base_SetConfig+0xf8>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a11      	ldr	r2, [pc, #68]	; (800a9d0 <TIM_Base_SetConfig+0x128>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d007      	beq.n	800a9a0 <TIM_Base_SetConfig+0xf8>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a10      	ldr	r2, [pc, #64]	; (800a9d4 <TIM_Base_SetConfig+0x12c>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d003      	beq.n	800a9a0 <TIM_Base_SetConfig+0xf8>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a0f      	ldr	r2, [pc, #60]	; (800a9d8 <TIM_Base_SetConfig+0x130>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d103      	bne.n	800a9a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	691a      	ldr	r2, [r3, #16]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	615a      	str	r2, [r3, #20]
}
 800a9ae:	bf00      	nop
 800a9b0:	3714      	adds	r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	40012c00 	.word	0x40012c00
 800a9c0:	40000400 	.word	0x40000400
 800a9c4:	40000800 	.word	0x40000800
 800a9c8:	40000c00 	.word	0x40000c00
 800a9cc:	40013400 	.word	0x40013400
 800a9d0:	40014000 	.word	0x40014000
 800a9d4:	40014400 	.word	0x40014400
 800a9d8:	40014800 	.word	0x40014800

0800a9dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e040      	b.n	800aaac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d106      	bne.n	800aa40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7f6 faf4 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2224      	movs	r2, #36	; 0x24
 800aa44:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f022 0201 	bic.w	r2, r2, #1
 800aa54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f8c0 	bl	800abdc <UART_SetConfig>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d101      	bne.n	800aa66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e022      	b.n	800aaac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d002      	beq.n	800aa74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fc36 	bl	800b2e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	685a      	ldr	r2, [r3, #4]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689a      	ldr	r2, [r3, #8]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f042 0201 	orr.w	r2, r2, #1
 800aaa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fcbd 	bl	800b424 <UART_CheckIdleState>
 800aaaa:	4603      	mov	r3, r0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08a      	sub	sp, #40	; 0x28
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	603b      	str	r3, [r7, #0]
 800aac0:	4613      	mov	r3, r2
 800aac2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aac8:	2b20      	cmp	r3, #32
 800aaca:	f040 8081 	bne.w	800abd0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <HAL_UART_Transmit+0x26>
 800aad4:	88fb      	ldrh	r3, [r7, #6]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e079      	b.n	800abd2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d101      	bne.n	800aaec <HAL_UART_Transmit+0x38>
 800aae8:	2302      	movs	r3, #2
 800aaea:	e072      	b.n	800abd2 <HAL_UART_Transmit+0x11e>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2221      	movs	r2, #33	; 0x21
 800aafe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ab00:	f7fd ff0e 	bl	8008920 <HAL_GetTick>
 800ab04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	88fa      	ldrh	r2, [r7, #6]
 800ab0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	88fa      	ldrh	r2, [r7, #6]
 800ab12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab1e:	d108      	bne.n	800ab32 <HAL_UART_Transmit+0x7e>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d104      	bne.n	800ab32 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	61bb      	str	r3, [r7, #24]
 800ab30:	e003      	b.n	800ab3a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800ab42:	e02d      	b.n	800aba0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	2180      	movs	r1, #128	; 0x80
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f000 fcad 	bl	800b4ae <UART_WaitOnFlagUntilTimeout>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	e039      	b.n	800abd2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10b      	bne.n	800ab7c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	881a      	ldrh	r2, [r3, #0]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab70:	b292      	uxth	r2, r2
 800ab72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	3302      	adds	r3, #2
 800ab78:	61bb      	str	r3, [r7, #24]
 800ab7a:	e008      	b.n	800ab8e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	781a      	ldrb	r2, [r3, #0]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	b292      	uxth	r2, r2
 800ab86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	3b01      	subs	r3, #1
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1cb      	bne.n	800ab44 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	2200      	movs	r2, #0
 800abb4:	2140      	movs	r1, #64	; 0x40
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 fc79 	bl	800b4ae <UART_WaitOnFlagUntilTimeout>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e005      	b.n	800abd2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2220      	movs	r2, #32
 800abca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800abcc:	2300      	movs	r3, #0
 800abce:	e000      	b.n	800abd2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800abd0:	2302      	movs	r3, #2
  }
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3720      	adds	r7, #32
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abe0:	b08c      	sub	sp, #48	; 0x30
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800abe6:	2300      	movs	r3, #0
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800abf0:	2300      	movs	r3, #0
 800abf2:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	689a      	ldr	r2, [r3, #8]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	431a      	orrs	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	431a      	orrs	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	69db      	ldr	r3, [r3, #28]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	4bb9      	ldr	r3, [pc, #740]	; (800aef8 <UART_SetConfig+0x31c>)
 800ac14:	4013      	ands	r3, r2
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	6812      	ldr	r2, [r2, #0]
 800ac1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	68da      	ldr	r2, [r3, #12]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4aae      	ldr	r2, [pc, #696]	; (800aefc <UART_SetConfig+0x320>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d004      	beq.n	800ac50 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac60:	430a      	orrs	r2, r1
 800ac62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4aa5      	ldr	r2, [pc, #660]	; (800af00 <UART_SetConfig+0x324>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d126      	bne.n	800acbc <UART_SetConfig+0xe0>
 800ac6e:	4ba5      	ldr	r3, [pc, #660]	; (800af04 <UART_SetConfig+0x328>)
 800ac70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d81b      	bhi.n	800acb4 <UART_SetConfig+0xd8>
 800ac7c:	a201      	add	r2, pc, #4	; (adr r2, 800ac84 <UART_SetConfig+0xa8>)
 800ac7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac82:	bf00      	nop
 800ac84:	0800ac95 	.word	0x0800ac95
 800ac88:	0800aca5 	.word	0x0800aca5
 800ac8c:	0800ac9d 	.word	0x0800ac9d
 800ac90:	0800acad 	.word	0x0800acad
 800ac94:	2301      	movs	r3, #1
 800ac96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac9a:	e106      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aca2:	e102      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800aca4:	2304      	movs	r3, #4
 800aca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acaa:	e0fe      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800acac:	2308      	movs	r3, #8
 800acae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acb2:	e0fa      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800acb4:	2310      	movs	r3, #16
 800acb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acba:	e0f6      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a91      	ldr	r2, [pc, #580]	; (800af08 <UART_SetConfig+0x32c>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d138      	bne.n	800ad38 <UART_SetConfig+0x15c>
 800acc6:	4b8f      	ldr	r3, [pc, #572]	; (800af04 <UART_SetConfig+0x328>)
 800acc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800accc:	f003 030c 	and.w	r3, r3, #12
 800acd0:	2b0c      	cmp	r3, #12
 800acd2:	d82d      	bhi.n	800ad30 <UART_SetConfig+0x154>
 800acd4:	a201      	add	r2, pc, #4	; (adr r2, 800acdc <UART_SetConfig+0x100>)
 800acd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acda:	bf00      	nop
 800acdc:	0800ad11 	.word	0x0800ad11
 800ace0:	0800ad31 	.word	0x0800ad31
 800ace4:	0800ad31 	.word	0x0800ad31
 800ace8:	0800ad31 	.word	0x0800ad31
 800acec:	0800ad21 	.word	0x0800ad21
 800acf0:	0800ad31 	.word	0x0800ad31
 800acf4:	0800ad31 	.word	0x0800ad31
 800acf8:	0800ad31 	.word	0x0800ad31
 800acfc:	0800ad19 	.word	0x0800ad19
 800ad00:	0800ad31 	.word	0x0800ad31
 800ad04:	0800ad31 	.word	0x0800ad31
 800ad08:	0800ad31 	.word	0x0800ad31
 800ad0c:	0800ad29 	.word	0x0800ad29
 800ad10:	2300      	movs	r3, #0
 800ad12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad16:	e0c8      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ad18:	2302      	movs	r3, #2
 800ad1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad1e:	e0c4      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ad20:	2304      	movs	r3, #4
 800ad22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad26:	e0c0      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ad28:	2308      	movs	r3, #8
 800ad2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad2e:	e0bc      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ad30:	2310      	movs	r3, #16
 800ad32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad36:	e0b8      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a73      	ldr	r2, [pc, #460]	; (800af0c <UART_SetConfig+0x330>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d125      	bne.n	800ad8e <UART_SetConfig+0x1b2>
 800ad42:	4b70      	ldr	r3, [pc, #448]	; (800af04 <UART_SetConfig+0x328>)
 800ad44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad4c:	2b30      	cmp	r3, #48	; 0x30
 800ad4e:	d016      	beq.n	800ad7e <UART_SetConfig+0x1a2>
 800ad50:	2b30      	cmp	r3, #48	; 0x30
 800ad52:	d818      	bhi.n	800ad86 <UART_SetConfig+0x1aa>
 800ad54:	2b20      	cmp	r3, #32
 800ad56:	d00a      	beq.n	800ad6e <UART_SetConfig+0x192>
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	d814      	bhi.n	800ad86 <UART_SetConfig+0x1aa>
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d002      	beq.n	800ad66 <UART_SetConfig+0x18a>
 800ad60:	2b10      	cmp	r3, #16
 800ad62:	d008      	beq.n	800ad76 <UART_SetConfig+0x19a>
 800ad64:	e00f      	b.n	800ad86 <UART_SetConfig+0x1aa>
 800ad66:	2300      	movs	r3, #0
 800ad68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad6c:	e09d      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ad6e:	2302      	movs	r3, #2
 800ad70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad74:	e099      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ad76:	2304      	movs	r3, #4
 800ad78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad7c:	e095      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ad7e:	2308      	movs	r3, #8
 800ad80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad84:	e091      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ad86:	2310      	movs	r3, #16
 800ad88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad8c:	e08d      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a5f      	ldr	r2, [pc, #380]	; (800af10 <UART_SetConfig+0x334>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d125      	bne.n	800ade4 <UART_SetConfig+0x208>
 800ad98:	4b5a      	ldr	r3, [pc, #360]	; (800af04 <UART_SetConfig+0x328>)
 800ad9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ada2:	2bc0      	cmp	r3, #192	; 0xc0
 800ada4:	d016      	beq.n	800add4 <UART_SetConfig+0x1f8>
 800ada6:	2bc0      	cmp	r3, #192	; 0xc0
 800ada8:	d818      	bhi.n	800addc <UART_SetConfig+0x200>
 800adaa:	2b80      	cmp	r3, #128	; 0x80
 800adac:	d00a      	beq.n	800adc4 <UART_SetConfig+0x1e8>
 800adae:	2b80      	cmp	r3, #128	; 0x80
 800adb0:	d814      	bhi.n	800addc <UART_SetConfig+0x200>
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <UART_SetConfig+0x1e0>
 800adb6:	2b40      	cmp	r3, #64	; 0x40
 800adb8:	d008      	beq.n	800adcc <UART_SetConfig+0x1f0>
 800adba:	e00f      	b.n	800addc <UART_SetConfig+0x200>
 800adbc:	2300      	movs	r3, #0
 800adbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adc2:	e072      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800adc4:	2302      	movs	r3, #2
 800adc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adca:	e06e      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800adcc:	2304      	movs	r3, #4
 800adce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800add2:	e06a      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800add4:	2308      	movs	r3, #8
 800add6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adda:	e066      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800addc:	2310      	movs	r3, #16
 800adde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ade2:	e062      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a4a      	ldr	r2, [pc, #296]	; (800af14 <UART_SetConfig+0x338>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d12a      	bne.n	800ae44 <UART_SetConfig+0x268>
 800adee:	4b45      	ldr	r3, [pc, #276]	; (800af04 <UART_SetConfig+0x328>)
 800adf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adfc:	d01a      	beq.n	800ae34 <UART_SetConfig+0x258>
 800adfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae02:	d81b      	bhi.n	800ae3c <UART_SetConfig+0x260>
 800ae04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae08:	d00c      	beq.n	800ae24 <UART_SetConfig+0x248>
 800ae0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae0e:	d815      	bhi.n	800ae3c <UART_SetConfig+0x260>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d003      	beq.n	800ae1c <UART_SetConfig+0x240>
 800ae14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae18:	d008      	beq.n	800ae2c <UART_SetConfig+0x250>
 800ae1a:	e00f      	b.n	800ae3c <UART_SetConfig+0x260>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae22:	e042      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ae24:	2302      	movs	r3, #2
 800ae26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae2a:	e03e      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae32:	e03a      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ae34:	2308      	movs	r3, #8
 800ae36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae3a:	e036      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ae3c:	2310      	movs	r3, #16
 800ae3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae42:	e032      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a2c      	ldr	r2, [pc, #176]	; (800aefc <UART_SetConfig+0x320>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d12a      	bne.n	800aea4 <UART_SetConfig+0x2c8>
 800ae4e:	4b2d      	ldr	r3, [pc, #180]	; (800af04 <UART_SetConfig+0x328>)
 800ae50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ae58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae5c:	d01a      	beq.n	800ae94 <UART_SetConfig+0x2b8>
 800ae5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae62:	d81b      	bhi.n	800ae9c <UART_SetConfig+0x2c0>
 800ae64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae68:	d00c      	beq.n	800ae84 <UART_SetConfig+0x2a8>
 800ae6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae6e:	d815      	bhi.n	800ae9c <UART_SetConfig+0x2c0>
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <UART_SetConfig+0x2a0>
 800ae74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae78:	d008      	beq.n	800ae8c <UART_SetConfig+0x2b0>
 800ae7a:	e00f      	b.n	800ae9c <UART_SetConfig+0x2c0>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae82:	e012      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ae84:	2302      	movs	r3, #2
 800ae86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae8a:	e00e      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ae8c:	2304      	movs	r3, #4
 800ae8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae92:	e00a      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ae94:	2308      	movs	r3, #8
 800ae96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae9a:	e006      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800ae9c:	2310      	movs	r3, #16
 800ae9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aea2:	e002      	b.n	800aeaa <UART_SetConfig+0x2ce>
 800aea4:	2310      	movs	r3, #16
 800aea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a13      	ldr	r2, [pc, #76]	; (800aefc <UART_SetConfig+0x320>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	f040 8105 	bne.w	800b0c0 <UART_SetConfig+0x4e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aeb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aeba:	2b08      	cmp	r3, #8
 800aebc:	d836      	bhi.n	800af2c <UART_SetConfig+0x350>
 800aebe:	a201      	add	r2, pc, #4	; (adr r2, 800aec4 <UART_SetConfig+0x2e8>)
 800aec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec4:	0800aee9 	.word	0x0800aee9
 800aec8:	0800af2d 	.word	0x0800af2d
 800aecc:	0800aef1 	.word	0x0800aef1
 800aed0:	0800af2d 	.word	0x0800af2d
 800aed4:	0800af1d 	.word	0x0800af1d
 800aed8:	0800af2d 	.word	0x0800af2d
 800aedc:	0800af2d 	.word	0x0800af2d
 800aee0:	0800af2d 	.word	0x0800af2d
 800aee4:	0800af25 	.word	0x0800af25
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800aee8:	f7fe fdae 	bl	8009a48 <HAL_RCC_GetPCLK1Freq>
 800aeec:	61f8      	str	r0, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800aeee:	e021      	b.n	800af34 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800aef0:	4b09      	ldr	r3, [pc, #36]	; (800af18 <UART_SetConfig+0x33c>)
 800aef2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800aef4:	e01e      	b.n	800af34 <UART_SetConfig+0x358>
 800aef6:	bf00      	nop
 800aef8:	efff69f3 	.word	0xefff69f3
 800aefc:	40008000 	.word	0x40008000
 800af00:	40013800 	.word	0x40013800
 800af04:	40021000 	.word	0x40021000
 800af08:	40004400 	.word	0x40004400
 800af0c:	40004800 	.word	0x40004800
 800af10:	40004c00 	.word	0x40004c00
 800af14:	40005000 	.word	0x40005000
 800af18:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800af1c:	f7fe fcfc 	bl	8009918 <HAL_RCC_GetSysClockFreq>
 800af20:	61f8      	str	r0, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800af22:	e007      	b.n	800af34 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800af24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800af2a:	e003      	b.n	800af34 <UART_SetConfig+0x358>
      default:
        ret = HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800af32:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	2b00      	cmp	r3, #0
 800af38:	f000 81c5 	beq.w	800b2c6 <UART_SetConfig+0x6ea>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	4613      	mov	r3, r2
 800af42:	005b      	lsls	r3, r3, #1
 800af44:	4413      	add	r3, r2
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d305      	bcc.n	800af58 <UART_SetConfig+0x37c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af52:	69fa      	ldr	r2, [r7, #28]
 800af54:	429a      	cmp	r2, r3
 800af56:	d903      	bls.n	800af60 <UART_SetConfig+0x384>
      {
        ret = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af5e:	e1b2      	b.n	800b2c6 <UART_SetConfig+0x6ea>
      }
      else
      {
        switch (clocksource)
 800af60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af64:	2b08      	cmp	r3, #8
 800af66:	f200 8096 	bhi.w	800b096 <UART_SetConfig+0x4ba>
 800af6a:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <UART_SetConfig+0x394>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800af95 	.word	0x0800af95
 800af74:	0800b097 	.word	0x0800b097
 800af78:	0800afe3 	.word	0x0800afe3
 800af7c:	0800b097 	.word	0x0800b097
 800af80:	0800b019 	.word	0x0800b019
 800af84:	0800b097 	.word	0x0800b097
 800af88:	0800b097 	.word	0x0800b097
 800af8c:	0800b097 	.word	0x0800b097
 800af90:	0800b067 	.word	0x0800b067
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800af94:	f7fe fd58 	bl	8009a48 <HAL_RCC_GetPCLK1Freq>
 800af98:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f04f 0100 	mov.w	r1, #0
 800afa2:	f04f 0200 	mov.w	r2, #0
 800afa6:	f04f 0300 	mov.w	r3, #0
 800afaa:	020b      	lsls	r3, r1, #8
 800afac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afb0:	0202      	lsls	r2, r0, #8
 800afb2:	68f9      	ldr	r1, [r7, #12]
 800afb4:	6849      	ldr	r1, [r1, #4]
 800afb6:	0849      	lsrs	r1, r1, #1
 800afb8:	4608      	mov	r0, r1
 800afba:	f04f 0100 	mov.w	r1, #0
 800afbe:	1814      	adds	r4, r2, r0
 800afc0:	603c      	str	r4, [r7, #0]
 800afc2:	414b      	adcs	r3, r1
 800afc4:	607b      	str	r3, [r7, #4]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	461a      	mov	r2, r3
 800afcc:	f04f 0300 	mov.w	r3, #0
 800afd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afd4:	f7f5 f964 	bl	80002a0 <__aeabi_uldivmod>
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	4613      	mov	r3, r2
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 800afe0:	e05d      	b.n	800b09e <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	085b      	lsrs	r3, r3, #1
 800afe8:	461a      	mov	r2, r3
 800afea:	f04f 0300 	mov.w	r3, #0
 800afee:	48b3      	ldr	r0, [pc, #716]	; (800b2bc <UART_SetConfig+0x6e0>)
 800aff0:	f04f 0100 	mov.w	r1, #0
 800aff4:	eb12 0a00 	adds.w	sl, r2, r0
 800aff8:	eb43 0b01 	adc.w	fp, r3, r1
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	461a      	mov	r2, r3
 800b002:	f04f 0300 	mov.w	r3, #0
 800b006:	4650      	mov	r0, sl
 800b008:	4659      	mov	r1, fp
 800b00a:	f7f5 f949 	bl	80002a0 <__aeabi_uldivmod>
 800b00e:	4602      	mov	r2, r0
 800b010:	460b      	mov	r3, r1
 800b012:	4613      	mov	r3, r2
 800b014:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 800b016:	e042      	b.n	800b09e <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800b018:	f7fe fc7e 	bl	8009918 <HAL_RCC_GetSysClockFreq>
 800b01c:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	4618      	mov	r0, r3
 800b022:	f04f 0100 	mov.w	r1, #0
 800b026:	f04f 0200 	mov.w	r2, #0
 800b02a:	f04f 0300 	mov.w	r3, #0
 800b02e:	020b      	lsls	r3, r1, #8
 800b030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b034:	0202      	lsls	r2, r0, #8
 800b036:	68f9      	ldr	r1, [r7, #12]
 800b038:	6849      	ldr	r1, [r1, #4]
 800b03a:	0849      	lsrs	r1, r1, #1
 800b03c:	4608      	mov	r0, r1
 800b03e:	f04f 0100 	mov.w	r1, #0
 800b042:	eb12 0800 	adds.w	r8, r2, r0
 800b046:	eb43 0901 	adc.w	r9, r3, r1
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	461a      	mov	r2, r3
 800b050:	f04f 0300 	mov.w	r3, #0
 800b054:	4640      	mov	r0, r8
 800b056:	4649      	mov	r1, r9
 800b058:	f7f5 f922 	bl	80002a0 <__aeabi_uldivmod>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4613      	mov	r3, r2
 800b062:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 800b064:	e01b      	b.n	800b09e <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	085b      	lsrs	r3, r3, #1
 800b06c:	461a      	mov	r2, r3
 800b06e:	f04f 0300 	mov.w	r3, #0
 800b072:	f512 0400 	adds.w	r4, r2, #8388608	; 0x800000
 800b076:	f143 0500 	adc.w	r5, r3, #0
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	461a      	mov	r2, r3
 800b080:	f04f 0300 	mov.w	r3, #0
 800b084:	4620      	mov	r0, r4
 800b086:	4629      	mov	r1, r5
 800b088:	f7f5 f90a 	bl	80002a0 <__aeabi_uldivmod>
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	4613      	mov	r3, r2
 800b092:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 800b094:	e003      	b.n	800b09e <UART_SetConfig+0x4c2>
          default:
            ret = HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 800b09c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0a4:	d308      	bcc.n	800b0b8 <UART_SetConfig+0x4dc>
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0ac:	d204      	bcs.n	800b0b8 <UART_SetConfig+0x4dc>
        {
          huart->Instance->BRR = usartdiv;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0b4:	60da      	str	r2, [r3, #12]
 800b0b6:	e106      	b.n	800b2c6 <UART_SetConfig+0x6ea>
        }
        else
        {
          ret = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b0be:	e102      	b.n	800b2c6 <UART_SetConfig+0x6ea>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0c8:	f040 8086 	bne.w	800b1d8 <UART_SetConfig+0x5fc>
  {
    switch (clocksource)
 800b0cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0d0:	2b08      	cmp	r3, #8
 800b0d2:	d85f      	bhi.n	800b194 <UART_SetConfig+0x5b8>
 800b0d4:	a201      	add	r2, pc, #4	; (adr r2, 800b0dc <UART_SetConfig+0x500>)
 800b0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0da:	bf00      	nop
 800b0dc:	0800b101 	.word	0x0800b101
 800b0e0:	0800b121 	.word	0x0800b121
 800b0e4:	0800b141 	.word	0x0800b141
 800b0e8:	0800b195 	.word	0x0800b195
 800b0ec:	0800b15d 	.word	0x0800b15d
 800b0f0:	0800b195 	.word	0x0800b195
 800b0f4:	0800b195 	.word	0x0800b195
 800b0f8:	0800b195 	.word	0x0800b195
 800b0fc:	0800b17d 	.word	0x0800b17d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b100:	f7fe fca2 	bl	8009a48 <HAL_RCC_GetPCLK1Freq>
 800b104:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	005a      	lsls	r2, r3, #1
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	085b      	lsrs	r3, r3, #1
 800b110:	441a      	add	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800b11e:	e03d      	b.n	800b19c <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b120:	f7fe fca8 	bl	8009a74 <HAL_RCC_GetPCLK2Freq>
 800b124:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	005a      	lsls	r2, r3, #1
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	085b      	lsrs	r3, r3, #1
 800b130:	441a      	add	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	fbb2 f3f3 	udiv	r3, r2, r3
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800b13e:	e02d      	b.n	800b19c <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	085b      	lsrs	r3, r3, #1
 800b146:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800b14a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	6852      	ldr	r2, [r2, #4]
 800b152:	fbb3 f3f2 	udiv	r3, r3, r2
 800b156:	b29b      	uxth	r3, r3
 800b158:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800b15a:	e01f      	b.n	800b19c <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b15c:	f7fe fbdc 	bl	8009918 <HAL_RCC_GetSysClockFreq>
 800b160:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	005a      	lsls	r2, r3, #1
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	085b      	lsrs	r3, r3, #1
 800b16c:	441a      	add	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	fbb2 f3f3 	udiv	r3, r2, r3
 800b176:	b29b      	uxth	r3, r3
 800b178:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800b17a:	e00f      	b.n	800b19c <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	085b      	lsrs	r3, r3, #1
 800b182:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18e:	b29b      	uxth	r3, r3
 800b190:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800b192:	e003      	b.n	800b19c <UART_SetConfig+0x5c0>
      default:
        ret = HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800b19a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	2b0f      	cmp	r3, #15
 800b1a0:	d916      	bls.n	800b1d0 <UART_SetConfig+0x5f4>
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1a8:	d212      	bcs.n	800b1d0 <UART_SetConfig+0x5f4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	f023 030f 	bic.w	r3, r3, #15
 800b1b2:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	085b      	lsrs	r3, r3, #1
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	f003 0307 	and.w	r3, r3, #7
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	8afb      	ldrh	r3, [r7, #22]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	8afa      	ldrh	r2, [r7, #22]
 800b1cc:	60da      	str	r2, [r3, #12]
 800b1ce:	e07a      	b.n	800b2c6 <UART_SetConfig+0x6ea>
    }
    else
    {
      ret = HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1d6:	e076      	b.n	800b2c6 <UART_SetConfig+0x6ea>
    }
  }
  else
  {
    switch (clocksource)
 800b1d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1dc:	2b08      	cmp	r3, #8
 800b1de:	d85c      	bhi.n	800b29a <UART_SetConfig+0x6be>
 800b1e0:	a201      	add	r2, pc, #4	; (adr r2, 800b1e8 <UART_SetConfig+0x60c>)
 800b1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e6:	bf00      	nop
 800b1e8:	0800b20d 	.word	0x0800b20d
 800b1ec:	0800b22b 	.word	0x0800b22b
 800b1f0:	0800b249 	.word	0x0800b249
 800b1f4:	0800b29b 	.word	0x0800b29b
 800b1f8:	0800b265 	.word	0x0800b265
 800b1fc:	0800b29b 	.word	0x0800b29b
 800b200:	0800b29b 	.word	0x0800b29b
 800b204:	0800b29b 	.word	0x0800b29b
 800b208:	0800b283 	.word	0x0800b283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b20c:	f7fe fc1c 	bl	8009a48 <HAL_RCC_GetPCLK1Freq>
 800b210:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	085a      	lsrs	r2, r3, #1
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	441a      	add	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	fbb2 f3f3 	udiv	r3, r2, r3
 800b224:	b29b      	uxth	r3, r3
 800b226:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800b228:	e03b      	b.n	800b2a2 <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b22a:	f7fe fc23 	bl	8009a74 <HAL_RCC_GetPCLK2Freq>
 800b22e:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	085a      	lsrs	r2, r3, #1
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	441a      	add	r2, r3
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b242:	b29b      	uxth	r3, r3
 800b244:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800b246:	e02c      	b.n	800b2a2 <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	085b      	lsrs	r3, r3, #1
 800b24e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800b252:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	6852      	ldr	r2, [r2, #4]
 800b25a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b25e:	b29b      	uxth	r3, r3
 800b260:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800b262:	e01e      	b.n	800b2a2 <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b264:	f7fe fb58 	bl	8009918 <HAL_RCC_GetSysClockFreq>
 800b268:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	085a      	lsrs	r2, r3, #1
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	441a      	add	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800b280:	e00f      	b.n	800b2a2 <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	085b      	lsrs	r3, r3, #1
 800b288:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	fbb2 f3f3 	udiv	r3, r2, r3
 800b294:	b29b      	uxth	r3, r3
 800b296:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 800b298:	e003      	b.n	800b2a2 <UART_SetConfig+0x6c6>
      default:
        ret = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800b2a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	2b0f      	cmp	r3, #15
 800b2a6:	d90b      	bls.n	800b2c0 <UART_SetConfig+0x6e4>
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ae:	d207      	bcs.n	800b2c0 <UART_SetConfig+0x6e4>
    {
      huart->Instance->BRR = usartdiv;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b6:	60da      	str	r2, [r3, #12]
 800b2b8:	e005      	b.n	800b2c6 <UART_SetConfig+0x6ea>
 800b2ba:	bf00      	nop
 800b2bc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b2d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3730      	adds	r7, #48	; 0x30
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b2e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00a      	beq.n	800b30a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	430a      	orrs	r2, r1
 800b308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	f003 0302 	and.w	r3, r3, #2
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00a      	beq.n	800b32c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	430a      	orrs	r2, r1
 800b32a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00a      	beq.n	800b34e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	430a      	orrs	r2, r1
 800b34c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b352:	f003 0308 	and.w	r3, r3, #8
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00a      	beq.n	800b370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	430a      	orrs	r2, r1
 800b36e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b374:	f003 0310 	and.w	r3, r3, #16
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00a      	beq.n	800b392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	430a      	orrs	r2, r1
 800b390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b396:	f003 0320 	and.w	r3, r3, #32
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00a      	beq.n	800b3b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	430a      	orrs	r2, r1
 800b3b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d01a      	beq.n	800b3f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3de:	d10a      	bne.n	800b3f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00a      	beq.n	800b418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	605a      	str	r2, [r3, #4]
  }
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af02      	add	r7, sp, #8
 800b42a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b432:	f7fd fa75 	bl	8008920 <HAL_GetTick>
 800b436:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0308 	and.w	r3, r3, #8
 800b442:	2b08      	cmp	r3, #8
 800b444:	d10e      	bne.n	800b464 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b446:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f82a 	bl	800b4ae <UART_WaitOnFlagUntilTimeout>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b460:	2303      	movs	r3, #3
 800b462:	e020      	b.n	800b4a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0304 	and.w	r3, r3, #4
 800b46e:	2b04      	cmp	r3, #4
 800b470:	d10e      	bne.n	800b490 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b472:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f814 	bl	800b4ae <UART_WaitOnFlagUntilTimeout>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d001      	beq.n	800b490 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e00a      	b.n	800b4a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2220      	movs	r2, #32
 800b494:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2220      	movs	r2, #32
 800b49a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	603b      	str	r3, [r7, #0]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4be:	e05d      	b.n	800b57c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c6:	d059      	beq.n	800b57c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4c8:	f7fd fa2a 	bl	8008920 <HAL_GetTick>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	69ba      	ldr	r2, [r7, #24]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d302      	bcc.n	800b4de <UART_WaitOnFlagUntilTimeout+0x30>
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d11b      	bne.n	800b516 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b4ec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	689a      	ldr	r2, [r3, #8]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f022 0201 	bic.w	r2, r2, #1
 800b4fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2220      	movs	r2, #32
 800b502:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2220      	movs	r2, #32
 800b508:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b512:	2303      	movs	r3, #3
 800b514:	e042      	b.n	800b59c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 0304 	and.w	r3, r3, #4
 800b520:	2b00      	cmp	r3, #0
 800b522:	d02b      	beq.n	800b57c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	69db      	ldr	r3, [r3, #28]
 800b52a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b52e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b532:	d123      	bne.n	800b57c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b53c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b54c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	689a      	ldr	r2, [r3, #8]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f022 0201 	bic.w	r2, r2, #1
 800b55c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2220      	movs	r2, #32
 800b562:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2220      	movs	r2, #32
 800b568:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2220      	movs	r2, #32
 800b56e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e00f      	b.n	800b59c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	69da      	ldr	r2, [r3, #28]
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	4013      	ands	r3, r2
 800b586:	68ba      	ldr	r2, [r7, #8]
 800b588:	429a      	cmp	r2, r3
 800b58a:	bf0c      	ite	eq
 800b58c:	2301      	moveq	r3, #1
 800b58e:	2300      	movne	r3, #0
 800b590:	b2db      	uxtb	r3, r3
 800b592:	461a      	mov	r2, r3
 800b594:	79fb      	ldrb	r3, [r7, #7]
 800b596:	429a      	cmp	r2, r3
 800b598:	d092      	beq.n	800b4c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b5b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5b6:	2b84      	cmp	r3, #132	; 0x84
 800b5b8:	d005      	beq.n	800b5c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b5ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	3303      	adds	r3, #3
 800b5c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b5d8:	f001 f8e4 	bl	800c7a4 <vTaskStartScheduler>
  
  return osOK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b5e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e4:	b089      	sub	sp, #36	; 0x24
 800b5e6:	af04      	add	r7, sp, #16
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d020      	beq.n	800b636 <osThreadCreate+0x54>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01c      	beq.n	800b636 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685c      	ldr	r4, [r3, #4]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681d      	ldr	r5, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	691e      	ldr	r6, [r3, #16]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff ffc8 	bl	800b5a4 <makeFreeRtosPriority>
 800b614:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b61e:	9202      	str	r2, [sp, #8]
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	9100      	str	r1, [sp, #0]
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	4632      	mov	r2, r6
 800b628:	4629      	mov	r1, r5
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 fee4 	bl	800c3f8 <xTaskCreateStatic>
 800b630:	4603      	mov	r3, r0
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	e01c      	b.n	800b670 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685c      	ldr	r4, [r3, #4]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b642:	b29e      	uxth	r6, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7ff ffaa 	bl	800b5a4 <makeFreeRtosPriority>
 800b650:	4602      	mov	r2, r0
 800b652:	f107 030c 	add.w	r3, r7, #12
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	9200      	str	r2, [sp, #0]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	4632      	mov	r2, r6
 800b65e:	4629      	mov	r1, r5
 800b660:	4620      	mov	r0, r4
 800b662:	f000 ff26 	bl	800c4b2 <xTaskCreate>
 800b666:	4603      	mov	r3, r0
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d001      	beq.n	800b670 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b66c:	2300      	movs	r3, #0
 800b66e:	e000      	b.n	800b672 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b670:	68fb      	ldr	r3, [r7, #12]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b67a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b084      	sub	sp, #16
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d001      	beq.n	800b690 <osDelay+0x16>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	e000      	b.n	800b692 <osDelay+0x18>
 800b690:	2301      	movs	r3, #1
 800b692:	4618      	mov	r0, r3
 800b694:	f001 f852 	bl	800c73c <vTaskDelay>
  
  return osOK;
 800b698:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f103 0208 	add.w	r2, r3, #8
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f103 0208 	add.w	r2, r3, #8
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f103 0208 	add.w	r2, r3, #8
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	689a      	ldr	r2, [r3, #8]
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	601a      	str	r2, [r3, #0]
}
 800b738:	bf00      	nop
 800b73a:	3714      	adds	r7, #20
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b75a:	d103      	bne.n	800b764 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	60fb      	str	r3, [r7, #12]
 800b762:	e00c      	b.n	800b77e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3308      	adds	r3, #8
 800b768:	60fb      	str	r3, [r7, #12]
 800b76a:	e002      	b.n	800b772 <vListInsert+0x2e>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	60fb      	str	r3, [r7, #12]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d2f6      	bcs.n	800b76c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	685a      	ldr	r2, [r3, #4]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	1c5a      	adds	r2, r3, #1
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	601a      	str	r2, [r3, #0]
}
 800b7aa:	bf00      	nop
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b085      	sub	sp, #20
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	6892      	ldr	r2, [r2, #8]
 800b7cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	6852      	ldr	r2, [r2, #4]
 800b7d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d103      	bne.n	800b7ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	689a      	ldr	r2, [r3, #8]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	1e5a      	subs	r2, r3, #1
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3714      	adds	r7, #20
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
	...

0800b80c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10a      	bne.n	800b836 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b832:	bf00      	nop
 800b834:	e7fe      	b.n	800b834 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b836:	f001 ff6d 	bl	800d714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b842:	68f9      	ldr	r1, [r7, #12]
 800b844:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b846:	fb01 f303 	mul.w	r3, r1, r3
 800b84a:	441a      	add	r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b866:	3b01      	subs	r3, #1
 800b868:	68f9      	ldr	r1, [r7, #12]
 800b86a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b86c:	fb01 f303 	mul.w	r3, r1, r3
 800b870:	441a      	add	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	22ff      	movs	r2, #255	; 0xff
 800b87a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	22ff      	movs	r2, #255	; 0xff
 800b882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d114      	bne.n	800b8b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d01a      	beq.n	800b8ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	3310      	adds	r3, #16
 800b898:	4618      	mov	r0, r3
 800b89a:	f001 fa19 	bl	800ccd0 <xTaskRemoveFromEventList>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d012      	beq.n	800b8ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8a4:	4b0c      	ldr	r3, [pc, #48]	; (800b8d8 <xQueueGenericReset+0xcc>)
 800b8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	e009      	b.n	800b8ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3310      	adds	r3, #16
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff fef1 	bl	800b6a2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	3324      	adds	r3, #36	; 0x24
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7ff feec 	bl	800b6a2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8ca:	f001 ff53 	bl	800d774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8ce:	2301      	movs	r3, #1
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	e000ed04 	.word	0xe000ed04

0800b8dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08a      	sub	sp, #40	; 0x28
 800b8e0:	af02      	add	r7, sp, #8
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10a      	bne.n	800b906 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	613b      	str	r3, [r7, #16]
}
 800b902:	bf00      	nop
 800b904:	e7fe      	b.n	800b904 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	61fb      	str	r3, [r7, #28]
 800b910:	e004      	b.n	800b91c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	fb02 f303 	mul.w	r3, r2, r3
 800b91a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	3350      	adds	r3, #80	; 0x50
 800b920:	4618      	mov	r0, r3
 800b922:	f002 f819 	bl	800d958 <pvPortMalloc>
 800b926:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d011      	beq.n	800b952 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	3350      	adds	r3, #80	; 0x50
 800b936:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b940:	79fa      	ldrb	r2, [r7, #7]
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	4613      	mov	r3, r2
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	68b9      	ldr	r1, [r7, #8]
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 f805 	bl	800b95c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b952:	69bb      	ldr	r3, [r7, #24]
	}
 800b954:	4618      	mov	r0, r3
 800b956:	3720      	adds	r7, #32
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
 800b968:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d103      	bne.n	800b978 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	69ba      	ldr	r2, [r7, #24]
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	e002      	b.n	800b97e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b98a:	2101      	movs	r1, #1
 800b98c:	69b8      	ldr	r0, [r7, #24]
 800b98e:	f7ff ff3d 	bl	800b80c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	78fa      	ldrb	r2, [r7, #3]
 800b996:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b99a:	bf00      	nop
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08e      	sub	sp, #56	; 0x38
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
 800b9b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <xQueueGenericSend+0x32>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d103      	bne.n	800b9e4 <xQueueGenericSend+0x40>
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <xQueueGenericSend+0x44>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e000      	b.n	800b9ea <xQueueGenericSend+0x46>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10a      	bne.n	800ba04 <xQueueGenericSend+0x60>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d103      	bne.n	800ba12 <xQueueGenericSend+0x6e>
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d101      	bne.n	800ba16 <xQueueGenericSend+0x72>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e000      	b.n	800ba18 <xQueueGenericSend+0x74>
 800ba16:	2300      	movs	r3, #0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <xQueueGenericSend+0x8e>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	623b      	str	r3, [r7, #32]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba32:	f001 fb09 	bl	800d048 <xTaskGetSchedulerState>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d102      	bne.n	800ba42 <xQueueGenericSend+0x9e>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <xQueueGenericSend+0xa2>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e000      	b.n	800ba48 <xQueueGenericSend+0xa4>
 800ba46:	2300      	movs	r3, #0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10a      	bne.n	800ba62 <xQueueGenericSend+0xbe>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	61fb      	str	r3, [r7, #28]
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba62:	f001 fe57 	bl	800d714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d302      	bcc.n	800ba78 <xQueueGenericSend+0xd4>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d129      	bne.n	800bacc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	68b9      	ldr	r1, [r7, #8]
 800ba7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba7e:	f000 fbab 	bl	800c1d8 <prvCopyDataToQueue>
 800ba82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d010      	beq.n	800baae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8e:	3324      	adds	r3, #36	; 0x24
 800ba90:	4618      	mov	r0, r3
 800ba92:	f001 f91d 	bl	800ccd0 <xTaskRemoveFromEventList>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d013      	beq.n	800bac4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba9c:	4b3f      	ldr	r3, [pc, #252]	; (800bb9c <xQueueGenericSend+0x1f8>)
 800ba9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	e00a      	b.n	800bac4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d007      	beq.n	800bac4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bab4:	4b39      	ldr	r3, [pc, #228]	; (800bb9c <xQueueGenericSend+0x1f8>)
 800bab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baba:	601a      	str	r2, [r3, #0]
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bac4:	f001 fe56 	bl	800d774 <vPortExitCritical>
				return pdPASS;
 800bac8:	2301      	movs	r3, #1
 800baca:	e063      	b.n	800bb94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d103      	bne.n	800bada <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bad2:	f001 fe4f 	bl	800d774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bad6:	2300      	movs	r3, #0
 800bad8:	e05c      	b.n	800bb94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800badc:	2b00      	cmp	r3, #0
 800bade:	d106      	bne.n	800baee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bae0:	f107 0314 	add.w	r3, r7, #20
 800bae4:	4618      	mov	r0, r3
 800bae6:	f001 f955 	bl	800cd94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800baea:	2301      	movs	r3, #1
 800baec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800baee:	f001 fe41 	bl	800d774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800baf2:	f000 feb9 	bl	800c868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800baf6:	f001 fe0d 	bl	800d714 <vPortEnterCritical>
 800bafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb00:	b25b      	sxtb	r3, r3
 800bb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb06:	d103      	bne.n	800bb10 <xQueueGenericSend+0x16c>
 800bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb16:	b25b      	sxtb	r3, r3
 800bb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1c:	d103      	bne.n	800bb26 <xQueueGenericSend+0x182>
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb26:	f001 fe25 	bl	800d774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb2a:	1d3a      	adds	r2, r7, #4
 800bb2c:	f107 0314 	add.w	r3, r7, #20
 800bb30:	4611      	mov	r1, r2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 f944 	bl	800cdc0 <xTaskCheckForTimeOut>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d124      	bne.n	800bb88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb40:	f000 fc42 	bl	800c3c8 <prvIsQueueFull>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d018      	beq.n	800bb7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4c:	3310      	adds	r3, #16
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	4611      	mov	r1, r2
 800bb52:	4618      	mov	r0, r3
 800bb54:	f001 f898 	bl	800cc88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb5a:	f000 fbcd 	bl	800c2f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb5e:	f000 fe91 	bl	800c884 <xTaskResumeAll>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f47f af7c 	bne.w	800ba62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bb6a:	4b0c      	ldr	r3, [pc, #48]	; (800bb9c <xQueueGenericSend+0x1f8>)
 800bb6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb70:	601a      	str	r2, [r3, #0]
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	e772      	b.n	800ba62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb7e:	f000 fbbb 	bl	800c2f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb82:	f000 fe7f 	bl	800c884 <xTaskResumeAll>
 800bb86:	e76c      	b.n	800ba62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb8a:	f000 fbb5 	bl	800c2f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb8e:	f000 fe79 	bl	800c884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3738      	adds	r7, #56	; 0x38
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	e000ed04 	.word	0xe000ed04

0800bba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b08e      	sub	sp, #56	; 0x38
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
 800bbac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbca:	bf00      	nop
 800bbcc:	e7fe      	b.n	800bbcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d103      	bne.n	800bbdc <xQueueGenericSendFromISR+0x3c>
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d101      	bne.n	800bbe0 <xQueueGenericSendFromISR+0x40>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e000      	b.n	800bbe2 <xQueueGenericSendFromISR+0x42>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10a      	bne.n	800bbfc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	623b      	str	r3, [r7, #32]
}
 800bbf8:	bf00      	nop
 800bbfa:	e7fe      	b.n	800bbfa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d103      	bne.n	800bc0a <xQueueGenericSendFromISR+0x6a>
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d101      	bne.n	800bc0e <xQueueGenericSendFromISR+0x6e>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e000      	b.n	800bc10 <xQueueGenericSendFromISR+0x70>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10a      	bne.n	800bc2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	61fb      	str	r3, [r7, #28]
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc2a:	f001 fe55 	bl	800d8d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc2e:	f3ef 8211 	mrs	r2, BASEPRI
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	61ba      	str	r2, [r7, #24]
 800bc44:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc46:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d302      	bcc.n	800bc5c <xQueueGenericSendFromISR+0xbc>
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d12c      	bne.n	800bcb6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	68b9      	ldr	r1, [r7, #8]
 800bc6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc6c:	f000 fab4 	bl	800c1d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc70:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc78:	d112      	bne.n	800bca0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d016      	beq.n	800bcb0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	3324      	adds	r3, #36	; 0x24
 800bc86:	4618      	mov	r0, r3
 800bc88:	f001 f822 	bl	800ccd0 <xTaskRemoveFromEventList>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00e      	beq.n	800bcb0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e007      	b.n	800bcb0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bca4:	3301      	adds	r3, #1
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	b25a      	sxtb	r2, r3
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bcb4:	e001      	b.n	800bcba <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	637b      	str	r3, [r7, #52]	; 0x34
 800bcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bcc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3738      	adds	r7, #56	; 0x38
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08c      	sub	sp, #48	; 0x30
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10a      	bne.n	800bd00 <xQueueReceive+0x30>
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	623b      	str	r3, [r7, #32]
}
 800bcfc:	bf00      	nop
 800bcfe:	e7fe      	b.n	800bcfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d103      	bne.n	800bd0e <xQueueReceive+0x3e>
 800bd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <xQueueReceive+0x42>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e000      	b.n	800bd14 <xQueueReceive+0x44>
 800bd12:	2300      	movs	r3, #0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10a      	bne.n	800bd2e <xQueueReceive+0x5e>
	__asm volatile
 800bd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1c:	f383 8811 	msr	BASEPRI, r3
 800bd20:	f3bf 8f6f 	isb	sy
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	61fb      	str	r3, [r7, #28]
}
 800bd2a:	bf00      	nop
 800bd2c:	e7fe      	b.n	800bd2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd2e:	f001 f98b 	bl	800d048 <xTaskGetSchedulerState>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d102      	bne.n	800bd3e <xQueueReceive+0x6e>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d101      	bne.n	800bd42 <xQueueReceive+0x72>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e000      	b.n	800bd44 <xQueueReceive+0x74>
 800bd42:	2300      	movs	r3, #0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10a      	bne.n	800bd5e <xQueueReceive+0x8e>
	__asm volatile
 800bd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4c:	f383 8811 	msr	BASEPRI, r3
 800bd50:	f3bf 8f6f 	isb	sy
 800bd54:	f3bf 8f4f 	dsb	sy
 800bd58:	61bb      	str	r3, [r7, #24]
}
 800bd5a:	bf00      	nop
 800bd5c:	e7fe      	b.n	800bd5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd5e:	f001 fcd9 	bl	800d714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d01f      	beq.n	800bdae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd6e:	68b9      	ldr	r1, [r7, #8]
 800bd70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd72:	f000 fa9b 	bl	800c2ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd78:	1e5a      	subs	r2, r3, #1
 800bd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00f      	beq.n	800bda6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	3310      	adds	r3, #16
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 ffa0 	bl	800ccd0 <xTaskRemoveFromEventList>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d007      	beq.n	800bda6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd96:	4b3d      	ldr	r3, [pc, #244]	; (800be8c <xQueueReceive+0x1bc>)
 800bd98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bda6:	f001 fce5 	bl	800d774 <vPortExitCritical>
				return pdPASS;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e069      	b.n	800be82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d103      	bne.n	800bdbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdb4:	f001 fcde 	bl	800d774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	e062      	b.n	800be82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d106      	bne.n	800bdd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdc2:	f107 0310 	add.w	r3, r7, #16
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 ffe4 	bl	800cd94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdd0:	f001 fcd0 	bl	800d774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdd4:	f000 fd48 	bl	800c868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdd8:	f001 fc9c 	bl	800d714 <vPortEnterCritical>
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bde2:	b25b      	sxtb	r3, r3
 800bde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde8:	d103      	bne.n	800bdf2 <xQueueReceive+0x122>
 800bdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdf8:	b25b      	sxtb	r3, r3
 800bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfe:	d103      	bne.n	800be08 <xQueueReceive+0x138>
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	2200      	movs	r2, #0
 800be04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be08:	f001 fcb4 	bl	800d774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be0c:	1d3a      	adds	r2, r7, #4
 800be0e:	f107 0310 	add.w	r3, r7, #16
 800be12:	4611      	mov	r1, r2
 800be14:	4618      	mov	r0, r3
 800be16:	f000 ffd3 	bl	800cdc0 <xTaskCheckForTimeOut>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d123      	bne.n	800be68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be22:	f000 fabb 	bl	800c39c <prvIsQueueEmpty>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d017      	beq.n	800be5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2e:	3324      	adds	r3, #36	; 0x24
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	4611      	mov	r1, r2
 800be34:	4618      	mov	r0, r3
 800be36:	f000 ff27 	bl	800cc88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be3c:	f000 fa5c 	bl	800c2f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be40:	f000 fd20 	bl	800c884 <xTaskResumeAll>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d189      	bne.n	800bd5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800be4a:	4b10      	ldr	r3, [pc, #64]	; (800be8c <xQueueReceive+0x1bc>)
 800be4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be50:	601a      	str	r2, [r3, #0]
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	e780      	b.n	800bd5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800be5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be5e:	f000 fa4b 	bl	800c2f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be62:	f000 fd0f 	bl	800c884 <xTaskResumeAll>
 800be66:	e77a      	b.n	800bd5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800be68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be6a:	f000 fa45 	bl	800c2f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be6e:	f000 fd09 	bl	800c884 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be74:	f000 fa92 	bl	800c39c <prvIsQueueEmpty>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f43f af6f 	beq.w	800bd5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be82:	4618      	mov	r0, r3
 800be84:	3730      	adds	r7, #48	; 0x30
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	e000ed04 	.word	0xe000ed04

0800be90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b08e      	sub	sp, #56	; 0x38
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800be9a:	2300      	movs	r3, #0
 800be9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bea2:	2300      	movs	r3, #0
 800bea4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10a      	bne.n	800bec2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800beac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb0:	f383 8811 	msr	BASEPRI, r3
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	623b      	str	r3, [r7, #32]
}
 800bebe:	bf00      	nop
 800bec0:	e7fe      	b.n	800bec0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00a      	beq.n	800bee0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	61fb      	str	r3, [r7, #28]
}
 800bedc:	bf00      	nop
 800bede:	e7fe      	b.n	800bede <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bee0:	f001 f8b2 	bl	800d048 <xTaskGetSchedulerState>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d102      	bne.n	800bef0 <xQueueSemaphoreTake+0x60>
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <xQueueSemaphoreTake+0x64>
 800bef0:	2301      	movs	r3, #1
 800bef2:	e000      	b.n	800bef6 <xQueueSemaphoreTake+0x66>
 800bef4:	2300      	movs	r3, #0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10a      	bne.n	800bf10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800befa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	61bb      	str	r3, [r7, #24]
}
 800bf0c:	bf00      	nop
 800bf0e:	e7fe      	b.n	800bf0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf10:	f001 fc00 	bl	800d714 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d024      	beq.n	800bf6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf22:	1e5a      	subs	r2, r3, #1
 800bf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d104      	bne.n	800bf3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bf30:	f001 fa48 	bl	800d3c4 <pvTaskIncrementMutexHeldCount>
 800bf34:	4602      	mov	r2, r0
 800bf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00f      	beq.n	800bf62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	3310      	adds	r3, #16
 800bf46:	4618      	mov	r0, r3
 800bf48:	f000 fec2 	bl	800ccd0 <xTaskRemoveFromEventList>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d007      	beq.n	800bf62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf52:	4b54      	ldr	r3, [pc, #336]	; (800c0a4 <xQueueSemaphoreTake+0x214>)
 800bf54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf58:	601a      	str	r2, [r3, #0]
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf62:	f001 fc07 	bl	800d774 <vPortExitCritical>
				return pdPASS;
 800bf66:	2301      	movs	r3, #1
 800bf68:	e097      	b.n	800c09a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d111      	bne.n	800bf94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00a      	beq.n	800bf8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	617b      	str	r3, [r7, #20]
}
 800bf88:	bf00      	nop
 800bf8a:	e7fe      	b.n	800bf8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf8c:	f001 fbf2 	bl	800d774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf90:	2300      	movs	r3, #0
 800bf92:	e082      	b.n	800c09a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d106      	bne.n	800bfa8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf9a:	f107 030c 	add.w	r3, r7, #12
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 fef8 	bl	800cd94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfa8:	f001 fbe4 	bl	800d774 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfac:	f000 fc5c 	bl	800c868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfb0:	f001 fbb0 	bl	800d714 <vPortEnterCritical>
 800bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfba:	b25b      	sxtb	r3, r3
 800bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc0:	d103      	bne.n	800bfca <xQueueSemaphoreTake+0x13a>
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfd0:	b25b      	sxtb	r3, r3
 800bfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd6:	d103      	bne.n	800bfe0 <xQueueSemaphoreTake+0x150>
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfe0:	f001 fbc8 	bl	800d774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfe4:	463a      	mov	r2, r7
 800bfe6:	f107 030c 	add.w	r3, r7, #12
 800bfea:	4611      	mov	r1, r2
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fee7 	bl	800cdc0 <xTaskCheckForTimeOut>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d132      	bne.n	800c05e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bffa:	f000 f9cf 	bl	800c39c <prvIsQueueEmpty>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d026      	beq.n	800c052 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d109      	bne.n	800c020 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c00c:	f001 fb82 	bl	800d714 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	4618      	mov	r0, r3
 800c016:	f001 f835 	bl	800d084 <xTaskPriorityInherit>
 800c01a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c01c:	f001 fbaa 	bl	800d774 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c022:	3324      	adds	r3, #36	; 0x24
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	4611      	mov	r1, r2
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 fe2d 	bl	800cc88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c02e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c030:	f000 f962 	bl	800c2f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c034:	f000 fc26 	bl	800c884 <xTaskResumeAll>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f47f af68 	bne.w	800bf10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c040:	4b18      	ldr	r3, [pc, #96]	; (800c0a4 <xQueueSemaphoreTake+0x214>)
 800c042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	e75e      	b.n	800bf10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c054:	f000 f950 	bl	800c2f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c058:	f000 fc14 	bl	800c884 <xTaskResumeAll>
 800c05c:	e758      	b.n	800bf10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c05e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c060:	f000 f94a 	bl	800c2f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c064:	f000 fc0e 	bl	800c884 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c06a:	f000 f997 	bl	800c39c <prvIsQueueEmpty>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	f43f af4d 	beq.w	800bf10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00d      	beq.n	800c098 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c07c:	f001 fb4a 	bl	800d714 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c082:	f000 f891 	bl	800c1a8 <prvGetDisinheritPriorityAfterTimeout>
 800c086:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c08e:	4618      	mov	r0, r3
 800c090:	f001 f8fe 	bl	800d290 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c094:	f001 fb6e 	bl	800d774 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c098:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3738      	adds	r7, #56	; 0x38
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	e000ed04 	.word	0xe000ed04

0800c0a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08e      	sub	sp, #56	; 0x38
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	623b      	str	r3, [r7, #32]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d103      	bne.n	800c0e2 <xQueueReceiveFromISR+0x3a>
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d101      	bne.n	800c0e6 <xQueueReceiveFromISR+0x3e>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e000      	b.n	800c0e8 <xQueueReceiveFromISR+0x40>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10a      	bne.n	800c102 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	61fb      	str	r3, [r7, #28]
}
 800c0fe:	bf00      	nop
 800c100:	e7fe      	b.n	800c100 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c102:	f001 fbe9 	bl	800d8d8 <vPortValidateInterruptPriority>
	__asm volatile
 800c106:	f3ef 8211 	mrs	r2, BASEPRI
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	61ba      	str	r2, [r7, #24]
 800c11c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c11e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c120:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c126:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d02f      	beq.n	800c18e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c138:	68b9      	ldr	r1, [r7, #8]
 800c13a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c13c:	f000 f8b6 	bl	800c2ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	1e5a      	subs	r2, r3, #1
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c148:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c150:	d112      	bne.n	800c178 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d016      	beq.n	800c188 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	3310      	adds	r3, #16
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 fdb6 	bl	800ccd0 <xTaskRemoveFromEventList>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00e      	beq.n	800c188 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00b      	beq.n	800c188 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	601a      	str	r2, [r3, #0]
 800c176:	e007      	b.n	800c188 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c17c:	3301      	adds	r3, #1
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	b25a      	sxtb	r2, r3
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c188:	2301      	movs	r3, #1
 800c18a:	637b      	str	r3, [r7, #52]	; 0x34
 800c18c:	e001      	b.n	800c192 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c18e:	2300      	movs	r3, #0
 800c190:	637b      	str	r3, [r7, #52]	; 0x34
 800c192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c194:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	f383 8811 	msr	BASEPRI, r3
}
 800c19c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3738      	adds	r7, #56	; 0x38
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d006      	beq.n	800c1c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f1c3 0307 	rsb	r3, r3, #7
 800c1c2:	60fb      	str	r3, [r7, #12]
 800c1c4:	e001      	b.n	800c1ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
	}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3714      	adds	r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10d      	bne.n	800c212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d14d      	bne.n	800c29a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	4618      	mov	r0, r3
 800c204:	f000 ffbe 	bl	800d184 <xTaskPriorityDisinherit>
 800c208:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	609a      	str	r2, [r3, #8]
 800c210:	e043      	b.n	800c29a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d119      	bne.n	800c24c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6858      	ldr	r0, [r3, #4]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c220:	461a      	mov	r2, r3
 800c222:	68b9      	ldr	r1, [r7, #8]
 800c224:	f001 fda2 	bl	800dd6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c230:	441a      	add	r2, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	685a      	ldr	r2, [r3, #4]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d32b      	bcc.n	800c29a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	605a      	str	r2, [r3, #4]
 800c24a:	e026      	b.n	800c29a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	68d8      	ldr	r0, [r3, #12]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c254:	461a      	mov	r2, r3
 800c256:	68b9      	ldr	r1, [r7, #8]
 800c258:	f001 fd88 	bl	800dd6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	68da      	ldr	r2, [r3, #12]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c264:	425b      	negs	r3, r3
 800c266:	441a      	add	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	68da      	ldr	r2, [r3, #12]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	429a      	cmp	r2, r3
 800c276:	d207      	bcs.n	800c288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	689a      	ldr	r2, [r3, #8]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c280:	425b      	negs	r3, r3
 800c282:	441a      	add	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d105      	bne.n	800c29a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d002      	beq.n	800c29a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	3b01      	subs	r3, #1
 800c298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	1c5a      	adds	r2, r3, #1
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c2a2:	697b      	ldr	r3, [r7, #20]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d018      	beq.n	800c2f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	68da      	ldr	r2, [r3, #12]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c6:	441a      	add	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68da      	ldr	r2, [r3, #12]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d303      	bcc.n	800c2e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68d9      	ldr	r1, [r3, #12]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	6838      	ldr	r0, [r7, #0]
 800c2ec:	f001 fd3e 	bl	800dd6c <memcpy>
	}
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c300:	f001 fa08 	bl	800d714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c30a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c30c:	e011      	b.n	800c332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c312:	2b00      	cmp	r3, #0
 800c314:	d012      	beq.n	800c33c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3324      	adds	r3, #36	; 0x24
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 fcd8 	bl	800ccd0 <xTaskRemoveFromEventList>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d001      	beq.n	800c32a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c326:	f000 fdad 	bl	800ce84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c32a:	7bfb      	ldrb	r3, [r7, #15]
 800c32c:	3b01      	subs	r3, #1
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c336:	2b00      	cmp	r3, #0
 800c338:	dce9      	bgt.n	800c30e <prvUnlockQueue+0x16>
 800c33a:	e000      	b.n	800c33e <prvUnlockQueue+0x46>
					break;
 800c33c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	22ff      	movs	r2, #255	; 0xff
 800c342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c346:	f001 fa15 	bl	800d774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c34a:	f001 f9e3 	bl	800d714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c356:	e011      	b.n	800c37c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d012      	beq.n	800c386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	3310      	adds	r3, #16
 800c364:	4618      	mov	r0, r3
 800c366:	f000 fcb3 	bl	800ccd0 <xTaskRemoveFromEventList>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d001      	beq.n	800c374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c370:	f000 fd88 	bl	800ce84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c374:	7bbb      	ldrb	r3, [r7, #14]
 800c376:	3b01      	subs	r3, #1
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c37c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c380:	2b00      	cmp	r3, #0
 800c382:	dce9      	bgt.n	800c358 <prvUnlockQueue+0x60>
 800c384:	e000      	b.n	800c388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	22ff      	movs	r2, #255	; 0xff
 800c38c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c390:	f001 f9f0 	bl	800d774 <vPortExitCritical>
}
 800c394:	bf00      	nop
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3a4:	f001 f9b6 	bl	800d714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d102      	bne.n	800c3b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	e001      	b.n	800c3ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3ba:	f001 f9db 	bl	800d774 <vPortExitCritical>

	return xReturn;
 800c3be:	68fb      	ldr	r3, [r7, #12]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3710      	adds	r7, #16
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3d0:	f001 f9a0 	bl	800d714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d102      	bne.n	800c3e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	60fb      	str	r3, [r7, #12]
 800c3e4:	e001      	b.n	800c3ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3ea:	f001 f9c3 	bl	800d774 <vPortExitCritical>

	return xReturn;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08e      	sub	sp, #56	; 0x38
 800c3fc:	af04      	add	r7, sp, #16
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
 800c404:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10a      	bne.n	800c422 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	623b      	str	r3, [r7, #32]
}
 800c41e:	bf00      	nop
 800c420:	e7fe      	b.n	800c420 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10a      	bne.n	800c43e <xTaskCreateStatic+0x46>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	61fb      	str	r3, [r7, #28]
}
 800c43a:	bf00      	nop
 800c43c:	e7fe      	b.n	800c43c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c43e:	2360      	movs	r3, #96	; 0x60
 800c440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	2b60      	cmp	r3, #96	; 0x60
 800c446:	d00a      	beq.n	800c45e <xTaskCreateStatic+0x66>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	61bb      	str	r3, [r7, #24]
}
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c45e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	2b00      	cmp	r3, #0
 800c464:	d01e      	beq.n	800c4a4 <xTaskCreateStatic+0xac>
 800c466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d01b      	beq.n	800c4a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c474:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c478:	2202      	movs	r2, #2
 800c47a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c47e:	2300      	movs	r3, #0
 800c480:	9303      	str	r3, [sp, #12]
 800c482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c484:	9302      	str	r3, [sp, #8]
 800c486:	f107 0314 	add.w	r3, r7, #20
 800c48a:	9301      	str	r3, [sp, #4]
 800c48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	68b9      	ldr	r1, [r7, #8]
 800c496:	68f8      	ldr	r0, [r7, #12]
 800c498:	f000 f850 	bl	800c53c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c49c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c49e:	f000 f8df 	bl	800c660 <prvAddNewTaskToReadyList>
 800c4a2:	e001      	b.n	800c4a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c4a8:	697b      	ldr	r3, [r7, #20]
	}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3728      	adds	r7, #40	; 0x28
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b08c      	sub	sp, #48	; 0x30
 800c4b6:	af04      	add	r7, sp, #16
 800c4b8:	60f8      	str	r0, [r7, #12]
 800c4ba:	60b9      	str	r1, [r7, #8]
 800c4bc:	603b      	str	r3, [r7, #0]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c4c2:	88fb      	ldrh	r3, [r7, #6]
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f001 fa46 	bl	800d958 <pvPortMalloc>
 800c4cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00e      	beq.n	800c4f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c4d4:	2060      	movs	r0, #96	; 0x60
 800c4d6:	f001 fa3f 	bl	800d958 <pvPortMalloc>
 800c4da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d003      	beq.n	800c4ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	631a      	str	r2, [r3, #48]	; 0x30
 800c4e8:	e005      	b.n	800c4f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c4ea:	6978      	ldr	r0, [r7, #20]
 800c4ec:	f001 fafe 	bl	800daec <vPortFree>
 800c4f0:	e001      	b.n	800c4f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d017      	beq.n	800c52c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c504:	88fa      	ldrh	r2, [r7, #6]
 800c506:	2300      	movs	r3, #0
 800c508:	9303      	str	r3, [sp, #12]
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	9302      	str	r3, [sp, #8]
 800c50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c510:	9301      	str	r3, [sp, #4]
 800c512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f000 f80e 	bl	800c53c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c520:	69f8      	ldr	r0, [r7, #28]
 800c522:	f000 f89d 	bl	800c660 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c526:	2301      	movs	r3, #1
 800c528:	61bb      	str	r3, [r7, #24]
 800c52a:	e002      	b.n	800c532 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c52c:	f04f 33ff 	mov.w	r3, #4294967295
 800c530:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c532:	69bb      	ldr	r3, [r7, #24]
	}
 800c534:	4618      	mov	r0, r3
 800c536:	3720      	adds	r7, #32
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	461a      	mov	r2, r3
 800c554:	21a5      	movs	r1, #165	; 0xa5
 800c556:	f001 fc17 	bl	800dd88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c564:	3b01      	subs	r3, #1
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	4413      	add	r3, r2
 800c56a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	f023 0307 	bic.w	r3, r3, #7
 800c572:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	f003 0307 	and.w	r3, r3, #7
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00a      	beq.n	800c594 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	617b      	str	r3, [r7, #20]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d01f      	beq.n	800c5da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c59a:	2300      	movs	r3, #0
 800c59c:	61fb      	str	r3, [r7, #28]
 800c59e:	e012      	b.n	800c5c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	7819      	ldrb	r1, [r3, #0]
 800c5a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	3334      	adds	r3, #52	; 0x34
 800c5b0:	460a      	mov	r2, r1
 800c5b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d006      	beq.n	800c5ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	61fb      	str	r3, [r7, #28]
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	2b0f      	cmp	r3, #15
 800c5ca:	d9e9      	bls.n	800c5a0 <prvInitialiseNewTask+0x64>
 800c5cc:	e000      	b.n	800c5d0 <prvInitialiseNewTask+0x94>
			{
				break;
 800c5ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c5d8:	e003      	b.n	800c5e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	2b06      	cmp	r3, #6
 800c5e6:	d901      	bls.n	800c5ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c5e8:	2306      	movs	r3, #6
 800c5ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c600:	3304      	adds	r3, #4
 800c602:	4618      	mov	r0, r3
 800c604:	f7ff f86d 	bl	800b6e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	3318      	adds	r3, #24
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7ff f868 	bl	800b6e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c616:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61a:	f1c3 0207 	rsb	r2, r3, #7
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c626:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	2200      	movs	r2, #0
 800c62c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c630:	2200      	movs	r2, #0
 800c632:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c636:	2200      	movs	r2, #0
 800c638:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c63c:	683a      	ldr	r2, [r7, #0]
 800c63e:	68f9      	ldr	r1, [r7, #12]
 800c640:	69b8      	ldr	r0, [r7, #24]
 800c642:	f000 ff39 	bl	800d4b8 <pxPortInitialiseStack>
 800c646:	4602      	mov	r2, r0
 800c648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d002      	beq.n	800c658 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c656:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c658:	bf00      	nop
 800c65a:	3720      	adds	r7, #32
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c668:	f001 f854 	bl	800d714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c66c:	4b2c      	ldr	r3, [pc, #176]	; (800c720 <prvAddNewTaskToReadyList+0xc0>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	3301      	adds	r3, #1
 800c672:	4a2b      	ldr	r2, [pc, #172]	; (800c720 <prvAddNewTaskToReadyList+0xc0>)
 800c674:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c676:	4b2b      	ldr	r3, [pc, #172]	; (800c724 <prvAddNewTaskToReadyList+0xc4>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d109      	bne.n	800c692 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c67e:	4a29      	ldr	r2, [pc, #164]	; (800c724 <prvAddNewTaskToReadyList+0xc4>)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c684:	4b26      	ldr	r3, [pc, #152]	; (800c720 <prvAddNewTaskToReadyList+0xc0>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d110      	bne.n	800c6ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c68c:	f000 fc1e 	bl	800cecc <prvInitialiseTaskLists>
 800c690:	e00d      	b.n	800c6ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c692:	4b25      	ldr	r3, [pc, #148]	; (800c728 <prvAddNewTaskToReadyList+0xc8>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d109      	bne.n	800c6ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c69a:	4b22      	ldr	r3, [pc, #136]	; (800c724 <prvAddNewTaskToReadyList+0xc4>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d802      	bhi.n	800c6ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c6a8:	4a1e      	ldr	r2, [pc, #120]	; (800c724 <prvAddNewTaskToReadyList+0xc4>)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c6ae:	4b1f      	ldr	r3, [pc, #124]	; (800c72c <prvAddNewTaskToReadyList+0xcc>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	4a1d      	ldr	r2, [pc, #116]	; (800c72c <prvAddNewTaskToReadyList+0xcc>)
 800c6b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c6b8:	4b1c      	ldr	r3, [pc, #112]	; (800c72c <prvAddNewTaskToReadyList+0xcc>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	409a      	lsls	r2, r3
 800c6c8:	4b19      	ldr	r3, [pc, #100]	; (800c730 <prvAddNewTaskToReadyList+0xd0>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	4a18      	ldr	r2, [pc, #96]	; (800c730 <prvAddNewTaskToReadyList+0xd0>)
 800c6d0:	6013      	str	r3, [r2, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4a15      	ldr	r2, [pc, #84]	; (800c734 <prvAddNewTaskToReadyList+0xd4>)
 800c6e0:	441a      	add	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	f7ff f807 	bl	800b6fc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c6ee:	f001 f841 	bl	800d774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c6f2:	4b0d      	ldr	r3, [pc, #52]	; (800c728 <prvAddNewTaskToReadyList+0xc8>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00e      	beq.n	800c718 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c6fa:	4b0a      	ldr	r3, [pc, #40]	; (800c724 <prvAddNewTaskToReadyList+0xc4>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c704:	429a      	cmp	r2, r3
 800c706:	d207      	bcs.n	800c718 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c708:	4b0b      	ldr	r3, [pc, #44]	; (800c738 <prvAddNewTaskToReadyList+0xd8>)
 800c70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c70e:	601a      	str	r2, [r3, #0]
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	200010b4 	.word	0x200010b4
 800c724:	20000fb4 	.word	0x20000fb4
 800c728:	200010c0 	.word	0x200010c0
 800c72c:	200010d0 	.word	0x200010d0
 800c730:	200010bc 	.word	0x200010bc
 800c734:	20000fb8 	.word	0x20000fb8
 800c738:	e000ed04 	.word	0xe000ed04

0800c73c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c744:	2300      	movs	r3, #0
 800c746:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d017      	beq.n	800c77e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c74e:	4b13      	ldr	r3, [pc, #76]	; (800c79c <vTaskDelay+0x60>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00a      	beq.n	800c76c <vTaskDelay+0x30>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	60bb      	str	r3, [r7, #8]
}
 800c768:	bf00      	nop
 800c76a:	e7fe      	b.n	800c76a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c76c:	f000 f87c 	bl	800c868 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c770:	2100      	movs	r1, #0
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fe3a 	bl	800d3ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c778:	f000 f884 	bl	800c884 <xTaskResumeAll>
 800c77c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d107      	bne.n	800c794 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c784:	4b06      	ldr	r3, [pc, #24]	; (800c7a0 <vTaskDelay+0x64>)
 800c786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c794:	bf00      	nop
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	200010dc 	.word	0x200010dc
 800c7a0:	e000ed04 	.word	0xe000ed04

0800c7a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b08a      	sub	sp, #40	; 0x28
 800c7a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c7b2:	463a      	mov	r2, r7
 800c7b4:	1d39      	adds	r1, r7, #4
 800c7b6:	f107 0308 	add.w	r3, r7, #8
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7f3 fefc 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	9202      	str	r2, [sp, #8]
 800c7c8:	9301      	str	r3, [sp, #4]
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	460a      	mov	r2, r1
 800c7d2:	491f      	ldr	r1, [pc, #124]	; (800c850 <vTaskStartScheduler+0xac>)
 800c7d4:	481f      	ldr	r0, [pc, #124]	; (800c854 <vTaskStartScheduler+0xb0>)
 800c7d6:	f7ff fe0f 	bl	800c3f8 <xTaskCreateStatic>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	4a1e      	ldr	r2, [pc, #120]	; (800c858 <vTaskStartScheduler+0xb4>)
 800c7de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c7e0:	4b1d      	ldr	r3, [pc, #116]	; (800c858 <vTaskStartScheduler+0xb4>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	617b      	str	r3, [r7, #20]
 800c7ec:	e001      	b.n	800c7f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d118      	bne.n	800c82a <vTaskStartScheduler+0x86>
	__asm volatile
 800c7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	613b      	str	r3, [r7, #16]
}
 800c80a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c80c:	4b13      	ldr	r3, [pc, #76]	; (800c85c <vTaskStartScheduler+0xb8>)
 800c80e:	f04f 32ff 	mov.w	r2, #4294967295
 800c812:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c814:	4b12      	ldr	r3, [pc, #72]	; (800c860 <vTaskStartScheduler+0xbc>)
 800c816:	2201      	movs	r2, #1
 800c818:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c81a:	4b12      	ldr	r3, [pc, #72]	; (800c864 <vTaskStartScheduler+0xc0>)
 800c81c:	2200      	movs	r2, #0
 800c81e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c820:	f7f3 feba 	bl	8000598 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c824:	f000 fed4 	bl	800d5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c828:	e00e      	b.n	800c848 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c830:	d10a      	bne.n	800c848 <vTaskStartScheduler+0xa4>
	__asm volatile
 800c832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c836:	f383 8811 	msr	BASEPRI, r3
 800c83a:	f3bf 8f6f 	isb	sy
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	60fb      	str	r3, [r7, #12]
}
 800c844:	bf00      	nop
 800c846:	e7fe      	b.n	800c846 <vTaskStartScheduler+0xa2>
}
 800c848:	bf00      	nop
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	08010468 	.word	0x08010468
 800c854:	0800ce9d 	.word	0x0800ce9d
 800c858:	200010d8 	.word	0x200010d8
 800c85c:	200010d4 	.word	0x200010d4
 800c860:	200010c0 	.word	0x200010c0
 800c864:	200010b8 	.word	0x200010b8

0800c868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c868:	b480      	push	{r7}
 800c86a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c86c:	4b04      	ldr	r3, [pc, #16]	; (800c880 <vTaskSuspendAll+0x18>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3301      	adds	r3, #1
 800c872:	4a03      	ldr	r2, [pc, #12]	; (800c880 <vTaskSuspendAll+0x18>)
 800c874:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c876:	bf00      	nop
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr
 800c880:	200010dc 	.word	0x200010dc

0800c884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c88a:	2300      	movs	r3, #0
 800c88c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c88e:	2300      	movs	r3, #0
 800c890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c892:	4b41      	ldr	r3, [pc, #260]	; (800c998 <xTaskResumeAll+0x114>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10a      	bne.n	800c8b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	603b      	str	r3, [r7, #0]
}
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c8b0:	f000 ff30 	bl	800d714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c8b4:	4b38      	ldr	r3, [pc, #224]	; (800c998 <xTaskResumeAll+0x114>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	4a37      	ldr	r2, [pc, #220]	; (800c998 <xTaskResumeAll+0x114>)
 800c8bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8be:	4b36      	ldr	r3, [pc, #216]	; (800c998 <xTaskResumeAll+0x114>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d161      	bne.n	800c98a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c8c6:	4b35      	ldr	r3, [pc, #212]	; (800c99c <xTaskResumeAll+0x118>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d05d      	beq.n	800c98a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8ce:	e02e      	b.n	800c92e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8d0:	4b33      	ldr	r3, [pc, #204]	; (800c9a0 <xTaskResumeAll+0x11c>)
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3318      	adds	r3, #24
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7fe ff6a 	bl	800b7b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fe ff65 	bl	800b7b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	409a      	lsls	r2, r3
 800c8f4:	4b2b      	ldr	r3, [pc, #172]	; (800c9a4 <xTaskResumeAll+0x120>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	4a2a      	ldr	r2, [pc, #168]	; (800c9a4 <xTaskResumeAll+0x120>)
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c902:	4613      	mov	r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	4413      	add	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4a27      	ldr	r2, [pc, #156]	; (800c9a8 <xTaskResumeAll+0x124>)
 800c90c:	441a      	add	r2, r3
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	3304      	adds	r3, #4
 800c912:	4619      	mov	r1, r3
 800c914:	4610      	mov	r0, r2
 800c916:	f7fe fef1 	bl	800b6fc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c91e:	4b23      	ldr	r3, [pc, #140]	; (800c9ac <xTaskResumeAll+0x128>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c924:	429a      	cmp	r2, r3
 800c926:	d302      	bcc.n	800c92e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c928:	4b21      	ldr	r3, [pc, #132]	; (800c9b0 <xTaskResumeAll+0x12c>)
 800c92a:	2201      	movs	r2, #1
 800c92c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c92e:	4b1c      	ldr	r3, [pc, #112]	; (800c9a0 <xTaskResumeAll+0x11c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1cc      	bne.n	800c8d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d001      	beq.n	800c940 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c93c:	f000 fb64 	bl	800d008 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c940:	4b1c      	ldr	r3, [pc, #112]	; (800c9b4 <xTaskResumeAll+0x130>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d010      	beq.n	800c96e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c94c:	f000 f846 	bl	800c9dc <xTaskIncrementTick>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d002      	beq.n	800c95c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c956:	4b16      	ldr	r3, [pc, #88]	; (800c9b0 <xTaskResumeAll+0x12c>)
 800c958:	2201      	movs	r2, #1
 800c95a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	3b01      	subs	r3, #1
 800c960:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1f1      	bne.n	800c94c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c968:	4b12      	ldr	r3, [pc, #72]	; (800c9b4 <xTaskResumeAll+0x130>)
 800c96a:	2200      	movs	r2, #0
 800c96c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c96e:	4b10      	ldr	r3, [pc, #64]	; (800c9b0 <xTaskResumeAll+0x12c>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d009      	beq.n	800c98a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c976:	2301      	movs	r3, #1
 800c978:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c97a:	4b0f      	ldr	r3, [pc, #60]	; (800c9b8 <xTaskResumeAll+0x134>)
 800c97c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c980:	601a      	str	r2, [r3, #0]
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c98a:	f000 fef3 	bl	800d774 <vPortExitCritical>

	return xAlreadyYielded;
 800c98e:	68bb      	ldr	r3, [r7, #8]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	200010dc 	.word	0x200010dc
 800c99c:	200010b4 	.word	0x200010b4
 800c9a0:	20001074 	.word	0x20001074
 800c9a4:	200010bc 	.word	0x200010bc
 800c9a8:	20000fb8 	.word	0x20000fb8
 800c9ac:	20000fb4 	.word	0x20000fb4
 800c9b0:	200010c8 	.word	0x200010c8
 800c9b4:	200010c4 	.word	0x200010c4
 800c9b8:	e000ed04 	.word	0xe000ed04

0800c9bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c9c2:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <xTaskGetTickCount+0x1c>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c9c8:	687b      	ldr	r3, [r7, #4]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	200010b8 	.word	0x200010b8

0800c9dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9e6:	4b4e      	ldr	r3, [pc, #312]	; (800cb20 <xTaskIncrementTick+0x144>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f040 8088 	bne.w	800cb00 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c9f0:	4b4c      	ldr	r3, [pc, #304]	; (800cb24 <xTaskIncrementTick+0x148>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c9f8:	4a4a      	ldr	r2, [pc, #296]	; (800cb24 <xTaskIncrementTick+0x148>)
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d120      	bne.n	800ca46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca04:	4b48      	ldr	r3, [pc, #288]	; (800cb28 <xTaskIncrementTick+0x14c>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00a      	beq.n	800ca24 <xTaskIncrementTick+0x48>
	__asm volatile
 800ca0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	603b      	str	r3, [r7, #0]
}
 800ca20:	bf00      	nop
 800ca22:	e7fe      	b.n	800ca22 <xTaskIncrementTick+0x46>
 800ca24:	4b40      	ldr	r3, [pc, #256]	; (800cb28 <xTaskIncrementTick+0x14c>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	60fb      	str	r3, [r7, #12]
 800ca2a:	4b40      	ldr	r3, [pc, #256]	; (800cb2c <xTaskIncrementTick+0x150>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a3e      	ldr	r2, [pc, #248]	; (800cb28 <xTaskIncrementTick+0x14c>)
 800ca30:	6013      	str	r3, [r2, #0]
 800ca32:	4a3e      	ldr	r2, [pc, #248]	; (800cb2c <xTaskIncrementTick+0x150>)
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6013      	str	r3, [r2, #0]
 800ca38:	4b3d      	ldr	r3, [pc, #244]	; (800cb30 <xTaskIncrementTick+0x154>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	4a3c      	ldr	r2, [pc, #240]	; (800cb30 <xTaskIncrementTick+0x154>)
 800ca40:	6013      	str	r3, [r2, #0]
 800ca42:	f000 fae1 	bl	800d008 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca46:	4b3b      	ldr	r3, [pc, #236]	; (800cb34 <xTaskIncrementTick+0x158>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d348      	bcc.n	800cae2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca50:	4b35      	ldr	r3, [pc, #212]	; (800cb28 <xTaskIncrementTick+0x14c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d104      	bne.n	800ca64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca5a:	4b36      	ldr	r3, [pc, #216]	; (800cb34 <xTaskIncrementTick+0x158>)
 800ca5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca60:	601a      	str	r2, [r3, #0]
					break;
 800ca62:	e03e      	b.n	800cae2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca64:	4b30      	ldr	r3, [pc, #192]	; (800cb28 <xTaskIncrementTick+0x14c>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca74:	693a      	ldr	r2, [r7, #16]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d203      	bcs.n	800ca84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca7c:	4a2d      	ldr	r2, [pc, #180]	; (800cb34 <xTaskIncrementTick+0x158>)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca82:	e02e      	b.n	800cae2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	3304      	adds	r3, #4
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fe fe94 	bl	800b7b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d004      	beq.n	800caa0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	3318      	adds	r3, #24
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7fe fe8b 	bl	800b7b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa4:	2201      	movs	r2, #1
 800caa6:	409a      	lsls	r2, r3
 800caa8:	4b23      	ldr	r3, [pc, #140]	; (800cb38 <xTaskIncrementTick+0x15c>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4313      	orrs	r3, r2
 800caae:	4a22      	ldr	r2, [pc, #136]	; (800cb38 <xTaskIncrementTick+0x15c>)
 800cab0:	6013      	str	r3, [r2, #0]
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab6:	4613      	mov	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	4a1f      	ldr	r2, [pc, #124]	; (800cb3c <xTaskIncrementTick+0x160>)
 800cac0:	441a      	add	r2, r3
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	3304      	adds	r3, #4
 800cac6:	4619      	mov	r1, r3
 800cac8:	4610      	mov	r0, r2
 800caca:	f7fe fe17 	bl	800b6fc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad2:	4b1b      	ldr	r3, [pc, #108]	; (800cb40 <xTaskIncrementTick+0x164>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad8:	429a      	cmp	r2, r3
 800cada:	d3b9      	bcc.n	800ca50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cadc:	2301      	movs	r3, #1
 800cade:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cae0:	e7b6      	b.n	800ca50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cae2:	4b17      	ldr	r3, [pc, #92]	; (800cb40 <xTaskIncrementTick+0x164>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae8:	4914      	ldr	r1, [pc, #80]	; (800cb3c <xTaskIncrementTick+0x160>)
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	440b      	add	r3, r1
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d907      	bls.n	800cb0a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800cafa:	2301      	movs	r3, #1
 800cafc:	617b      	str	r3, [r7, #20]
 800cafe:	e004      	b.n	800cb0a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cb00:	4b10      	ldr	r3, [pc, #64]	; (800cb44 <xTaskIncrementTick+0x168>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3301      	adds	r3, #1
 800cb06:	4a0f      	ldr	r2, [pc, #60]	; (800cb44 <xTaskIncrementTick+0x168>)
 800cb08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cb0a:	4b0f      	ldr	r3, [pc, #60]	; (800cb48 <xTaskIncrementTick+0x16c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800cb12:	2301      	movs	r3, #1
 800cb14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cb16:	697b      	ldr	r3, [r7, #20]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3718      	adds	r7, #24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	200010dc 	.word	0x200010dc
 800cb24:	200010b8 	.word	0x200010b8
 800cb28:	2000106c 	.word	0x2000106c
 800cb2c:	20001070 	.word	0x20001070
 800cb30:	200010cc 	.word	0x200010cc
 800cb34:	200010d4 	.word	0x200010d4
 800cb38:	200010bc 	.word	0x200010bc
 800cb3c:	20000fb8 	.word	0x20000fb8
 800cb40:	20000fb4 	.word	0x20000fb4
 800cb44:	200010c4 	.word	0x200010c4
 800cb48:	200010c8 	.word	0x200010c8

0800cb4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b088      	sub	sp, #32
 800cb50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb52:	4b46      	ldr	r3, [pc, #280]	; (800cc6c <vTaskSwitchContext+0x120>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d003      	beq.n	800cb62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb5a:	4b45      	ldr	r3, [pc, #276]	; (800cc70 <vTaskSwitchContext+0x124>)
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb60:	e07f      	b.n	800cc62 <vTaskSwitchContext+0x116>
		xYieldPending = pdFALSE;
 800cb62:	4b43      	ldr	r3, [pc, #268]	; (800cc70 <vTaskSwitchContext+0x124>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800cb68:	f7f3 fd1d 	bl	80005a6 <getRunTimeCounterValue>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	4a41      	ldr	r2, [pc, #260]	; (800cc74 <vTaskSwitchContext+0x128>)
 800cb70:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800cb72:	4b40      	ldr	r3, [pc, #256]	; (800cc74 <vTaskSwitchContext+0x128>)
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	4b40      	ldr	r3, [pc, #256]	; (800cc78 <vTaskSwitchContext+0x12c>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d909      	bls.n	800cb92 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800cb7e:	4b3f      	ldr	r3, [pc, #252]	; (800cc7c <vTaskSwitchContext+0x130>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cb84:	4a3b      	ldr	r2, [pc, #236]	; (800cc74 <vTaskSwitchContext+0x128>)
 800cb86:	6810      	ldr	r0, [r2, #0]
 800cb88:	4a3b      	ldr	r2, [pc, #236]	; (800cc78 <vTaskSwitchContext+0x12c>)
 800cb8a:	6812      	ldr	r2, [r2, #0]
 800cb8c:	1a82      	subs	r2, r0, r2
 800cb8e:	440a      	add	r2, r1
 800cb90:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800cb92:	4b38      	ldr	r3, [pc, #224]	; (800cc74 <vTaskSwitchContext+0x128>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a38      	ldr	r2, [pc, #224]	; (800cc78 <vTaskSwitchContext+0x12c>)
 800cb98:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cb9a:	4b38      	ldr	r3, [pc, #224]	; (800cc7c <vTaskSwitchContext+0x130>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba0:	61fb      	str	r3, [r7, #28]
 800cba2:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cba6:	61bb      	str	r3, [r7, #24]
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	69ba      	ldr	r2, [r7, #24]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d111      	bne.n	800cbd6 <vTaskSwitchContext+0x8a>
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	3304      	adds	r3, #4
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	69ba      	ldr	r2, [r7, #24]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d10b      	bne.n	800cbd6 <vTaskSwitchContext+0x8a>
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	69ba      	ldr	r2, [r7, #24]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d105      	bne.n	800cbd6 <vTaskSwitchContext+0x8a>
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	330c      	adds	r3, #12
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	69ba      	ldr	r2, [r7, #24]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d008      	beq.n	800cbe8 <vTaskSwitchContext+0x9c>
 800cbd6:	4b29      	ldr	r3, [pc, #164]	; (800cc7c <vTaskSwitchContext+0x130>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	4b28      	ldr	r3, [pc, #160]	; (800cc7c <vTaskSwitchContext+0x130>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	3334      	adds	r3, #52	; 0x34
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4610      	mov	r0, r2
 800cbe4:	f7f3 ff64 	bl	8000ab0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe8:	4b25      	ldr	r3, [pc, #148]	; (800cc80 <vTaskSwitchContext+0x134>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	fab3 f383 	clz	r3, r3
 800cbf4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cbf6:	7afb      	ldrb	r3, [r7, #11]
 800cbf8:	f1c3 031f 	rsb	r3, r3, #31
 800cbfc:	617b      	str	r3, [r7, #20]
 800cbfe:	4921      	ldr	r1, [pc, #132]	; (800cc84 <vTaskSwitchContext+0x138>)
 800cc00:	697a      	ldr	r2, [r7, #20]
 800cc02:	4613      	mov	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	440b      	add	r3, r1
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10a      	bne.n	800cc28 <vTaskSwitchContext+0xdc>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	607b      	str	r3, [r7, #4]
}
 800cc24:	bf00      	nop
 800cc26:	e7fe      	b.n	800cc26 <vTaskSwitchContext+0xda>
 800cc28:	697a      	ldr	r2, [r7, #20]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4a14      	ldr	r2, [pc, #80]	; (800cc84 <vTaskSwitchContext+0x138>)
 800cc34:	4413      	add	r3, r2
 800cc36:	613b      	str	r3, [r7, #16]
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	605a      	str	r2, [r3, #4]
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	3308      	adds	r3, #8
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d104      	bne.n	800cc58 <vTaskSwitchContext+0x10c>
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	685a      	ldr	r2, [r3, #4]
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	605a      	str	r2, [r3, #4]
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	4a07      	ldr	r2, [pc, #28]	; (800cc7c <vTaskSwitchContext+0x130>)
 800cc60:	6013      	str	r3, [r2, #0]
}
 800cc62:	bf00      	nop
 800cc64:	3720      	adds	r7, #32
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	200010dc 	.word	0x200010dc
 800cc70:	200010c8 	.word	0x200010c8
 800cc74:	200010e4 	.word	0x200010e4
 800cc78:	200010e0 	.word	0x200010e0
 800cc7c:	20000fb4 	.word	0x20000fb4
 800cc80:	200010bc 	.word	0x200010bc
 800cc84:	20000fb8 	.word	0x20000fb8

0800cc88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10a      	bne.n	800ccae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	60fb      	str	r3, [r7, #12]
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccae:	4b07      	ldr	r3, [pc, #28]	; (800cccc <vTaskPlaceOnEventList+0x44>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3318      	adds	r3, #24
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7fe fd44 	bl	800b744 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	6838      	ldr	r0, [r7, #0]
 800ccc0:	f000 fb94 	bl	800d3ec <prvAddCurrentTaskToDelayedList>
}
 800ccc4:	bf00      	nop
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	20000fb4 	.word	0x20000fb4

0800ccd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d10a      	bne.n	800ccfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	60fb      	str	r3, [r7, #12]
}
 800ccf8:	bf00      	nop
 800ccfa:	e7fe      	b.n	800ccfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	3318      	adds	r3, #24
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fe fd58 	bl	800b7b6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd06:	4b1d      	ldr	r3, [pc, #116]	; (800cd7c <xTaskRemoveFromEventList+0xac>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d11c      	bne.n	800cd48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	3304      	adds	r3, #4
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fe fd4f 	bl	800b7b6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	409a      	lsls	r2, r3
 800cd20:	4b17      	ldr	r3, [pc, #92]	; (800cd80 <xTaskRemoveFromEventList+0xb0>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4313      	orrs	r3, r2
 800cd26:	4a16      	ldr	r2, [pc, #88]	; (800cd80 <xTaskRemoveFromEventList+0xb0>)
 800cd28:	6013      	str	r3, [r2, #0]
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd2e:	4613      	mov	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	4413      	add	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4a13      	ldr	r2, [pc, #76]	; (800cd84 <xTaskRemoveFromEventList+0xb4>)
 800cd38:	441a      	add	r2, r3
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	4619      	mov	r1, r3
 800cd40:	4610      	mov	r0, r2
 800cd42:	f7fe fcdb 	bl	800b6fc <vListInsertEnd>
 800cd46:	e005      	b.n	800cd54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	3318      	adds	r3, #24
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	480e      	ldr	r0, [pc, #56]	; (800cd88 <xTaskRemoveFromEventList+0xb8>)
 800cd50:	f7fe fcd4 	bl	800b6fc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd58:	4b0c      	ldr	r3, [pc, #48]	; (800cd8c <xTaskRemoveFromEventList+0xbc>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d905      	bls.n	800cd6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd62:	2301      	movs	r3, #1
 800cd64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd66:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <xTaskRemoveFromEventList+0xc0>)
 800cd68:	2201      	movs	r2, #1
 800cd6a:	601a      	str	r2, [r3, #0]
 800cd6c:	e001      	b.n	800cd72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd72:	697b      	ldr	r3, [r7, #20]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3718      	adds	r7, #24
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	200010dc 	.word	0x200010dc
 800cd80:	200010bc 	.word	0x200010bc
 800cd84:	20000fb8 	.word	0x20000fb8
 800cd88:	20001074 	.word	0x20001074
 800cd8c:	20000fb4 	.word	0x20000fb4
 800cd90:	200010c8 	.word	0x200010c8

0800cd94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd9c:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <vTaskInternalSetTimeOutState+0x24>)
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cda4:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <vTaskInternalSetTimeOutState+0x28>)
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	605a      	str	r2, [r3, #4]
}
 800cdac:	bf00      	nop
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	200010cc 	.word	0x200010cc
 800cdbc:	200010b8 	.word	0x200010b8

0800cdc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b088      	sub	sp, #32
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10a      	bne.n	800cde6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	613b      	str	r3, [r7, #16]
}
 800cde2:	bf00      	nop
 800cde4:	e7fe      	b.n	800cde4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10a      	bne.n	800ce02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	60fb      	str	r3, [r7, #12]
}
 800cdfe:	bf00      	nop
 800ce00:	e7fe      	b.n	800ce00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ce02:	f000 fc87 	bl	800d714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce06:	4b1d      	ldr	r3, [pc, #116]	; (800ce7c <xTaskCheckForTimeOut+0xbc>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	69ba      	ldr	r2, [r7, #24]
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce1e:	d102      	bne.n	800ce26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce20:	2300      	movs	r3, #0
 800ce22:	61fb      	str	r3, [r7, #28]
 800ce24:	e023      	b.n	800ce6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	4b15      	ldr	r3, [pc, #84]	; (800ce80 <xTaskCheckForTimeOut+0xc0>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d007      	beq.n	800ce42 <xTaskCheckForTimeOut+0x82>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	69ba      	ldr	r2, [r7, #24]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d302      	bcc.n	800ce42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	61fb      	str	r3, [r7, #28]
 800ce40:	e015      	b.n	800ce6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d20b      	bcs.n	800ce64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	1ad2      	subs	r2, r2, r3
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7ff ff9b 	bl	800cd94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	61fb      	str	r3, [r7, #28]
 800ce62:	e004      	b.n	800ce6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2200      	movs	r2, #0
 800ce68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce6e:	f000 fc81 	bl	800d774 <vPortExitCritical>

	return xReturn;
 800ce72:	69fb      	ldr	r3, [r7, #28]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3720      	adds	r7, #32
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	200010b8 	.word	0x200010b8
 800ce80:	200010cc 	.word	0x200010cc

0800ce84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce84:	b480      	push	{r7}
 800ce86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce88:	4b03      	ldr	r3, [pc, #12]	; (800ce98 <vTaskMissedYield+0x14>)
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	601a      	str	r2, [r3, #0]
}
 800ce8e:	bf00      	nop
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	200010c8 	.word	0x200010c8

0800ce9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cea4:	f000 f852 	bl	800cf4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cea8:	4b06      	ldr	r3, [pc, #24]	; (800cec4 <prvIdleTask+0x28>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d9f9      	bls.n	800cea4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ceb0:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <prvIdleTask+0x2c>)
 800ceb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cec0:	e7f0      	b.n	800cea4 <prvIdleTask+0x8>
 800cec2:	bf00      	nop
 800cec4:	20000fb8 	.word	0x20000fb8
 800cec8:	e000ed04 	.word	0xe000ed04

0800cecc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ced2:	2300      	movs	r3, #0
 800ced4:	607b      	str	r3, [r7, #4]
 800ced6:	e00c      	b.n	800cef2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	4613      	mov	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4413      	add	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4a12      	ldr	r2, [pc, #72]	; (800cf2c <prvInitialiseTaskLists+0x60>)
 800cee4:	4413      	add	r3, r2
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fe fbdb 	bl	800b6a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	3301      	adds	r3, #1
 800cef0:	607b      	str	r3, [r7, #4]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2b06      	cmp	r3, #6
 800cef6:	d9ef      	bls.n	800ced8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cef8:	480d      	ldr	r0, [pc, #52]	; (800cf30 <prvInitialiseTaskLists+0x64>)
 800cefa:	f7fe fbd2 	bl	800b6a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cefe:	480d      	ldr	r0, [pc, #52]	; (800cf34 <prvInitialiseTaskLists+0x68>)
 800cf00:	f7fe fbcf 	bl	800b6a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf04:	480c      	ldr	r0, [pc, #48]	; (800cf38 <prvInitialiseTaskLists+0x6c>)
 800cf06:	f7fe fbcc 	bl	800b6a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf0a:	480c      	ldr	r0, [pc, #48]	; (800cf3c <prvInitialiseTaskLists+0x70>)
 800cf0c:	f7fe fbc9 	bl	800b6a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf10:	480b      	ldr	r0, [pc, #44]	; (800cf40 <prvInitialiseTaskLists+0x74>)
 800cf12:	f7fe fbc6 	bl	800b6a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf16:	4b0b      	ldr	r3, [pc, #44]	; (800cf44 <prvInitialiseTaskLists+0x78>)
 800cf18:	4a05      	ldr	r2, [pc, #20]	; (800cf30 <prvInitialiseTaskLists+0x64>)
 800cf1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf1c:	4b0a      	ldr	r3, [pc, #40]	; (800cf48 <prvInitialiseTaskLists+0x7c>)
 800cf1e:	4a05      	ldr	r2, [pc, #20]	; (800cf34 <prvInitialiseTaskLists+0x68>)
 800cf20:	601a      	str	r2, [r3, #0]
}
 800cf22:	bf00      	nop
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	20000fb8 	.word	0x20000fb8
 800cf30:	20001044 	.word	0x20001044
 800cf34:	20001058 	.word	0x20001058
 800cf38:	20001074 	.word	0x20001074
 800cf3c:	20001088 	.word	0x20001088
 800cf40:	200010a0 	.word	0x200010a0
 800cf44:	2000106c 	.word	0x2000106c
 800cf48:	20001070 	.word	0x20001070

0800cf4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf52:	e019      	b.n	800cf88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf54:	f000 fbde 	bl	800d714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf58:	4b10      	ldr	r3, [pc, #64]	; (800cf9c <prvCheckTasksWaitingTermination+0x50>)
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	3304      	adds	r3, #4
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fe fc26 	bl	800b7b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf6a:	4b0d      	ldr	r3, [pc, #52]	; (800cfa0 <prvCheckTasksWaitingTermination+0x54>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	4a0b      	ldr	r2, [pc, #44]	; (800cfa0 <prvCheckTasksWaitingTermination+0x54>)
 800cf72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf74:	4b0b      	ldr	r3, [pc, #44]	; (800cfa4 <prvCheckTasksWaitingTermination+0x58>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	4a0a      	ldr	r2, [pc, #40]	; (800cfa4 <prvCheckTasksWaitingTermination+0x58>)
 800cf7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf7e:	f000 fbf9 	bl	800d774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 f810 	bl	800cfa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf88:	4b06      	ldr	r3, [pc, #24]	; (800cfa4 <prvCheckTasksWaitingTermination+0x58>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1e1      	bne.n	800cf54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf90:	bf00      	nop
 800cf92:	bf00      	nop
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	20001088 	.word	0x20001088
 800cfa0:	200010b4 	.word	0x200010b4
 800cfa4:	2000109c 	.word	0x2000109c

0800cfa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d108      	bne.n	800cfcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 fd94 	bl	800daec <vPortFree>
				vPortFree( pxTCB );
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 fd91 	bl	800daec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cfca:	e018      	b.n	800cffe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d103      	bne.n	800cfde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fd88 	bl	800daec <vPortFree>
	}
 800cfdc:	e00f      	b.n	800cffe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d00a      	beq.n	800cffe <prvDeleteTCB+0x56>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	60fb      	str	r3, [r7, #12]
}
 800cffa:	bf00      	nop
 800cffc:	e7fe      	b.n	800cffc <prvDeleteTCB+0x54>
	}
 800cffe:	bf00      	nop
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
	...

0800d008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d00e:	4b0c      	ldr	r3, [pc, #48]	; (800d040 <prvResetNextTaskUnblockTime+0x38>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d104      	bne.n	800d022 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d018:	4b0a      	ldr	r3, [pc, #40]	; (800d044 <prvResetNextTaskUnblockTime+0x3c>)
 800d01a:	f04f 32ff 	mov.w	r2, #4294967295
 800d01e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d020:	e008      	b.n	800d034 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d022:	4b07      	ldr	r3, [pc, #28]	; (800d040 <prvResetNextTaskUnblockTime+0x38>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	4a04      	ldr	r2, [pc, #16]	; (800d044 <prvResetNextTaskUnblockTime+0x3c>)
 800d032:	6013      	str	r3, [r2, #0]
}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr
 800d040:	2000106c 	.word	0x2000106c
 800d044:	200010d4 	.word	0x200010d4

0800d048 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d04e:	4b0b      	ldr	r3, [pc, #44]	; (800d07c <xTaskGetSchedulerState+0x34>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d102      	bne.n	800d05c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d056:	2301      	movs	r3, #1
 800d058:	607b      	str	r3, [r7, #4]
 800d05a:	e008      	b.n	800d06e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d05c:	4b08      	ldr	r3, [pc, #32]	; (800d080 <xTaskGetSchedulerState+0x38>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d102      	bne.n	800d06a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d064:	2302      	movs	r3, #2
 800d066:	607b      	str	r3, [r7, #4]
 800d068:	e001      	b.n	800d06e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d06a:	2300      	movs	r3, #0
 800d06c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d06e:	687b      	ldr	r3, [r7, #4]
	}
 800d070:	4618      	mov	r0, r3
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr
 800d07c:	200010c0 	.word	0x200010c0
 800d080:	200010dc 	.word	0x200010dc

0800d084 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d090:	2300      	movs	r3, #0
 800d092:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d069      	beq.n	800d16e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09e:	4b36      	ldr	r3, [pc, #216]	; (800d178 <xTaskPriorityInherit+0xf4>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d259      	bcs.n	800d15c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	699b      	ldr	r3, [r3, #24]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	db06      	blt.n	800d0be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0b0:	4b31      	ldr	r3, [pc, #196]	; (800d178 <xTaskPriorityInherit+0xf4>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b6:	f1c3 0207 	rsb	r2, r3, #7
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	6959      	ldr	r1, [r3, #20]
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	009b      	lsls	r3, r3, #2
 800d0ca:	4413      	add	r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	4a2b      	ldr	r2, [pc, #172]	; (800d17c <xTaskPriorityInherit+0xf8>)
 800d0d0:	4413      	add	r3, r2
 800d0d2:	4299      	cmp	r1, r3
 800d0d4:	d13a      	bne.n	800d14c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	3304      	adds	r3, #4
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fe fb6b 	bl	800b7b6 <uxListRemove>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d115      	bne.n	800d112 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ea:	4924      	ldr	r1, [pc, #144]	; (800d17c <xTaskPriorityInherit+0xf8>)
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	440b      	add	r3, r1
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d10a      	bne.n	800d112 <xTaskPriorityInherit+0x8e>
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d100:	2201      	movs	r2, #1
 800d102:	fa02 f303 	lsl.w	r3, r2, r3
 800d106:	43da      	mvns	r2, r3
 800d108:	4b1d      	ldr	r3, [pc, #116]	; (800d180 <xTaskPriorityInherit+0xfc>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4013      	ands	r3, r2
 800d10e:	4a1c      	ldr	r2, [pc, #112]	; (800d180 <xTaskPriorityInherit+0xfc>)
 800d110:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d112:	4b19      	ldr	r3, [pc, #100]	; (800d178 <xTaskPriorityInherit+0xf4>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d120:	2201      	movs	r2, #1
 800d122:	409a      	lsls	r2, r3
 800d124:	4b16      	ldr	r3, [pc, #88]	; (800d180 <xTaskPriorityInherit+0xfc>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4313      	orrs	r3, r2
 800d12a:	4a15      	ldr	r2, [pc, #84]	; (800d180 <xTaskPriorityInherit+0xfc>)
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d132:	4613      	mov	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	4413      	add	r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4a10      	ldr	r2, [pc, #64]	; (800d17c <xTaskPriorityInherit+0xf8>)
 800d13c:	441a      	add	r2, r3
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	3304      	adds	r3, #4
 800d142:	4619      	mov	r1, r3
 800d144:	4610      	mov	r0, r2
 800d146:	f7fe fad9 	bl	800b6fc <vListInsertEnd>
 800d14a:	e004      	b.n	800d156 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d14c:	4b0a      	ldr	r3, [pc, #40]	; (800d178 <xTaskPriorityInherit+0xf4>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d156:	2301      	movs	r3, #1
 800d158:	60fb      	str	r3, [r7, #12]
 800d15a:	e008      	b.n	800d16e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d160:	4b05      	ldr	r3, [pc, #20]	; (800d178 <xTaskPriorityInherit+0xf4>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d166:	429a      	cmp	r2, r3
 800d168:	d201      	bcs.n	800d16e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d16a:	2301      	movs	r3, #1
 800d16c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d16e:	68fb      	ldr	r3, [r7, #12]
	}
 800d170:	4618      	mov	r0, r3
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	20000fb4 	.word	0x20000fb4
 800d17c:	20000fb8 	.word	0x20000fb8
 800d180:	200010bc 	.word	0x200010bc

0800d184 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d184:	b580      	push	{r7, lr}
 800d186:	b086      	sub	sp, #24
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d190:	2300      	movs	r3, #0
 800d192:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d06e      	beq.n	800d278 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d19a:	4b3a      	ldr	r3, [pc, #232]	; (800d284 <xTaskPriorityDisinherit+0x100>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d00a      	beq.n	800d1ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	60fb      	str	r3, [r7, #12]
}
 800d1b6:	bf00      	nop
 800d1b8:	e7fe      	b.n	800d1b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d10a      	bne.n	800d1d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	60bb      	str	r3, [r7, #8]
}
 800d1d4:	bf00      	nop
 800d1d6:	e7fe      	b.n	800d1d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1dc:	1e5a      	subs	r2, r3, #1
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d044      	beq.n	800d278 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d140      	bne.n	800d278 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe fadb 	bl	800b7b6 <uxListRemove>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d115      	bne.n	800d232 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d20a:	491f      	ldr	r1, [pc, #124]	; (800d288 <xTaskPriorityDisinherit+0x104>)
 800d20c:	4613      	mov	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	4413      	add	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	440b      	add	r3, r1
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10a      	bne.n	800d232 <xTaskPriorityDisinherit+0xae>
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d220:	2201      	movs	r2, #1
 800d222:	fa02 f303 	lsl.w	r3, r2, r3
 800d226:	43da      	mvns	r2, r3
 800d228:	4b18      	ldr	r3, [pc, #96]	; (800d28c <xTaskPriorityDisinherit+0x108>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4013      	ands	r3, r2
 800d22e:	4a17      	ldr	r2, [pc, #92]	; (800d28c <xTaskPriorityDisinherit+0x108>)
 800d230:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23e:	f1c3 0207 	rsb	r2, r3, #7
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24a:	2201      	movs	r2, #1
 800d24c:	409a      	lsls	r2, r3
 800d24e:	4b0f      	ldr	r3, [pc, #60]	; (800d28c <xTaskPriorityDisinherit+0x108>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4313      	orrs	r3, r2
 800d254:	4a0d      	ldr	r2, [pc, #52]	; (800d28c <xTaskPriorityDisinherit+0x108>)
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d25c:	4613      	mov	r3, r2
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	4413      	add	r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4a08      	ldr	r2, [pc, #32]	; (800d288 <xTaskPriorityDisinherit+0x104>)
 800d266:	441a      	add	r2, r3
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	3304      	adds	r3, #4
 800d26c:	4619      	mov	r1, r3
 800d26e:	4610      	mov	r0, r2
 800d270:	f7fe fa44 	bl	800b6fc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d274:	2301      	movs	r3, #1
 800d276:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d278:	697b      	ldr	r3, [r7, #20]
	}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	20000fb4 	.word	0x20000fb4
 800d288:	20000fb8 	.word	0x20000fb8
 800d28c:	200010bc 	.word	0x200010bc

0800d290 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d290:	b580      	push	{r7, lr}
 800d292:	b088      	sub	sp, #32
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 8083 	beq.w	800d3b0 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d10a      	bne.n	800d2c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	60fb      	str	r3, [r7, #12]
}
 800d2c4:	bf00      	nop
 800d2c6:	e7fe      	b.n	800d2c6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2cc:	683a      	ldr	r2, [r7, #0]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d902      	bls.n	800d2d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	61fb      	str	r3, [r7, #28]
 800d2d6:	e002      	b.n	800d2de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e2:	69fa      	ldr	r2, [r7, #28]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d063      	beq.n	800d3b0 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ec:	697a      	ldr	r2, [r7, #20]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d15e      	bne.n	800d3b0 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d2f2:	4b31      	ldr	r3, [pc, #196]	; (800d3b8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	69ba      	ldr	r2, [r7, #24]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d10a      	bne.n	800d312 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800d2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d300:	f383 8811 	msr	BASEPRI, r3
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	60bb      	str	r3, [r7, #8]
}
 800d30e:	bf00      	nop
 800d310:	e7fe      	b.n	800d310 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d316:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	69fa      	ldr	r2, [r7, #28]
 800d31c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	2b00      	cmp	r3, #0
 800d324:	db04      	blt.n	800d330 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	f1c3 0207 	rsb	r2, r3, #7
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	6959      	ldr	r1, [r3, #20]
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	4613      	mov	r3, r2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	4a1f      	ldr	r2, [pc, #124]	; (800d3bc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d340:	4413      	add	r3, r2
 800d342:	4299      	cmp	r1, r3
 800d344:	d134      	bne.n	800d3b0 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	3304      	adds	r3, #4
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7fe fa33 	bl	800b7b6 <uxListRemove>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d115      	bne.n	800d382 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35a:	4918      	ldr	r1, [pc, #96]	; (800d3bc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d35c:	4613      	mov	r3, r2
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	440b      	add	r3, r1
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d10a      	bne.n	800d382 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d370:	2201      	movs	r2, #1
 800d372:	fa02 f303 	lsl.w	r3, r2, r3
 800d376:	43da      	mvns	r2, r3
 800d378:	4b11      	ldr	r3, [pc, #68]	; (800d3c0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4013      	ands	r3, r2
 800d37e:	4a10      	ldr	r2, [pc, #64]	; (800d3c0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d380:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d386:	2201      	movs	r2, #1
 800d388:	409a      	lsls	r2, r3
 800d38a:	4b0d      	ldr	r3, [pc, #52]	; (800d3c0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4313      	orrs	r3, r2
 800d390:	4a0b      	ldr	r2, [pc, #44]	; (800d3c0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d398:	4613      	mov	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	4413      	add	r3, r2
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4a06      	ldr	r2, [pc, #24]	; (800d3bc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d3a2:	441a      	add	r2, r3
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	4610      	mov	r0, r2
 800d3ac:	f7fe f9a6 	bl	800b6fc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3b0:	bf00      	nop
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	20000fb4 	.word	0x20000fb4
 800d3bc:	20000fb8 	.word	0x20000fb8
 800d3c0:	200010bc 	.word	0x200010bc

0800d3c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d3c4:	b480      	push	{r7}
 800d3c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d3c8:	4b07      	ldr	r3, [pc, #28]	; (800d3e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d004      	beq.n	800d3da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d3d0:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3d6:	3201      	adds	r2, #1
 800d3d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d3da:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
	}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	20000fb4 	.word	0x20000fb4

0800d3ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d3f6:	4b29      	ldr	r3, [pc, #164]	; (800d49c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3fc:	4b28      	ldr	r3, [pc, #160]	; (800d4a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3304      	adds	r3, #4
 800d402:	4618      	mov	r0, r3
 800d404:	f7fe f9d7 	bl	800b7b6 <uxListRemove>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d10b      	bne.n	800d426 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d40e:	4b24      	ldr	r3, [pc, #144]	; (800d4a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d414:	2201      	movs	r2, #1
 800d416:	fa02 f303 	lsl.w	r3, r2, r3
 800d41a:	43da      	mvns	r2, r3
 800d41c:	4b21      	ldr	r3, [pc, #132]	; (800d4a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4013      	ands	r3, r2
 800d422:	4a20      	ldr	r2, [pc, #128]	; (800d4a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d424:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d42c:	d10a      	bne.n	800d444 <prvAddCurrentTaskToDelayedList+0x58>
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d007      	beq.n	800d444 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d434:	4b1a      	ldr	r3, [pc, #104]	; (800d4a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3304      	adds	r3, #4
 800d43a:	4619      	mov	r1, r3
 800d43c:	481a      	ldr	r0, [pc, #104]	; (800d4a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d43e:	f7fe f95d 	bl	800b6fc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d442:	e026      	b.n	800d492 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4413      	add	r3, r2
 800d44a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d44c:	4b14      	ldr	r3, [pc, #80]	; (800d4a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d454:	68ba      	ldr	r2, [r7, #8]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d209      	bcs.n	800d470 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d45c:	4b13      	ldr	r3, [pc, #76]	; (800d4ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	4b0f      	ldr	r3, [pc, #60]	; (800d4a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	3304      	adds	r3, #4
 800d466:	4619      	mov	r1, r3
 800d468:	4610      	mov	r0, r2
 800d46a:	f7fe f96b 	bl	800b744 <vListInsert>
}
 800d46e:	e010      	b.n	800d492 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d470:	4b0f      	ldr	r3, [pc, #60]	; (800d4b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	4b0a      	ldr	r3, [pc, #40]	; (800d4a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	3304      	adds	r3, #4
 800d47a:	4619      	mov	r1, r3
 800d47c:	4610      	mov	r0, r2
 800d47e:	f7fe f961 	bl	800b744 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d482:	4b0c      	ldr	r3, [pc, #48]	; (800d4b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d202      	bcs.n	800d492 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d48c:	4a09      	ldr	r2, [pc, #36]	; (800d4b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	6013      	str	r3, [r2, #0]
}
 800d492:	bf00      	nop
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	200010b8 	.word	0x200010b8
 800d4a0:	20000fb4 	.word	0x20000fb4
 800d4a4:	200010bc 	.word	0x200010bc
 800d4a8:	200010a0 	.word	0x200010a0
 800d4ac:	20001070 	.word	0x20001070
 800d4b0:	2000106c 	.word	0x2000106c
 800d4b4:	200010d4 	.word	0x200010d4

0800d4b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b085      	sub	sp, #20
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	3b04      	subs	r3, #4
 800d4c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d4d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	3b04      	subs	r3, #4
 800d4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	f023 0201 	bic.w	r2, r3, #1
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	3b04      	subs	r3, #4
 800d4e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4e8:	4a0c      	ldr	r2, [pc, #48]	; (800d51c <pxPortInitialiseStack+0x64>)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	3b14      	subs	r3, #20
 800d4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	3b04      	subs	r3, #4
 800d4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f06f 0202 	mvn.w	r2, #2
 800d506:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	3b20      	subs	r3, #32
 800d50c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d50e:	68fb      	ldr	r3, [r7, #12]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3714      	adds	r7, #20
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr
 800d51c:	0800d521 	.word	0x0800d521

0800d520 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d526:	2300      	movs	r3, #0
 800d528:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d52a:	4b12      	ldr	r3, [pc, #72]	; (800d574 <prvTaskExitError+0x54>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d532:	d00a      	beq.n	800d54a <prvTaskExitError+0x2a>
	__asm volatile
 800d534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	60fb      	str	r3, [r7, #12]
}
 800d546:	bf00      	nop
 800d548:	e7fe      	b.n	800d548 <prvTaskExitError+0x28>
	__asm volatile
 800d54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54e:	f383 8811 	msr	BASEPRI, r3
 800d552:	f3bf 8f6f 	isb	sy
 800d556:	f3bf 8f4f 	dsb	sy
 800d55a:	60bb      	str	r3, [r7, #8]
}
 800d55c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d55e:	bf00      	nop
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0fc      	beq.n	800d560 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d566:	bf00      	nop
 800d568:	bf00      	nop
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr
 800d574:	200000f4 	.word	0x200000f4
	...

0800d580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d580:	4b07      	ldr	r3, [pc, #28]	; (800d5a0 <pxCurrentTCBConst2>)
 800d582:	6819      	ldr	r1, [r3, #0]
 800d584:	6808      	ldr	r0, [r1, #0]
 800d586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58a:	f380 8809 	msr	PSP, r0
 800d58e:	f3bf 8f6f 	isb	sy
 800d592:	f04f 0000 	mov.w	r0, #0
 800d596:	f380 8811 	msr	BASEPRI, r0
 800d59a:	4770      	bx	lr
 800d59c:	f3af 8000 	nop.w

0800d5a0 <pxCurrentTCBConst2>:
 800d5a0:	20000fb4 	.word	0x20000fb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop

0800d5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5a8:	4808      	ldr	r0, [pc, #32]	; (800d5cc <prvPortStartFirstTask+0x24>)
 800d5aa:	6800      	ldr	r0, [r0, #0]
 800d5ac:	6800      	ldr	r0, [r0, #0]
 800d5ae:	f380 8808 	msr	MSP, r0
 800d5b2:	f04f 0000 	mov.w	r0, #0
 800d5b6:	f380 8814 	msr	CONTROL, r0
 800d5ba:	b662      	cpsie	i
 800d5bc:	b661      	cpsie	f
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	df00      	svc	0
 800d5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5ca:	bf00      	nop
 800d5cc:	e000ed08 	.word	0xe000ed08

0800d5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d5d6:	4b46      	ldr	r3, [pc, #280]	; (800d6f0 <xPortStartScheduler+0x120>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a46      	ldr	r2, [pc, #280]	; (800d6f4 <xPortStartScheduler+0x124>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d10a      	bne.n	800d5f6 <xPortStartScheduler+0x26>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	613b      	str	r3, [r7, #16]
}
 800d5f2:	bf00      	nop
 800d5f4:	e7fe      	b.n	800d5f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5f6:	4b3e      	ldr	r3, [pc, #248]	; (800d6f0 <xPortStartScheduler+0x120>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a3f      	ldr	r2, [pc, #252]	; (800d6f8 <xPortStartScheduler+0x128>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d10a      	bne.n	800d616 <xPortStartScheduler+0x46>
	__asm volatile
 800d600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	60fb      	str	r3, [r7, #12]
}
 800d612:	bf00      	nop
 800d614:	e7fe      	b.n	800d614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d616:	4b39      	ldr	r3, [pc, #228]	; (800d6fc <xPortStartScheduler+0x12c>)
 800d618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	22ff      	movs	r2, #255	; 0xff
 800d626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d630:	78fb      	ldrb	r3, [r7, #3]
 800d632:	b2db      	uxtb	r3, r3
 800d634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	4b31      	ldr	r3, [pc, #196]	; (800d700 <xPortStartScheduler+0x130>)
 800d63c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d63e:	4b31      	ldr	r3, [pc, #196]	; (800d704 <xPortStartScheduler+0x134>)
 800d640:	2207      	movs	r2, #7
 800d642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d644:	e009      	b.n	800d65a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d646:	4b2f      	ldr	r3, [pc, #188]	; (800d704 <xPortStartScheduler+0x134>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3b01      	subs	r3, #1
 800d64c:	4a2d      	ldr	r2, [pc, #180]	; (800d704 <xPortStartScheduler+0x134>)
 800d64e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d650:	78fb      	ldrb	r3, [r7, #3]
 800d652:	b2db      	uxtb	r3, r3
 800d654:	005b      	lsls	r3, r3, #1
 800d656:	b2db      	uxtb	r3, r3
 800d658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d65a:	78fb      	ldrb	r3, [r7, #3]
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d662:	2b80      	cmp	r3, #128	; 0x80
 800d664:	d0ef      	beq.n	800d646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d666:	4b27      	ldr	r3, [pc, #156]	; (800d704 <xPortStartScheduler+0x134>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f1c3 0307 	rsb	r3, r3, #7
 800d66e:	2b04      	cmp	r3, #4
 800d670:	d00a      	beq.n	800d688 <xPortStartScheduler+0xb8>
	__asm volatile
 800d672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	60bb      	str	r3, [r7, #8]
}
 800d684:	bf00      	nop
 800d686:	e7fe      	b.n	800d686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d688:	4b1e      	ldr	r3, [pc, #120]	; (800d704 <xPortStartScheduler+0x134>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	021b      	lsls	r3, r3, #8
 800d68e:	4a1d      	ldr	r2, [pc, #116]	; (800d704 <xPortStartScheduler+0x134>)
 800d690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d692:	4b1c      	ldr	r3, [pc, #112]	; (800d704 <xPortStartScheduler+0x134>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d69a:	4a1a      	ldr	r2, [pc, #104]	; (800d704 <xPortStartScheduler+0x134>)
 800d69c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6a6:	4b18      	ldr	r3, [pc, #96]	; (800d708 <xPortStartScheduler+0x138>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a17      	ldr	r2, [pc, #92]	; (800d708 <xPortStartScheduler+0x138>)
 800d6ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d6b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d6b2:	4b15      	ldr	r3, [pc, #84]	; (800d708 <xPortStartScheduler+0x138>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a14      	ldr	r2, [pc, #80]	; (800d708 <xPortStartScheduler+0x138>)
 800d6b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d6bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d6be:	f000 f8dd 	bl	800d87c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d6c2:	4b12      	ldr	r3, [pc, #72]	; (800d70c <xPortStartScheduler+0x13c>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d6c8:	f000 f8fc 	bl	800d8c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6cc:	4b10      	ldr	r3, [pc, #64]	; (800d710 <xPortStartScheduler+0x140>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a0f      	ldr	r2, [pc, #60]	; (800d710 <xPortStartScheduler+0x140>)
 800d6d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d6d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d6d8:	f7ff ff66 	bl	800d5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6dc:	f7ff fa36 	bl	800cb4c <vTaskSwitchContext>
	prvTaskExitError();
 800d6e0:	f7ff ff1e 	bl	800d520 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3718      	adds	r7, #24
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	e000ed00 	.word	0xe000ed00
 800d6f4:	410fc271 	.word	0x410fc271
 800d6f8:	410fc270 	.word	0x410fc270
 800d6fc:	e000e400 	.word	0xe000e400
 800d700:	200010e8 	.word	0x200010e8
 800d704:	200010ec 	.word	0x200010ec
 800d708:	e000ed20 	.word	0xe000ed20
 800d70c:	200000f4 	.word	0x200000f4
 800d710:	e000ef34 	.word	0xe000ef34

0800d714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	607b      	str	r3, [r7, #4]
}
 800d72c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d72e:	4b0f      	ldr	r3, [pc, #60]	; (800d76c <vPortEnterCritical+0x58>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3301      	adds	r3, #1
 800d734:	4a0d      	ldr	r2, [pc, #52]	; (800d76c <vPortEnterCritical+0x58>)
 800d736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d738:	4b0c      	ldr	r3, [pc, #48]	; (800d76c <vPortEnterCritical+0x58>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d10f      	bne.n	800d760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d740:	4b0b      	ldr	r3, [pc, #44]	; (800d770 <vPortEnterCritical+0x5c>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	b2db      	uxtb	r3, r3
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00a      	beq.n	800d760 <vPortEnterCritical+0x4c>
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	603b      	str	r3, [r7, #0]
}
 800d75c:	bf00      	nop
 800d75e:	e7fe      	b.n	800d75e <vPortEnterCritical+0x4a>
	}
}
 800d760:	bf00      	nop
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr
 800d76c:	200000f4 	.word	0x200000f4
 800d770:	e000ed04 	.word	0xe000ed04

0800d774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d77a:	4b12      	ldr	r3, [pc, #72]	; (800d7c4 <vPortExitCritical+0x50>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d10a      	bne.n	800d798 <vPortExitCritical+0x24>
	__asm volatile
 800d782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	607b      	str	r3, [r7, #4]
}
 800d794:	bf00      	nop
 800d796:	e7fe      	b.n	800d796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d798:	4b0a      	ldr	r3, [pc, #40]	; (800d7c4 <vPortExitCritical+0x50>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	4a09      	ldr	r2, [pc, #36]	; (800d7c4 <vPortExitCritical+0x50>)
 800d7a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d7a2:	4b08      	ldr	r3, [pc, #32]	; (800d7c4 <vPortExitCritical+0x50>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d105      	bne.n	800d7b6 <vPortExitCritical+0x42>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	f383 8811 	msr	BASEPRI, r3
}
 800d7b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d7b6:	bf00      	nop
 800d7b8:	370c      	adds	r7, #12
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	200000f4 	.word	0x200000f4
	...

0800d7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d7d0:	f3ef 8009 	mrs	r0, PSP
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	4b15      	ldr	r3, [pc, #84]	; (800d830 <pxCurrentTCBConst>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	f01e 0f10 	tst.w	lr, #16
 800d7e0:	bf08      	it	eq
 800d7e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ea:	6010      	str	r0, [r2, #0]
 800d7ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d7f4:	f380 8811 	msr	BASEPRI, r0
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f7ff f9a4 	bl	800cb4c <vTaskSwitchContext>
 800d804:	f04f 0000 	mov.w	r0, #0
 800d808:	f380 8811 	msr	BASEPRI, r0
 800d80c:	bc09      	pop	{r0, r3}
 800d80e:	6819      	ldr	r1, [r3, #0]
 800d810:	6808      	ldr	r0, [r1, #0]
 800d812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d816:	f01e 0f10 	tst.w	lr, #16
 800d81a:	bf08      	it	eq
 800d81c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d820:	f380 8809 	msr	PSP, r0
 800d824:	f3bf 8f6f 	isb	sy
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	f3af 8000 	nop.w

0800d830 <pxCurrentTCBConst>:
 800d830:	20000fb4 	.word	0x20000fb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d834:	bf00      	nop
 800d836:	bf00      	nop

0800d838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
	__asm volatile
 800d83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	607b      	str	r3, [r7, #4]
}
 800d850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d852:	f7ff f8c3 	bl	800c9dc <xTaskIncrementTick>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d003      	beq.n	800d864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d85c:	4b06      	ldr	r3, [pc, #24]	; (800d878 <SysTick_Handler+0x40>)
 800d85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d862:	601a      	str	r2, [r3, #0]
 800d864:	2300      	movs	r3, #0
 800d866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	f383 8811 	msr	BASEPRI, r3
}
 800d86e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d870:	bf00      	nop
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	e000ed04 	.word	0xe000ed04

0800d87c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d87c:	b480      	push	{r7}
 800d87e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d880:	4b0b      	ldr	r3, [pc, #44]	; (800d8b0 <vPortSetupTimerInterrupt+0x34>)
 800d882:	2200      	movs	r2, #0
 800d884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d886:	4b0b      	ldr	r3, [pc, #44]	; (800d8b4 <vPortSetupTimerInterrupt+0x38>)
 800d888:	2200      	movs	r2, #0
 800d88a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d88c:	4b0a      	ldr	r3, [pc, #40]	; (800d8b8 <vPortSetupTimerInterrupt+0x3c>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a0a      	ldr	r2, [pc, #40]	; (800d8bc <vPortSetupTimerInterrupt+0x40>)
 800d892:	fba2 2303 	umull	r2, r3, r2, r3
 800d896:	099b      	lsrs	r3, r3, #6
 800d898:	4a09      	ldr	r2, [pc, #36]	; (800d8c0 <vPortSetupTimerInterrupt+0x44>)
 800d89a:	3b01      	subs	r3, #1
 800d89c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d89e:	4b04      	ldr	r3, [pc, #16]	; (800d8b0 <vPortSetupTimerInterrupt+0x34>)
 800d8a0:	2207      	movs	r2, #7
 800d8a2:	601a      	str	r2, [r3, #0]
}
 800d8a4:	bf00      	nop
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	e000e010 	.word	0xe000e010
 800d8b4:	e000e018 	.word	0xe000e018
 800d8b8:	20000000 	.word	0x20000000
 800d8bc:	10624dd3 	.word	0x10624dd3
 800d8c0:	e000e014 	.word	0xe000e014

0800d8c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d8d4 <vPortEnableVFP+0x10>
 800d8c8:	6801      	ldr	r1, [r0, #0]
 800d8ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8ce:	6001      	str	r1, [r0, #0]
 800d8d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d8d2:	bf00      	nop
 800d8d4:	e000ed88 	.word	0xe000ed88

0800d8d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d8de:	f3ef 8305 	mrs	r3, IPSR
 800d8e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b0f      	cmp	r3, #15
 800d8e8:	d914      	bls.n	800d914 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8ea:	4a17      	ldr	r2, [pc, #92]	; (800d948 <vPortValidateInterruptPriority+0x70>)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8f4:	4b15      	ldr	r3, [pc, #84]	; (800d94c <vPortValidateInterruptPriority+0x74>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	7afa      	ldrb	r2, [r7, #11]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d20a      	bcs.n	800d914 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	607b      	str	r3, [r7, #4]
}
 800d910:	bf00      	nop
 800d912:	e7fe      	b.n	800d912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d914:	4b0e      	ldr	r3, [pc, #56]	; (800d950 <vPortValidateInterruptPriority+0x78>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d91c:	4b0d      	ldr	r3, [pc, #52]	; (800d954 <vPortValidateInterruptPriority+0x7c>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	429a      	cmp	r2, r3
 800d922:	d90a      	bls.n	800d93a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	603b      	str	r3, [r7, #0]
}
 800d936:	bf00      	nop
 800d938:	e7fe      	b.n	800d938 <vPortValidateInterruptPriority+0x60>
	}
 800d93a:	bf00      	nop
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	e000e3f0 	.word	0xe000e3f0
 800d94c:	200010e8 	.word	0x200010e8
 800d950:	e000ed0c 	.word	0xe000ed0c
 800d954:	200010ec 	.word	0x200010ec

0800d958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08a      	sub	sp, #40	; 0x28
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d960:	2300      	movs	r3, #0
 800d962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d964:	f7fe ff80 	bl	800c868 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d968:	4b5b      	ldr	r3, [pc, #364]	; (800dad8 <pvPortMalloc+0x180>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d101      	bne.n	800d974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d970:	f000 f916 	bl	800dba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d974:	4b59      	ldr	r3, [pc, #356]	; (800dadc <pvPortMalloc+0x184>)
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4013      	ands	r3, r2
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f040 808e 	bne.w	800da9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d01d      	beq.n	800d9c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d988:	2208      	movs	r2, #8
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4413      	add	r3, r2
 800d98e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f003 0307 	and.w	r3, r3, #7
 800d996:	2b00      	cmp	r3, #0
 800d998:	d014      	beq.n	800d9c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f023 0307 	bic.w	r3, r3, #7
 800d9a0:	3308      	adds	r3, #8
 800d9a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f003 0307 	and.w	r3, r3, #7
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00a      	beq.n	800d9c4 <pvPortMalloc+0x6c>
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	617b      	str	r3, [r7, #20]
}
 800d9c0:	bf00      	nop
 800d9c2:	e7fe      	b.n	800d9c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d069      	beq.n	800da9e <pvPortMalloc+0x146>
 800d9ca:	4b45      	ldr	r3, [pc, #276]	; (800dae0 <pvPortMalloc+0x188>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d864      	bhi.n	800da9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d9d4:	4b43      	ldr	r3, [pc, #268]	; (800dae4 <pvPortMalloc+0x18c>)
 800d9d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d9d8:	4b42      	ldr	r3, [pc, #264]	; (800dae4 <pvPortMalloc+0x18c>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9de:	e004      	b.n	800d9ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d903      	bls.n	800d9fc <pvPortMalloc+0xa4>
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1f1      	bne.n	800d9e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9fc:	4b36      	ldr	r3, [pc, #216]	; (800dad8 <pvPortMalloc+0x180>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da02:	429a      	cmp	r2, r3
 800da04:	d04b      	beq.n	800da9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da06:	6a3b      	ldr	r3, [r7, #32]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2208      	movs	r2, #8
 800da0c:	4413      	add	r3, r2
 800da0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	6a3b      	ldr	r3, [r7, #32]
 800da16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	685a      	ldr	r2, [r3, #4]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	1ad2      	subs	r2, r2, r3
 800da20:	2308      	movs	r3, #8
 800da22:	005b      	lsls	r3, r3, #1
 800da24:	429a      	cmp	r2, r3
 800da26:	d91f      	bls.n	800da68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4413      	add	r3, r2
 800da2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	f003 0307 	and.w	r3, r3, #7
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00a      	beq.n	800da50 <pvPortMalloc+0xf8>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	613b      	str	r3, [r7, #16]
}
 800da4c:	bf00      	nop
 800da4e:	e7fe      	b.n	800da4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	685a      	ldr	r2, [r3, #4]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	1ad2      	subs	r2, r2, r3
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da62:	69b8      	ldr	r0, [r7, #24]
 800da64:	f000 f8fe 	bl	800dc64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da68:	4b1d      	ldr	r3, [pc, #116]	; (800dae0 <pvPortMalloc+0x188>)
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	4a1b      	ldr	r2, [pc, #108]	; (800dae0 <pvPortMalloc+0x188>)
 800da74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da76:	4b1a      	ldr	r3, [pc, #104]	; (800dae0 <pvPortMalloc+0x188>)
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	4b1b      	ldr	r3, [pc, #108]	; (800dae8 <pvPortMalloc+0x190>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d203      	bcs.n	800da8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da82:	4b17      	ldr	r3, [pc, #92]	; (800dae0 <pvPortMalloc+0x188>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a18      	ldr	r2, [pc, #96]	; (800dae8 <pvPortMalloc+0x190>)
 800da88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8c:	685a      	ldr	r2, [r3, #4]
 800da8e:	4b13      	ldr	r3, [pc, #76]	; (800dadc <pvPortMalloc+0x184>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	431a      	orrs	r2, r3
 800da94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	2200      	movs	r2, #0
 800da9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da9e:	f7fe fef1 	bl	800c884 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d101      	bne.n	800daac <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800daa8:	f7f3 f80e 	bl	8000ac8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	f003 0307 	and.w	r3, r3, #7
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00a      	beq.n	800dacc <pvPortMalloc+0x174>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	60fb      	str	r3, [r7, #12]
}
 800dac8:	bf00      	nop
 800daca:	e7fe      	b.n	800daca <pvPortMalloc+0x172>
	return pvReturn;
 800dacc:	69fb      	ldr	r3, [r7, #28]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3728      	adds	r7, #40	; 0x28
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	20004f78 	.word	0x20004f78
 800dadc:	20004f84 	.word	0x20004f84
 800dae0:	20004f7c 	.word	0x20004f7c
 800dae4:	20004f70 	.word	0x20004f70
 800dae8:	20004f80 	.word	0x20004f80

0800daec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b086      	sub	sp, #24
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d048      	beq.n	800db90 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dafe:	2308      	movs	r3, #8
 800db00:	425b      	negs	r3, r3
 800db02:	697a      	ldr	r2, [r7, #20]
 800db04:	4413      	add	r3, r2
 800db06:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	4b21      	ldr	r3, [pc, #132]	; (800db98 <vPortFree+0xac>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4013      	ands	r3, r2
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10a      	bne.n	800db30 <vPortFree+0x44>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	60fb      	str	r3, [r7, #12]
}
 800db2c:	bf00      	nop
 800db2e:	e7fe      	b.n	800db2e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00a      	beq.n	800db4e <vPortFree+0x62>
	__asm volatile
 800db38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3c:	f383 8811 	msr	BASEPRI, r3
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	60bb      	str	r3, [r7, #8]
}
 800db4a:	bf00      	nop
 800db4c:	e7fe      	b.n	800db4c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	685a      	ldr	r2, [r3, #4]
 800db52:	4b11      	ldr	r3, [pc, #68]	; (800db98 <vPortFree+0xac>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4013      	ands	r3, r2
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d019      	beq.n	800db90 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d115      	bne.n	800db90 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	685a      	ldr	r2, [r3, #4]
 800db68:	4b0b      	ldr	r3, [pc, #44]	; (800db98 <vPortFree+0xac>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	43db      	mvns	r3, r3
 800db6e:	401a      	ands	r2, r3
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db74:	f7fe fe78 	bl	800c868 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	4b07      	ldr	r3, [pc, #28]	; (800db9c <vPortFree+0xb0>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4413      	add	r3, r2
 800db82:	4a06      	ldr	r2, [pc, #24]	; (800db9c <vPortFree+0xb0>)
 800db84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db86:	6938      	ldr	r0, [r7, #16]
 800db88:	f000 f86c 	bl	800dc64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800db8c:	f7fe fe7a 	bl	800c884 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db90:	bf00      	nop
 800db92:	3718      	adds	r7, #24
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	20004f84 	.word	0x20004f84
 800db9c:	20004f7c 	.word	0x20004f7c

0800dba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dba6:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800dbaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dbac:	4b27      	ldr	r3, [pc, #156]	; (800dc4c <prvHeapInit+0xac>)
 800dbae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f003 0307 	and.w	r3, r3, #7
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00c      	beq.n	800dbd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	3307      	adds	r3, #7
 800dbbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f023 0307 	bic.w	r3, r3, #7
 800dbc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dbc8:	68ba      	ldr	r2, [r7, #8]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	4a1f      	ldr	r2, [pc, #124]	; (800dc4c <prvHeapInit+0xac>)
 800dbd0:	4413      	add	r3, r2
 800dbd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbd8:	4a1d      	ldr	r2, [pc, #116]	; (800dc50 <prvHeapInit+0xb0>)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbde:	4b1c      	ldr	r3, [pc, #112]	; (800dc50 <prvHeapInit+0xb0>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	4413      	add	r3, r2
 800dbea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbec:	2208      	movs	r2, #8
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	1a9b      	subs	r3, r3, r2
 800dbf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f023 0307 	bic.w	r3, r3, #7
 800dbfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	4a15      	ldr	r2, [pc, #84]	; (800dc54 <prvHeapInit+0xb4>)
 800dc00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc02:	4b14      	ldr	r3, [pc, #80]	; (800dc54 <prvHeapInit+0xb4>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2200      	movs	r2, #0
 800dc08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc0a:	4b12      	ldr	r3, [pc, #72]	; (800dc54 <prvHeapInit+0xb4>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	1ad2      	subs	r2, r2, r3
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc20:	4b0c      	ldr	r3, [pc, #48]	; (800dc54 <prvHeapInit+0xb4>)
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	4a0a      	ldr	r2, [pc, #40]	; (800dc58 <prvHeapInit+0xb8>)
 800dc2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	4a09      	ldr	r2, [pc, #36]	; (800dc5c <prvHeapInit+0xbc>)
 800dc36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc38:	4b09      	ldr	r3, [pc, #36]	; (800dc60 <prvHeapInit+0xc0>)
 800dc3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc3e:	601a      	str	r2, [r3, #0]
}
 800dc40:	bf00      	nop
 800dc42:	3714      	adds	r7, #20
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr
 800dc4c:	200010f0 	.word	0x200010f0
 800dc50:	20004f70 	.word	0x20004f70
 800dc54:	20004f78 	.word	0x20004f78
 800dc58:	20004f80 	.word	0x20004f80
 800dc5c:	20004f7c 	.word	0x20004f7c
 800dc60:	20004f84 	.word	0x20004f84

0800dc64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc64:	b480      	push	{r7}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc6c:	4b28      	ldr	r3, [pc, #160]	; (800dd10 <prvInsertBlockIntoFreeList+0xac>)
 800dc6e:	60fb      	str	r3, [r7, #12]
 800dc70:	e002      	b.n	800dc78 <prvInsertBlockIntoFreeList+0x14>
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	60fb      	str	r3, [r7, #12]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d8f7      	bhi.n	800dc72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d108      	bne.n	800dca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	685a      	ldr	r2, [r3, #4]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	441a      	add	r2, r3
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	441a      	add	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d118      	bne.n	800dcec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	4b15      	ldr	r3, [pc, #84]	; (800dd14 <prvInsertBlockIntoFreeList+0xb0>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d00d      	beq.n	800dce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	685a      	ldr	r2, [r3, #4]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	441a      	add	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	601a      	str	r2, [r3, #0]
 800dce0:	e008      	b.n	800dcf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dce2:	4b0c      	ldr	r3, [pc, #48]	; (800dd14 <prvInsertBlockIntoFreeList+0xb0>)
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	e003      	b.n	800dcf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d002      	beq.n	800dd02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd02:	bf00      	nop
 800dd04:	3714      	adds	r7, #20
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop
 800dd10:	20004f70 	.word	0x20004f70
 800dd14:	20004f78 	.word	0x20004f78

0800dd18 <__errno>:
 800dd18:	4b01      	ldr	r3, [pc, #4]	; (800dd20 <__errno+0x8>)
 800dd1a:	6818      	ldr	r0, [r3, #0]
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop
 800dd20:	200000f8 	.word	0x200000f8

0800dd24 <__libc_init_array>:
 800dd24:	b570      	push	{r4, r5, r6, lr}
 800dd26:	4d0d      	ldr	r5, [pc, #52]	; (800dd5c <__libc_init_array+0x38>)
 800dd28:	4c0d      	ldr	r4, [pc, #52]	; (800dd60 <__libc_init_array+0x3c>)
 800dd2a:	1b64      	subs	r4, r4, r5
 800dd2c:	10a4      	asrs	r4, r4, #2
 800dd2e:	2600      	movs	r6, #0
 800dd30:	42a6      	cmp	r6, r4
 800dd32:	d109      	bne.n	800dd48 <__libc_init_array+0x24>
 800dd34:	4d0b      	ldr	r5, [pc, #44]	; (800dd64 <__libc_init_array+0x40>)
 800dd36:	4c0c      	ldr	r4, [pc, #48]	; (800dd68 <__libc_init_array+0x44>)
 800dd38:	f001 fbca 	bl	800f4d0 <_init>
 800dd3c:	1b64      	subs	r4, r4, r5
 800dd3e:	10a4      	asrs	r4, r4, #2
 800dd40:	2600      	movs	r6, #0
 800dd42:	42a6      	cmp	r6, r4
 800dd44:	d105      	bne.n	800dd52 <__libc_init_array+0x2e>
 800dd46:	bd70      	pop	{r4, r5, r6, pc}
 800dd48:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd4c:	4798      	blx	r3
 800dd4e:	3601      	adds	r6, #1
 800dd50:	e7ee      	b.n	800dd30 <__libc_init_array+0xc>
 800dd52:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd56:	4798      	blx	r3
 800dd58:	3601      	adds	r6, #1
 800dd5a:	e7f2      	b.n	800dd42 <__libc_init_array+0x1e>
 800dd5c:	08010c18 	.word	0x08010c18
 800dd60:	08010c18 	.word	0x08010c18
 800dd64:	08010c18 	.word	0x08010c18
 800dd68:	08010c1c 	.word	0x08010c1c

0800dd6c <memcpy>:
 800dd6c:	440a      	add	r2, r1
 800dd6e:	4291      	cmp	r1, r2
 800dd70:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd74:	d100      	bne.n	800dd78 <memcpy+0xc>
 800dd76:	4770      	bx	lr
 800dd78:	b510      	push	{r4, lr}
 800dd7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd82:	4291      	cmp	r1, r2
 800dd84:	d1f9      	bne.n	800dd7a <memcpy+0xe>
 800dd86:	bd10      	pop	{r4, pc}

0800dd88 <memset>:
 800dd88:	4402      	add	r2, r0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d100      	bne.n	800dd92 <memset+0xa>
 800dd90:	4770      	bx	lr
 800dd92:	f803 1b01 	strb.w	r1, [r3], #1
 800dd96:	e7f9      	b.n	800dd8c <memset+0x4>

0800dd98 <iprintf>:
 800dd98:	b40f      	push	{r0, r1, r2, r3}
 800dd9a:	4b0a      	ldr	r3, [pc, #40]	; (800ddc4 <iprintf+0x2c>)
 800dd9c:	b513      	push	{r0, r1, r4, lr}
 800dd9e:	681c      	ldr	r4, [r3, #0]
 800dda0:	b124      	cbz	r4, 800ddac <iprintf+0x14>
 800dda2:	69a3      	ldr	r3, [r4, #24]
 800dda4:	b913      	cbnz	r3, 800ddac <iprintf+0x14>
 800dda6:	4620      	mov	r0, r4
 800dda8:	f000 fc8a 	bl	800e6c0 <__sinit>
 800ddac:	ab05      	add	r3, sp, #20
 800ddae:	9a04      	ldr	r2, [sp, #16]
 800ddb0:	68a1      	ldr	r1, [r4, #8]
 800ddb2:	9301      	str	r3, [sp, #4]
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 ffb7 	bl	800ed28 <_vfiprintf_r>
 800ddba:	b002      	add	sp, #8
 800ddbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddc0:	b004      	add	sp, #16
 800ddc2:	4770      	bx	lr
 800ddc4:	200000f8 	.word	0x200000f8

0800ddc8 <_puts_r>:
 800ddc8:	b570      	push	{r4, r5, r6, lr}
 800ddca:	460e      	mov	r6, r1
 800ddcc:	4605      	mov	r5, r0
 800ddce:	b118      	cbz	r0, 800ddd8 <_puts_r+0x10>
 800ddd0:	6983      	ldr	r3, [r0, #24]
 800ddd2:	b90b      	cbnz	r3, 800ddd8 <_puts_r+0x10>
 800ddd4:	f000 fc74 	bl	800e6c0 <__sinit>
 800ddd8:	69ab      	ldr	r3, [r5, #24]
 800ddda:	68ac      	ldr	r4, [r5, #8]
 800dddc:	b913      	cbnz	r3, 800dde4 <_puts_r+0x1c>
 800ddde:	4628      	mov	r0, r5
 800dde0:	f000 fc6e 	bl	800e6c0 <__sinit>
 800dde4:	4b2c      	ldr	r3, [pc, #176]	; (800de98 <_puts_r+0xd0>)
 800dde6:	429c      	cmp	r4, r3
 800dde8:	d120      	bne.n	800de2c <_puts_r+0x64>
 800ddea:	686c      	ldr	r4, [r5, #4]
 800ddec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddee:	07db      	lsls	r3, r3, #31
 800ddf0:	d405      	bmi.n	800ddfe <_puts_r+0x36>
 800ddf2:	89a3      	ldrh	r3, [r4, #12]
 800ddf4:	0598      	lsls	r0, r3, #22
 800ddf6:	d402      	bmi.n	800ddfe <_puts_r+0x36>
 800ddf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddfa:	f000 fcff 	bl	800e7fc <__retarget_lock_acquire_recursive>
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	0719      	lsls	r1, r3, #28
 800de02:	d51d      	bpl.n	800de40 <_puts_r+0x78>
 800de04:	6923      	ldr	r3, [r4, #16]
 800de06:	b1db      	cbz	r3, 800de40 <_puts_r+0x78>
 800de08:	3e01      	subs	r6, #1
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800de10:	3b01      	subs	r3, #1
 800de12:	60a3      	str	r3, [r4, #8]
 800de14:	bb39      	cbnz	r1, 800de66 <_puts_r+0x9e>
 800de16:	2b00      	cmp	r3, #0
 800de18:	da38      	bge.n	800de8c <_puts_r+0xc4>
 800de1a:	4622      	mov	r2, r4
 800de1c:	210a      	movs	r1, #10
 800de1e:	4628      	mov	r0, r5
 800de20:	f000 fa74 	bl	800e30c <__swbuf_r>
 800de24:	3001      	adds	r0, #1
 800de26:	d011      	beq.n	800de4c <_puts_r+0x84>
 800de28:	250a      	movs	r5, #10
 800de2a:	e011      	b.n	800de50 <_puts_r+0x88>
 800de2c:	4b1b      	ldr	r3, [pc, #108]	; (800de9c <_puts_r+0xd4>)
 800de2e:	429c      	cmp	r4, r3
 800de30:	d101      	bne.n	800de36 <_puts_r+0x6e>
 800de32:	68ac      	ldr	r4, [r5, #8]
 800de34:	e7da      	b.n	800ddec <_puts_r+0x24>
 800de36:	4b1a      	ldr	r3, [pc, #104]	; (800dea0 <_puts_r+0xd8>)
 800de38:	429c      	cmp	r4, r3
 800de3a:	bf08      	it	eq
 800de3c:	68ec      	ldreq	r4, [r5, #12]
 800de3e:	e7d5      	b.n	800ddec <_puts_r+0x24>
 800de40:	4621      	mov	r1, r4
 800de42:	4628      	mov	r0, r5
 800de44:	f000 fab4 	bl	800e3b0 <__swsetup_r>
 800de48:	2800      	cmp	r0, #0
 800de4a:	d0dd      	beq.n	800de08 <_puts_r+0x40>
 800de4c:	f04f 35ff 	mov.w	r5, #4294967295
 800de50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de52:	07da      	lsls	r2, r3, #31
 800de54:	d405      	bmi.n	800de62 <_puts_r+0x9a>
 800de56:	89a3      	ldrh	r3, [r4, #12]
 800de58:	059b      	lsls	r3, r3, #22
 800de5a:	d402      	bmi.n	800de62 <_puts_r+0x9a>
 800de5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de5e:	f000 fcce 	bl	800e7fe <__retarget_lock_release_recursive>
 800de62:	4628      	mov	r0, r5
 800de64:	bd70      	pop	{r4, r5, r6, pc}
 800de66:	2b00      	cmp	r3, #0
 800de68:	da04      	bge.n	800de74 <_puts_r+0xac>
 800de6a:	69a2      	ldr	r2, [r4, #24]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	dc06      	bgt.n	800de7e <_puts_r+0xb6>
 800de70:	290a      	cmp	r1, #10
 800de72:	d004      	beq.n	800de7e <_puts_r+0xb6>
 800de74:	6823      	ldr	r3, [r4, #0]
 800de76:	1c5a      	adds	r2, r3, #1
 800de78:	6022      	str	r2, [r4, #0]
 800de7a:	7019      	strb	r1, [r3, #0]
 800de7c:	e7c5      	b.n	800de0a <_puts_r+0x42>
 800de7e:	4622      	mov	r2, r4
 800de80:	4628      	mov	r0, r5
 800de82:	f000 fa43 	bl	800e30c <__swbuf_r>
 800de86:	3001      	adds	r0, #1
 800de88:	d1bf      	bne.n	800de0a <_puts_r+0x42>
 800de8a:	e7df      	b.n	800de4c <_puts_r+0x84>
 800de8c:	6823      	ldr	r3, [r4, #0]
 800de8e:	250a      	movs	r5, #10
 800de90:	1c5a      	adds	r2, r3, #1
 800de92:	6022      	str	r2, [r4, #0]
 800de94:	701d      	strb	r5, [r3, #0]
 800de96:	e7db      	b.n	800de50 <_puts_r+0x88>
 800de98:	08010b9c 	.word	0x08010b9c
 800de9c:	08010bbc 	.word	0x08010bbc
 800dea0:	08010b7c 	.word	0x08010b7c

0800dea4 <puts>:
 800dea4:	4b02      	ldr	r3, [pc, #8]	; (800deb0 <puts+0xc>)
 800dea6:	4601      	mov	r1, r0
 800dea8:	6818      	ldr	r0, [r3, #0]
 800deaa:	f7ff bf8d 	b.w	800ddc8 <_puts_r>
 800deae:	bf00      	nop
 800deb0:	200000f8 	.word	0x200000f8

0800deb4 <_strerror_r>:
 800deb4:	b510      	push	{r4, lr}
 800deb6:	4604      	mov	r4, r0
 800deb8:	4608      	mov	r0, r1
 800deba:	4611      	mov	r1, r2
 800debc:	288e      	cmp	r0, #142	; 0x8e
 800debe:	f200 812f 	bhi.w	800e120 <_strerror_r+0x26c>
 800dec2:	e8df f010 	tbh	[pc, r0, lsl #1]
 800dec6:	0138      	.short	0x0138
 800dec8:	0091008f 	.word	0x0091008f
 800decc:	00950093 	.word	0x00950093
 800ded0:	00990097 	.word	0x00990097
 800ded4:	009d009b 	.word	0x009d009b
 800ded8:	00a300a1 	.word	0x00a300a1
 800dedc:	00a900a7 	.word	0x00a900a7
 800dee0:	00ad00ab 	.word	0x00ad00ab
 800dee4:	00af012d 	.word	0x00af012d
 800dee8:	00b300b1 	.word	0x00b300b1
 800deec:	00b700b5 	.word	0x00b700b5
 800def0:	00bf00bd 	.word	0x00bf00bd
 800def4:	00c700c5 	.word	0x00c700c5
 800def8:	00cb00c9 	.word	0x00cb00c9
 800defc:	00d100cd 	.word	0x00d100cd
 800df00:	00d700d5 	.word	0x00d700d5
 800df04:	00db00d9 	.word	0x00db00d9
 800df08:	00df00dd 	.word	0x00df00dd
 800df0c:	00e300e1 	.word	0x00e300e1
 800df10:	012d012d 	.word	0x012d012d
 800df14:	012d012d 	.word	0x012d012d
 800df18:	012d012d 	.word	0x012d012d
 800df1c:	012d012d 	.word	0x012d012d
 800df20:	00eb00e7 	.word	0x00eb00e7
 800df24:	012d012d 	.word	0x012d012d
 800df28:	012d012d 	.word	0x012d012d
 800df2c:	012d012d 	.word	0x012d012d
 800df30:	012d012d 	.word	0x012d012d
 800df34:	012d012d 	.word	0x012d012d
 800df38:	012d012d 	.word	0x012d012d
 800df3c:	00ed012d 	.word	0x00ed012d
 800df40:	00ef0107 	.word	0x00ef0107
 800df44:	012d00f1 	.word	0x012d00f1
 800df48:	012d012d 	.word	0x012d012d
 800df4c:	012d00f3 	.word	0x012d00f3
 800df50:	012d012d 	.word	0x012d012d
 800df54:	012d00f5 	.word	0x012d00f5
 800df58:	00f9012d 	.word	0x00f9012d
 800df5c:	012d012d 	.word	0x012d012d
 800df60:	012d00fb 	.word	0x012d00fb
 800df64:	012d012d 	.word	0x012d012d
 800df68:	012d012d 	.word	0x012d012d
 800df6c:	012d012d 	.word	0x012d012d
 800df70:	012d012d 	.word	0x012d012d
 800df74:	00fd012d 	.word	0x00fd012d
 800df78:	00ff012d 	.word	0x00ff012d
 800df7c:	01030101 	.word	0x01030101
 800df80:	012d012d 	.word	0x012d012d
 800df84:	012d0125 	.word	0x012d0125
 800df88:	012d012d 	.word	0x012d012d
 800df8c:	012d012d 	.word	0x012d012d
 800df90:	012d012d 	.word	0x012d012d
 800df94:	0113012d 	.word	0x0113012d
 800df98:	01090105 	.word	0x01090105
 800df9c:	010d010b 	.word	0x010d010b
 800dfa0:	012d010f 	.word	0x012d010f
 800dfa4:	01150111 	.word	0x01150111
 800dfa8:	00e90119 	.word	0x00e90119
 800dfac:	012b00c1 	.word	0x012b00c1
 800dfb0:	00cf00b9 	.word	0x00cf00b9
 800dfb4:	009f00bb 	.word	0x009f00bb
 800dfb8:	012900a5 	.word	0x012900a5
 800dfbc:	012d00f7 	.word	0x012d00f7
 800dfc0:	00c30117 	.word	0x00c30117
 800dfc4:	011b011d 	.word	0x011b011d
 800dfc8:	012d012d 	.word	0x012d012d
 800dfcc:	012d012d 	.word	0x012d012d
 800dfd0:	00d3012d 	.word	0x00d3012d
 800dfd4:	012d012d 	.word	0x012d012d
 800dfd8:	00e5012d 	.word	0x00e5012d
 800dfdc:	011f0127 	.word	0x011f0127
 800dfe0:	01230121 	.word	0x01230121
 800dfe4:	4855      	ldr	r0, [pc, #340]	; (800e13c <_strerror_r+0x288>)
 800dfe6:	bd10      	pop	{r4, pc}
 800dfe8:	4855      	ldr	r0, [pc, #340]	; (800e140 <_strerror_r+0x28c>)
 800dfea:	e7fc      	b.n	800dfe6 <_strerror_r+0x132>
 800dfec:	4855      	ldr	r0, [pc, #340]	; (800e144 <_strerror_r+0x290>)
 800dfee:	e7fa      	b.n	800dfe6 <_strerror_r+0x132>
 800dff0:	4855      	ldr	r0, [pc, #340]	; (800e148 <_strerror_r+0x294>)
 800dff2:	e7f8      	b.n	800dfe6 <_strerror_r+0x132>
 800dff4:	4855      	ldr	r0, [pc, #340]	; (800e14c <_strerror_r+0x298>)
 800dff6:	e7f6      	b.n	800dfe6 <_strerror_r+0x132>
 800dff8:	4855      	ldr	r0, [pc, #340]	; (800e150 <_strerror_r+0x29c>)
 800dffa:	e7f4      	b.n	800dfe6 <_strerror_r+0x132>
 800dffc:	4855      	ldr	r0, [pc, #340]	; (800e154 <_strerror_r+0x2a0>)
 800dffe:	e7f2      	b.n	800dfe6 <_strerror_r+0x132>
 800e000:	4855      	ldr	r0, [pc, #340]	; (800e158 <_strerror_r+0x2a4>)
 800e002:	e7f0      	b.n	800dfe6 <_strerror_r+0x132>
 800e004:	4855      	ldr	r0, [pc, #340]	; (800e15c <_strerror_r+0x2a8>)
 800e006:	e7ee      	b.n	800dfe6 <_strerror_r+0x132>
 800e008:	4855      	ldr	r0, [pc, #340]	; (800e160 <_strerror_r+0x2ac>)
 800e00a:	e7ec      	b.n	800dfe6 <_strerror_r+0x132>
 800e00c:	4855      	ldr	r0, [pc, #340]	; (800e164 <_strerror_r+0x2b0>)
 800e00e:	e7ea      	b.n	800dfe6 <_strerror_r+0x132>
 800e010:	4855      	ldr	r0, [pc, #340]	; (800e168 <_strerror_r+0x2b4>)
 800e012:	e7e8      	b.n	800dfe6 <_strerror_r+0x132>
 800e014:	4855      	ldr	r0, [pc, #340]	; (800e16c <_strerror_r+0x2b8>)
 800e016:	e7e6      	b.n	800dfe6 <_strerror_r+0x132>
 800e018:	4855      	ldr	r0, [pc, #340]	; (800e170 <_strerror_r+0x2bc>)
 800e01a:	e7e4      	b.n	800dfe6 <_strerror_r+0x132>
 800e01c:	4855      	ldr	r0, [pc, #340]	; (800e174 <_strerror_r+0x2c0>)
 800e01e:	e7e2      	b.n	800dfe6 <_strerror_r+0x132>
 800e020:	4855      	ldr	r0, [pc, #340]	; (800e178 <_strerror_r+0x2c4>)
 800e022:	e7e0      	b.n	800dfe6 <_strerror_r+0x132>
 800e024:	4855      	ldr	r0, [pc, #340]	; (800e17c <_strerror_r+0x2c8>)
 800e026:	e7de      	b.n	800dfe6 <_strerror_r+0x132>
 800e028:	4855      	ldr	r0, [pc, #340]	; (800e180 <_strerror_r+0x2cc>)
 800e02a:	e7dc      	b.n	800dfe6 <_strerror_r+0x132>
 800e02c:	4855      	ldr	r0, [pc, #340]	; (800e184 <_strerror_r+0x2d0>)
 800e02e:	e7da      	b.n	800dfe6 <_strerror_r+0x132>
 800e030:	4855      	ldr	r0, [pc, #340]	; (800e188 <_strerror_r+0x2d4>)
 800e032:	e7d8      	b.n	800dfe6 <_strerror_r+0x132>
 800e034:	4855      	ldr	r0, [pc, #340]	; (800e18c <_strerror_r+0x2d8>)
 800e036:	e7d6      	b.n	800dfe6 <_strerror_r+0x132>
 800e038:	4855      	ldr	r0, [pc, #340]	; (800e190 <_strerror_r+0x2dc>)
 800e03a:	e7d4      	b.n	800dfe6 <_strerror_r+0x132>
 800e03c:	4855      	ldr	r0, [pc, #340]	; (800e194 <_strerror_r+0x2e0>)
 800e03e:	e7d2      	b.n	800dfe6 <_strerror_r+0x132>
 800e040:	4855      	ldr	r0, [pc, #340]	; (800e198 <_strerror_r+0x2e4>)
 800e042:	e7d0      	b.n	800dfe6 <_strerror_r+0x132>
 800e044:	4855      	ldr	r0, [pc, #340]	; (800e19c <_strerror_r+0x2e8>)
 800e046:	e7ce      	b.n	800dfe6 <_strerror_r+0x132>
 800e048:	4855      	ldr	r0, [pc, #340]	; (800e1a0 <_strerror_r+0x2ec>)
 800e04a:	e7cc      	b.n	800dfe6 <_strerror_r+0x132>
 800e04c:	4855      	ldr	r0, [pc, #340]	; (800e1a4 <_strerror_r+0x2f0>)
 800e04e:	e7ca      	b.n	800dfe6 <_strerror_r+0x132>
 800e050:	4855      	ldr	r0, [pc, #340]	; (800e1a8 <_strerror_r+0x2f4>)
 800e052:	e7c8      	b.n	800dfe6 <_strerror_r+0x132>
 800e054:	4855      	ldr	r0, [pc, #340]	; (800e1ac <_strerror_r+0x2f8>)
 800e056:	e7c6      	b.n	800dfe6 <_strerror_r+0x132>
 800e058:	4855      	ldr	r0, [pc, #340]	; (800e1b0 <_strerror_r+0x2fc>)
 800e05a:	e7c4      	b.n	800dfe6 <_strerror_r+0x132>
 800e05c:	4855      	ldr	r0, [pc, #340]	; (800e1b4 <_strerror_r+0x300>)
 800e05e:	e7c2      	b.n	800dfe6 <_strerror_r+0x132>
 800e060:	4855      	ldr	r0, [pc, #340]	; (800e1b8 <_strerror_r+0x304>)
 800e062:	e7c0      	b.n	800dfe6 <_strerror_r+0x132>
 800e064:	4855      	ldr	r0, [pc, #340]	; (800e1bc <_strerror_r+0x308>)
 800e066:	e7be      	b.n	800dfe6 <_strerror_r+0x132>
 800e068:	4855      	ldr	r0, [pc, #340]	; (800e1c0 <_strerror_r+0x30c>)
 800e06a:	e7bc      	b.n	800dfe6 <_strerror_r+0x132>
 800e06c:	4855      	ldr	r0, [pc, #340]	; (800e1c4 <_strerror_r+0x310>)
 800e06e:	e7ba      	b.n	800dfe6 <_strerror_r+0x132>
 800e070:	4855      	ldr	r0, [pc, #340]	; (800e1c8 <_strerror_r+0x314>)
 800e072:	e7b8      	b.n	800dfe6 <_strerror_r+0x132>
 800e074:	4855      	ldr	r0, [pc, #340]	; (800e1cc <_strerror_r+0x318>)
 800e076:	e7b6      	b.n	800dfe6 <_strerror_r+0x132>
 800e078:	4855      	ldr	r0, [pc, #340]	; (800e1d0 <_strerror_r+0x31c>)
 800e07a:	e7b4      	b.n	800dfe6 <_strerror_r+0x132>
 800e07c:	4855      	ldr	r0, [pc, #340]	; (800e1d4 <_strerror_r+0x320>)
 800e07e:	e7b2      	b.n	800dfe6 <_strerror_r+0x132>
 800e080:	4855      	ldr	r0, [pc, #340]	; (800e1d8 <_strerror_r+0x324>)
 800e082:	e7b0      	b.n	800dfe6 <_strerror_r+0x132>
 800e084:	4855      	ldr	r0, [pc, #340]	; (800e1dc <_strerror_r+0x328>)
 800e086:	e7ae      	b.n	800dfe6 <_strerror_r+0x132>
 800e088:	4855      	ldr	r0, [pc, #340]	; (800e1e0 <_strerror_r+0x32c>)
 800e08a:	e7ac      	b.n	800dfe6 <_strerror_r+0x132>
 800e08c:	4855      	ldr	r0, [pc, #340]	; (800e1e4 <_strerror_r+0x330>)
 800e08e:	e7aa      	b.n	800dfe6 <_strerror_r+0x132>
 800e090:	4855      	ldr	r0, [pc, #340]	; (800e1e8 <_strerror_r+0x334>)
 800e092:	e7a8      	b.n	800dfe6 <_strerror_r+0x132>
 800e094:	4855      	ldr	r0, [pc, #340]	; (800e1ec <_strerror_r+0x338>)
 800e096:	e7a6      	b.n	800dfe6 <_strerror_r+0x132>
 800e098:	4855      	ldr	r0, [pc, #340]	; (800e1f0 <_strerror_r+0x33c>)
 800e09a:	e7a4      	b.n	800dfe6 <_strerror_r+0x132>
 800e09c:	4855      	ldr	r0, [pc, #340]	; (800e1f4 <_strerror_r+0x340>)
 800e09e:	e7a2      	b.n	800dfe6 <_strerror_r+0x132>
 800e0a0:	4855      	ldr	r0, [pc, #340]	; (800e1f8 <_strerror_r+0x344>)
 800e0a2:	e7a0      	b.n	800dfe6 <_strerror_r+0x132>
 800e0a4:	4855      	ldr	r0, [pc, #340]	; (800e1fc <_strerror_r+0x348>)
 800e0a6:	e79e      	b.n	800dfe6 <_strerror_r+0x132>
 800e0a8:	4855      	ldr	r0, [pc, #340]	; (800e200 <_strerror_r+0x34c>)
 800e0aa:	e79c      	b.n	800dfe6 <_strerror_r+0x132>
 800e0ac:	4855      	ldr	r0, [pc, #340]	; (800e204 <_strerror_r+0x350>)
 800e0ae:	e79a      	b.n	800dfe6 <_strerror_r+0x132>
 800e0b0:	4855      	ldr	r0, [pc, #340]	; (800e208 <_strerror_r+0x354>)
 800e0b2:	e798      	b.n	800dfe6 <_strerror_r+0x132>
 800e0b4:	4855      	ldr	r0, [pc, #340]	; (800e20c <_strerror_r+0x358>)
 800e0b6:	e796      	b.n	800dfe6 <_strerror_r+0x132>
 800e0b8:	4855      	ldr	r0, [pc, #340]	; (800e210 <_strerror_r+0x35c>)
 800e0ba:	e794      	b.n	800dfe6 <_strerror_r+0x132>
 800e0bc:	4855      	ldr	r0, [pc, #340]	; (800e214 <_strerror_r+0x360>)
 800e0be:	e792      	b.n	800dfe6 <_strerror_r+0x132>
 800e0c0:	4855      	ldr	r0, [pc, #340]	; (800e218 <_strerror_r+0x364>)
 800e0c2:	e790      	b.n	800dfe6 <_strerror_r+0x132>
 800e0c4:	4855      	ldr	r0, [pc, #340]	; (800e21c <_strerror_r+0x368>)
 800e0c6:	e78e      	b.n	800dfe6 <_strerror_r+0x132>
 800e0c8:	4855      	ldr	r0, [pc, #340]	; (800e220 <_strerror_r+0x36c>)
 800e0ca:	e78c      	b.n	800dfe6 <_strerror_r+0x132>
 800e0cc:	4855      	ldr	r0, [pc, #340]	; (800e224 <_strerror_r+0x370>)
 800e0ce:	e78a      	b.n	800dfe6 <_strerror_r+0x132>
 800e0d0:	4855      	ldr	r0, [pc, #340]	; (800e228 <_strerror_r+0x374>)
 800e0d2:	e788      	b.n	800dfe6 <_strerror_r+0x132>
 800e0d4:	4855      	ldr	r0, [pc, #340]	; (800e22c <_strerror_r+0x378>)
 800e0d6:	e786      	b.n	800dfe6 <_strerror_r+0x132>
 800e0d8:	4855      	ldr	r0, [pc, #340]	; (800e230 <_strerror_r+0x37c>)
 800e0da:	e784      	b.n	800dfe6 <_strerror_r+0x132>
 800e0dc:	4855      	ldr	r0, [pc, #340]	; (800e234 <_strerror_r+0x380>)
 800e0de:	e782      	b.n	800dfe6 <_strerror_r+0x132>
 800e0e0:	4855      	ldr	r0, [pc, #340]	; (800e238 <_strerror_r+0x384>)
 800e0e2:	e780      	b.n	800dfe6 <_strerror_r+0x132>
 800e0e4:	4855      	ldr	r0, [pc, #340]	; (800e23c <_strerror_r+0x388>)
 800e0e6:	e77e      	b.n	800dfe6 <_strerror_r+0x132>
 800e0e8:	4855      	ldr	r0, [pc, #340]	; (800e240 <_strerror_r+0x38c>)
 800e0ea:	e77c      	b.n	800dfe6 <_strerror_r+0x132>
 800e0ec:	4855      	ldr	r0, [pc, #340]	; (800e244 <_strerror_r+0x390>)
 800e0ee:	e77a      	b.n	800dfe6 <_strerror_r+0x132>
 800e0f0:	4855      	ldr	r0, [pc, #340]	; (800e248 <_strerror_r+0x394>)
 800e0f2:	e778      	b.n	800dfe6 <_strerror_r+0x132>
 800e0f4:	4855      	ldr	r0, [pc, #340]	; (800e24c <_strerror_r+0x398>)
 800e0f6:	e776      	b.n	800dfe6 <_strerror_r+0x132>
 800e0f8:	4855      	ldr	r0, [pc, #340]	; (800e250 <_strerror_r+0x39c>)
 800e0fa:	e774      	b.n	800dfe6 <_strerror_r+0x132>
 800e0fc:	4855      	ldr	r0, [pc, #340]	; (800e254 <_strerror_r+0x3a0>)
 800e0fe:	e772      	b.n	800dfe6 <_strerror_r+0x132>
 800e100:	4855      	ldr	r0, [pc, #340]	; (800e258 <_strerror_r+0x3a4>)
 800e102:	e770      	b.n	800dfe6 <_strerror_r+0x132>
 800e104:	4855      	ldr	r0, [pc, #340]	; (800e25c <_strerror_r+0x3a8>)
 800e106:	e76e      	b.n	800dfe6 <_strerror_r+0x132>
 800e108:	4855      	ldr	r0, [pc, #340]	; (800e260 <_strerror_r+0x3ac>)
 800e10a:	e76c      	b.n	800dfe6 <_strerror_r+0x132>
 800e10c:	4855      	ldr	r0, [pc, #340]	; (800e264 <_strerror_r+0x3b0>)
 800e10e:	e76a      	b.n	800dfe6 <_strerror_r+0x132>
 800e110:	4855      	ldr	r0, [pc, #340]	; (800e268 <_strerror_r+0x3b4>)
 800e112:	e768      	b.n	800dfe6 <_strerror_r+0x132>
 800e114:	4855      	ldr	r0, [pc, #340]	; (800e26c <_strerror_r+0x3b8>)
 800e116:	e766      	b.n	800dfe6 <_strerror_r+0x132>
 800e118:	4855      	ldr	r0, [pc, #340]	; (800e270 <_strerror_r+0x3bc>)
 800e11a:	e764      	b.n	800dfe6 <_strerror_r+0x132>
 800e11c:	4855      	ldr	r0, [pc, #340]	; (800e274 <_strerror_r+0x3c0>)
 800e11e:	e762      	b.n	800dfe6 <_strerror_r+0x132>
 800e120:	2b00      	cmp	r3, #0
 800e122:	bf14      	ite	ne
 800e124:	461a      	movne	r2, r3
 800e126:	4622      	moveq	r2, r4
 800e128:	f000 f8b4 	bl	800e294 <_user_strerror>
 800e12c:	4b52      	ldr	r3, [pc, #328]	; (800e278 <_strerror_r+0x3c4>)
 800e12e:	2800      	cmp	r0, #0
 800e130:	bf08      	it	eq
 800e132:	4618      	moveq	r0, r3
 800e134:	e757      	b.n	800dfe6 <_strerror_r+0x132>
 800e136:	4851      	ldr	r0, [pc, #324]	; (800e27c <_strerror_r+0x3c8>)
 800e138:	e755      	b.n	800dfe6 <_strerror_r+0x132>
 800e13a:	bf00      	nop
 800e13c:	080104e4 	.word	0x080104e4
 800e140:	080104ee 	.word	0x080104ee
 800e144:	08010508 	.word	0x08010508
 800e148:	08010518 	.word	0x08010518
 800e14c:	08010530 	.word	0x08010530
 800e150:	0801053a 	.word	0x0801053a
 800e154:	08010554 	.word	0x08010554
 800e158:	08010566 	.word	0x08010566
 800e15c:	08010578 	.word	0x08010578
 800e160:	08010591 	.word	0x08010591
 800e164:	080105a1 	.word	0x080105a1
 800e168:	080105ad 	.word	0x080105ad
 800e16c:	080105ca 	.word	0x080105ca
 800e170:	080105dc 	.word	0x080105dc
 800e174:	080105ed 	.word	0x080105ed
 800e178:	080105ff 	.word	0x080105ff
 800e17c:	0801060b 	.word	0x0801060b
 800e180:	08010623 	.word	0x08010623
 800e184:	0801062f 	.word	0x0801062f
 800e188:	08010641 	.word	0x08010641
 800e18c:	08010650 	.word	0x08010650
 800e190:	08010660 	.word	0x08010660
 800e194:	0801066d 	.word	0x0801066d
 800e198:	0801068c 	.word	0x0801068c
 800e19c:	0801069b 	.word	0x0801069b
 800e1a0:	080106ac 	.word	0x080106ac
 800e1a4:	080106d0 	.word	0x080106d0
 800e1a8:	080106ee 	.word	0x080106ee
 800e1ac:	0801070c 	.word	0x0801070c
 800e1b0:	0801072c 	.word	0x0801072c
 800e1b4:	08010743 	.word	0x08010743
 800e1b8:	08010752 	.word	0x08010752
 800e1bc:	08010761 	.word	0x08010761
 800e1c0:	08010775 	.word	0x08010775
 800e1c4:	0801078d 	.word	0x0801078d
 800e1c8:	0801079b 	.word	0x0801079b
 800e1cc:	080107a8 	.word	0x080107a8
 800e1d0:	080107be 	.word	0x080107be
 800e1d4:	080107cd 	.word	0x080107cd
 800e1d8:	080107d9 	.word	0x080107d9
 800e1dc:	08010808 	.word	0x08010808
 800e1e0:	08010819 	.word	0x08010819
 800e1e4:	08010834 	.word	0x08010834
 800e1e8:	08010847 	.word	0x08010847
 800e1ec:	0801085d 	.word	0x0801085d
 800e1f0:	08010866 	.word	0x08010866
 800e1f4:	0801087d 	.word	0x0801087d
 800e1f8:	08010885 	.word	0x08010885
 800e1fc:	08010892 	.word	0x08010892
 800e200:	080108a7 	.word	0x080108a7
 800e204:	080108bb 	.word	0x080108bb
 800e208:	080108d3 	.word	0x080108d3
 800e20c:	080108e2 	.word	0x080108e2
 800e210:	080108f3 	.word	0x080108f3
 800e214:	08010906 	.word	0x08010906
 800e218:	08010912 	.word	0x08010912
 800e21c:	0801092b 	.word	0x0801092b
 800e220:	0801093f 	.word	0x0801093f
 800e224:	0801095a 	.word	0x0801095a
 800e228:	08010972 	.word	0x08010972
 800e22c:	0801098c 	.word	0x0801098c
 800e230:	08010994 	.word	0x08010994
 800e234:	080109c4 	.word	0x080109c4
 800e238:	080109e3 	.word	0x080109e3
 800e23c:	08010a02 	.word	0x08010a02
 800e240:	08010a19 	.word	0x08010a19
 800e244:	08010a2c 	.word	0x08010a2c
 800e248:	08010a45 	.word	0x08010a45
 800e24c:	08010a5c 	.word	0x08010a5c
 800e250:	08010a72 	.word	0x08010a72
 800e254:	08010a93 	.word	0x08010a93
 800e258:	08010aab 	.word	0x08010aab
 800e25c:	08010ac7 	.word	0x08010ac7
 800e260:	08010ada 	.word	0x08010ada
 800e264:	08010af0 	.word	0x08010af0
 800e268:	08010b04 	.word	0x08010b04
 800e26c:	08010b26 	.word	0x08010b26
 800e270:	08010b4c 	.word	0x08010b4c
 800e274:	08010b5d 	.word	0x08010b5d
 800e278:	08010be1 	.word	0x08010be1
 800e27c:	08010b72 	.word	0x08010b72

0800e280 <strerror>:
 800e280:	4601      	mov	r1, r0
 800e282:	4803      	ldr	r0, [pc, #12]	; (800e290 <strerror+0x10>)
 800e284:	2300      	movs	r3, #0
 800e286:	6800      	ldr	r0, [r0, #0]
 800e288:	461a      	mov	r2, r3
 800e28a:	f7ff be13 	b.w	800deb4 <_strerror_r>
 800e28e:	bf00      	nop
 800e290:	200000f8 	.word	0x200000f8

0800e294 <_user_strerror>:
 800e294:	2000      	movs	r0, #0
 800e296:	4770      	bx	lr

0800e298 <_vsniprintf_r>:
 800e298:	b530      	push	{r4, r5, lr}
 800e29a:	1e14      	subs	r4, r2, #0
 800e29c:	4605      	mov	r5, r0
 800e29e:	b09b      	sub	sp, #108	; 0x6c
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	da05      	bge.n	800e2b0 <_vsniprintf_r+0x18>
 800e2a4:	238b      	movs	r3, #139	; 0x8b
 800e2a6:	602b      	str	r3, [r5, #0]
 800e2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ac:	b01b      	add	sp, #108	; 0x6c
 800e2ae:	bd30      	pop	{r4, r5, pc}
 800e2b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e2b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e2b8:	bf14      	ite	ne
 800e2ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e2be:	4623      	moveq	r3, r4
 800e2c0:	9302      	str	r3, [sp, #8]
 800e2c2:	9305      	str	r3, [sp, #20]
 800e2c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2c8:	9100      	str	r1, [sp, #0]
 800e2ca:	9104      	str	r1, [sp, #16]
 800e2cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e2d4:	4669      	mov	r1, sp
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f000 fbfc 	bl	800ead4 <_svfiprintf_r>
 800e2dc:	1c43      	adds	r3, r0, #1
 800e2de:	bfbc      	itt	lt
 800e2e0:	238b      	movlt	r3, #139	; 0x8b
 800e2e2:	602b      	strlt	r3, [r5, #0]
 800e2e4:	2c00      	cmp	r4, #0
 800e2e6:	d0e1      	beq.n	800e2ac <_vsniprintf_r+0x14>
 800e2e8:	9b00      	ldr	r3, [sp, #0]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	701a      	strb	r2, [r3, #0]
 800e2ee:	e7dd      	b.n	800e2ac <_vsniprintf_r+0x14>

0800e2f0 <vsniprintf>:
 800e2f0:	b507      	push	{r0, r1, r2, lr}
 800e2f2:	9300      	str	r3, [sp, #0]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	460a      	mov	r2, r1
 800e2f8:	4601      	mov	r1, r0
 800e2fa:	4803      	ldr	r0, [pc, #12]	; (800e308 <vsniprintf+0x18>)
 800e2fc:	6800      	ldr	r0, [r0, #0]
 800e2fe:	f7ff ffcb 	bl	800e298 <_vsniprintf_r>
 800e302:	b003      	add	sp, #12
 800e304:	f85d fb04 	ldr.w	pc, [sp], #4
 800e308:	200000f8 	.word	0x200000f8

0800e30c <__swbuf_r>:
 800e30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30e:	460e      	mov	r6, r1
 800e310:	4614      	mov	r4, r2
 800e312:	4605      	mov	r5, r0
 800e314:	b118      	cbz	r0, 800e31e <__swbuf_r+0x12>
 800e316:	6983      	ldr	r3, [r0, #24]
 800e318:	b90b      	cbnz	r3, 800e31e <__swbuf_r+0x12>
 800e31a:	f000 f9d1 	bl	800e6c0 <__sinit>
 800e31e:	4b21      	ldr	r3, [pc, #132]	; (800e3a4 <__swbuf_r+0x98>)
 800e320:	429c      	cmp	r4, r3
 800e322:	d12b      	bne.n	800e37c <__swbuf_r+0x70>
 800e324:	686c      	ldr	r4, [r5, #4]
 800e326:	69a3      	ldr	r3, [r4, #24]
 800e328:	60a3      	str	r3, [r4, #8]
 800e32a:	89a3      	ldrh	r3, [r4, #12]
 800e32c:	071a      	lsls	r2, r3, #28
 800e32e:	d52f      	bpl.n	800e390 <__swbuf_r+0x84>
 800e330:	6923      	ldr	r3, [r4, #16]
 800e332:	b36b      	cbz	r3, 800e390 <__swbuf_r+0x84>
 800e334:	6923      	ldr	r3, [r4, #16]
 800e336:	6820      	ldr	r0, [r4, #0]
 800e338:	1ac0      	subs	r0, r0, r3
 800e33a:	6963      	ldr	r3, [r4, #20]
 800e33c:	b2f6      	uxtb	r6, r6
 800e33e:	4283      	cmp	r3, r0
 800e340:	4637      	mov	r7, r6
 800e342:	dc04      	bgt.n	800e34e <__swbuf_r+0x42>
 800e344:	4621      	mov	r1, r4
 800e346:	4628      	mov	r0, r5
 800e348:	f000 f926 	bl	800e598 <_fflush_r>
 800e34c:	bb30      	cbnz	r0, 800e39c <__swbuf_r+0x90>
 800e34e:	68a3      	ldr	r3, [r4, #8]
 800e350:	3b01      	subs	r3, #1
 800e352:	60a3      	str	r3, [r4, #8]
 800e354:	6823      	ldr	r3, [r4, #0]
 800e356:	1c5a      	adds	r2, r3, #1
 800e358:	6022      	str	r2, [r4, #0]
 800e35a:	701e      	strb	r6, [r3, #0]
 800e35c:	6963      	ldr	r3, [r4, #20]
 800e35e:	3001      	adds	r0, #1
 800e360:	4283      	cmp	r3, r0
 800e362:	d004      	beq.n	800e36e <__swbuf_r+0x62>
 800e364:	89a3      	ldrh	r3, [r4, #12]
 800e366:	07db      	lsls	r3, r3, #31
 800e368:	d506      	bpl.n	800e378 <__swbuf_r+0x6c>
 800e36a:	2e0a      	cmp	r6, #10
 800e36c:	d104      	bne.n	800e378 <__swbuf_r+0x6c>
 800e36e:	4621      	mov	r1, r4
 800e370:	4628      	mov	r0, r5
 800e372:	f000 f911 	bl	800e598 <_fflush_r>
 800e376:	b988      	cbnz	r0, 800e39c <__swbuf_r+0x90>
 800e378:	4638      	mov	r0, r7
 800e37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e37c:	4b0a      	ldr	r3, [pc, #40]	; (800e3a8 <__swbuf_r+0x9c>)
 800e37e:	429c      	cmp	r4, r3
 800e380:	d101      	bne.n	800e386 <__swbuf_r+0x7a>
 800e382:	68ac      	ldr	r4, [r5, #8]
 800e384:	e7cf      	b.n	800e326 <__swbuf_r+0x1a>
 800e386:	4b09      	ldr	r3, [pc, #36]	; (800e3ac <__swbuf_r+0xa0>)
 800e388:	429c      	cmp	r4, r3
 800e38a:	bf08      	it	eq
 800e38c:	68ec      	ldreq	r4, [r5, #12]
 800e38e:	e7ca      	b.n	800e326 <__swbuf_r+0x1a>
 800e390:	4621      	mov	r1, r4
 800e392:	4628      	mov	r0, r5
 800e394:	f000 f80c 	bl	800e3b0 <__swsetup_r>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d0cb      	beq.n	800e334 <__swbuf_r+0x28>
 800e39c:	f04f 37ff 	mov.w	r7, #4294967295
 800e3a0:	e7ea      	b.n	800e378 <__swbuf_r+0x6c>
 800e3a2:	bf00      	nop
 800e3a4:	08010b9c 	.word	0x08010b9c
 800e3a8:	08010bbc 	.word	0x08010bbc
 800e3ac:	08010b7c 	.word	0x08010b7c

0800e3b0 <__swsetup_r>:
 800e3b0:	4b32      	ldr	r3, [pc, #200]	; (800e47c <__swsetup_r+0xcc>)
 800e3b2:	b570      	push	{r4, r5, r6, lr}
 800e3b4:	681d      	ldr	r5, [r3, #0]
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	b125      	cbz	r5, 800e3c6 <__swsetup_r+0x16>
 800e3bc:	69ab      	ldr	r3, [r5, #24]
 800e3be:	b913      	cbnz	r3, 800e3c6 <__swsetup_r+0x16>
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	f000 f97d 	bl	800e6c0 <__sinit>
 800e3c6:	4b2e      	ldr	r3, [pc, #184]	; (800e480 <__swsetup_r+0xd0>)
 800e3c8:	429c      	cmp	r4, r3
 800e3ca:	d10f      	bne.n	800e3ec <__swsetup_r+0x3c>
 800e3cc:	686c      	ldr	r4, [r5, #4]
 800e3ce:	89a3      	ldrh	r3, [r4, #12]
 800e3d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3d4:	0719      	lsls	r1, r3, #28
 800e3d6:	d42c      	bmi.n	800e432 <__swsetup_r+0x82>
 800e3d8:	06dd      	lsls	r5, r3, #27
 800e3da:	d411      	bmi.n	800e400 <__swsetup_r+0x50>
 800e3dc:	2309      	movs	r3, #9
 800e3de:	6033      	str	r3, [r6, #0]
 800e3e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3e4:	81a3      	strh	r3, [r4, #12]
 800e3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ea:	e03e      	b.n	800e46a <__swsetup_r+0xba>
 800e3ec:	4b25      	ldr	r3, [pc, #148]	; (800e484 <__swsetup_r+0xd4>)
 800e3ee:	429c      	cmp	r4, r3
 800e3f0:	d101      	bne.n	800e3f6 <__swsetup_r+0x46>
 800e3f2:	68ac      	ldr	r4, [r5, #8]
 800e3f4:	e7eb      	b.n	800e3ce <__swsetup_r+0x1e>
 800e3f6:	4b24      	ldr	r3, [pc, #144]	; (800e488 <__swsetup_r+0xd8>)
 800e3f8:	429c      	cmp	r4, r3
 800e3fa:	bf08      	it	eq
 800e3fc:	68ec      	ldreq	r4, [r5, #12]
 800e3fe:	e7e6      	b.n	800e3ce <__swsetup_r+0x1e>
 800e400:	0758      	lsls	r0, r3, #29
 800e402:	d512      	bpl.n	800e42a <__swsetup_r+0x7a>
 800e404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e406:	b141      	cbz	r1, 800e41a <__swsetup_r+0x6a>
 800e408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e40c:	4299      	cmp	r1, r3
 800e40e:	d002      	beq.n	800e416 <__swsetup_r+0x66>
 800e410:	4630      	mov	r0, r6
 800e412:	f000 fa59 	bl	800e8c8 <_free_r>
 800e416:	2300      	movs	r3, #0
 800e418:	6363      	str	r3, [r4, #52]	; 0x34
 800e41a:	89a3      	ldrh	r3, [r4, #12]
 800e41c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e420:	81a3      	strh	r3, [r4, #12]
 800e422:	2300      	movs	r3, #0
 800e424:	6063      	str	r3, [r4, #4]
 800e426:	6923      	ldr	r3, [r4, #16]
 800e428:	6023      	str	r3, [r4, #0]
 800e42a:	89a3      	ldrh	r3, [r4, #12]
 800e42c:	f043 0308 	orr.w	r3, r3, #8
 800e430:	81a3      	strh	r3, [r4, #12]
 800e432:	6923      	ldr	r3, [r4, #16]
 800e434:	b94b      	cbnz	r3, 800e44a <__swsetup_r+0x9a>
 800e436:	89a3      	ldrh	r3, [r4, #12]
 800e438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e440:	d003      	beq.n	800e44a <__swsetup_r+0x9a>
 800e442:	4621      	mov	r1, r4
 800e444:	4630      	mov	r0, r6
 800e446:	f000 f9ff 	bl	800e848 <__smakebuf_r>
 800e44a:	89a0      	ldrh	r0, [r4, #12]
 800e44c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e450:	f010 0301 	ands.w	r3, r0, #1
 800e454:	d00a      	beq.n	800e46c <__swsetup_r+0xbc>
 800e456:	2300      	movs	r3, #0
 800e458:	60a3      	str	r3, [r4, #8]
 800e45a:	6963      	ldr	r3, [r4, #20]
 800e45c:	425b      	negs	r3, r3
 800e45e:	61a3      	str	r3, [r4, #24]
 800e460:	6923      	ldr	r3, [r4, #16]
 800e462:	b943      	cbnz	r3, 800e476 <__swsetup_r+0xc6>
 800e464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e468:	d1ba      	bne.n	800e3e0 <__swsetup_r+0x30>
 800e46a:	bd70      	pop	{r4, r5, r6, pc}
 800e46c:	0781      	lsls	r1, r0, #30
 800e46e:	bf58      	it	pl
 800e470:	6963      	ldrpl	r3, [r4, #20]
 800e472:	60a3      	str	r3, [r4, #8]
 800e474:	e7f4      	b.n	800e460 <__swsetup_r+0xb0>
 800e476:	2000      	movs	r0, #0
 800e478:	e7f7      	b.n	800e46a <__swsetup_r+0xba>
 800e47a:	bf00      	nop
 800e47c:	200000f8 	.word	0x200000f8
 800e480:	08010b9c 	.word	0x08010b9c
 800e484:	08010bbc 	.word	0x08010bbc
 800e488:	08010b7c 	.word	0x08010b7c

0800e48c <__sflush_r>:
 800e48c:	898a      	ldrh	r2, [r1, #12]
 800e48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e492:	4605      	mov	r5, r0
 800e494:	0710      	lsls	r0, r2, #28
 800e496:	460c      	mov	r4, r1
 800e498:	d458      	bmi.n	800e54c <__sflush_r+0xc0>
 800e49a:	684b      	ldr	r3, [r1, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	dc05      	bgt.n	800e4ac <__sflush_r+0x20>
 800e4a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	dc02      	bgt.n	800e4ac <__sflush_r+0x20>
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4ae:	2e00      	cmp	r6, #0
 800e4b0:	d0f9      	beq.n	800e4a6 <__sflush_r+0x1a>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4b8:	682f      	ldr	r7, [r5, #0]
 800e4ba:	602b      	str	r3, [r5, #0]
 800e4bc:	d032      	beq.n	800e524 <__sflush_r+0x98>
 800e4be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4c0:	89a3      	ldrh	r3, [r4, #12]
 800e4c2:	075a      	lsls	r2, r3, #29
 800e4c4:	d505      	bpl.n	800e4d2 <__sflush_r+0x46>
 800e4c6:	6863      	ldr	r3, [r4, #4]
 800e4c8:	1ac0      	subs	r0, r0, r3
 800e4ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4cc:	b10b      	cbz	r3, 800e4d2 <__sflush_r+0x46>
 800e4ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4d0:	1ac0      	subs	r0, r0, r3
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4d8:	6a21      	ldr	r1, [r4, #32]
 800e4da:	4628      	mov	r0, r5
 800e4dc:	47b0      	blx	r6
 800e4de:	1c43      	adds	r3, r0, #1
 800e4e0:	89a3      	ldrh	r3, [r4, #12]
 800e4e2:	d106      	bne.n	800e4f2 <__sflush_r+0x66>
 800e4e4:	6829      	ldr	r1, [r5, #0]
 800e4e6:	291d      	cmp	r1, #29
 800e4e8:	d82c      	bhi.n	800e544 <__sflush_r+0xb8>
 800e4ea:	4a2a      	ldr	r2, [pc, #168]	; (800e594 <__sflush_r+0x108>)
 800e4ec:	40ca      	lsrs	r2, r1
 800e4ee:	07d6      	lsls	r6, r2, #31
 800e4f0:	d528      	bpl.n	800e544 <__sflush_r+0xb8>
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	6062      	str	r2, [r4, #4]
 800e4f6:	04d9      	lsls	r1, r3, #19
 800e4f8:	6922      	ldr	r2, [r4, #16]
 800e4fa:	6022      	str	r2, [r4, #0]
 800e4fc:	d504      	bpl.n	800e508 <__sflush_r+0x7c>
 800e4fe:	1c42      	adds	r2, r0, #1
 800e500:	d101      	bne.n	800e506 <__sflush_r+0x7a>
 800e502:	682b      	ldr	r3, [r5, #0]
 800e504:	b903      	cbnz	r3, 800e508 <__sflush_r+0x7c>
 800e506:	6560      	str	r0, [r4, #84]	; 0x54
 800e508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e50a:	602f      	str	r7, [r5, #0]
 800e50c:	2900      	cmp	r1, #0
 800e50e:	d0ca      	beq.n	800e4a6 <__sflush_r+0x1a>
 800e510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e514:	4299      	cmp	r1, r3
 800e516:	d002      	beq.n	800e51e <__sflush_r+0x92>
 800e518:	4628      	mov	r0, r5
 800e51a:	f000 f9d5 	bl	800e8c8 <_free_r>
 800e51e:	2000      	movs	r0, #0
 800e520:	6360      	str	r0, [r4, #52]	; 0x34
 800e522:	e7c1      	b.n	800e4a8 <__sflush_r+0x1c>
 800e524:	6a21      	ldr	r1, [r4, #32]
 800e526:	2301      	movs	r3, #1
 800e528:	4628      	mov	r0, r5
 800e52a:	47b0      	blx	r6
 800e52c:	1c41      	adds	r1, r0, #1
 800e52e:	d1c7      	bne.n	800e4c0 <__sflush_r+0x34>
 800e530:	682b      	ldr	r3, [r5, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d0c4      	beq.n	800e4c0 <__sflush_r+0x34>
 800e536:	2b1d      	cmp	r3, #29
 800e538:	d001      	beq.n	800e53e <__sflush_r+0xb2>
 800e53a:	2b16      	cmp	r3, #22
 800e53c:	d101      	bne.n	800e542 <__sflush_r+0xb6>
 800e53e:	602f      	str	r7, [r5, #0]
 800e540:	e7b1      	b.n	800e4a6 <__sflush_r+0x1a>
 800e542:	89a3      	ldrh	r3, [r4, #12]
 800e544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e548:	81a3      	strh	r3, [r4, #12]
 800e54a:	e7ad      	b.n	800e4a8 <__sflush_r+0x1c>
 800e54c:	690f      	ldr	r7, [r1, #16]
 800e54e:	2f00      	cmp	r7, #0
 800e550:	d0a9      	beq.n	800e4a6 <__sflush_r+0x1a>
 800e552:	0793      	lsls	r3, r2, #30
 800e554:	680e      	ldr	r6, [r1, #0]
 800e556:	bf08      	it	eq
 800e558:	694b      	ldreq	r3, [r1, #20]
 800e55a:	600f      	str	r7, [r1, #0]
 800e55c:	bf18      	it	ne
 800e55e:	2300      	movne	r3, #0
 800e560:	eba6 0807 	sub.w	r8, r6, r7
 800e564:	608b      	str	r3, [r1, #8]
 800e566:	f1b8 0f00 	cmp.w	r8, #0
 800e56a:	dd9c      	ble.n	800e4a6 <__sflush_r+0x1a>
 800e56c:	6a21      	ldr	r1, [r4, #32]
 800e56e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e570:	4643      	mov	r3, r8
 800e572:	463a      	mov	r2, r7
 800e574:	4628      	mov	r0, r5
 800e576:	47b0      	blx	r6
 800e578:	2800      	cmp	r0, #0
 800e57a:	dc06      	bgt.n	800e58a <__sflush_r+0xfe>
 800e57c:	89a3      	ldrh	r3, [r4, #12]
 800e57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e582:	81a3      	strh	r3, [r4, #12]
 800e584:	f04f 30ff 	mov.w	r0, #4294967295
 800e588:	e78e      	b.n	800e4a8 <__sflush_r+0x1c>
 800e58a:	4407      	add	r7, r0
 800e58c:	eba8 0800 	sub.w	r8, r8, r0
 800e590:	e7e9      	b.n	800e566 <__sflush_r+0xda>
 800e592:	bf00      	nop
 800e594:	20400001 	.word	0x20400001

0800e598 <_fflush_r>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	690b      	ldr	r3, [r1, #16]
 800e59c:	4605      	mov	r5, r0
 800e59e:	460c      	mov	r4, r1
 800e5a0:	b913      	cbnz	r3, 800e5a8 <_fflush_r+0x10>
 800e5a2:	2500      	movs	r5, #0
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	bd38      	pop	{r3, r4, r5, pc}
 800e5a8:	b118      	cbz	r0, 800e5b2 <_fflush_r+0x1a>
 800e5aa:	6983      	ldr	r3, [r0, #24]
 800e5ac:	b90b      	cbnz	r3, 800e5b2 <_fflush_r+0x1a>
 800e5ae:	f000 f887 	bl	800e6c0 <__sinit>
 800e5b2:	4b14      	ldr	r3, [pc, #80]	; (800e604 <_fflush_r+0x6c>)
 800e5b4:	429c      	cmp	r4, r3
 800e5b6:	d11b      	bne.n	800e5f0 <_fflush_r+0x58>
 800e5b8:	686c      	ldr	r4, [r5, #4]
 800e5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d0ef      	beq.n	800e5a2 <_fflush_r+0xa>
 800e5c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5c4:	07d0      	lsls	r0, r2, #31
 800e5c6:	d404      	bmi.n	800e5d2 <_fflush_r+0x3a>
 800e5c8:	0599      	lsls	r1, r3, #22
 800e5ca:	d402      	bmi.n	800e5d2 <_fflush_r+0x3a>
 800e5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ce:	f000 f915 	bl	800e7fc <__retarget_lock_acquire_recursive>
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	4621      	mov	r1, r4
 800e5d6:	f7ff ff59 	bl	800e48c <__sflush_r>
 800e5da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5dc:	07da      	lsls	r2, r3, #31
 800e5de:	4605      	mov	r5, r0
 800e5e0:	d4e0      	bmi.n	800e5a4 <_fflush_r+0xc>
 800e5e2:	89a3      	ldrh	r3, [r4, #12]
 800e5e4:	059b      	lsls	r3, r3, #22
 800e5e6:	d4dd      	bmi.n	800e5a4 <_fflush_r+0xc>
 800e5e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ea:	f000 f908 	bl	800e7fe <__retarget_lock_release_recursive>
 800e5ee:	e7d9      	b.n	800e5a4 <_fflush_r+0xc>
 800e5f0:	4b05      	ldr	r3, [pc, #20]	; (800e608 <_fflush_r+0x70>)
 800e5f2:	429c      	cmp	r4, r3
 800e5f4:	d101      	bne.n	800e5fa <_fflush_r+0x62>
 800e5f6:	68ac      	ldr	r4, [r5, #8]
 800e5f8:	e7df      	b.n	800e5ba <_fflush_r+0x22>
 800e5fa:	4b04      	ldr	r3, [pc, #16]	; (800e60c <_fflush_r+0x74>)
 800e5fc:	429c      	cmp	r4, r3
 800e5fe:	bf08      	it	eq
 800e600:	68ec      	ldreq	r4, [r5, #12]
 800e602:	e7da      	b.n	800e5ba <_fflush_r+0x22>
 800e604:	08010b9c 	.word	0x08010b9c
 800e608:	08010bbc 	.word	0x08010bbc
 800e60c:	08010b7c 	.word	0x08010b7c

0800e610 <std>:
 800e610:	2300      	movs	r3, #0
 800e612:	b510      	push	{r4, lr}
 800e614:	4604      	mov	r4, r0
 800e616:	e9c0 3300 	strd	r3, r3, [r0]
 800e61a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e61e:	6083      	str	r3, [r0, #8]
 800e620:	8181      	strh	r1, [r0, #12]
 800e622:	6643      	str	r3, [r0, #100]	; 0x64
 800e624:	81c2      	strh	r2, [r0, #14]
 800e626:	6183      	str	r3, [r0, #24]
 800e628:	4619      	mov	r1, r3
 800e62a:	2208      	movs	r2, #8
 800e62c:	305c      	adds	r0, #92	; 0x5c
 800e62e:	f7ff fbab 	bl	800dd88 <memset>
 800e632:	4b05      	ldr	r3, [pc, #20]	; (800e648 <std+0x38>)
 800e634:	6263      	str	r3, [r4, #36]	; 0x24
 800e636:	4b05      	ldr	r3, [pc, #20]	; (800e64c <std+0x3c>)
 800e638:	62a3      	str	r3, [r4, #40]	; 0x28
 800e63a:	4b05      	ldr	r3, [pc, #20]	; (800e650 <std+0x40>)
 800e63c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e63e:	4b05      	ldr	r3, [pc, #20]	; (800e654 <std+0x44>)
 800e640:	6224      	str	r4, [r4, #32]
 800e642:	6323      	str	r3, [r4, #48]	; 0x30
 800e644:	bd10      	pop	{r4, pc}
 800e646:	bf00      	nop
 800e648:	0800f2d1 	.word	0x0800f2d1
 800e64c:	0800f2f3 	.word	0x0800f2f3
 800e650:	0800f32b 	.word	0x0800f32b
 800e654:	0800f34f 	.word	0x0800f34f

0800e658 <_cleanup_r>:
 800e658:	4901      	ldr	r1, [pc, #4]	; (800e660 <_cleanup_r+0x8>)
 800e65a:	f000 b8af 	b.w	800e7bc <_fwalk_reent>
 800e65e:	bf00      	nop
 800e660:	0800e599 	.word	0x0800e599

0800e664 <__sfmoreglue>:
 800e664:	b570      	push	{r4, r5, r6, lr}
 800e666:	1e4a      	subs	r2, r1, #1
 800e668:	2568      	movs	r5, #104	; 0x68
 800e66a:	4355      	muls	r5, r2
 800e66c:	460e      	mov	r6, r1
 800e66e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e672:	f000 f979 	bl	800e968 <_malloc_r>
 800e676:	4604      	mov	r4, r0
 800e678:	b140      	cbz	r0, 800e68c <__sfmoreglue+0x28>
 800e67a:	2100      	movs	r1, #0
 800e67c:	e9c0 1600 	strd	r1, r6, [r0]
 800e680:	300c      	adds	r0, #12
 800e682:	60a0      	str	r0, [r4, #8]
 800e684:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e688:	f7ff fb7e 	bl	800dd88 <memset>
 800e68c:	4620      	mov	r0, r4
 800e68e:	bd70      	pop	{r4, r5, r6, pc}

0800e690 <__sfp_lock_acquire>:
 800e690:	4801      	ldr	r0, [pc, #4]	; (800e698 <__sfp_lock_acquire+0x8>)
 800e692:	f000 b8b3 	b.w	800e7fc <__retarget_lock_acquire_recursive>
 800e696:	bf00      	nop
 800e698:	200051e4 	.word	0x200051e4

0800e69c <__sfp_lock_release>:
 800e69c:	4801      	ldr	r0, [pc, #4]	; (800e6a4 <__sfp_lock_release+0x8>)
 800e69e:	f000 b8ae 	b.w	800e7fe <__retarget_lock_release_recursive>
 800e6a2:	bf00      	nop
 800e6a4:	200051e4 	.word	0x200051e4

0800e6a8 <__sinit_lock_acquire>:
 800e6a8:	4801      	ldr	r0, [pc, #4]	; (800e6b0 <__sinit_lock_acquire+0x8>)
 800e6aa:	f000 b8a7 	b.w	800e7fc <__retarget_lock_acquire_recursive>
 800e6ae:	bf00      	nop
 800e6b0:	200051df 	.word	0x200051df

0800e6b4 <__sinit_lock_release>:
 800e6b4:	4801      	ldr	r0, [pc, #4]	; (800e6bc <__sinit_lock_release+0x8>)
 800e6b6:	f000 b8a2 	b.w	800e7fe <__retarget_lock_release_recursive>
 800e6ba:	bf00      	nop
 800e6bc:	200051df 	.word	0x200051df

0800e6c0 <__sinit>:
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	f7ff fff0 	bl	800e6a8 <__sinit_lock_acquire>
 800e6c8:	69a3      	ldr	r3, [r4, #24]
 800e6ca:	b11b      	cbz	r3, 800e6d4 <__sinit+0x14>
 800e6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6d0:	f7ff bff0 	b.w	800e6b4 <__sinit_lock_release>
 800e6d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e6d8:	6523      	str	r3, [r4, #80]	; 0x50
 800e6da:	4b13      	ldr	r3, [pc, #76]	; (800e728 <__sinit+0x68>)
 800e6dc:	4a13      	ldr	r2, [pc, #76]	; (800e72c <__sinit+0x6c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e6e2:	42a3      	cmp	r3, r4
 800e6e4:	bf04      	itt	eq
 800e6e6:	2301      	moveq	r3, #1
 800e6e8:	61a3      	streq	r3, [r4, #24]
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	f000 f820 	bl	800e730 <__sfp>
 800e6f0:	6060      	str	r0, [r4, #4]
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f000 f81c 	bl	800e730 <__sfp>
 800e6f8:	60a0      	str	r0, [r4, #8]
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f000 f818 	bl	800e730 <__sfp>
 800e700:	2200      	movs	r2, #0
 800e702:	60e0      	str	r0, [r4, #12]
 800e704:	2104      	movs	r1, #4
 800e706:	6860      	ldr	r0, [r4, #4]
 800e708:	f7ff ff82 	bl	800e610 <std>
 800e70c:	68a0      	ldr	r0, [r4, #8]
 800e70e:	2201      	movs	r2, #1
 800e710:	2109      	movs	r1, #9
 800e712:	f7ff ff7d 	bl	800e610 <std>
 800e716:	68e0      	ldr	r0, [r4, #12]
 800e718:	2202      	movs	r2, #2
 800e71a:	2112      	movs	r1, #18
 800e71c:	f7ff ff78 	bl	800e610 <std>
 800e720:	2301      	movs	r3, #1
 800e722:	61a3      	str	r3, [r4, #24]
 800e724:	e7d2      	b.n	800e6cc <__sinit+0xc>
 800e726:	bf00      	nop
 800e728:	080104e0 	.word	0x080104e0
 800e72c:	0800e659 	.word	0x0800e659

0800e730 <__sfp>:
 800e730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e732:	4607      	mov	r7, r0
 800e734:	f7ff ffac 	bl	800e690 <__sfp_lock_acquire>
 800e738:	4b1e      	ldr	r3, [pc, #120]	; (800e7b4 <__sfp+0x84>)
 800e73a:	681e      	ldr	r6, [r3, #0]
 800e73c:	69b3      	ldr	r3, [r6, #24]
 800e73e:	b913      	cbnz	r3, 800e746 <__sfp+0x16>
 800e740:	4630      	mov	r0, r6
 800e742:	f7ff ffbd 	bl	800e6c0 <__sinit>
 800e746:	3648      	adds	r6, #72	; 0x48
 800e748:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e74c:	3b01      	subs	r3, #1
 800e74e:	d503      	bpl.n	800e758 <__sfp+0x28>
 800e750:	6833      	ldr	r3, [r6, #0]
 800e752:	b30b      	cbz	r3, 800e798 <__sfp+0x68>
 800e754:	6836      	ldr	r6, [r6, #0]
 800e756:	e7f7      	b.n	800e748 <__sfp+0x18>
 800e758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e75c:	b9d5      	cbnz	r5, 800e794 <__sfp+0x64>
 800e75e:	4b16      	ldr	r3, [pc, #88]	; (800e7b8 <__sfp+0x88>)
 800e760:	60e3      	str	r3, [r4, #12]
 800e762:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e766:	6665      	str	r5, [r4, #100]	; 0x64
 800e768:	f000 f847 	bl	800e7fa <__retarget_lock_init_recursive>
 800e76c:	f7ff ff96 	bl	800e69c <__sfp_lock_release>
 800e770:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e774:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e778:	6025      	str	r5, [r4, #0]
 800e77a:	61a5      	str	r5, [r4, #24]
 800e77c:	2208      	movs	r2, #8
 800e77e:	4629      	mov	r1, r5
 800e780:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e784:	f7ff fb00 	bl	800dd88 <memset>
 800e788:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e78c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e790:	4620      	mov	r0, r4
 800e792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e794:	3468      	adds	r4, #104	; 0x68
 800e796:	e7d9      	b.n	800e74c <__sfp+0x1c>
 800e798:	2104      	movs	r1, #4
 800e79a:	4638      	mov	r0, r7
 800e79c:	f7ff ff62 	bl	800e664 <__sfmoreglue>
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	6030      	str	r0, [r6, #0]
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d1d5      	bne.n	800e754 <__sfp+0x24>
 800e7a8:	f7ff ff78 	bl	800e69c <__sfp_lock_release>
 800e7ac:	230c      	movs	r3, #12
 800e7ae:	603b      	str	r3, [r7, #0]
 800e7b0:	e7ee      	b.n	800e790 <__sfp+0x60>
 800e7b2:	bf00      	nop
 800e7b4:	080104e0 	.word	0x080104e0
 800e7b8:	ffff0001 	.word	0xffff0001

0800e7bc <_fwalk_reent>:
 800e7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7c0:	4606      	mov	r6, r0
 800e7c2:	4688      	mov	r8, r1
 800e7c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7c8:	2700      	movs	r7, #0
 800e7ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7ce:	f1b9 0901 	subs.w	r9, r9, #1
 800e7d2:	d505      	bpl.n	800e7e0 <_fwalk_reent+0x24>
 800e7d4:	6824      	ldr	r4, [r4, #0]
 800e7d6:	2c00      	cmp	r4, #0
 800e7d8:	d1f7      	bne.n	800e7ca <_fwalk_reent+0xe>
 800e7da:	4638      	mov	r0, r7
 800e7dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7e0:	89ab      	ldrh	r3, [r5, #12]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d907      	bls.n	800e7f6 <_fwalk_reent+0x3a>
 800e7e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	d003      	beq.n	800e7f6 <_fwalk_reent+0x3a>
 800e7ee:	4629      	mov	r1, r5
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	47c0      	blx	r8
 800e7f4:	4307      	orrs	r7, r0
 800e7f6:	3568      	adds	r5, #104	; 0x68
 800e7f8:	e7e9      	b.n	800e7ce <_fwalk_reent+0x12>

0800e7fa <__retarget_lock_init_recursive>:
 800e7fa:	4770      	bx	lr

0800e7fc <__retarget_lock_acquire_recursive>:
 800e7fc:	4770      	bx	lr

0800e7fe <__retarget_lock_release_recursive>:
 800e7fe:	4770      	bx	lr

0800e800 <__swhatbuf_r>:
 800e800:	b570      	push	{r4, r5, r6, lr}
 800e802:	460e      	mov	r6, r1
 800e804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e808:	2900      	cmp	r1, #0
 800e80a:	b096      	sub	sp, #88	; 0x58
 800e80c:	4614      	mov	r4, r2
 800e80e:	461d      	mov	r5, r3
 800e810:	da07      	bge.n	800e822 <__swhatbuf_r+0x22>
 800e812:	2300      	movs	r3, #0
 800e814:	602b      	str	r3, [r5, #0]
 800e816:	89b3      	ldrh	r3, [r6, #12]
 800e818:	061a      	lsls	r2, r3, #24
 800e81a:	d410      	bmi.n	800e83e <__swhatbuf_r+0x3e>
 800e81c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e820:	e00e      	b.n	800e840 <__swhatbuf_r+0x40>
 800e822:	466a      	mov	r2, sp
 800e824:	f000 fdba 	bl	800f39c <_fstat_r>
 800e828:	2800      	cmp	r0, #0
 800e82a:	dbf2      	blt.n	800e812 <__swhatbuf_r+0x12>
 800e82c:	9a01      	ldr	r2, [sp, #4]
 800e82e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e832:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e836:	425a      	negs	r2, r3
 800e838:	415a      	adcs	r2, r3
 800e83a:	602a      	str	r2, [r5, #0]
 800e83c:	e7ee      	b.n	800e81c <__swhatbuf_r+0x1c>
 800e83e:	2340      	movs	r3, #64	; 0x40
 800e840:	2000      	movs	r0, #0
 800e842:	6023      	str	r3, [r4, #0]
 800e844:	b016      	add	sp, #88	; 0x58
 800e846:	bd70      	pop	{r4, r5, r6, pc}

0800e848 <__smakebuf_r>:
 800e848:	898b      	ldrh	r3, [r1, #12]
 800e84a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e84c:	079d      	lsls	r5, r3, #30
 800e84e:	4606      	mov	r6, r0
 800e850:	460c      	mov	r4, r1
 800e852:	d507      	bpl.n	800e864 <__smakebuf_r+0x1c>
 800e854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e858:	6023      	str	r3, [r4, #0]
 800e85a:	6123      	str	r3, [r4, #16]
 800e85c:	2301      	movs	r3, #1
 800e85e:	6163      	str	r3, [r4, #20]
 800e860:	b002      	add	sp, #8
 800e862:	bd70      	pop	{r4, r5, r6, pc}
 800e864:	ab01      	add	r3, sp, #4
 800e866:	466a      	mov	r2, sp
 800e868:	f7ff ffca 	bl	800e800 <__swhatbuf_r>
 800e86c:	9900      	ldr	r1, [sp, #0]
 800e86e:	4605      	mov	r5, r0
 800e870:	4630      	mov	r0, r6
 800e872:	f000 f879 	bl	800e968 <_malloc_r>
 800e876:	b948      	cbnz	r0, 800e88c <__smakebuf_r+0x44>
 800e878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e87c:	059a      	lsls	r2, r3, #22
 800e87e:	d4ef      	bmi.n	800e860 <__smakebuf_r+0x18>
 800e880:	f023 0303 	bic.w	r3, r3, #3
 800e884:	f043 0302 	orr.w	r3, r3, #2
 800e888:	81a3      	strh	r3, [r4, #12]
 800e88a:	e7e3      	b.n	800e854 <__smakebuf_r+0xc>
 800e88c:	4b0d      	ldr	r3, [pc, #52]	; (800e8c4 <__smakebuf_r+0x7c>)
 800e88e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e890:	89a3      	ldrh	r3, [r4, #12]
 800e892:	6020      	str	r0, [r4, #0]
 800e894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e898:	81a3      	strh	r3, [r4, #12]
 800e89a:	9b00      	ldr	r3, [sp, #0]
 800e89c:	6163      	str	r3, [r4, #20]
 800e89e:	9b01      	ldr	r3, [sp, #4]
 800e8a0:	6120      	str	r0, [r4, #16]
 800e8a2:	b15b      	cbz	r3, 800e8bc <__smakebuf_r+0x74>
 800e8a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f000 fd89 	bl	800f3c0 <_isatty_r>
 800e8ae:	b128      	cbz	r0, 800e8bc <__smakebuf_r+0x74>
 800e8b0:	89a3      	ldrh	r3, [r4, #12]
 800e8b2:	f023 0303 	bic.w	r3, r3, #3
 800e8b6:	f043 0301 	orr.w	r3, r3, #1
 800e8ba:	81a3      	strh	r3, [r4, #12]
 800e8bc:	89a0      	ldrh	r0, [r4, #12]
 800e8be:	4305      	orrs	r5, r0
 800e8c0:	81a5      	strh	r5, [r4, #12]
 800e8c2:	e7cd      	b.n	800e860 <__smakebuf_r+0x18>
 800e8c4:	0800e659 	.word	0x0800e659

0800e8c8 <_free_r>:
 800e8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8ca:	2900      	cmp	r1, #0
 800e8cc:	d048      	beq.n	800e960 <_free_r+0x98>
 800e8ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8d2:	9001      	str	r0, [sp, #4]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f1a1 0404 	sub.w	r4, r1, #4
 800e8da:	bfb8      	it	lt
 800e8dc:	18e4      	addlt	r4, r4, r3
 800e8de:	f000 fdab 	bl	800f438 <__malloc_lock>
 800e8e2:	4a20      	ldr	r2, [pc, #128]	; (800e964 <_free_r+0x9c>)
 800e8e4:	9801      	ldr	r0, [sp, #4]
 800e8e6:	6813      	ldr	r3, [r2, #0]
 800e8e8:	4615      	mov	r5, r2
 800e8ea:	b933      	cbnz	r3, 800e8fa <_free_r+0x32>
 800e8ec:	6063      	str	r3, [r4, #4]
 800e8ee:	6014      	str	r4, [r2, #0]
 800e8f0:	b003      	add	sp, #12
 800e8f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8f6:	f000 bda5 	b.w	800f444 <__malloc_unlock>
 800e8fa:	42a3      	cmp	r3, r4
 800e8fc:	d90b      	bls.n	800e916 <_free_r+0x4e>
 800e8fe:	6821      	ldr	r1, [r4, #0]
 800e900:	1862      	adds	r2, r4, r1
 800e902:	4293      	cmp	r3, r2
 800e904:	bf04      	itt	eq
 800e906:	681a      	ldreq	r2, [r3, #0]
 800e908:	685b      	ldreq	r3, [r3, #4]
 800e90a:	6063      	str	r3, [r4, #4]
 800e90c:	bf04      	itt	eq
 800e90e:	1852      	addeq	r2, r2, r1
 800e910:	6022      	streq	r2, [r4, #0]
 800e912:	602c      	str	r4, [r5, #0]
 800e914:	e7ec      	b.n	800e8f0 <_free_r+0x28>
 800e916:	461a      	mov	r2, r3
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	b10b      	cbz	r3, 800e920 <_free_r+0x58>
 800e91c:	42a3      	cmp	r3, r4
 800e91e:	d9fa      	bls.n	800e916 <_free_r+0x4e>
 800e920:	6811      	ldr	r1, [r2, #0]
 800e922:	1855      	adds	r5, r2, r1
 800e924:	42a5      	cmp	r5, r4
 800e926:	d10b      	bne.n	800e940 <_free_r+0x78>
 800e928:	6824      	ldr	r4, [r4, #0]
 800e92a:	4421      	add	r1, r4
 800e92c:	1854      	adds	r4, r2, r1
 800e92e:	42a3      	cmp	r3, r4
 800e930:	6011      	str	r1, [r2, #0]
 800e932:	d1dd      	bne.n	800e8f0 <_free_r+0x28>
 800e934:	681c      	ldr	r4, [r3, #0]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	6053      	str	r3, [r2, #4]
 800e93a:	4421      	add	r1, r4
 800e93c:	6011      	str	r1, [r2, #0]
 800e93e:	e7d7      	b.n	800e8f0 <_free_r+0x28>
 800e940:	d902      	bls.n	800e948 <_free_r+0x80>
 800e942:	230c      	movs	r3, #12
 800e944:	6003      	str	r3, [r0, #0]
 800e946:	e7d3      	b.n	800e8f0 <_free_r+0x28>
 800e948:	6825      	ldr	r5, [r4, #0]
 800e94a:	1961      	adds	r1, r4, r5
 800e94c:	428b      	cmp	r3, r1
 800e94e:	bf04      	itt	eq
 800e950:	6819      	ldreq	r1, [r3, #0]
 800e952:	685b      	ldreq	r3, [r3, #4]
 800e954:	6063      	str	r3, [r4, #4]
 800e956:	bf04      	itt	eq
 800e958:	1949      	addeq	r1, r1, r5
 800e95a:	6021      	streq	r1, [r4, #0]
 800e95c:	6054      	str	r4, [r2, #4]
 800e95e:	e7c7      	b.n	800e8f0 <_free_r+0x28>
 800e960:	b003      	add	sp, #12
 800e962:	bd30      	pop	{r4, r5, pc}
 800e964:	20004f88 	.word	0x20004f88

0800e968 <_malloc_r>:
 800e968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96a:	1ccd      	adds	r5, r1, #3
 800e96c:	f025 0503 	bic.w	r5, r5, #3
 800e970:	3508      	adds	r5, #8
 800e972:	2d0c      	cmp	r5, #12
 800e974:	bf38      	it	cc
 800e976:	250c      	movcc	r5, #12
 800e978:	2d00      	cmp	r5, #0
 800e97a:	4606      	mov	r6, r0
 800e97c:	db01      	blt.n	800e982 <_malloc_r+0x1a>
 800e97e:	42a9      	cmp	r1, r5
 800e980:	d903      	bls.n	800e98a <_malloc_r+0x22>
 800e982:	230c      	movs	r3, #12
 800e984:	6033      	str	r3, [r6, #0]
 800e986:	2000      	movs	r0, #0
 800e988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e98a:	f000 fd55 	bl	800f438 <__malloc_lock>
 800e98e:	4921      	ldr	r1, [pc, #132]	; (800ea14 <_malloc_r+0xac>)
 800e990:	680a      	ldr	r2, [r1, #0]
 800e992:	4614      	mov	r4, r2
 800e994:	b99c      	cbnz	r4, 800e9be <_malloc_r+0x56>
 800e996:	4f20      	ldr	r7, [pc, #128]	; (800ea18 <_malloc_r+0xb0>)
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	b923      	cbnz	r3, 800e9a6 <_malloc_r+0x3e>
 800e99c:	4621      	mov	r1, r4
 800e99e:	4630      	mov	r0, r6
 800e9a0:	f000 fc86 	bl	800f2b0 <_sbrk_r>
 800e9a4:	6038      	str	r0, [r7, #0]
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	f000 fc81 	bl	800f2b0 <_sbrk_r>
 800e9ae:	1c43      	adds	r3, r0, #1
 800e9b0:	d123      	bne.n	800e9fa <_malloc_r+0x92>
 800e9b2:	230c      	movs	r3, #12
 800e9b4:	6033      	str	r3, [r6, #0]
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f000 fd44 	bl	800f444 <__malloc_unlock>
 800e9bc:	e7e3      	b.n	800e986 <_malloc_r+0x1e>
 800e9be:	6823      	ldr	r3, [r4, #0]
 800e9c0:	1b5b      	subs	r3, r3, r5
 800e9c2:	d417      	bmi.n	800e9f4 <_malloc_r+0x8c>
 800e9c4:	2b0b      	cmp	r3, #11
 800e9c6:	d903      	bls.n	800e9d0 <_malloc_r+0x68>
 800e9c8:	6023      	str	r3, [r4, #0]
 800e9ca:	441c      	add	r4, r3
 800e9cc:	6025      	str	r5, [r4, #0]
 800e9ce:	e004      	b.n	800e9da <_malloc_r+0x72>
 800e9d0:	6863      	ldr	r3, [r4, #4]
 800e9d2:	42a2      	cmp	r2, r4
 800e9d4:	bf0c      	ite	eq
 800e9d6:	600b      	streq	r3, [r1, #0]
 800e9d8:	6053      	strne	r3, [r2, #4]
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f000 fd32 	bl	800f444 <__malloc_unlock>
 800e9e0:	f104 000b 	add.w	r0, r4, #11
 800e9e4:	1d23      	adds	r3, r4, #4
 800e9e6:	f020 0007 	bic.w	r0, r0, #7
 800e9ea:	1ac2      	subs	r2, r0, r3
 800e9ec:	d0cc      	beq.n	800e988 <_malloc_r+0x20>
 800e9ee:	1a1b      	subs	r3, r3, r0
 800e9f0:	50a3      	str	r3, [r4, r2]
 800e9f2:	e7c9      	b.n	800e988 <_malloc_r+0x20>
 800e9f4:	4622      	mov	r2, r4
 800e9f6:	6864      	ldr	r4, [r4, #4]
 800e9f8:	e7cc      	b.n	800e994 <_malloc_r+0x2c>
 800e9fa:	1cc4      	adds	r4, r0, #3
 800e9fc:	f024 0403 	bic.w	r4, r4, #3
 800ea00:	42a0      	cmp	r0, r4
 800ea02:	d0e3      	beq.n	800e9cc <_malloc_r+0x64>
 800ea04:	1a21      	subs	r1, r4, r0
 800ea06:	4630      	mov	r0, r6
 800ea08:	f000 fc52 	bl	800f2b0 <_sbrk_r>
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	d1dd      	bne.n	800e9cc <_malloc_r+0x64>
 800ea10:	e7cf      	b.n	800e9b2 <_malloc_r+0x4a>
 800ea12:	bf00      	nop
 800ea14:	20004f88 	.word	0x20004f88
 800ea18:	20004f8c 	.word	0x20004f8c

0800ea1c <__ssputs_r>:
 800ea1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea20:	688e      	ldr	r6, [r1, #8]
 800ea22:	429e      	cmp	r6, r3
 800ea24:	4682      	mov	sl, r0
 800ea26:	460c      	mov	r4, r1
 800ea28:	4690      	mov	r8, r2
 800ea2a:	461f      	mov	r7, r3
 800ea2c:	d838      	bhi.n	800eaa0 <__ssputs_r+0x84>
 800ea2e:	898a      	ldrh	r2, [r1, #12]
 800ea30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea34:	d032      	beq.n	800ea9c <__ssputs_r+0x80>
 800ea36:	6825      	ldr	r5, [r4, #0]
 800ea38:	6909      	ldr	r1, [r1, #16]
 800ea3a:	eba5 0901 	sub.w	r9, r5, r1
 800ea3e:	6965      	ldr	r5, [r4, #20]
 800ea40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea48:	3301      	adds	r3, #1
 800ea4a:	444b      	add	r3, r9
 800ea4c:	106d      	asrs	r5, r5, #1
 800ea4e:	429d      	cmp	r5, r3
 800ea50:	bf38      	it	cc
 800ea52:	461d      	movcc	r5, r3
 800ea54:	0553      	lsls	r3, r2, #21
 800ea56:	d531      	bpl.n	800eabc <__ssputs_r+0xa0>
 800ea58:	4629      	mov	r1, r5
 800ea5a:	f7ff ff85 	bl	800e968 <_malloc_r>
 800ea5e:	4606      	mov	r6, r0
 800ea60:	b950      	cbnz	r0, 800ea78 <__ssputs_r+0x5c>
 800ea62:	230c      	movs	r3, #12
 800ea64:	f8ca 3000 	str.w	r3, [sl]
 800ea68:	89a3      	ldrh	r3, [r4, #12]
 800ea6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea6e:	81a3      	strh	r3, [r4, #12]
 800ea70:	f04f 30ff 	mov.w	r0, #4294967295
 800ea74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea78:	6921      	ldr	r1, [r4, #16]
 800ea7a:	464a      	mov	r2, r9
 800ea7c:	f7ff f976 	bl	800dd6c <memcpy>
 800ea80:	89a3      	ldrh	r3, [r4, #12]
 800ea82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea8a:	81a3      	strh	r3, [r4, #12]
 800ea8c:	6126      	str	r6, [r4, #16]
 800ea8e:	6165      	str	r5, [r4, #20]
 800ea90:	444e      	add	r6, r9
 800ea92:	eba5 0509 	sub.w	r5, r5, r9
 800ea96:	6026      	str	r6, [r4, #0]
 800ea98:	60a5      	str	r5, [r4, #8]
 800ea9a:	463e      	mov	r6, r7
 800ea9c:	42be      	cmp	r6, r7
 800ea9e:	d900      	bls.n	800eaa2 <__ssputs_r+0x86>
 800eaa0:	463e      	mov	r6, r7
 800eaa2:	4632      	mov	r2, r6
 800eaa4:	6820      	ldr	r0, [r4, #0]
 800eaa6:	4641      	mov	r1, r8
 800eaa8:	f000 fcac 	bl	800f404 <memmove>
 800eaac:	68a3      	ldr	r3, [r4, #8]
 800eaae:	6822      	ldr	r2, [r4, #0]
 800eab0:	1b9b      	subs	r3, r3, r6
 800eab2:	4432      	add	r2, r6
 800eab4:	60a3      	str	r3, [r4, #8]
 800eab6:	6022      	str	r2, [r4, #0]
 800eab8:	2000      	movs	r0, #0
 800eaba:	e7db      	b.n	800ea74 <__ssputs_r+0x58>
 800eabc:	462a      	mov	r2, r5
 800eabe:	f000 fcc7 	bl	800f450 <_realloc_r>
 800eac2:	4606      	mov	r6, r0
 800eac4:	2800      	cmp	r0, #0
 800eac6:	d1e1      	bne.n	800ea8c <__ssputs_r+0x70>
 800eac8:	6921      	ldr	r1, [r4, #16]
 800eaca:	4650      	mov	r0, sl
 800eacc:	f7ff fefc 	bl	800e8c8 <_free_r>
 800ead0:	e7c7      	b.n	800ea62 <__ssputs_r+0x46>
	...

0800ead4 <_svfiprintf_r>:
 800ead4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead8:	4698      	mov	r8, r3
 800eada:	898b      	ldrh	r3, [r1, #12]
 800eadc:	061b      	lsls	r3, r3, #24
 800eade:	b09d      	sub	sp, #116	; 0x74
 800eae0:	4607      	mov	r7, r0
 800eae2:	460d      	mov	r5, r1
 800eae4:	4614      	mov	r4, r2
 800eae6:	d50e      	bpl.n	800eb06 <_svfiprintf_r+0x32>
 800eae8:	690b      	ldr	r3, [r1, #16]
 800eaea:	b963      	cbnz	r3, 800eb06 <_svfiprintf_r+0x32>
 800eaec:	2140      	movs	r1, #64	; 0x40
 800eaee:	f7ff ff3b 	bl	800e968 <_malloc_r>
 800eaf2:	6028      	str	r0, [r5, #0]
 800eaf4:	6128      	str	r0, [r5, #16]
 800eaf6:	b920      	cbnz	r0, 800eb02 <_svfiprintf_r+0x2e>
 800eaf8:	230c      	movs	r3, #12
 800eafa:	603b      	str	r3, [r7, #0]
 800eafc:	f04f 30ff 	mov.w	r0, #4294967295
 800eb00:	e0d1      	b.n	800eca6 <_svfiprintf_r+0x1d2>
 800eb02:	2340      	movs	r3, #64	; 0x40
 800eb04:	616b      	str	r3, [r5, #20]
 800eb06:	2300      	movs	r3, #0
 800eb08:	9309      	str	r3, [sp, #36]	; 0x24
 800eb0a:	2320      	movs	r3, #32
 800eb0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb10:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb14:	2330      	movs	r3, #48	; 0x30
 800eb16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ecc0 <_svfiprintf_r+0x1ec>
 800eb1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb1e:	f04f 0901 	mov.w	r9, #1
 800eb22:	4623      	mov	r3, r4
 800eb24:	469a      	mov	sl, r3
 800eb26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb2a:	b10a      	cbz	r2, 800eb30 <_svfiprintf_r+0x5c>
 800eb2c:	2a25      	cmp	r2, #37	; 0x25
 800eb2e:	d1f9      	bne.n	800eb24 <_svfiprintf_r+0x50>
 800eb30:	ebba 0b04 	subs.w	fp, sl, r4
 800eb34:	d00b      	beq.n	800eb4e <_svfiprintf_r+0x7a>
 800eb36:	465b      	mov	r3, fp
 800eb38:	4622      	mov	r2, r4
 800eb3a:	4629      	mov	r1, r5
 800eb3c:	4638      	mov	r0, r7
 800eb3e:	f7ff ff6d 	bl	800ea1c <__ssputs_r>
 800eb42:	3001      	adds	r0, #1
 800eb44:	f000 80aa 	beq.w	800ec9c <_svfiprintf_r+0x1c8>
 800eb48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb4a:	445a      	add	r2, fp
 800eb4c:	9209      	str	r2, [sp, #36]	; 0x24
 800eb4e:	f89a 3000 	ldrb.w	r3, [sl]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f000 80a2 	beq.w	800ec9c <_svfiprintf_r+0x1c8>
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb62:	f10a 0a01 	add.w	sl, sl, #1
 800eb66:	9304      	str	r3, [sp, #16]
 800eb68:	9307      	str	r3, [sp, #28]
 800eb6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb6e:	931a      	str	r3, [sp, #104]	; 0x68
 800eb70:	4654      	mov	r4, sl
 800eb72:	2205      	movs	r2, #5
 800eb74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb78:	4851      	ldr	r0, [pc, #324]	; (800ecc0 <_svfiprintf_r+0x1ec>)
 800eb7a:	f7f1 fb41 	bl	8000200 <memchr>
 800eb7e:	9a04      	ldr	r2, [sp, #16]
 800eb80:	b9d8      	cbnz	r0, 800ebba <_svfiprintf_r+0xe6>
 800eb82:	06d0      	lsls	r0, r2, #27
 800eb84:	bf44      	itt	mi
 800eb86:	2320      	movmi	r3, #32
 800eb88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb8c:	0711      	lsls	r1, r2, #28
 800eb8e:	bf44      	itt	mi
 800eb90:	232b      	movmi	r3, #43	; 0x2b
 800eb92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb96:	f89a 3000 	ldrb.w	r3, [sl]
 800eb9a:	2b2a      	cmp	r3, #42	; 0x2a
 800eb9c:	d015      	beq.n	800ebca <_svfiprintf_r+0xf6>
 800eb9e:	9a07      	ldr	r2, [sp, #28]
 800eba0:	4654      	mov	r4, sl
 800eba2:	2000      	movs	r0, #0
 800eba4:	f04f 0c0a 	mov.w	ip, #10
 800eba8:	4621      	mov	r1, r4
 800ebaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebae:	3b30      	subs	r3, #48	; 0x30
 800ebb0:	2b09      	cmp	r3, #9
 800ebb2:	d94e      	bls.n	800ec52 <_svfiprintf_r+0x17e>
 800ebb4:	b1b0      	cbz	r0, 800ebe4 <_svfiprintf_r+0x110>
 800ebb6:	9207      	str	r2, [sp, #28]
 800ebb8:	e014      	b.n	800ebe4 <_svfiprintf_r+0x110>
 800ebba:	eba0 0308 	sub.w	r3, r0, r8
 800ebbe:	fa09 f303 	lsl.w	r3, r9, r3
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	9304      	str	r3, [sp, #16]
 800ebc6:	46a2      	mov	sl, r4
 800ebc8:	e7d2      	b.n	800eb70 <_svfiprintf_r+0x9c>
 800ebca:	9b03      	ldr	r3, [sp, #12]
 800ebcc:	1d19      	adds	r1, r3, #4
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	9103      	str	r1, [sp, #12]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	bfbb      	ittet	lt
 800ebd6:	425b      	neglt	r3, r3
 800ebd8:	f042 0202 	orrlt.w	r2, r2, #2
 800ebdc:	9307      	strge	r3, [sp, #28]
 800ebde:	9307      	strlt	r3, [sp, #28]
 800ebe0:	bfb8      	it	lt
 800ebe2:	9204      	strlt	r2, [sp, #16]
 800ebe4:	7823      	ldrb	r3, [r4, #0]
 800ebe6:	2b2e      	cmp	r3, #46	; 0x2e
 800ebe8:	d10c      	bne.n	800ec04 <_svfiprintf_r+0x130>
 800ebea:	7863      	ldrb	r3, [r4, #1]
 800ebec:	2b2a      	cmp	r3, #42	; 0x2a
 800ebee:	d135      	bne.n	800ec5c <_svfiprintf_r+0x188>
 800ebf0:	9b03      	ldr	r3, [sp, #12]
 800ebf2:	1d1a      	adds	r2, r3, #4
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	9203      	str	r2, [sp, #12]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	bfb8      	it	lt
 800ebfc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec00:	3402      	adds	r4, #2
 800ec02:	9305      	str	r3, [sp, #20]
 800ec04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ecd0 <_svfiprintf_r+0x1fc>
 800ec08:	7821      	ldrb	r1, [r4, #0]
 800ec0a:	2203      	movs	r2, #3
 800ec0c:	4650      	mov	r0, sl
 800ec0e:	f7f1 faf7 	bl	8000200 <memchr>
 800ec12:	b140      	cbz	r0, 800ec26 <_svfiprintf_r+0x152>
 800ec14:	2340      	movs	r3, #64	; 0x40
 800ec16:	eba0 000a 	sub.w	r0, r0, sl
 800ec1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ec1e:	9b04      	ldr	r3, [sp, #16]
 800ec20:	4303      	orrs	r3, r0
 800ec22:	3401      	adds	r4, #1
 800ec24:	9304      	str	r3, [sp, #16]
 800ec26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec2a:	4826      	ldr	r0, [pc, #152]	; (800ecc4 <_svfiprintf_r+0x1f0>)
 800ec2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec30:	2206      	movs	r2, #6
 800ec32:	f7f1 fae5 	bl	8000200 <memchr>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d038      	beq.n	800ecac <_svfiprintf_r+0x1d8>
 800ec3a:	4b23      	ldr	r3, [pc, #140]	; (800ecc8 <_svfiprintf_r+0x1f4>)
 800ec3c:	bb1b      	cbnz	r3, 800ec86 <_svfiprintf_r+0x1b2>
 800ec3e:	9b03      	ldr	r3, [sp, #12]
 800ec40:	3307      	adds	r3, #7
 800ec42:	f023 0307 	bic.w	r3, r3, #7
 800ec46:	3308      	adds	r3, #8
 800ec48:	9303      	str	r3, [sp, #12]
 800ec4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec4c:	4433      	add	r3, r6
 800ec4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec50:	e767      	b.n	800eb22 <_svfiprintf_r+0x4e>
 800ec52:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec56:	460c      	mov	r4, r1
 800ec58:	2001      	movs	r0, #1
 800ec5a:	e7a5      	b.n	800eba8 <_svfiprintf_r+0xd4>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	3401      	adds	r4, #1
 800ec60:	9305      	str	r3, [sp, #20]
 800ec62:	4619      	mov	r1, r3
 800ec64:	f04f 0c0a 	mov.w	ip, #10
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec6e:	3a30      	subs	r2, #48	; 0x30
 800ec70:	2a09      	cmp	r2, #9
 800ec72:	d903      	bls.n	800ec7c <_svfiprintf_r+0x1a8>
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d0c5      	beq.n	800ec04 <_svfiprintf_r+0x130>
 800ec78:	9105      	str	r1, [sp, #20]
 800ec7a:	e7c3      	b.n	800ec04 <_svfiprintf_r+0x130>
 800ec7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec80:	4604      	mov	r4, r0
 800ec82:	2301      	movs	r3, #1
 800ec84:	e7f0      	b.n	800ec68 <_svfiprintf_r+0x194>
 800ec86:	ab03      	add	r3, sp, #12
 800ec88:	9300      	str	r3, [sp, #0]
 800ec8a:	462a      	mov	r2, r5
 800ec8c:	4b0f      	ldr	r3, [pc, #60]	; (800eccc <_svfiprintf_r+0x1f8>)
 800ec8e:	a904      	add	r1, sp, #16
 800ec90:	4638      	mov	r0, r7
 800ec92:	f3af 8000 	nop.w
 800ec96:	1c42      	adds	r2, r0, #1
 800ec98:	4606      	mov	r6, r0
 800ec9a:	d1d6      	bne.n	800ec4a <_svfiprintf_r+0x176>
 800ec9c:	89ab      	ldrh	r3, [r5, #12]
 800ec9e:	065b      	lsls	r3, r3, #25
 800eca0:	f53f af2c 	bmi.w	800eafc <_svfiprintf_r+0x28>
 800eca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eca6:	b01d      	add	sp, #116	; 0x74
 800eca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecac:	ab03      	add	r3, sp, #12
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	462a      	mov	r2, r5
 800ecb2:	4b06      	ldr	r3, [pc, #24]	; (800eccc <_svfiprintf_r+0x1f8>)
 800ecb4:	a904      	add	r1, sp, #16
 800ecb6:	4638      	mov	r0, r7
 800ecb8:	f000 f9d4 	bl	800f064 <_printf_i>
 800ecbc:	e7eb      	b.n	800ec96 <_svfiprintf_r+0x1c2>
 800ecbe:	bf00      	nop
 800ecc0:	08010bdc 	.word	0x08010bdc
 800ecc4:	08010be6 	.word	0x08010be6
 800ecc8:	00000000 	.word	0x00000000
 800eccc:	0800ea1d 	.word	0x0800ea1d
 800ecd0:	08010be2 	.word	0x08010be2

0800ecd4 <__sfputc_r>:
 800ecd4:	6893      	ldr	r3, [r2, #8]
 800ecd6:	3b01      	subs	r3, #1
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	b410      	push	{r4}
 800ecdc:	6093      	str	r3, [r2, #8]
 800ecde:	da08      	bge.n	800ecf2 <__sfputc_r+0x1e>
 800ece0:	6994      	ldr	r4, [r2, #24]
 800ece2:	42a3      	cmp	r3, r4
 800ece4:	db01      	blt.n	800ecea <__sfputc_r+0x16>
 800ece6:	290a      	cmp	r1, #10
 800ece8:	d103      	bne.n	800ecf2 <__sfputc_r+0x1e>
 800ecea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecee:	f7ff bb0d 	b.w	800e30c <__swbuf_r>
 800ecf2:	6813      	ldr	r3, [r2, #0]
 800ecf4:	1c58      	adds	r0, r3, #1
 800ecf6:	6010      	str	r0, [r2, #0]
 800ecf8:	7019      	strb	r1, [r3, #0]
 800ecfa:	4608      	mov	r0, r1
 800ecfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed00:	4770      	bx	lr

0800ed02 <__sfputs_r>:
 800ed02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed04:	4606      	mov	r6, r0
 800ed06:	460f      	mov	r7, r1
 800ed08:	4614      	mov	r4, r2
 800ed0a:	18d5      	adds	r5, r2, r3
 800ed0c:	42ac      	cmp	r4, r5
 800ed0e:	d101      	bne.n	800ed14 <__sfputs_r+0x12>
 800ed10:	2000      	movs	r0, #0
 800ed12:	e007      	b.n	800ed24 <__sfputs_r+0x22>
 800ed14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed18:	463a      	mov	r2, r7
 800ed1a:	4630      	mov	r0, r6
 800ed1c:	f7ff ffda 	bl	800ecd4 <__sfputc_r>
 800ed20:	1c43      	adds	r3, r0, #1
 800ed22:	d1f3      	bne.n	800ed0c <__sfputs_r+0xa>
 800ed24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed28 <_vfiprintf_r>:
 800ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2c:	460d      	mov	r5, r1
 800ed2e:	b09d      	sub	sp, #116	; 0x74
 800ed30:	4614      	mov	r4, r2
 800ed32:	4698      	mov	r8, r3
 800ed34:	4606      	mov	r6, r0
 800ed36:	b118      	cbz	r0, 800ed40 <_vfiprintf_r+0x18>
 800ed38:	6983      	ldr	r3, [r0, #24]
 800ed3a:	b90b      	cbnz	r3, 800ed40 <_vfiprintf_r+0x18>
 800ed3c:	f7ff fcc0 	bl	800e6c0 <__sinit>
 800ed40:	4b89      	ldr	r3, [pc, #548]	; (800ef68 <_vfiprintf_r+0x240>)
 800ed42:	429d      	cmp	r5, r3
 800ed44:	d11b      	bne.n	800ed7e <_vfiprintf_r+0x56>
 800ed46:	6875      	ldr	r5, [r6, #4]
 800ed48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed4a:	07d9      	lsls	r1, r3, #31
 800ed4c:	d405      	bmi.n	800ed5a <_vfiprintf_r+0x32>
 800ed4e:	89ab      	ldrh	r3, [r5, #12]
 800ed50:	059a      	lsls	r2, r3, #22
 800ed52:	d402      	bmi.n	800ed5a <_vfiprintf_r+0x32>
 800ed54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed56:	f7ff fd51 	bl	800e7fc <__retarget_lock_acquire_recursive>
 800ed5a:	89ab      	ldrh	r3, [r5, #12]
 800ed5c:	071b      	lsls	r3, r3, #28
 800ed5e:	d501      	bpl.n	800ed64 <_vfiprintf_r+0x3c>
 800ed60:	692b      	ldr	r3, [r5, #16]
 800ed62:	b9eb      	cbnz	r3, 800eda0 <_vfiprintf_r+0x78>
 800ed64:	4629      	mov	r1, r5
 800ed66:	4630      	mov	r0, r6
 800ed68:	f7ff fb22 	bl	800e3b0 <__swsetup_r>
 800ed6c:	b1c0      	cbz	r0, 800eda0 <_vfiprintf_r+0x78>
 800ed6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed70:	07dc      	lsls	r4, r3, #31
 800ed72:	d50e      	bpl.n	800ed92 <_vfiprintf_r+0x6a>
 800ed74:	f04f 30ff 	mov.w	r0, #4294967295
 800ed78:	b01d      	add	sp, #116	; 0x74
 800ed7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7e:	4b7b      	ldr	r3, [pc, #492]	; (800ef6c <_vfiprintf_r+0x244>)
 800ed80:	429d      	cmp	r5, r3
 800ed82:	d101      	bne.n	800ed88 <_vfiprintf_r+0x60>
 800ed84:	68b5      	ldr	r5, [r6, #8]
 800ed86:	e7df      	b.n	800ed48 <_vfiprintf_r+0x20>
 800ed88:	4b79      	ldr	r3, [pc, #484]	; (800ef70 <_vfiprintf_r+0x248>)
 800ed8a:	429d      	cmp	r5, r3
 800ed8c:	bf08      	it	eq
 800ed8e:	68f5      	ldreq	r5, [r6, #12]
 800ed90:	e7da      	b.n	800ed48 <_vfiprintf_r+0x20>
 800ed92:	89ab      	ldrh	r3, [r5, #12]
 800ed94:	0598      	lsls	r0, r3, #22
 800ed96:	d4ed      	bmi.n	800ed74 <_vfiprintf_r+0x4c>
 800ed98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed9a:	f7ff fd30 	bl	800e7fe <__retarget_lock_release_recursive>
 800ed9e:	e7e9      	b.n	800ed74 <_vfiprintf_r+0x4c>
 800eda0:	2300      	movs	r3, #0
 800eda2:	9309      	str	r3, [sp, #36]	; 0x24
 800eda4:	2320      	movs	r3, #32
 800eda6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800edae:	2330      	movs	r3, #48	; 0x30
 800edb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef74 <_vfiprintf_r+0x24c>
 800edb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edb8:	f04f 0901 	mov.w	r9, #1
 800edbc:	4623      	mov	r3, r4
 800edbe:	469a      	mov	sl, r3
 800edc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edc4:	b10a      	cbz	r2, 800edca <_vfiprintf_r+0xa2>
 800edc6:	2a25      	cmp	r2, #37	; 0x25
 800edc8:	d1f9      	bne.n	800edbe <_vfiprintf_r+0x96>
 800edca:	ebba 0b04 	subs.w	fp, sl, r4
 800edce:	d00b      	beq.n	800ede8 <_vfiprintf_r+0xc0>
 800edd0:	465b      	mov	r3, fp
 800edd2:	4622      	mov	r2, r4
 800edd4:	4629      	mov	r1, r5
 800edd6:	4630      	mov	r0, r6
 800edd8:	f7ff ff93 	bl	800ed02 <__sfputs_r>
 800eddc:	3001      	adds	r0, #1
 800edde:	f000 80aa 	beq.w	800ef36 <_vfiprintf_r+0x20e>
 800ede2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ede4:	445a      	add	r2, fp
 800ede6:	9209      	str	r2, [sp, #36]	; 0x24
 800ede8:	f89a 3000 	ldrb.w	r3, [sl]
 800edec:	2b00      	cmp	r3, #0
 800edee:	f000 80a2 	beq.w	800ef36 <_vfiprintf_r+0x20e>
 800edf2:	2300      	movs	r3, #0
 800edf4:	f04f 32ff 	mov.w	r2, #4294967295
 800edf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edfc:	f10a 0a01 	add.w	sl, sl, #1
 800ee00:	9304      	str	r3, [sp, #16]
 800ee02:	9307      	str	r3, [sp, #28]
 800ee04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee08:	931a      	str	r3, [sp, #104]	; 0x68
 800ee0a:	4654      	mov	r4, sl
 800ee0c:	2205      	movs	r2, #5
 800ee0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee12:	4858      	ldr	r0, [pc, #352]	; (800ef74 <_vfiprintf_r+0x24c>)
 800ee14:	f7f1 f9f4 	bl	8000200 <memchr>
 800ee18:	9a04      	ldr	r2, [sp, #16]
 800ee1a:	b9d8      	cbnz	r0, 800ee54 <_vfiprintf_r+0x12c>
 800ee1c:	06d1      	lsls	r1, r2, #27
 800ee1e:	bf44      	itt	mi
 800ee20:	2320      	movmi	r3, #32
 800ee22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee26:	0713      	lsls	r3, r2, #28
 800ee28:	bf44      	itt	mi
 800ee2a:	232b      	movmi	r3, #43	; 0x2b
 800ee2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee30:	f89a 3000 	ldrb.w	r3, [sl]
 800ee34:	2b2a      	cmp	r3, #42	; 0x2a
 800ee36:	d015      	beq.n	800ee64 <_vfiprintf_r+0x13c>
 800ee38:	9a07      	ldr	r2, [sp, #28]
 800ee3a:	4654      	mov	r4, sl
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	f04f 0c0a 	mov.w	ip, #10
 800ee42:	4621      	mov	r1, r4
 800ee44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee48:	3b30      	subs	r3, #48	; 0x30
 800ee4a:	2b09      	cmp	r3, #9
 800ee4c:	d94e      	bls.n	800eeec <_vfiprintf_r+0x1c4>
 800ee4e:	b1b0      	cbz	r0, 800ee7e <_vfiprintf_r+0x156>
 800ee50:	9207      	str	r2, [sp, #28]
 800ee52:	e014      	b.n	800ee7e <_vfiprintf_r+0x156>
 800ee54:	eba0 0308 	sub.w	r3, r0, r8
 800ee58:	fa09 f303 	lsl.w	r3, r9, r3
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	9304      	str	r3, [sp, #16]
 800ee60:	46a2      	mov	sl, r4
 800ee62:	e7d2      	b.n	800ee0a <_vfiprintf_r+0xe2>
 800ee64:	9b03      	ldr	r3, [sp, #12]
 800ee66:	1d19      	adds	r1, r3, #4
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	9103      	str	r1, [sp, #12]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	bfbb      	ittet	lt
 800ee70:	425b      	neglt	r3, r3
 800ee72:	f042 0202 	orrlt.w	r2, r2, #2
 800ee76:	9307      	strge	r3, [sp, #28]
 800ee78:	9307      	strlt	r3, [sp, #28]
 800ee7a:	bfb8      	it	lt
 800ee7c:	9204      	strlt	r2, [sp, #16]
 800ee7e:	7823      	ldrb	r3, [r4, #0]
 800ee80:	2b2e      	cmp	r3, #46	; 0x2e
 800ee82:	d10c      	bne.n	800ee9e <_vfiprintf_r+0x176>
 800ee84:	7863      	ldrb	r3, [r4, #1]
 800ee86:	2b2a      	cmp	r3, #42	; 0x2a
 800ee88:	d135      	bne.n	800eef6 <_vfiprintf_r+0x1ce>
 800ee8a:	9b03      	ldr	r3, [sp, #12]
 800ee8c:	1d1a      	adds	r2, r3, #4
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	9203      	str	r2, [sp, #12]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	bfb8      	it	lt
 800ee96:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee9a:	3402      	adds	r4, #2
 800ee9c:	9305      	str	r3, [sp, #20]
 800ee9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef84 <_vfiprintf_r+0x25c>
 800eea2:	7821      	ldrb	r1, [r4, #0]
 800eea4:	2203      	movs	r2, #3
 800eea6:	4650      	mov	r0, sl
 800eea8:	f7f1 f9aa 	bl	8000200 <memchr>
 800eeac:	b140      	cbz	r0, 800eec0 <_vfiprintf_r+0x198>
 800eeae:	2340      	movs	r3, #64	; 0x40
 800eeb0:	eba0 000a 	sub.w	r0, r0, sl
 800eeb4:	fa03 f000 	lsl.w	r0, r3, r0
 800eeb8:	9b04      	ldr	r3, [sp, #16]
 800eeba:	4303      	orrs	r3, r0
 800eebc:	3401      	adds	r4, #1
 800eebe:	9304      	str	r3, [sp, #16]
 800eec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eec4:	482c      	ldr	r0, [pc, #176]	; (800ef78 <_vfiprintf_r+0x250>)
 800eec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eeca:	2206      	movs	r2, #6
 800eecc:	f7f1 f998 	bl	8000200 <memchr>
 800eed0:	2800      	cmp	r0, #0
 800eed2:	d03f      	beq.n	800ef54 <_vfiprintf_r+0x22c>
 800eed4:	4b29      	ldr	r3, [pc, #164]	; (800ef7c <_vfiprintf_r+0x254>)
 800eed6:	bb1b      	cbnz	r3, 800ef20 <_vfiprintf_r+0x1f8>
 800eed8:	9b03      	ldr	r3, [sp, #12]
 800eeda:	3307      	adds	r3, #7
 800eedc:	f023 0307 	bic.w	r3, r3, #7
 800eee0:	3308      	adds	r3, #8
 800eee2:	9303      	str	r3, [sp, #12]
 800eee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eee6:	443b      	add	r3, r7
 800eee8:	9309      	str	r3, [sp, #36]	; 0x24
 800eeea:	e767      	b.n	800edbc <_vfiprintf_r+0x94>
 800eeec:	fb0c 3202 	mla	r2, ip, r2, r3
 800eef0:	460c      	mov	r4, r1
 800eef2:	2001      	movs	r0, #1
 800eef4:	e7a5      	b.n	800ee42 <_vfiprintf_r+0x11a>
 800eef6:	2300      	movs	r3, #0
 800eef8:	3401      	adds	r4, #1
 800eefa:	9305      	str	r3, [sp, #20]
 800eefc:	4619      	mov	r1, r3
 800eefe:	f04f 0c0a 	mov.w	ip, #10
 800ef02:	4620      	mov	r0, r4
 800ef04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef08:	3a30      	subs	r2, #48	; 0x30
 800ef0a:	2a09      	cmp	r2, #9
 800ef0c:	d903      	bls.n	800ef16 <_vfiprintf_r+0x1ee>
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d0c5      	beq.n	800ee9e <_vfiprintf_r+0x176>
 800ef12:	9105      	str	r1, [sp, #20]
 800ef14:	e7c3      	b.n	800ee9e <_vfiprintf_r+0x176>
 800ef16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e7f0      	b.n	800ef02 <_vfiprintf_r+0x1da>
 800ef20:	ab03      	add	r3, sp, #12
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	462a      	mov	r2, r5
 800ef26:	4b16      	ldr	r3, [pc, #88]	; (800ef80 <_vfiprintf_r+0x258>)
 800ef28:	a904      	add	r1, sp, #16
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	f3af 8000 	nop.w
 800ef30:	4607      	mov	r7, r0
 800ef32:	1c78      	adds	r0, r7, #1
 800ef34:	d1d6      	bne.n	800eee4 <_vfiprintf_r+0x1bc>
 800ef36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef38:	07d9      	lsls	r1, r3, #31
 800ef3a:	d405      	bmi.n	800ef48 <_vfiprintf_r+0x220>
 800ef3c:	89ab      	ldrh	r3, [r5, #12]
 800ef3e:	059a      	lsls	r2, r3, #22
 800ef40:	d402      	bmi.n	800ef48 <_vfiprintf_r+0x220>
 800ef42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef44:	f7ff fc5b 	bl	800e7fe <__retarget_lock_release_recursive>
 800ef48:	89ab      	ldrh	r3, [r5, #12]
 800ef4a:	065b      	lsls	r3, r3, #25
 800ef4c:	f53f af12 	bmi.w	800ed74 <_vfiprintf_r+0x4c>
 800ef50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef52:	e711      	b.n	800ed78 <_vfiprintf_r+0x50>
 800ef54:	ab03      	add	r3, sp, #12
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	462a      	mov	r2, r5
 800ef5a:	4b09      	ldr	r3, [pc, #36]	; (800ef80 <_vfiprintf_r+0x258>)
 800ef5c:	a904      	add	r1, sp, #16
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f000 f880 	bl	800f064 <_printf_i>
 800ef64:	e7e4      	b.n	800ef30 <_vfiprintf_r+0x208>
 800ef66:	bf00      	nop
 800ef68:	08010b9c 	.word	0x08010b9c
 800ef6c:	08010bbc 	.word	0x08010bbc
 800ef70:	08010b7c 	.word	0x08010b7c
 800ef74:	08010bdc 	.word	0x08010bdc
 800ef78:	08010be6 	.word	0x08010be6
 800ef7c:	00000000 	.word	0x00000000
 800ef80:	0800ed03 	.word	0x0800ed03
 800ef84:	08010be2 	.word	0x08010be2

0800ef88 <_printf_common>:
 800ef88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef8c:	4616      	mov	r6, r2
 800ef8e:	4699      	mov	r9, r3
 800ef90:	688a      	ldr	r2, [r1, #8]
 800ef92:	690b      	ldr	r3, [r1, #16]
 800ef94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	bfb8      	it	lt
 800ef9c:	4613      	movlt	r3, r2
 800ef9e:	6033      	str	r3, [r6, #0]
 800efa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efa4:	4607      	mov	r7, r0
 800efa6:	460c      	mov	r4, r1
 800efa8:	b10a      	cbz	r2, 800efae <_printf_common+0x26>
 800efaa:	3301      	adds	r3, #1
 800efac:	6033      	str	r3, [r6, #0]
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	0699      	lsls	r1, r3, #26
 800efb2:	bf42      	ittt	mi
 800efb4:	6833      	ldrmi	r3, [r6, #0]
 800efb6:	3302      	addmi	r3, #2
 800efb8:	6033      	strmi	r3, [r6, #0]
 800efba:	6825      	ldr	r5, [r4, #0]
 800efbc:	f015 0506 	ands.w	r5, r5, #6
 800efc0:	d106      	bne.n	800efd0 <_printf_common+0x48>
 800efc2:	f104 0a19 	add.w	sl, r4, #25
 800efc6:	68e3      	ldr	r3, [r4, #12]
 800efc8:	6832      	ldr	r2, [r6, #0]
 800efca:	1a9b      	subs	r3, r3, r2
 800efcc:	42ab      	cmp	r3, r5
 800efce:	dc26      	bgt.n	800f01e <_printf_common+0x96>
 800efd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efd4:	1e13      	subs	r3, r2, #0
 800efd6:	6822      	ldr	r2, [r4, #0]
 800efd8:	bf18      	it	ne
 800efda:	2301      	movne	r3, #1
 800efdc:	0692      	lsls	r2, r2, #26
 800efde:	d42b      	bmi.n	800f038 <_printf_common+0xb0>
 800efe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efe4:	4649      	mov	r1, r9
 800efe6:	4638      	mov	r0, r7
 800efe8:	47c0      	blx	r8
 800efea:	3001      	adds	r0, #1
 800efec:	d01e      	beq.n	800f02c <_printf_common+0xa4>
 800efee:	6823      	ldr	r3, [r4, #0]
 800eff0:	68e5      	ldr	r5, [r4, #12]
 800eff2:	6832      	ldr	r2, [r6, #0]
 800eff4:	f003 0306 	and.w	r3, r3, #6
 800eff8:	2b04      	cmp	r3, #4
 800effa:	bf08      	it	eq
 800effc:	1aad      	subeq	r5, r5, r2
 800effe:	68a3      	ldr	r3, [r4, #8]
 800f000:	6922      	ldr	r2, [r4, #16]
 800f002:	bf0c      	ite	eq
 800f004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f008:	2500      	movne	r5, #0
 800f00a:	4293      	cmp	r3, r2
 800f00c:	bfc4      	itt	gt
 800f00e:	1a9b      	subgt	r3, r3, r2
 800f010:	18ed      	addgt	r5, r5, r3
 800f012:	2600      	movs	r6, #0
 800f014:	341a      	adds	r4, #26
 800f016:	42b5      	cmp	r5, r6
 800f018:	d11a      	bne.n	800f050 <_printf_common+0xc8>
 800f01a:	2000      	movs	r0, #0
 800f01c:	e008      	b.n	800f030 <_printf_common+0xa8>
 800f01e:	2301      	movs	r3, #1
 800f020:	4652      	mov	r2, sl
 800f022:	4649      	mov	r1, r9
 800f024:	4638      	mov	r0, r7
 800f026:	47c0      	blx	r8
 800f028:	3001      	adds	r0, #1
 800f02a:	d103      	bne.n	800f034 <_printf_common+0xac>
 800f02c:	f04f 30ff 	mov.w	r0, #4294967295
 800f030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f034:	3501      	adds	r5, #1
 800f036:	e7c6      	b.n	800efc6 <_printf_common+0x3e>
 800f038:	18e1      	adds	r1, r4, r3
 800f03a:	1c5a      	adds	r2, r3, #1
 800f03c:	2030      	movs	r0, #48	; 0x30
 800f03e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f042:	4422      	add	r2, r4
 800f044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f04c:	3302      	adds	r3, #2
 800f04e:	e7c7      	b.n	800efe0 <_printf_common+0x58>
 800f050:	2301      	movs	r3, #1
 800f052:	4622      	mov	r2, r4
 800f054:	4649      	mov	r1, r9
 800f056:	4638      	mov	r0, r7
 800f058:	47c0      	blx	r8
 800f05a:	3001      	adds	r0, #1
 800f05c:	d0e6      	beq.n	800f02c <_printf_common+0xa4>
 800f05e:	3601      	adds	r6, #1
 800f060:	e7d9      	b.n	800f016 <_printf_common+0x8e>
	...

0800f064 <_printf_i>:
 800f064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f068:	460c      	mov	r4, r1
 800f06a:	4691      	mov	r9, r2
 800f06c:	7e27      	ldrb	r7, [r4, #24]
 800f06e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f070:	2f78      	cmp	r7, #120	; 0x78
 800f072:	4680      	mov	r8, r0
 800f074:	469a      	mov	sl, r3
 800f076:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f07a:	d807      	bhi.n	800f08c <_printf_i+0x28>
 800f07c:	2f62      	cmp	r7, #98	; 0x62
 800f07e:	d80a      	bhi.n	800f096 <_printf_i+0x32>
 800f080:	2f00      	cmp	r7, #0
 800f082:	f000 80d8 	beq.w	800f236 <_printf_i+0x1d2>
 800f086:	2f58      	cmp	r7, #88	; 0x58
 800f088:	f000 80a3 	beq.w	800f1d2 <_printf_i+0x16e>
 800f08c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f094:	e03a      	b.n	800f10c <_printf_i+0xa8>
 800f096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f09a:	2b15      	cmp	r3, #21
 800f09c:	d8f6      	bhi.n	800f08c <_printf_i+0x28>
 800f09e:	a001      	add	r0, pc, #4	; (adr r0, 800f0a4 <_printf_i+0x40>)
 800f0a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f0a4:	0800f0fd 	.word	0x0800f0fd
 800f0a8:	0800f111 	.word	0x0800f111
 800f0ac:	0800f08d 	.word	0x0800f08d
 800f0b0:	0800f08d 	.word	0x0800f08d
 800f0b4:	0800f08d 	.word	0x0800f08d
 800f0b8:	0800f08d 	.word	0x0800f08d
 800f0bc:	0800f111 	.word	0x0800f111
 800f0c0:	0800f08d 	.word	0x0800f08d
 800f0c4:	0800f08d 	.word	0x0800f08d
 800f0c8:	0800f08d 	.word	0x0800f08d
 800f0cc:	0800f08d 	.word	0x0800f08d
 800f0d0:	0800f21d 	.word	0x0800f21d
 800f0d4:	0800f141 	.word	0x0800f141
 800f0d8:	0800f1ff 	.word	0x0800f1ff
 800f0dc:	0800f08d 	.word	0x0800f08d
 800f0e0:	0800f08d 	.word	0x0800f08d
 800f0e4:	0800f23f 	.word	0x0800f23f
 800f0e8:	0800f08d 	.word	0x0800f08d
 800f0ec:	0800f141 	.word	0x0800f141
 800f0f0:	0800f08d 	.word	0x0800f08d
 800f0f4:	0800f08d 	.word	0x0800f08d
 800f0f8:	0800f207 	.word	0x0800f207
 800f0fc:	680b      	ldr	r3, [r1, #0]
 800f0fe:	1d1a      	adds	r2, r3, #4
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	600a      	str	r2, [r1, #0]
 800f104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f10c:	2301      	movs	r3, #1
 800f10e:	e0a3      	b.n	800f258 <_printf_i+0x1f4>
 800f110:	6825      	ldr	r5, [r4, #0]
 800f112:	6808      	ldr	r0, [r1, #0]
 800f114:	062e      	lsls	r6, r5, #24
 800f116:	f100 0304 	add.w	r3, r0, #4
 800f11a:	d50a      	bpl.n	800f132 <_printf_i+0xce>
 800f11c:	6805      	ldr	r5, [r0, #0]
 800f11e:	600b      	str	r3, [r1, #0]
 800f120:	2d00      	cmp	r5, #0
 800f122:	da03      	bge.n	800f12c <_printf_i+0xc8>
 800f124:	232d      	movs	r3, #45	; 0x2d
 800f126:	426d      	negs	r5, r5
 800f128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f12c:	485e      	ldr	r0, [pc, #376]	; (800f2a8 <_printf_i+0x244>)
 800f12e:	230a      	movs	r3, #10
 800f130:	e019      	b.n	800f166 <_printf_i+0x102>
 800f132:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f136:	6805      	ldr	r5, [r0, #0]
 800f138:	600b      	str	r3, [r1, #0]
 800f13a:	bf18      	it	ne
 800f13c:	b22d      	sxthne	r5, r5
 800f13e:	e7ef      	b.n	800f120 <_printf_i+0xbc>
 800f140:	680b      	ldr	r3, [r1, #0]
 800f142:	6825      	ldr	r5, [r4, #0]
 800f144:	1d18      	adds	r0, r3, #4
 800f146:	6008      	str	r0, [r1, #0]
 800f148:	0628      	lsls	r0, r5, #24
 800f14a:	d501      	bpl.n	800f150 <_printf_i+0xec>
 800f14c:	681d      	ldr	r5, [r3, #0]
 800f14e:	e002      	b.n	800f156 <_printf_i+0xf2>
 800f150:	0669      	lsls	r1, r5, #25
 800f152:	d5fb      	bpl.n	800f14c <_printf_i+0xe8>
 800f154:	881d      	ldrh	r5, [r3, #0]
 800f156:	4854      	ldr	r0, [pc, #336]	; (800f2a8 <_printf_i+0x244>)
 800f158:	2f6f      	cmp	r7, #111	; 0x6f
 800f15a:	bf0c      	ite	eq
 800f15c:	2308      	moveq	r3, #8
 800f15e:	230a      	movne	r3, #10
 800f160:	2100      	movs	r1, #0
 800f162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f166:	6866      	ldr	r6, [r4, #4]
 800f168:	60a6      	str	r6, [r4, #8]
 800f16a:	2e00      	cmp	r6, #0
 800f16c:	bfa2      	ittt	ge
 800f16e:	6821      	ldrge	r1, [r4, #0]
 800f170:	f021 0104 	bicge.w	r1, r1, #4
 800f174:	6021      	strge	r1, [r4, #0]
 800f176:	b90d      	cbnz	r5, 800f17c <_printf_i+0x118>
 800f178:	2e00      	cmp	r6, #0
 800f17a:	d04d      	beq.n	800f218 <_printf_i+0x1b4>
 800f17c:	4616      	mov	r6, r2
 800f17e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f182:	fb03 5711 	mls	r7, r3, r1, r5
 800f186:	5dc7      	ldrb	r7, [r0, r7]
 800f188:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f18c:	462f      	mov	r7, r5
 800f18e:	42bb      	cmp	r3, r7
 800f190:	460d      	mov	r5, r1
 800f192:	d9f4      	bls.n	800f17e <_printf_i+0x11a>
 800f194:	2b08      	cmp	r3, #8
 800f196:	d10b      	bne.n	800f1b0 <_printf_i+0x14c>
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	07df      	lsls	r7, r3, #31
 800f19c:	d508      	bpl.n	800f1b0 <_printf_i+0x14c>
 800f19e:	6923      	ldr	r3, [r4, #16]
 800f1a0:	6861      	ldr	r1, [r4, #4]
 800f1a2:	4299      	cmp	r1, r3
 800f1a4:	bfde      	ittt	le
 800f1a6:	2330      	movle	r3, #48	; 0x30
 800f1a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f1b0:	1b92      	subs	r2, r2, r6
 800f1b2:	6122      	str	r2, [r4, #16]
 800f1b4:	f8cd a000 	str.w	sl, [sp]
 800f1b8:	464b      	mov	r3, r9
 800f1ba:	aa03      	add	r2, sp, #12
 800f1bc:	4621      	mov	r1, r4
 800f1be:	4640      	mov	r0, r8
 800f1c0:	f7ff fee2 	bl	800ef88 <_printf_common>
 800f1c4:	3001      	adds	r0, #1
 800f1c6:	d14c      	bne.n	800f262 <_printf_i+0x1fe>
 800f1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1cc:	b004      	add	sp, #16
 800f1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1d2:	4835      	ldr	r0, [pc, #212]	; (800f2a8 <_printf_i+0x244>)
 800f1d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f1d8:	6823      	ldr	r3, [r4, #0]
 800f1da:	680e      	ldr	r6, [r1, #0]
 800f1dc:	061f      	lsls	r7, r3, #24
 800f1de:	f856 5b04 	ldr.w	r5, [r6], #4
 800f1e2:	600e      	str	r6, [r1, #0]
 800f1e4:	d514      	bpl.n	800f210 <_printf_i+0x1ac>
 800f1e6:	07d9      	lsls	r1, r3, #31
 800f1e8:	bf44      	itt	mi
 800f1ea:	f043 0320 	orrmi.w	r3, r3, #32
 800f1ee:	6023      	strmi	r3, [r4, #0]
 800f1f0:	b91d      	cbnz	r5, 800f1fa <_printf_i+0x196>
 800f1f2:	6823      	ldr	r3, [r4, #0]
 800f1f4:	f023 0320 	bic.w	r3, r3, #32
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	2310      	movs	r3, #16
 800f1fc:	e7b0      	b.n	800f160 <_printf_i+0xfc>
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	f043 0320 	orr.w	r3, r3, #32
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	2378      	movs	r3, #120	; 0x78
 800f208:	4828      	ldr	r0, [pc, #160]	; (800f2ac <_printf_i+0x248>)
 800f20a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f20e:	e7e3      	b.n	800f1d8 <_printf_i+0x174>
 800f210:	065e      	lsls	r6, r3, #25
 800f212:	bf48      	it	mi
 800f214:	b2ad      	uxthmi	r5, r5
 800f216:	e7e6      	b.n	800f1e6 <_printf_i+0x182>
 800f218:	4616      	mov	r6, r2
 800f21a:	e7bb      	b.n	800f194 <_printf_i+0x130>
 800f21c:	680b      	ldr	r3, [r1, #0]
 800f21e:	6826      	ldr	r6, [r4, #0]
 800f220:	6960      	ldr	r0, [r4, #20]
 800f222:	1d1d      	adds	r5, r3, #4
 800f224:	600d      	str	r5, [r1, #0]
 800f226:	0635      	lsls	r5, r6, #24
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	d501      	bpl.n	800f230 <_printf_i+0x1cc>
 800f22c:	6018      	str	r0, [r3, #0]
 800f22e:	e002      	b.n	800f236 <_printf_i+0x1d2>
 800f230:	0671      	lsls	r1, r6, #25
 800f232:	d5fb      	bpl.n	800f22c <_printf_i+0x1c8>
 800f234:	8018      	strh	r0, [r3, #0]
 800f236:	2300      	movs	r3, #0
 800f238:	6123      	str	r3, [r4, #16]
 800f23a:	4616      	mov	r6, r2
 800f23c:	e7ba      	b.n	800f1b4 <_printf_i+0x150>
 800f23e:	680b      	ldr	r3, [r1, #0]
 800f240:	1d1a      	adds	r2, r3, #4
 800f242:	600a      	str	r2, [r1, #0]
 800f244:	681e      	ldr	r6, [r3, #0]
 800f246:	6862      	ldr	r2, [r4, #4]
 800f248:	2100      	movs	r1, #0
 800f24a:	4630      	mov	r0, r6
 800f24c:	f7f0 ffd8 	bl	8000200 <memchr>
 800f250:	b108      	cbz	r0, 800f256 <_printf_i+0x1f2>
 800f252:	1b80      	subs	r0, r0, r6
 800f254:	6060      	str	r0, [r4, #4]
 800f256:	6863      	ldr	r3, [r4, #4]
 800f258:	6123      	str	r3, [r4, #16]
 800f25a:	2300      	movs	r3, #0
 800f25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f260:	e7a8      	b.n	800f1b4 <_printf_i+0x150>
 800f262:	6923      	ldr	r3, [r4, #16]
 800f264:	4632      	mov	r2, r6
 800f266:	4649      	mov	r1, r9
 800f268:	4640      	mov	r0, r8
 800f26a:	47d0      	blx	sl
 800f26c:	3001      	adds	r0, #1
 800f26e:	d0ab      	beq.n	800f1c8 <_printf_i+0x164>
 800f270:	6823      	ldr	r3, [r4, #0]
 800f272:	079b      	lsls	r3, r3, #30
 800f274:	d413      	bmi.n	800f29e <_printf_i+0x23a>
 800f276:	68e0      	ldr	r0, [r4, #12]
 800f278:	9b03      	ldr	r3, [sp, #12]
 800f27a:	4298      	cmp	r0, r3
 800f27c:	bfb8      	it	lt
 800f27e:	4618      	movlt	r0, r3
 800f280:	e7a4      	b.n	800f1cc <_printf_i+0x168>
 800f282:	2301      	movs	r3, #1
 800f284:	4632      	mov	r2, r6
 800f286:	4649      	mov	r1, r9
 800f288:	4640      	mov	r0, r8
 800f28a:	47d0      	blx	sl
 800f28c:	3001      	adds	r0, #1
 800f28e:	d09b      	beq.n	800f1c8 <_printf_i+0x164>
 800f290:	3501      	adds	r5, #1
 800f292:	68e3      	ldr	r3, [r4, #12]
 800f294:	9903      	ldr	r1, [sp, #12]
 800f296:	1a5b      	subs	r3, r3, r1
 800f298:	42ab      	cmp	r3, r5
 800f29a:	dcf2      	bgt.n	800f282 <_printf_i+0x21e>
 800f29c:	e7eb      	b.n	800f276 <_printf_i+0x212>
 800f29e:	2500      	movs	r5, #0
 800f2a0:	f104 0619 	add.w	r6, r4, #25
 800f2a4:	e7f5      	b.n	800f292 <_printf_i+0x22e>
 800f2a6:	bf00      	nop
 800f2a8:	08010bed 	.word	0x08010bed
 800f2ac:	08010bfe 	.word	0x08010bfe

0800f2b0 <_sbrk_r>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	4d06      	ldr	r5, [pc, #24]	; (800f2cc <_sbrk_r+0x1c>)
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	4608      	mov	r0, r1
 800f2ba:	602b      	str	r3, [r5, #0]
 800f2bc:	f7f1 fde6 	bl	8000e8c <_sbrk>
 800f2c0:	1c43      	adds	r3, r0, #1
 800f2c2:	d102      	bne.n	800f2ca <_sbrk_r+0x1a>
 800f2c4:	682b      	ldr	r3, [r5, #0]
 800f2c6:	b103      	cbz	r3, 800f2ca <_sbrk_r+0x1a>
 800f2c8:	6023      	str	r3, [r4, #0]
 800f2ca:	bd38      	pop	{r3, r4, r5, pc}
 800f2cc:	200051e8 	.word	0x200051e8

0800f2d0 <__sread>:
 800f2d0:	b510      	push	{r4, lr}
 800f2d2:	460c      	mov	r4, r1
 800f2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2d8:	f000 f8e0 	bl	800f49c <_read_r>
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	bfab      	itete	ge
 800f2e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2e2:	89a3      	ldrhlt	r3, [r4, #12]
 800f2e4:	181b      	addge	r3, r3, r0
 800f2e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2ea:	bfac      	ite	ge
 800f2ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2ee:	81a3      	strhlt	r3, [r4, #12]
 800f2f0:	bd10      	pop	{r4, pc}

0800f2f2 <__swrite>:
 800f2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f6:	461f      	mov	r7, r3
 800f2f8:	898b      	ldrh	r3, [r1, #12]
 800f2fa:	05db      	lsls	r3, r3, #23
 800f2fc:	4605      	mov	r5, r0
 800f2fe:	460c      	mov	r4, r1
 800f300:	4616      	mov	r6, r2
 800f302:	d505      	bpl.n	800f310 <__swrite+0x1e>
 800f304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f308:	2302      	movs	r3, #2
 800f30a:	2200      	movs	r2, #0
 800f30c:	f000 f868 	bl	800f3e0 <_lseek_r>
 800f310:	89a3      	ldrh	r3, [r4, #12]
 800f312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f31a:	81a3      	strh	r3, [r4, #12]
 800f31c:	4632      	mov	r2, r6
 800f31e:	463b      	mov	r3, r7
 800f320:	4628      	mov	r0, r5
 800f322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f326:	f000 b817 	b.w	800f358 <_write_r>

0800f32a <__sseek>:
 800f32a:	b510      	push	{r4, lr}
 800f32c:	460c      	mov	r4, r1
 800f32e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f332:	f000 f855 	bl	800f3e0 <_lseek_r>
 800f336:	1c43      	adds	r3, r0, #1
 800f338:	89a3      	ldrh	r3, [r4, #12]
 800f33a:	bf15      	itete	ne
 800f33c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f33e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f346:	81a3      	strheq	r3, [r4, #12]
 800f348:	bf18      	it	ne
 800f34a:	81a3      	strhne	r3, [r4, #12]
 800f34c:	bd10      	pop	{r4, pc}

0800f34e <__sclose>:
 800f34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f352:	f000 b813 	b.w	800f37c <_close_r>
	...

0800f358 <_write_r>:
 800f358:	b538      	push	{r3, r4, r5, lr}
 800f35a:	4d07      	ldr	r5, [pc, #28]	; (800f378 <_write_r+0x20>)
 800f35c:	4604      	mov	r4, r0
 800f35e:	4608      	mov	r0, r1
 800f360:	4611      	mov	r1, r2
 800f362:	2200      	movs	r2, #0
 800f364:	602a      	str	r2, [r5, #0]
 800f366:	461a      	mov	r2, r3
 800f368:	f7f1 fd3f 	bl	8000dea <_write>
 800f36c:	1c43      	adds	r3, r0, #1
 800f36e:	d102      	bne.n	800f376 <_write_r+0x1e>
 800f370:	682b      	ldr	r3, [r5, #0]
 800f372:	b103      	cbz	r3, 800f376 <_write_r+0x1e>
 800f374:	6023      	str	r3, [r4, #0]
 800f376:	bd38      	pop	{r3, r4, r5, pc}
 800f378:	200051e8 	.word	0x200051e8

0800f37c <_close_r>:
 800f37c:	b538      	push	{r3, r4, r5, lr}
 800f37e:	4d06      	ldr	r5, [pc, #24]	; (800f398 <_close_r+0x1c>)
 800f380:	2300      	movs	r3, #0
 800f382:	4604      	mov	r4, r0
 800f384:	4608      	mov	r0, r1
 800f386:	602b      	str	r3, [r5, #0]
 800f388:	f7f1 fd4b 	bl	8000e22 <_close>
 800f38c:	1c43      	adds	r3, r0, #1
 800f38e:	d102      	bne.n	800f396 <_close_r+0x1a>
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	b103      	cbz	r3, 800f396 <_close_r+0x1a>
 800f394:	6023      	str	r3, [r4, #0]
 800f396:	bd38      	pop	{r3, r4, r5, pc}
 800f398:	200051e8 	.word	0x200051e8

0800f39c <_fstat_r>:
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	4d07      	ldr	r5, [pc, #28]	; (800f3bc <_fstat_r+0x20>)
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	4608      	mov	r0, r1
 800f3a6:	4611      	mov	r1, r2
 800f3a8:	602b      	str	r3, [r5, #0]
 800f3aa:	f7f1 fd46 	bl	8000e3a <_fstat>
 800f3ae:	1c43      	adds	r3, r0, #1
 800f3b0:	d102      	bne.n	800f3b8 <_fstat_r+0x1c>
 800f3b2:	682b      	ldr	r3, [r5, #0]
 800f3b4:	b103      	cbz	r3, 800f3b8 <_fstat_r+0x1c>
 800f3b6:	6023      	str	r3, [r4, #0]
 800f3b8:	bd38      	pop	{r3, r4, r5, pc}
 800f3ba:	bf00      	nop
 800f3bc:	200051e8 	.word	0x200051e8

0800f3c0 <_isatty_r>:
 800f3c0:	b538      	push	{r3, r4, r5, lr}
 800f3c2:	4d06      	ldr	r5, [pc, #24]	; (800f3dc <_isatty_r+0x1c>)
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	4608      	mov	r0, r1
 800f3ca:	602b      	str	r3, [r5, #0]
 800f3cc:	f7f1 fd45 	bl	8000e5a <_isatty>
 800f3d0:	1c43      	adds	r3, r0, #1
 800f3d2:	d102      	bne.n	800f3da <_isatty_r+0x1a>
 800f3d4:	682b      	ldr	r3, [r5, #0]
 800f3d6:	b103      	cbz	r3, 800f3da <_isatty_r+0x1a>
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	bd38      	pop	{r3, r4, r5, pc}
 800f3dc:	200051e8 	.word	0x200051e8

0800f3e0 <_lseek_r>:
 800f3e0:	b538      	push	{r3, r4, r5, lr}
 800f3e2:	4d07      	ldr	r5, [pc, #28]	; (800f400 <_lseek_r+0x20>)
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	602a      	str	r2, [r5, #0]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	f7f1 fd3e 	bl	8000e70 <_lseek>
 800f3f4:	1c43      	adds	r3, r0, #1
 800f3f6:	d102      	bne.n	800f3fe <_lseek_r+0x1e>
 800f3f8:	682b      	ldr	r3, [r5, #0]
 800f3fa:	b103      	cbz	r3, 800f3fe <_lseek_r+0x1e>
 800f3fc:	6023      	str	r3, [r4, #0]
 800f3fe:	bd38      	pop	{r3, r4, r5, pc}
 800f400:	200051e8 	.word	0x200051e8

0800f404 <memmove>:
 800f404:	4288      	cmp	r0, r1
 800f406:	b510      	push	{r4, lr}
 800f408:	eb01 0402 	add.w	r4, r1, r2
 800f40c:	d902      	bls.n	800f414 <memmove+0x10>
 800f40e:	4284      	cmp	r4, r0
 800f410:	4623      	mov	r3, r4
 800f412:	d807      	bhi.n	800f424 <memmove+0x20>
 800f414:	1e43      	subs	r3, r0, #1
 800f416:	42a1      	cmp	r1, r4
 800f418:	d008      	beq.n	800f42c <memmove+0x28>
 800f41a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f41e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f422:	e7f8      	b.n	800f416 <memmove+0x12>
 800f424:	4402      	add	r2, r0
 800f426:	4601      	mov	r1, r0
 800f428:	428a      	cmp	r2, r1
 800f42a:	d100      	bne.n	800f42e <memmove+0x2a>
 800f42c:	bd10      	pop	{r4, pc}
 800f42e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f436:	e7f7      	b.n	800f428 <memmove+0x24>

0800f438 <__malloc_lock>:
 800f438:	4801      	ldr	r0, [pc, #4]	; (800f440 <__malloc_lock+0x8>)
 800f43a:	f7ff b9df 	b.w	800e7fc <__retarget_lock_acquire_recursive>
 800f43e:	bf00      	nop
 800f440:	200051e0 	.word	0x200051e0

0800f444 <__malloc_unlock>:
 800f444:	4801      	ldr	r0, [pc, #4]	; (800f44c <__malloc_unlock+0x8>)
 800f446:	f7ff b9da 	b.w	800e7fe <__retarget_lock_release_recursive>
 800f44a:	bf00      	nop
 800f44c:	200051e0 	.word	0x200051e0

0800f450 <_realloc_r>:
 800f450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f452:	4607      	mov	r7, r0
 800f454:	4614      	mov	r4, r2
 800f456:	460e      	mov	r6, r1
 800f458:	b921      	cbnz	r1, 800f464 <_realloc_r+0x14>
 800f45a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f45e:	4611      	mov	r1, r2
 800f460:	f7ff ba82 	b.w	800e968 <_malloc_r>
 800f464:	b922      	cbnz	r2, 800f470 <_realloc_r+0x20>
 800f466:	f7ff fa2f 	bl	800e8c8 <_free_r>
 800f46a:	4625      	mov	r5, r4
 800f46c:	4628      	mov	r0, r5
 800f46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f470:	f000 f826 	bl	800f4c0 <_malloc_usable_size_r>
 800f474:	42a0      	cmp	r0, r4
 800f476:	d20f      	bcs.n	800f498 <_realloc_r+0x48>
 800f478:	4621      	mov	r1, r4
 800f47a:	4638      	mov	r0, r7
 800f47c:	f7ff fa74 	bl	800e968 <_malloc_r>
 800f480:	4605      	mov	r5, r0
 800f482:	2800      	cmp	r0, #0
 800f484:	d0f2      	beq.n	800f46c <_realloc_r+0x1c>
 800f486:	4631      	mov	r1, r6
 800f488:	4622      	mov	r2, r4
 800f48a:	f7fe fc6f 	bl	800dd6c <memcpy>
 800f48e:	4631      	mov	r1, r6
 800f490:	4638      	mov	r0, r7
 800f492:	f7ff fa19 	bl	800e8c8 <_free_r>
 800f496:	e7e9      	b.n	800f46c <_realloc_r+0x1c>
 800f498:	4635      	mov	r5, r6
 800f49a:	e7e7      	b.n	800f46c <_realloc_r+0x1c>

0800f49c <_read_r>:
 800f49c:	b538      	push	{r3, r4, r5, lr}
 800f49e:	4d07      	ldr	r5, [pc, #28]	; (800f4bc <_read_r+0x20>)
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	4608      	mov	r0, r1
 800f4a4:	4611      	mov	r1, r2
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	602a      	str	r2, [r5, #0]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f7f1 fc80 	bl	8000db0 <_read>
 800f4b0:	1c43      	adds	r3, r0, #1
 800f4b2:	d102      	bne.n	800f4ba <_read_r+0x1e>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	b103      	cbz	r3, 800f4ba <_read_r+0x1e>
 800f4b8:	6023      	str	r3, [r4, #0]
 800f4ba:	bd38      	pop	{r3, r4, r5, pc}
 800f4bc:	200051e8 	.word	0x200051e8

0800f4c0 <_malloc_usable_size_r>:
 800f4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4c4:	1f18      	subs	r0, r3, #4
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	bfbc      	itt	lt
 800f4ca:	580b      	ldrlt	r3, [r1, r0]
 800f4cc:	18c0      	addlt	r0, r0, r3
 800f4ce:	4770      	bx	lr

0800f4d0 <_init>:
 800f4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d2:	bf00      	nop
 800f4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4d6:	bc08      	pop	{r3}
 800f4d8:	469e      	mov	lr, r3
 800f4da:	4770      	bx	lr

0800f4dc <_fini>:
 800f4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4de:	bf00      	nop
 800f4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4e2:	bc08      	pop	{r3}
 800f4e4:	469e      	mov	lr, r3
 800f4e6:	4770      	bx	lr
